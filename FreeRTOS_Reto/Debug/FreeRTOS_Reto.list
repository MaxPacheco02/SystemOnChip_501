
FreeRTOS_Reto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008084  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08008194  08008194  00018194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008430  08008430  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  08008430  08008430  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008430  08008430  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008430  08008430  00018430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008434  08008434  00018434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08008438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022c8  20000110  08008548  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023d8  08008548  000223d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c64  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003100  00000000  00000000  00033d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00036ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  00038030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5ff  00000000  00000000  00039058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012822  00000000  00000000  00053657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092cf3  00000000  00000000  00065e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8b6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005154  00000000  00000000  000f8bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000110 	.word	0x20000110
 800012c:	00000000 	.word	0x00000000
 8000130:	0800817c 	.word	0x0800817c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000114 	.word	0x20000114
 800014c:	0800817c 	.word	0x0800817c

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_fmul>:
 80009d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009e0:	bf1e      	ittt	ne
 80009e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e6:	ea92 0f0c 	teqne	r2, ip
 80009ea:	ea93 0f0c 	teqne	r3, ip
 80009ee:	d06f      	beq.n	8000ad0 <__aeabi_fmul+0xf8>
 80009f0:	441a      	add	r2, r3
 80009f2:	ea80 0c01 	eor.w	ip, r0, r1
 80009f6:	0240      	lsls	r0, r0, #9
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fe:	d01e      	beq.n	8000a3e <__aeabi_fmul+0x66>
 8000a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a18:	bf3e      	ittt	cc
 8000a1a:	0049      	lslcc	r1, r1, #1
 8000a1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	ea40 0001 	orr.w	r0, r0, r1
 8000a26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a2a:	2afd      	cmp	r2, #253	; 0xfd
 8000a2c:	d81d      	bhi.n	8000a6a <__aeabi_fmul+0x92>
 8000a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a36:	bf08      	it	eq
 8000a38:	f020 0001 	biceq.w	r0, r0, #1
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	0249      	lsleq	r1, r1, #9
 8000a4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a52:	3a7f      	subs	r2, #127	; 0x7f
 8000a54:	bfc2      	ittt	gt
 8000a56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5e:	4770      	bxgt	lr
 8000a60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	dc5d      	bgt.n	8000b28 <__aeabi_fmul+0x150>
 8000a6c:	f112 0f19 	cmn.w	r2, #25
 8000a70:	bfdc      	itt	le
 8000a72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a76:	4770      	bxle	lr
 8000a78:	f1c2 0200 	rsb	r2, r2, #0
 8000a7c:	0041      	lsls	r1, r0, #1
 8000a7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a82:	f1c2 0220 	rsb	r2, r2, #32
 8000a86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8e:	f140 0000 	adc.w	r0, r0, #0
 8000a92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a96:	bf08      	it	eq
 8000a98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a9c:	4770      	bx	lr
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fmul+0xce>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fmul+0xe6>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fmul+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	bf18      	it	ne
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d00a      	beq.n	8000af6 <__aeabi_fmul+0x11e>
 8000ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ae4:	bf18      	it	ne
 8000ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aea:	d1d8      	bne.n	8000a9e <__aeabi_fmul+0xc6>
 8000aec:	ea80 0001 	eor.w	r0, r0, r1
 8000af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f090 0f00 	teq	r0, #0
 8000afa:	bf17      	itett	ne
 8000afc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b00:	4608      	moveq	r0, r1
 8000b02:	f091 0f00 	teqne	r1, #0
 8000b06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b0a:	d014      	beq.n	8000b36 <__aeabi_fmul+0x15e>
 8000b0c:	ea92 0f0c 	teq	r2, ip
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fmul+0x13e>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d10f      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b16:	ea93 0f0c 	teq	r3, ip
 8000b1a:	d103      	bne.n	8000b24 <__aeabi_fmul+0x14c>
 8000b1c:	024b      	lsls	r3, r1, #9
 8000b1e:	bf18      	it	ne
 8000b20:	4608      	movne	r0, r1
 8000b22:	d108      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b24:	ea80 0001 	eor.w	r0, r0, r1
 8000b28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fdiv>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d069      	beq.n	8000c2c <__aeabi_fdiv+0xec>
 8000b58:	eba2 0203 	sub.w	r2, r2, r3
 8000b5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b66:	d037      	beq.n	8000bd8 <__aeabi_fdiv+0x98>
 8000b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf38      	it	cc
 8000b7c:	005b      	lslcc	r3, r3, #1
 8000b7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b86:	428b      	cmp	r3, r1
 8000b88:	bf24      	itt	cs
 8000b8a:	1a5b      	subcs	r3, r3, r1
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b94:	bf24      	itt	cs
 8000b96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ba2:	bf24      	itt	cs
 8000ba4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bb0:	bf24      	itt	cs
 8000bb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bc2:	d1e0      	bne.n	8000b86 <__aeabi_fdiv+0x46>
 8000bc4:	2afd      	cmp	r2, #253	; 0xfd
 8000bc6:	f63f af50 	bhi.w	8000a6a <__aeabi_fmul+0x92>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be0:	327f      	adds	r2, #127	; 0x7f
 8000be2:	bfc2      	ittt	gt
 8000be4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bec:	4770      	bxgt	lr
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	e737      	b.n	8000a6a <__aeabi_fmul+0x92>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c02:	bf02      	ittt	eq
 8000c04:	0040      	lsleq	r0, r0, #1
 8000c06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c0a:	3a01      	subeq	r2, #1
 8000c0c:	d0f9      	beq.n	8000c02 <__aeabi_fdiv+0xc2>
 8000c0e:	ea40 000c 	orr.w	r0, r0, ip
 8000c12:	f093 0f00 	teq	r3, #0
 8000c16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0049      	lsleq	r1, r1, #1
 8000c1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c22:	3b01      	subeq	r3, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fdiv+0xda>
 8000c26:	ea41 010c 	orr.w	r1, r1, ip
 8000c2a:	e795      	b.n	8000b58 <__aeabi_fdiv+0x18>
 8000c2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d108      	bne.n	8000c48 <__aeabi_fdiv+0x108>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	f47f af7d 	bne.w	8000b36 <__aeabi_fmul+0x15e>
 8000c3c:	ea93 0f0c 	teq	r3, ip
 8000c40:	f47f af70 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e776      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	d104      	bne.n	8000c58 <__aeabi_fdiv+0x118>
 8000c4e:	024b      	lsls	r3, r1, #9
 8000c50:	f43f af4c 	beq.w	8000aec <__aeabi_fmul+0x114>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e76e      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c5c:	bf18      	it	ne
 8000c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c62:	d1ca      	bne.n	8000bfa <__aeabi_fdiv+0xba>
 8000c64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c68:	f47f af5c 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	f47f af3c 	bne.w	8000aec <__aeabi_fmul+0x114>
 8000c74:	e75f      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c76:	bf00      	nop

08000c78 <__aeabi_f2uiz>:
 8000c78:	0042      	lsls	r2, r0, #1
 8000c7a:	d20e      	bcs.n	8000c9a <__aeabi_f2uiz+0x22>
 8000c7c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c80:	d30b      	bcc.n	8000c9a <__aeabi_f2uiz+0x22>
 8000c82:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c86:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c8a:	d409      	bmi.n	8000ca0 <__aeabi_f2uiz+0x28>
 8000c8c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c94:	fa23 f002 	lsr.w	r0, r3, r2
 8000c98:	4770      	bx	lr
 8000c9a:	f04f 0000 	mov.w	r0, #0
 8000c9e:	4770      	bx	lr
 8000ca0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ca4:	d101      	bne.n	8000caa <__aeabi_f2uiz+0x32>
 8000ca6:	0242      	lsls	r2, r0, #9
 8000ca8:	d102      	bne.n	8000cb0 <__aeabi_f2uiz+0x38>
 8000caa:	f04f 30ff 	mov.w	r0, #4294967295
 8000cae:	4770      	bx	lr
 8000cb0:	f04f 0000 	mov.w	r0, #0
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <vApplicationGetIdleTaskMemory+0x28>)
 8000cc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000cce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	2000012c 	.word	0x2000012c
 8000ce4:	200001e0 	.word	0x200001e0

08000ce8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <vApplicationGetTimerTaskMemory+0x2c>)
 8000cf8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <vApplicationGetTimerTaskMemory+0x30>)
 8000cfe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d06:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	200003e0 	.word	0x200003e0
 8000d18:	20000494 	.word	0x20000494

08000d1c <LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* ****************************************************** */
  /* Configurar los pines del Puerto B para las lineas:
   * RW, RS, EN, D4-D7 del LCD
   * como general purpose output push-pull and 50 MHz speed */
	// 0,1,2,5,6,8,9
	GPIOC->CRL &= ~GPIO_CRL_CNF0;
 8000d22:	4b53      	ldr	r3, [pc, #332]	; (8000e70 <LCD_Init+0x154>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a52      	ldr	r2, [pc, #328]	; (8000e70 <LCD_Init+0x154>)
 8000d28:	f023 030c 	bic.w	r3, r3, #12
 8000d2c:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE0;
 8000d2e:	4b50      	ldr	r3, [pc, #320]	; (8000e70 <LCD_Init+0x154>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a4f      	ldr	r2, [pc, #316]	; (8000e70 <LCD_Init+0x154>)
 8000d34:	f043 0303 	orr.w	r3, r3, #3
 8000d38:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~GPIO_CRL_CNF1;
 8000d3a:	4b4d      	ldr	r3, [pc, #308]	; (8000e70 <LCD_Init+0x154>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a4c      	ldr	r2, [pc, #304]	; (8000e70 <LCD_Init+0x154>)
 8000d40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000d44:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE1;
 8000d46:	4b4a      	ldr	r3, [pc, #296]	; (8000e70 <LCD_Init+0x154>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a49      	ldr	r2, [pc, #292]	; (8000e70 <LCD_Init+0x154>)
 8000d4c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000d50:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~GPIO_CRL_CNF2;
 8000d52:	4b47      	ldr	r3, [pc, #284]	; (8000e70 <LCD_Init+0x154>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a46      	ldr	r2, [pc, #280]	; (8000e70 <LCD_Init+0x154>)
 8000d58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000d5c:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE2;
 8000d5e:	4b44      	ldr	r3, [pc, #272]	; (8000e70 <LCD_Init+0x154>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a43      	ldr	r2, [pc, #268]	; (8000e70 <LCD_Init+0x154>)
 8000d64:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000d68:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~GPIO_CRL_CNF5;
 8000d6a:	4b41      	ldr	r3, [pc, #260]	; (8000e70 <LCD_Init+0x154>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a40      	ldr	r2, [pc, #256]	; (8000e70 <LCD_Init+0x154>)
 8000d70:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000d74:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE5;
 8000d76:	4b3e      	ldr	r3, [pc, #248]	; (8000e70 <LCD_Init+0x154>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a3d      	ldr	r2, [pc, #244]	; (8000e70 <LCD_Init+0x154>)
 8000d7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000d80:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~GPIO_CRL_CNF6;
 8000d82:	4b3b      	ldr	r3, [pc, #236]	; (8000e70 <LCD_Init+0x154>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a3a      	ldr	r2, [pc, #232]	; (8000e70 <LCD_Init+0x154>)
 8000d88:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000d8c:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE6;
 8000d8e:	4b38      	ldr	r3, [pc, #224]	; (8000e70 <LCD_Init+0x154>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a37      	ldr	r2, [pc, #220]	; (8000e70 <LCD_Init+0x154>)
 8000d94:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000d98:	6013      	str	r3, [r2, #0]
	GPIOC->CRH &= ~GPIO_CRH_CNF8;
 8000d9a:	4b35      	ldr	r3, [pc, #212]	; (8000e70 <LCD_Init+0x154>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	4a34      	ldr	r2, [pc, #208]	; (8000e70 <LCD_Init+0x154>)
 8000da0:	f023 030c 	bic.w	r3, r3, #12
 8000da4:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE8;
 8000da6:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <LCD_Init+0x154>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	4a31      	ldr	r2, [pc, #196]	; (8000e70 <LCD_Init+0x154>)
 8000dac:	f043 0303 	orr.w	r3, r3, #3
 8000db0:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF9;
 8000db2:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <LCD_Init+0x154>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	4a2e      	ldr	r2, [pc, #184]	; (8000e70 <LCD_Init+0x154>)
 8000db8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000dbc:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE9;
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <LCD_Init+0x154>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	4a2b      	ldr	r2, [pc, #172]	; (8000e70 <LCD_Init+0x154>)
 8000dc4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000dc8:	6053      	str	r3, [r2, #4]


  /* ****************************************************** */

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000dca:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <LCD_Init+0x154>)
 8000dcc:	4a29      	ldr	r2, [pc, #164]	; (8000e74 <LCD_Init+0x158>)
 8000dce:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	HAL_Delay(15);
 8000dd0:	200f      	movs	r0, #15
 8000dd2:	f001 fcbd 	bl	8002750 <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000dd6:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <LCD_Init+0x154>)
 8000dd8:	4a26      	ldr	r2, [pc, #152]	; (8000e74 <LCD_Init+0x158>)
 8000dda:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000ddc:	f000 f968 	bl	80010b0 <LCD_Pulse_EN>
	HAL_Delay(5);//					deberia ser un delay de 4.1ms
 8000de0:	2005      	movs	r0, #5
 8000de2:	f001 fcb5 	bl	8002750 <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000de6:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <LCD_Init+0x154>)
 8000de8:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <LCD_Init+0x158>)
 8000dea:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000dec:	f000 f960 	bl	80010b0 <LCD_Pulse_EN>
	HAL_Delay(1);//					deberia ser un delay de 100us
 8000df0:	2001      	movs	r0, #1
 8000df2:	f001 fcad 	bl	8002750 <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <LCD_Init+0x154>)
 8000df8:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <LCD_Init+0x158>)
 8000dfa:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000dfc:	f000 f958 	bl	80010b0 <LCD_Pulse_EN>

	while( LCD_Busy( ) );//				espera a que el LCD este operativo
 8000e00:	bf00      	nop
 8000e02:	f000 f911 	bl	8001028 <LCD_Busy>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1fa      	bne.n	8000e02 <LCD_Init+0xe6>
	GPIOC->BSRR	 =	1U << LCD_D4_PIN_LOW
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <LCD_Init+0x154>)
 8000e0e:	4a1a      	ldr	r2, [pc, #104]	; (8000e78 <LCD_Init+0x15c>)
 8000e10:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000e12:	f000 f94d 	bl	80010b0 <LCD_Pulse_EN>

	while( LCD_Busy( ) );//				espera a que se complete
 8000e16:	bf00      	nop
 8000e18:	f000 f906 	bl	8001028 <LCD_Busy>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1fa      	bne.n	8000e18 <LCD_Init+0xfc>
	LCD_Write_Cmd( 0x28U );//			establecemos LCD como: datos 4-bit, #lineas=2, font=5x7 dots
 8000e22:	2028      	movs	r0, #40	; 0x28
 8000e24:	f000 f890 	bl	8000f48 <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x0CU );//			enciende el LCD sin cursor
 8000e28:	200c      	movs	r0, #12
 8000e2a:	f000 f88d 	bl	8000f48 <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x06U );//			inicializa cursor
 8000e2e:	2006      	movs	r0, #6
 8000e30:	f000 f88a 	bl	8000f48 <LCD_Write_Cmd>

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );//			establece la direccion CGRAM desde 0
 8000e34:	2040      	movs	r0, #64	; 0x40
 8000e36:	f000 f887 	bl	8000f48 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <LCD_Init+0x160>)
 8000e3c:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	e00a      	b.n	8000e5a <LCD_Init+0x13e>
		LCD_Put_Char( *p );
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 f891 	bl	8000f70 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3301      	adds	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	2b3f      	cmp	r3, #63	; 0x3f
 8000e5e:	d9f1      	bls.n	8000e44 <LCD_Init+0x128>

	LCD_Write_Cmd( 0x80 );
 8000e60:	2080      	movs	r0, #128	; 0x80
 8000e62:	f000 f871 	bl	8000f48 <LCD_Write_Cmd>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40011000 	.word	0x40011000
 8000e74:	03000060 	.word	0x03000060
 8000e78:	03200040 	.word	0x03200040
 8000e7c:	0800832c 	.word	0x0800832c

08000e80 <LCD_Out_Data4>:

//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(unsigned char val){
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )//			Bit[0]
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <LCD_Out_Data4+0x1c>
		GPIOC->BSRR	=	1U << LCD_D4_PIN_HIGH;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <LCD_Out_Data4+0x80>)
 8000e96:	2220      	movs	r2, #32
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	e003      	b.n	8000ea4 <LCD_Out_Data4+0x24>
	else
		GPIOC->BSRR	=	1U << LCD_D4_PIN_LOW;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <LCD_Out_Data4+0x80>)
 8000e9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ea2:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )//			Bit[1]
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <LCD_Out_Data4+0x36>
		GPIOC->BSRR	=	1U << LCD_D5_PIN_HIGH;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <LCD_Out_Data4+0x80>)
 8000eb0:	2240      	movs	r2, #64	; 0x40
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	e003      	b.n	8000ebe <LCD_Out_Data4+0x3e>
	else
		GPIOC->BSRR	=	1U << LCD_D5_PIN_LOW;
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <LCD_Out_Data4+0x80>)
 8000eb8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ebc:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )//			Bit[2]
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d004      	beq.n	8000ed2 <LCD_Out_Data4+0x52>
		GPIOC->BSRR	=	1U << LCD_D6_PIN_HIGH;
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <LCD_Out_Data4+0x80>)
 8000eca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ece:	611a      	str	r2, [r3, #16]
 8000ed0:	e003      	b.n	8000eda <LCD_Out_Data4+0x5a>
	else
		GPIOC->BSRR	=	1U << LCD_D6_PIN_LOW;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <LCD_Out_Data4+0x80>)
 8000ed4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ed8:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )//			Bit[3]
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d004      	beq.n	8000eee <LCD_Out_Data4+0x6e>
		GPIOC->BSRR	=	1U << LCD_D7_PIN_HIGH;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <LCD_Out_Data4+0x80>)
 8000ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eea:	611a      	str	r2, [r3, #16]
	else
		GPIOC->BSRR	=	1U << LCD_D7_PIN_LOW;
}
 8000eec:	e003      	b.n	8000ef6 <LCD_Out_Data4+0x76>
		GPIOC->BSRR	=	1U << LCD_D7_PIN_LOW;
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <LCD_Out_Data4+0x80>)
 8000ef0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ef4:	611a      	str	r2, [r3, #16]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	40011000 	.word	0x40011000

08000f04 <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(unsigned char val){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	091b      	lsrs	r3, r3, #4
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ffb3 	bl	8000e80 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8000f1a:	f000 f8c9 	bl	80010b0 <LCD_Pulse_EN>

	LCD_Out_Data4( val & 0x0FU );
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 030f 	and.w	r3, r3, #15
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ffaa 	bl	8000e80 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8000f2c:	f000 f8c0 	bl	80010b0 <LCD_Pulse_EN>

	while( LCD_Busy( ) );
 8000f30:	bf00      	nop
 8000f32:	f000 f879 	bl	8001028 <LCD_Busy>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1fa      	bne.n	8000f32 <LCD_Write_Byte+0x2e>
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(unsigned char val){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	1U << LCD_RS_PIN_LOW;//		RS=0 (seleccion de comando)
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <LCD_Write_Cmd+0x24>)
 8000f54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f58:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ffd1 	bl	8000f04 <LCD_Write_Byte>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40011000 	.word	0x40011000

08000f70 <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(unsigned char c){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	1U << LCD_RS_PIN_HIGH;//	RS=1 (seleccion de caracteres)
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <LCD_Put_Char+0x20>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( c );
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ffbe 	bl	8000f04 <LCD_Write_Byte>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40011000 	.word	0x40011000

08000f94 <LCD_Set_Cursor>:

//Funcion que establece el cursor en una posicion de la pantalla del LCD
void LCD_Set_Cursor(unsigned char line, unsigned char column){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
	unsigned char address;
	if( column != 0 )
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <LCD_Set_Cursor+0x1c>
		column--;
 8000faa:	79bb      	ldrb	r3, [r7, #6]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	71bb      	strb	r3, [r7, #6]
	if( line != 0 )
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <LCD_Set_Cursor+0x28>
		line--;
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	71fb      	strb	r3, [r7, #7]
	address = ( line * 40 ) + column;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	0092      	lsls	r2, r2, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	4413      	add	r3, r2
 8000fcc:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	3b80      	subs	r3, #128	; 0x80
 8000fd8:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ffb3 	bl	8000f48 <LCD_Write_Cmd>
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <LCD_Put_Str>:

//Funcion que envia una cadena de caracteres ASCII al LCD
void LCD_Put_Str(char* str){
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b084      	sub	sp, #16
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
	for( int i = 0; i < 16 && str[ i ] != 0; i++ )
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e009      	b.n	800100c <LCD_Put_Str+0x22>
		LCD_Put_Char( str[ i ] );//			envia 1 byte al LCD
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ffb5 	bl	8000f70 <LCD_Put_Char>
	for( int i = 0; i < 16 && str[ i ] != 0; i++ )
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2b0f      	cmp	r3, #15
 8001010:	dc05      	bgt.n	800101e <LCD_Put_Str+0x34>
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1ec      	bne.n	8000ff8 <LCD_Put_Str+0xe>
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <LCD_Busy>:
			LCD_Put_Char( ch[ i ] );
	}
}

//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* ***************************************************** */
  /* Configurar la linea D7 del LCD como:
   * floating input                                        */
	GPIOC->CRH &= ~GPIO_CRH_CNF9_1 & ~GPIO_CRH_MODE9;
 800102c:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <LCD_Busy+0x80>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <LCD_Busy+0x80>)
 8001032:	f023 03b0 	bic.w	r3, r3, #176	; 0xb0
 8001036:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_CNF9_0;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <LCD_Busy+0x80>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	4a1a      	ldr	r2, [pc, #104]	; (80010a8 <LCD_Busy+0x80>)
 800103e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001042:	6053      	str	r3, [r2, #4]

  /* ***************************************************** */

	GPIOC->BSRR	 =	1U << LCD_RS_PIN_LOW
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <LCD_Busy+0x80>)
 8001046:	4a19      	ldr	r2, [pc, #100]	; (80010ac <LCD_Busy+0x84>)
 8001048:	611a      	str	r2, [r3, #16]
			|	1U << LCD_RW_PIN_HIGH
			|	1U << LCD_EN_PIN_HIGH;
	HAL_Delay(1);//					          deberia de ser un delay of 100us
 800104a:	2001      	movs	r0, #1
 800104c:	f001 fb80 	bl	8002750 <HAL_Delay>

  /* ***************************************************** */
  if(GPIOC->IDR & 1U << LCD_D7_PIN_HIGH){//					                  if D7 is set, then
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <LCD_Busy+0x80>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001058:	2b00      	cmp	r3, #0
 800105a:	d011      	beq.n	8001080 <LCD_Busy+0x58>
  /* ***************************************************** */
		GPIOC->BSRR	 =	1U << LCD_RW_PIN_LOW
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <LCD_Busy+0x80>)
 800105e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001062:	611a      	str	r2, [r3, #16]
				|	1U << LCD_EN_PIN_LOW;

    /* ***************************************************** */
    /* Configurar la linea D7 del LCD como:
     * general purpose output and 50 MHz speed               */
		GPIOC->CRH &= ~GPIO_CRH_CNF9;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <LCD_Busy+0x80>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <LCD_Busy+0x80>)
 800106a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800106e:	6053      	str	r3, [r2, #4]
		GPIOC->CRH |= GPIO_CRH_MODE9;
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <LCD_Busy+0x80>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	4a0c      	ldr	r2, [pc, #48]	; (80010a8 <LCD_Busy+0x80>)
 8001076:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800107a:	6053      	str	r3, [r2, #4]

    /* ***************************************************** */
		return 1;
 800107c:	2301      	movs	r3, #1
 800107e:	e010      	b.n	80010a2 <LCD_Busy+0x7a>
	} else {
		GPIOC->BSRR	 =	1U << LCD_RW_PIN_LOW
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <LCD_Busy+0x80>)
 8001082:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001086:	611a      	str	r2, [r3, #16]
				|	1U << LCD_EN_PIN_LOW;

    /* ***************************************************** */
    /* Configurar la linea D7 del LCD como:
     * general purpose output and 50 MHz speed               */
		GPIOC->CRH &= ~GPIO_CRH_CNF9;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <LCD_Busy+0x80>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <LCD_Busy+0x80>)
 800108e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001092:	6053      	str	r3, [r2, #4]
		GPIOC->CRH |= GPIO_CRH_MODE9;
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <LCD_Busy+0x80>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	4a03      	ldr	r2, [pc, #12]	; (80010a8 <LCD_Busy+0x80>)
 800109a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800109e:	6053      	str	r3, [r2, #4]

    /* ***************************************************** */
		return 0;
 80010a0:	2300      	movs	r3, #0
	}
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40011000 	.word	0x40011000
 80010ac:	00010006 	.word	0x00010006

080010b0 <LCD_Pulse_EN>:

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	GPIOC->BSRR	=	1U << LCD_EN_PIN_HIGH;//		habilita pin EN ON
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <LCD_Pulse_EN+0x1c>)
 80010b6:	2202      	movs	r2, #2
 80010b8:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);//							deberia de ser un delay de 50us
 80010ba:	2001      	movs	r0, #1
 80010bc:	f001 fb48 	bl	8002750 <HAL_Delay>
	GPIOC->BSRR	=	1U << LCD_EN_PIN_LOW;//			habilita pin EN OFF
 80010c0:	4b02      	ldr	r3, [pc, #8]	; (80010cc <LCD_Pulse_EN+0x1c>)
 80010c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010c6:	611a      	str	r2, [r3, #16]
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40011000 	.word	0x40011000

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4906      	ldr	r1, [pc, #24]	; (8001104 <__NVIC_EnableIRQ+0x34>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800115c:	b5b0      	push	{r4, r5, r7, lr}
 800115e:	b0c8      	sub	sp, #288	; 0x120
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001162:	f001 fac3 	bl	80026ec <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001166:	f000 f95f 	bl	8001428 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116a:	f000 f99f 	bl	80014ac <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init();
 800116e:	f000 fe95 	bl	8001e9c <USER_RCC_Init>
  USER_GPIO_Init();
 8001172:	f000 fecb 	bl	8001f0c <USER_GPIO_Init>
  //USER_TIM2_Capture_Init();
  USER_TIM3_Capture_Init();
 8001176:	f001 f859 	bl	800222c <USER_TIM3_Capture_Init>
  USER_USART2_Init();
 800117a:	f001 f8ab 	bl	80022d4 <USER_USART2_Init>
  USER_ADC_Init();
 800117e:	f000 fff3 	bl	8002168 <USER_ADC_Init>
  USER_ADC_Calibration();
 8001182:	f001 f82b 	bl	80021dc <USER_ADC_Calibration>

  LCD_Init( );//				inicializamos la libreria del LCD
 8001186:	f7ff fdc9 	bl	8000d1c <LCD_Init>
  LCD_Clear( );//			borra la pantalla
 800118a:	2001      	movs	r0, #1
 800118c:	f7ff fedc 	bl	8000f48 <LCD_Write_Cmd>
  LCD_Set_Cursor( 1, 0 );//		posiciona cursor en la fila 1 columna 0
 8001190:	2100      	movs	r1, #0
 8001192:	2001      	movs	r0, #1
 8001194:	f7ff fefe 	bl	8000f94 <LCD_Set_Cursor>
  LCD_Put_Str(msg1);
 8001198:	4887      	ldr	r0, [pc, #540]	; (80013b8 <main+0x25c>)
 800119a:	f7ff ff26 	bl	8000fea <LCD_Put_Str>
  LCD_Set_Cursor(2,0);
 800119e:	2100      	movs	r1, #0
 80011a0:	2002      	movs	r0, #2
 80011a2:	f7ff fef7 	bl	8000f94 <LCD_Set_Cursor>
  LCD_Put_Str(msg2);
 80011a6:	4885      	ldr	r0, [pc, #532]	; (80013bc <main+0x260>)
 80011a8:	f7ff ff1f 	bl	8000fea <LCD_Put_Str>

  USER_EXTI_Init();
 80011ac:	f000 ffb4 	bl	8002118 <USER_EXTI_Init>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  osMutexDef(mutex);
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  mutexHandle = osMutexCreate(osMutex(mutex));
 80011bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011c0:	4618      	mov	r0, r3
 80011c2:	f002 fb9f 	bl	8003904 <osMutexCreate>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4a7d      	ldr	r2, [pc, #500]	; (80013c0 <main+0x264>)
 80011ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  osTimerDef(tim1, Timer_Callback1);
 80011cc:	4b7d      	ldr	r3, [pc, #500]	; (80013c4 <main+0x268>)
 80011ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  timHandle1 = osTimerCreate(osTimer(tim1), osTimerOnce, NULL);
 80011d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 facf 	bl	8003784 <osTimerCreate>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a77      	ldr	r2, [pc, #476]	; (80013c8 <main+0x26c>)
 80011ea:	6013      	str	r3, [r2, #0]
  osTimerDef(tim2, Timer_Callback2);
 80011ec:	4b77      	ldr	r3, [pc, #476]	; (80013cc <main+0x270>)
 80011ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  timHandle2 = osTimerCreate(osTimer(tim2), osTimerOnce, NULL);
 80011f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f002 fabf 	bl	8003784 <osTimerCreate>
 8001206:	4603      	mov	r3, r0
 8001208:	4a71      	ldr	r2, [pc, #452]	; (80013d0 <main+0x274>)
 800120a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  osMessageQDef(keyboardQueue, 1, uint32_t);
 800120c:	4b71      	ldr	r3, [pc, #452]	; (80013d4 <main+0x278>)
 800120e:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8001212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  keyboardQueueHandle = osMessageCreate(osMessageQ(keyboardQueue), NULL);
 8001218:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f002 fc0c 	bl	8003a3c <osMessageCreate>
 8001224:	4603      	mov	r3, r0
 8001226:	4a6c      	ldr	r2, [pc, #432]	; (80013d8 <main+0x27c>)
 8001228:	6013      	str	r3, [r2, #0]
  osMessageQDef(vQueue, 1, uint32_t);
 800122a:	4b6a      	ldr	r3, [pc, #424]	; (80013d4 <main+0x278>)
 800122c:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 8001230:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001232:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  vQueueHandle = osMessageCreate(osMessageQ(vQueue), NULL);
 8001236:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f002 fbfd 	bl	8003a3c <osMessageCreate>
 8001242:	4603      	mov	r3, r0
 8001244:	4a65      	ldr	r2, [pc, #404]	; (80013dc <main+0x280>)
 8001246:	6013      	str	r3, [r2, #0]
  osMessageQDef(valveQueue, 1, uint32_t);
 8001248:	4b62      	ldr	r3, [pc, #392]	; (80013d4 <main+0x278>)
 800124a:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 800124e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  valveQueueHandle = osMessageCreate(osMessageQ(valveQueue), NULL);
 8001254:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fbee 	bl	8003a3c <osMessageCreate>
 8001260:	4603      	mov	r3, r0
 8001262:	4a5f      	ldr	r2, [pc, #380]	; (80013e0 <main+0x284>)
 8001264:	6013      	str	r3, [r2, #0]
  osMessageQDef(fQueue, 1, uint32_t);
 8001266:	4b5b      	ldr	r3, [pc, #364]	; (80013d4 <main+0x278>)
 8001268:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800126c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800126e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  fQueueHandle = osMessageCreate(osMessageQ(fQueue), NULL);
 8001272:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f002 fbdf 	bl	8003a3c <osMessageCreate>
 800127e:	4603      	mov	r3, r0
 8001280:	4a58      	ldr	r2, [pc, #352]	; (80013e4 <main+0x288>)
 8001282:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(task0, Task0, osPriorityNormal, 0, 128); //Read from keyboard
 8001284:	4b58      	ldr	r3, [pc, #352]	; (80013e8 <main+0x28c>)
 8001286:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800128a:	461d      	mov	r5, r3
 800128c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001290:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001294:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskHandle0 = osThreadCreate(osThread(task0), NULL);
 8001298:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 fa0f 	bl	80036c2 <osThreadCreate>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a51      	ldr	r2, [pc, #324]	; (80013ec <main+0x290>)
 80012a8:	6013      	str	r3, [r2, #0]
  osThreadDef(task1, Task1, osPriorityNormal, 0, 128); //Read from keyboard
 80012aa:	4b51      	ldr	r3, [pc, #324]	; (80013f0 <main+0x294>)
 80012ac:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80012b0:	461d      	mov	r5, r3
 80012b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskHandle1 = osThreadCreate(osThread(task1), NULL);
 80012be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f002 f9fc 	bl	80036c2 <osThreadCreate>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4a49      	ldr	r2, [pc, #292]	; (80013f4 <main+0x298>)
 80012ce:	6013      	str	r3, [r2, #0]
  osThreadDef(task2, Task2, osPriorityNormal, 0, 128); //Send Data
 80012d0:	4b49      	ldr	r3, [pc, #292]	; (80013f8 <main+0x29c>)
 80012d2:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80012d6:	461d      	mov	r5, r3
 80012d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskHandle2 = osThreadCreate(osThread(task2), NULL);
 80012e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 f9e9 	bl	80036c2 <osThreadCreate>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4a42      	ldr	r2, [pc, #264]	; (80013fc <main+0x2a0>)
 80012f4:	6013      	str	r3, [r2, #0]
  osThreadDef(task3, Task3, osPriorityNormal, 0, 128); //Update LCD
 80012f6:	4b42      	ldr	r3, [pc, #264]	; (8001400 <main+0x2a4>)
 80012f8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80012fc:	461d      	mov	r5, r3
 80012fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001302:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001306:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskHandle3 = osThreadCreate(osThread(task3), NULL);
 800130a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f002 f9d6 	bl	80036c2 <osThreadCreate>
 8001316:	4603      	mov	r3, r0
 8001318:	4a3a      	ldr	r2, [pc, #232]	; (8001404 <main+0x2a8>)
 800131a:	6013      	str	r3, [r2, #0]
  osThreadDef(task4, Task4, osPriorityNormal, 0, 128);
 800131c:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <main+0x2ac>)
 800131e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001322:	461d      	mov	r5, r3
 8001324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001328:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800132c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskHandle4 = osThreadCreate(osThread(task4), NULL);
 8001330:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f002 f9c3 	bl	80036c2 <osThreadCreate>
 800133c:	4603      	mov	r3, r0
 800133e:	4a33      	ldr	r2, [pc, #204]	; (800140c <main+0x2b0>)
 8001340:	6013      	str	r3, [r2, #0]
  osThreadDef(task5, Task5, osPriorityNormal, 0, 128);
 8001342:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001346:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800134a:	4a31      	ldr	r2, [pc, #196]	; (8001410 <main+0x2b4>)
 800134c:	461c      	mov	r4, r3
 800134e:	4615      	mov	r5, r2
 8001350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001354:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001358:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskHandle5 = osThreadCreate(osThread(task5), NULL);
 800135c:	f107 0320 	add.w	r3, r7, #32
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f002 f9ad 	bl	80036c2 <osThreadCreate>
 8001368:	4603      	mov	r3, r0
 800136a:	4a2a      	ldr	r2, [pc, #168]	; (8001414 <main+0x2b8>)
 800136c:	6013      	str	r3, [r2, #0]
  osThreadDef(task6, Task6, osPriorityNormal, 0, 128);
 800136e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001372:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001376:	4a28      	ldr	r2, [pc, #160]	; (8001418 <main+0x2bc>)
 8001378:	461c      	mov	r4, r3
 800137a:	4615      	mov	r5, r2
 800137c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001380:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001384:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskHandle6 = osThreadCreate(osThread(task6), NULL);
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f002 f998 	bl	80036c2 <osThreadCreate>
 8001392:	4603      	mov	r3, r0
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <main+0x2c0>)
 8001396:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nStarting...%ld\r\n", xPortGetFreeHeapSize());
 8001398:	f005 fd76 	bl	8006e88 <xPortGetFreeHeapSize>
 800139c:	4603      	mov	r3, r0
 800139e:	4619      	mov	r1, r3
 80013a0:	481f      	ldr	r0, [pc, #124]	; (8001420 <main+0x2c4>)
 80013a2:	f006 f803 	bl	80073ac <iprintf>
  ADC1->CR2	|=	 ADC_CR2_ADON;//	starts the conversion
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <main+0x2c8>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	4a1e      	ldr	r2, [pc, #120]	; (8001424 <main+0x2c8>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6093      	str	r3, [r2, #8]
  osKernelStart();
 80013b2:	f002 f96f 	bl	8003694 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <main+0x25a>
 80013b8:	2000004c 	.word	0x2000004c
 80013bc:	20000060 	.word	0x20000060
 80013c0:	200008d0 	.word	0x200008d0
 80013c4:	08002329 	.word	0x08002329
 80013c8:	200008d4 	.word	0x200008d4
 80013cc:	08002349 	.word	0x08002349
 80013d0:	200008d8 	.word	0x200008d8
 80013d4:	080081f4 	.word	0x080081f4
 80013d8:	200008dc 	.word	0x200008dc
 80013dc:	200008e0 	.word	0x200008e0
 80013e0:	200008e4 	.word	0x200008e4
 80013e4:	200008e8 	.word	0x200008e8
 80013e8:	08008204 	.word	0x08008204
 80013ec:	200008b4 	.word	0x200008b4
 80013f0:	08008220 	.word	0x08008220
 80013f4:	200008b8 	.word	0x200008b8
 80013f8:	0800823c 	.word	0x0800823c
 80013fc:	200008bc 	.word	0x200008bc
 8001400:	08008258 	.word	0x08008258
 8001404:	200008c0 	.word	0x200008c0
 8001408:	08008274 	.word	0x08008274
 800140c:	200008c4 	.word	0x200008c4
 8001410:	08008290 	.word	0x08008290
 8001414:	200008c8 	.word	0x200008c8
 8001418:	080082ac 	.word	0x080082ac
 800141c:	200008cc 	.word	0x200008cc
 8001420:	080081cc 	.word	0x080081cc
 8001424:	40012400 	.word	0x40012400

08001428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b090      	sub	sp, #64	; 0x40
 800142c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142e:	f107 0318 	add.w	r3, r7, #24
 8001432:	2228      	movs	r2, #40	; 0x28
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f005 ff1b 	bl	8007272 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144e:	2301      	movs	r3, #1
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001452:	2310      	movs	r3, #16
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001456:	2302      	movs	r3, #2
 8001458:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800145a:	2300      	movs	r3, #0
 800145c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800145e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001462:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	4618      	mov	r0, r3
 800146a:	f001 fa75 	bl	8002958 <HAL_RCC_OscConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001474:	f000 ff88 	bl	8002388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001478:	230f      	movs	r3, #15
 800147a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147c:	2302      	movs	r3, #2
 800147e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2102      	movs	r1, #2
 8001492:	4618      	mov	r0, r3
 8001494:	f001 fce2 	bl	8002e5c <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800149e:	f000 ff73 	bl	8002388 <Error_Handler>
  }
}
 80014a2:	bf00      	nop
 80014a4:	3740      	adds	r7, #64	; 0x40
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_GPIO_Init+0x70>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	4a19      	ldr	r2, [pc, #100]	; (800151c <MX_GPIO_Init+0x70>)
 80014b8:	f043 0310 	orr.w	r3, r3, #16
 80014bc:	6193      	str	r3, [r2, #24]
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <MX_GPIO_Init+0x70>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_GPIO_Init+0x70>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	4a13      	ldr	r2, [pc, #76]	; (800151c <MX_GPIO_Init+0x70>)
 80014d0:	f043 0320 	orr.w	r3, r3, #32
 80014d4:	6193      	str	r3, [r2, #24]
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_GPIO_Init+0x70>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f003 0320 	and.w	r3, r3, #32
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_GPIO_Init+0x70>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	4a0d      	ldr	r2, [pc, #52]	; (800151c <MX_GPIO_Init+0x70>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6193      	str	r3, [r2, #24]
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_GPIO_Init+0x70>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_GPIO_Init+0x70>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	4a07      	ldr	r2, [pc, #28]	; (800151c <MX_GPIO_Init+0x70>)
 8001500:	f043 0308 	orr.w	r3, r3, #8
 8001504:	6193      	str	r3, [r2, #24]
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <MX_GPIO_Init+0x70>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	40021000 	.word	0x40021000

08001520 <read_keyboard>:

/* USER CODE BEGIN 4 */

uint32_t read_keyboard(){
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
	uint32_t tecla, found;
	found = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
	for(int i = 0 ; i < 4 ; i++){
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	e07a      	b.n	8001626 <read_keyboard+0x106>
		for(int j = 0 ; j < 4 ; j++){
 8001530:	2300      	movs	r3, #0
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	e00a      	b.n	800154c <read_keyboard+0x2c>
			key_change[j] = key_change_template[j];
 8001536:	4a45      	ldr	r2, [pc, #276]	; (800164c <read_keyboard+0x12c>)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800153e:	4a44      	ldr	r2, [pc, #272]	; (8001650 <read_keyboard+0x130>)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int j = 0 ; j < 4 ; j++){
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2b03      	cmp	r3, #3
 8001550:	ddf1      	ble.n	8001536 <read_keyboard+0x16>
		}
		key_change[i]+=16;
 8001552:	4a3f      	ldr	r2, [pc, #252]	; (8001650 <read_keyboard+0x130>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800155a:	3310      	adds	r3, #16
 800155c:	b299      	uxth	r1, r3
 800155e:	4a3c      	ldr	r2, [pc, #240]	; (8001650 <read_keyboard+0x130>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		GPIOB->BSRR = (1 << key_change[0]) | (1 << key_change[1]) | (1 << key_change[2]) | (1 << key_change[3]);
 8001566:	4b3a      	ldr	r3, [pc, #232]	; (8001650 <read_keyboard+0x130>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	2301      	movs	r3, #1
 800156e:	fa03 f202 	lsl.w	r2, r3, r2
 8001572:	4b37      	ldr	r3, [pc, #220]	; (8001650 <read_keyboard+0x130>)
 8001574:	885b      	ldrh	r3, [r3, #2]
 8001576:	4619      	mov	r1, r3
 8001578:	2301      	movs	r3, #1
 800157a:	408b      	lsls	r3, r1
 800157c:	431a      	orrs	r2, r3
 800157e:	4b34      	ldr	r3, [pc, #208]	; (8001650 <read_keyboard+0x130>)
 8001580:	889b      	ldrh	r3, [r3, #4]
 8001582:	4619      	mov	r1, r3
 8001584:	2301      	movs	r3, #1
 8001586:	408b      	lsls	r3, r1
 8001588:	431a      	orrs	r2, r3
 800158a:	4b31      	ldr	r3, [pc, #196]	; (8001650 <read_keyboard+0x130>)
 800158c:	88db      	ldrh	r3, [r3, #6]
 800158e:	4619      	mov	r1, r3
 8001590:	2301      	movs	r3, #1
 8001592:	408b      	lsls	r3, r1
 8001594:	431a      	orrs	r2, r3
 8001596:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <read_keyboard+0x134>)
 8001598:	611a      	str	r2, [r3, #16]
		if(!(GPIOB->IDR & GPIO_IDR_IDR4 ) & !found){
 800159a:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <read_keyboard+0x134>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 0210 	and.w	r2, r3, #16
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d107      	bne.n	80015ba <read_keyboard+0x9a>
		 tecla = keys[4*i];
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4a2a      	ldr	r2, [pc, #168]	; (8001658 <read_keyboard+0x138>)
 80015b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015b4:	60fb      	str	r3, [r7, #12]
		 found = 1;
 80015b6:	2301      	movs	r3, #1
 80015b8:	60bb      	str	r3, [r7, #8]
		}
		if(!(GPIOB->IDR & GPIO_IDR_IDR5 ) & !found){
 80015ba:	4b26      	ldr	r3, [pc, #152]	; (8001654 <read_keyboard+0x134>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 0220 	and.w	r2, r3, #32
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d108      	bne.n	80015dc <read_keyboard+0xbc>
		  tecla = keys[1+4*i];
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	3301      	adds	r3, #1
 80015d0:	4a21      	ldr	r2, [pc, #132]	; (8001658 <read_keyboard+0x138>)
 80015d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015d6:	60fb      	str	r3, [r7, #12]
		  found = 1;
 80015d8:	2301      	movs	r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
		}
		if(!(GPIOB->IDR & GPIO_IDR_IDR6 ) & !found){
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <read_keyboard+0x134>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d108      	bne.n	80015fe <read_keyboard+0xde>
		  tecla = keys[2+4*i];
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	3302      	adds	r3, #2
 80015f2:	4a19      	ldr	r2, [pc, #100]	; (8001658 <read_keyboard+0x138>)
 80015f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015f8:	60fb      	str	r3, [r7, #12]
		  found = 1;
 80015fa:	2301      	movs	r3, #1
 80015fc:	60bb      	str	r3, [r7, #8]
		}
		if(!(GPIOB->IDR & GPIO_IDR_IDR7 ) & !found){
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <read_keyboard+0x134>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	4313      	orrs	r3, r2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d108      	bne.n	8001620 <read_keyboard+0x100>
		  tecla = keys[3+4*i];
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	3303      	adds	r3, #3
 8001614:	4a10      	ldr	r2, [pc, #64]	; (8001658 <read_keyboard+0x138>)
 8001616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800161a:	60fb      	str	r3, [r7, #12]
		  found = 1;
 800161c:	2301      	movs	r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
	for(int i = 0 ; i < 4 ; i++){
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3301      	adds	r3, #1
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b03      	cmp	r3, #3
 800162a:	dd81      	ble.n	8001530 <read_keyboard+0x10>
		}
	}

	if(found){
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d004      	beq.n	800163c <read_keyboard+0x11c>
		virgin = false;
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <read_keyboard+0x13c>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
		return tecla;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	e001      	b.n	8001640 <read_keyboard+0x120>
	} else
		return -1;
 800163c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000000 	.word	0x20000000
 8001650:	20000008 	.word	0x20000008
 8001654:	40010c00 	.word	0x40010c00
 8001658:	20000010 	.word	0x20000010
 800165c:	20000048 	.word	0x20000048

08001660 <Task0>:
void Task0(void const * argument){
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b097      	sub	sp, #92	; 0x5c
 8001664:	af02      	add	r7, sp, #8
 8001666:	6078      	str	r0, [r7, #4]
	uint32_t counter = 0, temp, tec, v, f;
 8001668:	2300      	movs	r3, #0
 800166a:	64fb      	str	r3, [r7, #76]	; 0x4c
	osEvent key_event, v_event, f_event, ks_event;
	for(;;)
	{
		key_event = osMessageGet(keyboardQueueHandle, 0);
 800166c:	4b71      	ldr	r3, [pc, #452]	; (8001834 <Task0+0x1d4>)
 800166e:	6819      	ldr	r1, [r3, #0]
 8001670:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001674:	2200      	movs	r2, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f002 fa48 	bl	8003b0c <osMessageGet>

		if(key_event.status == osEventMessage){
 800167c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167e:	2b10      	cmp	r3, #16
 8001680:	d150      	bne.n	8001724 <Task0+0xc4>
			tec = key_event.value.v;
 8001682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001684:	64bb      	str	r3, [r7, #72]	; 0x48

			if(tec > 0 && tec < 6){
 8001686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001688:	2b00      	cmp	r3, #0
 800168a:	d04b      	beq.n	8001724 <Task0+0xc4>
 800168c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800168e:	2b05      	cmp	r3, #5
 8001690:	d848      	bhi.n	8001724 <Task0+0xc4>
				switch(tec){
 8001692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001694:	3b01      	subs	r3, #1
 8001696:	2b04      	cmp	r3, #4
 8001698:	d849      	bhi.n	800172e <Task0+0xce>
 800169a:	a201      	add	r2, pc, #4	; (adr r2, 80016a0 <Task0+0x40>)
 800169c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a0:	080016b5 	.word	0x080016b5
 80016a4:	080016d5 	.word	0x080016d5
 80016a8:	080016e1 	.word	0x080016e1
 80016ac:	080016f9 	.word	0x080016f9
 80016b0:	08001711 	.word	0x08001711
				case 1:
					if(vars[1] == 1)
 80016b4:	4b60      	ldr	r3, [pc, #384]	; (8001838 <Task0+0x1d8>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d103      	bne.n	80016c4 <Task0+0x64>
						vars[1] = 0;
 80016bc:	4b5e      	ldr	r3, [pc, #376]	; (8001838 <Task0+0x1d8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	605a      	str	r2, [r3, #4]
					else if(vars[1] == 0)
						vars[1] = 1;
					break;
 80016c2:	e031      	b.n	8001728 <Task0+0xc8>
					else if(vars[1] == 0)
 80016c4:	4b5c      	ldr	r3, [pc, #368]	; (8001838 <Task0+0x1d8>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d12d      	bne.n	8001728 <Task0+0xc8>
						vars[1] = 1;
 80016cc:	4b5a      	ldr	r3, [pc, #360]	; (8001838 <Task0+0x1d8>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	605a      	str	r2, [r3, #4]
					break;
 80016d2:	e029      	b.n	8001728 <Task0+0xc8>
				case 2:
					vars[0]+=20;
 80016d4:	4b58      	ldr	r3, [pc, #352]	; (8001838 <Task0+0x1d8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	3314      	adds	r3, #20
 80016da:	4a57      	ldr	r2, [pc, #348]	; (8001838 <Task0+0x1d8>)
 80016dc:	6013      	str	r3, [r2, #0]
					break;
 80016de:	e026      	b.n	800172e <Task0+0xce>
				case 3:
					if(vars[4] == 0)
 80016e0:	4b55      	ldr	r3, [pc, #340]	; (8001838 <Task0+0x1d8>)
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d103      	bne.n	80016f0 <Task0+0x90>
						vars[4] = 1;
 80016e8:	4b53      	ldr	r3, [pc, #332]	; (8001838 <Task0+0x1d8>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	611a      	str	r2, [r3, #16]
					else
						vars[4] = 0;
					break;
 80016ee:	e01e      	b.n	800172e <Task0+0xce>
						vars[4] = 0;
 80016f0:	4b51      	ldr	r3, [pc, #324]	; (8001838 <Task0+0x1d8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
					break;
 80016f6:	e01a      	b.n	800172e <Task0+0xce>
				case 4:
					if(vars[1] < 2)
 80016f8:	4b4f      	ldr	r3, [pc, #316]	; (8001838 <Task0+0x1d8>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d803      	bhi.n	8001708 <Task0+0xa8>
						vars[1] = 2;
 8001700:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <Task0+0x1d8>)
 8001702:	2202      	movs	r2, #2
 8001704:	605a      	str	r2, [r3, #4]
					else
						vars[1] = 0;
					break;
 8001706:	e012      	b.n	800172e <Task0+0xce>
						vars[1] = 0;
 8001708:	4b4b      	ldr	r3, [pc, #300]	; (8001838 <Task0+0x1d8>)
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
					break;
 800170e:	e00e      	b.n	800172e <Task0+0xce>
				case 5:
					if(vars[0] >= 2)
 8001710:	4b49      	ldr	r3, [pc, #292]	; (8001838 <Task0+0x1d8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d909      	bls.n	800172c <Task0+0xcc>
						vars[0]-=2;
 8001718:	4b47      	ldr	r3, [pc, #284]	; (8001838 <Task0+0x1d8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3b02      	subs	r3, #2
 800171e:	4a46      	ldr	r2, [pc, #280]	; (8001838 <Task0+0x1d8>)
 8001720:	6013      	str	r3, [r2, #0]
					break;
 8001722:	e003      	b.n	800172c <Task0+0xcc>
				}
			}
 8001724:	bf00      	nop
 8001726:	e002      	b.n	800172e <Task0+0xce>
					break;
 8001728:	bf00      	nop
 800172a:	e000      	b.n	800172e <Task0+0xce>
					break;
 800172c:	bf00      	nop
		}

		if(vars[1]){
 800172e:	4b42      	ldr	r3, [pc, #264]	; (8001838 <Task0+0x1d8>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00a      	beq.n	800174c <Task0+0xec>
			if(vars[0] >= 1)
 8001736:	4b40      	ldr	r3, [pc, #256]	; (8001838 <Task0+0x1d8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <Task0+0xe6>
				Timer_Callback1(100);
 800173e:	2064      	movs	r0, #100	; 0x64
 8001740:	f000 fdf2 	bl	8002328 <Timer_Callback1>
 8001744:	e002      	b.n	800174c <Task0+0xec>
			else
				vars[1] = 0;
 8001746:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <Task0+0x1d8>)
 8001748:	2200      	movs	r2, #0
 800174a:	605a      	str	r2, [r3, #4]
		}


		osMutexWait(mutexHandle, osWaitForever);
 800174c:	4b3b      	ldr	r3, [pc, #236]	; (800183c <Task0+0x1dc>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f04f 31ff 	mov.w	r1, #4294967295
 8001754:	4618      	mov	r0, r3
 8001756:	f002 f8ed 	bl	8003934 <osMutexWait>
		printf("%d, %d, %d, %d, %d\r\n", vars[0], vars[1], vars[2], vars[3], vars[4]);
 800175a:	4b37      	ldr	r3, [pc, #220]	; (8001838 <Task0+0x1d8>)
 800175c:	6819      	ldr	r1, [r3, #0]
 800175e:	4b36      	ldr	r3, [pc, #216]	; (8001838 <Task0+0x1d8>)
 8001760:	6858      	ldr	r0, [r3, #4]
 8001762:	4b35      	ldr	r3, [pc, #212]	; (8001838 <Task0+0x1d8>)
 8001764:	689c      	ldr	r4, [r3, #8]
 8001766:	4b34      	ldr	r3, [pc, #208]	; (8001838 <Task0+0x1d8>)
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	4a33      	ldr	r2, [pc, #204]	; (8001838 <Task0+0x1d8>)
 800176c:	6912      	ldr	r2, [r2, #16]
 800176e:	9201      	str	r2, [sp, #4]
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	4623      	mov	r3, r4
 8001774:	4602      	mov	r2, r0
 8001776:	4832      	ldr	r0, [pc, #200]	; (8001840 <Task0+0x1e0>)
 8001778:	f005 fe18 	bl	80073ac <iprintf>
		osMutexRelease(mutexHandle);
 800177c:	4b2f      	ldr	r3, [pc, #188]	; (800183c <Task0+0x1dc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f002 f925 	bl	80039d0 <osMutexRelease>

		v_event = osMessageGet(vQueueHandle, 100);
 8001786:	4b2f      	ldr	r3, [pc, #188]	; (8001844 <Task0+0x1e4>)
 8001788:	6819      	ldr	r1, [r3, #0]
 800178a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178e:	2264      	movs	r2, #100	; 0x64
 8001790:	4618      	mov	r0, r3
 8001792:	f002 f9bb 	bl	8003b0c <osMessageGet>
		if(v_event.status == osEventMessage){
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	2b10      	cmp	r3, #16
 800179a:	d104      	bne.n	80017a6 <Task0+0x146>
			v = v_event.value.v;
 800179c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179e:	647b      	str	r3, [r7, #68]	; 0x44
			vars[3] = v;
 80017a0:	4a25      	ldr	r2, [pc, #148]	; (8001838 <Task0+0x1d8>)
 80017a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017a4:	60d3      	str	r3, [r2, #12]
		}

		if(osMessagePut(valveQueueHandle, vars[1], 0) != osOK ){
 80017a6:	4b28      	ldr	r3, [pc, #160]	; (8001848 <Task0+0x1e8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a23      	ldr	r2, [pc, #140]	; (8001838 <Task0+0x1d8>)
 80017ac:	6851      	ldr	r1, [r2, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 f96b 	bl	8003a8c <osMessagePut>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00e      	beq.n	80017da <Task0+0x17a>
			osMutexWait(mutexHandle, osWaitForever);
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <Task0+0x1dc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 f8b5 	bl	8003934 <osMutexWait>
			printf("Error T0 (valve)\r\n");
 80017ca:	4820      	ldr	r0, [pc, #128]	; (800184c <Task0+0x1ec>)
 80017cc:	f005 fe74 	bl	80074b8 <puts>
			osMutexRelease(mutexHandle);
 80017d0:	4b1a      	ldr	r3, [pc, #104]	; (800183c <Task0+0x1dc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f002 f8fb 	bl	80039d0 <osMutexRelease>
		}

		f_event = osMessageGet(fQueueHandle, 100);
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <Task0+0x1f0>)
 80017dc:	6819      	ldr	r1, [r3, #0]
 80017de:	f107 0318 	add.w	r3, r7, #24
 80017e2:	2264      	movs	r2, #100	; 0x64
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 f991 	bl	8003b0c <osMessageGet>
		if(f_event.status == osEventMessage){
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b10      	cmp	r3, #16
 80017ee:	d104      	bne.n	80017fa <Task0+0x19a>
			f = f_event.value.v;
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	643b      	str	r3, [r7, #64]	; 0x40
			vars[2] = f;
 80017f4:	4a10      	ldr	r2, [pc, #64]	; (8001838 <Task0+0x1d8>)
 80017f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017f8:	6093      	str	r3, [r2, #8]
		}

		if(ks){
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <Task0+0x1f4>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d005      	beq.n	800180e <Task0+0x1ae>
			vars[1] = 0;
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <Task0+0x1d8>)
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
			ks = false;
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <Task0+0x1f4>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
		if(ks_event.status == osEventMessage){
			//ks = ks_event.value.v;
			vars[1] = 0;
		}*/

		temp = osKernelSysTick() - (100 * counter++);
 800180e:	f001 ff48 	bl	80036a2 <osKernelSysTick>
 8001812:	4601      	mov	r1, r0
 8001814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	64fa      	str	r2, [r7, #76]	; 0x4c
 800181a:	2264      	movs	r2, #100	; 0x64
 800181c:	fb02 f303 	mul.w	r3, r2, r3
 8001820:	1acb      	subs	r3, r1, r3
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
		osDelay(100 - temp);
 8001824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001826:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800182a:	4618      	mov	r0, r3
 800182c:	f001 ff95 	bl	800375a <osDelay>
		key_event = osMessageGet(keyboardQueueHandle, 0);
 8001830:	e71c      	b.n	800166c <Task0+0xc>
 8001832:	bf00      	nop
 8001834:	200008dc 	.word	0x200008dc
 8001838:	20000034 	.word	0x20000034
 800183c:	200008d0 	.word	0x200008d0
 8001840:	080082c8 	.word	0x080082c8
 8001844:	200008e0 	.word	0x200008e0
 8001848:	200008e4 	.word	0x200008e4
 800184c:	080082e0 	.word	0x080082e0
 8001850:	200008e8 	.word	0x200008e8
 8001854:	200008ec 	.word	0x200008ec

08001858 <Task1>:
	}
}

void Task1(void const * argument){
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	uint32_t counter = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
	uint32_t temp, tecla;
	osStatus ret;
	for(;;)
	{
		tecla = read_keyboard();
 8001864:	f7ff fe5c 	bl	8001520 <read_keyboard>
 8001868:	6138      	str	r0, [r7, #16]
		ret = osMessagePut(keyboardQueueHandle, tecla, 0);
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <Task1+0x64>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2200      	movs	r2, #0
 8001870:	6939      	ldr	r1, [r7, #16]
 8001872:	4618      	mov	r0, r3
 8001874:	f002 f90a 	bl	8003a8c <osMessagePut>
 8001878:	60f8      	str	r0, [r7, #12]
		if(ret != osOK ){
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00b      	beq.n	8001898 <Task1+0x40>
			osMutexWait(mutexHandle, osWaitForever);
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <Task1+0x68>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	4618      	mov	r0, r3
 800188a:	f002 f853 	bl	8003934 <osMutexWait>
			//printf("Error T1 (keyboard): %d\r\n", ret);
			osMutexRelease(mutexHandle);
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <Task1+0x68>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f002 f89c 	bl	80039d0 <osMutexRelease>
		}

		temp = osKernelSysTick() - (200 * counter++);
 8001898:	f001 ff03 	bl	80036a2 <osKernelSysTick>
 800189c:	4601      	mov	r1, r0
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	617a      	str	r2, [r7, #20]
 80018a4:	22c8      	movs	r2, #200	; 0xc8
 80018a6:	fb02 f303 	mul.w	r3, r2, r3
 80018aa:	1acb      	subs	r3, r1, r3
 80018ac:	60bb      	str	r3, [r7, #8]
		osDelay(200 - temp);
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80018b4:	4618      	mov	r0, r3
 80018b6:	f001 ff50 	bl	800375a <osDelay>
		tecla = read_keyboard();
 80018ba:	e7d3      	b.n	8001864 <Task1+0xc>
 80018bc:	200008dc 	.word	0x200008dc
 80018c0:	200008d0 	.word	0x200008d0

080018c4 <Task2>:
	}
}

void Task2(void const * argument){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	uint32_t counter = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
	float time;
	//char msg3[] = "VOFF 00:30  COMM";
	//char msg4[] = "0.0V 00.0HZ  OFF";
	for(;;)
	{
		if(virgin){
 80018d0:	4bae      	ldr	r3, [pc, #696]	; (8001b8c <Task2+0x2c8>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00e      	beq.n	80018f6 <Task2+0x32>
			LCD_Set_Cursor(1,0);
 80018d8:	2100      	movs	r1, #0
 80018da:	2001      	movs	r0, #1
 80018dc:	f7ff fb5a 	bl	8000f94 <LCD_Set_Cursor>
			LCD_Put_Str(msg1);
 80018e0:	48ab      	ldr	r0, [pc, #684]	; (8001b90 <Task2+0x2cc>)
 80018e2:	f7ff fb82 	bl	8000fea <LCD_Put_Str>
			LCD_Set_Cursor(2,0);
 80018e6:	2100      	movs	r1, #0
 80018e8:	2002      	movs	r0, #2
 80018ea:	f7ff fb53 	bl	8000f94 <LCD_Set_Cursor>
			LCD_Put_Str(msg2);
 80018ee:	48a9      	ldr	r0, [pc, #676]	; (8001b94 <Task2+0x2d0>)
 80018f0:	f7ff fb7b 	bl	8000fea <LCD_Put_Str>
 80018f4:	e136      	b.n	8001b64 <Task2+0x2a0>
		} else {
			//osMutexWait(mutexHandle, osWaitForever);//pc10,11,12,pump,in,out
			//osMutexRelease(mutexHandle);

			if(!ks){
 80018f6:	4ba8      	ldr	r3, [pc, #672]	; (8001b98 <Task2+0x2d4>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	f083 0301 	eor.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d011      	beq.n	8001928 <Task2+0x64>
				if(vars[1] == 1){
 8001904:	4ba5      	ldr	r3, [pc, #660]	; (8001b9c <Task2+0x2d8>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d106      	bne.n	800191a <Task2+0x56>
					msg3[2] = 'N';
 800190c:	4ba4      	ldr	r3, [pc, #656]	; (8001ba0 <Task2+0x2dc>)
 800190e:	224e      	movs	r2, #78	; 0x4e
 8001910:	709a      	strb	r2, [r3, #2]
					msg3[3] = ' ';
 8001912:	4ba3      	ldr	r3, [pc, #652]	; (8001ba0 <Task2+0x2dc>)
 8001914:	2220      	movs	r2, #32
 8001916:	70da      	strb	r2, [r3, #3]
 8001918:	e00f      	b.n	800193a <Task2+0x76>
				} else {
					msg3[2] = 'F';
 800191a:	4ba1      	ldr	r3, [pc, #644]	; (8001ba0 <Task2+0x2dc>)
 800191c:	2246      	movs	r2, #70	; 0x46
 800191e:	709a      	strb	r2, [r3, #2]
					msg3[3] = 'F';
 8001920:	4b9f      	ldr	r3, [pc, #636]	; (8001ba0 <Task2+0x2dc>)
 8001922:	2246      	movs	r2, #70	; 0x46
 8001924:	70da      	strb	r2, [r3, #3]
 8001926:	e008      	b.n	800193a <Task2+0x76>
				}
			} else {
				ks = false;
 8001928:	4b9b      	ldr	r3, [pc, #620]	; (8001b98 <Task2+0x2d4>)
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
				msg3[2] = 'F';
 800192e:	4b9c      	ldr	r3, [pc, #624]	; (8001ba0 <Task2+0x2dc>)
 8001930:	2246      	movs	r2, #70	; 0x46
 8001932:	709a      	strb	r2, [r3, #2]
				msg3[3] = 'F';
 8001934:	4b9a      	ldr	r3, [pc, #616]	; (8001ba0 <Task2+0x2dc>)
 8001936:	2246      	movs	r2, #70	; 0x46
 8001938:	70da      	strb	r2, [r3, #3]
			}

			time = vars[0]/10;
 800193a:	4b98      	ldr	r3, [pc, #608]	; (8001b9c <Task2+0x2d8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a99      	ldr	r2, [pc, #612]	; (8001ba4 <Task2+0x2e0>)
 8001940:	fba2 2303 	umull	r2, r3, r2, r3
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe ffee 	bl	8000928 <__aeabi_ui2f>
 800194c:	4603      	mov	r3, r0
 800194e:	613b      	str	r3, [r7, #16]
			t1 = ((uint16_t)time/60)/10;
 8001950:	6938      	ldr	r0, [r7, #16]
 8001952:	f7ff f991 	bl	8000c78 <__aeabi_f2uiz>
 8001956:	4603      	mov	r3, r0
 8001958:	b29b      	uxth	r3, r3
 800195a:	4a93      	ldr	r2, [pc, #588]	; (8001ba8 <Task2+0x2e4>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	099b      	lsrs	r3, r3, #6
 8001962:	b29b      	uxth	r3, r3
 8001964:	461a      	mov	r2, r3
 8001966:	4b91      	ldr	r3, [pc, #580]	; (8001bac <Task2+0x2e8>)
 8001968:	601a      	str	r2, [r3, #0]
			t2 = ((uint16_t)time/60)%10;
 800196a:	6938      	ldr	r0, [r7, #16]
 800196c:	f7ff f984 	bl	8000c78 <__aeabi_f2uiz>
 8001970:	4603      	mov	r3, r0
 8001972:	b29b      	uxth	r3, r3
 8001974:	4a8e      	ldr	r2, [pc, #568]	; (8001bb0 <Task2+0x2ec>)
 8001976:	fba2 2303 	umull	r2, r3, r2, r3
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b89      	ldr	r3, [pc, #548]	; (8001ba4 <Task2+0x2e0>)
 8001980:	fba3 1302 	umull	r1, r3, r3, r2
 8001984:	08d9      	lsrs	r1, r3, #3
 8001986:	460b      	mov	r3, r1
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	440b      	add	r3, r1
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	b29b      	uxth	r3, r3
 8001992:	461a      	mov	r2, r3
 8001994:	4b87      	ldr	r3, [pc, #540]	; (8001bb4 <Task2+0x2f0>)
 8001996:	601a      	str	r2, [r3, #0]
			t3 = ((uint16_t)time%60)/10;
 8001998:	6938      	ldr	r0, [r7, #16]
 800199a:	f7ff f96d 	bl	8000c78 <__aeabi_f2uiz>
 800199e:	4603      	mov	r3, r0
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	4b83      	ldr	r3, [pc, #524]	; (8001bb0 <Task2+0x2ec>)
 80019a4:	fba3 1302 	umull	r1, r3, r3, r2
 80019a8:	0959      	lsrs	r1, r3, #5
 80019aa:	460b      	mov	r3, r1
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	1a5b      	subs	r3, r3, r1
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	4a7b      	ldr	r2, [pc, #492]	; (8001ba4 <Task2+0x2e0>)
 80019b8:	fba2 2303 	umull	r2, r3, r2, r3
 80019bc:	08db      	lsrs	r3, r3, #3
 80019be:	b29b      	uxth	r3, r3
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b7d      	ldr	r3, [pc, #500]	; (8001bb8 <Task2+0x2f4>)
 80019c4:	601a      	str	r2, [r3, #0]
			t4 = ((uint16_t)time%60)%10;
 80019c6:	6938      	ldr	r0, [r7, #16]
 80019c8:	f7ff f956 	bl	8000c78 <__aeabi_f2uiz>
 80019cc:	4603      	mov	r3, r0
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	4b77      	ldr	r3, [pc, #476]	; (8001bb0 <Task2+0x2ec>)
 80019d2:	fba3 1302 	umull	r1, r3, r3, r2
 80019d6:	0959      	lsrs	r1, r3, #5
 80019d8:	460b      	mov	r3, r1
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	1a5b      	subs	r3, r3, r1
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b6f      	ldr	r3, [pc, #444]	; (8001ba4 <Task2+0x2e0>)
 80019e6:	fba3 1302 	umull	r1, r3, r3, r2
 80019ea:	08d9      	lsrs	r1, r3, #3
 80019ec:	460b      	mov	r3, r1
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b70      	ldr	r3, [pc, #448]	; (8001bbc <Task2+0x2f8>)
 80019fc:	601a      	str	r2, [r3, #0]
			msg3[5] = t1+'0';
 80019fe:	4b6b      	ldr	r3, [pc, #428]	; (8001bac <Task2+0x2e8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	3330      	adds	r3, #48	; 0x30
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	4b65      	ldr	r3, [pc, #404]	; (8001ba0 <Task2+0x2dc>)
 8001a0a:	715a      	strb	r2, [r3, #5]
			msg3[6] = t2+'0';
 8001a0c:	4b69      	ldr	r3, [pc, #420]	; (8001bb4 <Task2+0x2f0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	3330      	adds	r3, #48	; 0x30
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4b62      	ldr	r3, [pc, #392]	; (8001ba0 <Task2+0x2dc>)
 8001a18:	719a      	strb	r2, [r3, #6]
			msg3[8] = t3+'0';
 8001a1a:	4b67      	ldr	r3, [pc, #412]	; (8001bb8 <Task2+0x2f4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	3330      	adds	r3, #48	; 0x30
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	4b5e      	ldr	r3, [pc, #376]	; (8001ba0 <Task2+0x2dc>)
 8001a26:	721a      	strb	r2, [r3, #8]
			msg3[9] = t4+'0';
 8001a28:	4b64      	ldr	r3, [pc, #400]	; (8001bbc <Task2+0x2f8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	3330      	adds	r3, #48	; 0x30
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b5b      	ldr	r3, [pc, #364]	; (8001ba0 <Task2+0x2dc>)
 8001a34:	725a      	strb	r2, [r3, #9]

			if(vars[4]){
 8001a36:	4b59      	ldr	r3, [pc, #356]	; (8001b9c <Task2+0x2d8>)
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d006      	beq.n	8001a4c <Task2+0x188>
				msg4[14] = 'N';
 8001a3e:	4b60      	ldr	r3, [pc, #384]	; (8001bc0 <Task2+0x2fc>)
 8001a40:	224e      	movs	r2, #78	; 0x4e
 8001a42:	739a      	strb	r2, [r3, #14]
				msg4[15] = ' ';
 8001a44:	4b5e      	ldr	r3, [pc, #376]	; (8001bc0 <Task2+0x2fc>)
 8001a46:	2220      	movs	r2, #32
 8001a48:	73da      	strb	r2, [r3, #15]
 8001a4a:	e005      	b.n	8001a58 <Task2+0x194>
			} else {
				msg4[14] = 'F';
 8001a4c:	4b5c      	ldr	r3, [pc, #368]	; (8001bc0 <Task2+0x2fc>)
 8001a4e:	2246      	movs	r2, #70	; 0x46
 8001a50:	739a      	strb	r2, [r3, #14]
				msg4[15] = 'F';
 8001a52:	4b5b      	ldr	r3, [pc, #364]	; (8001bc0 <Task2+0x2fc>)
 8001a54:	2246      	movs	r2, #70	; 0x46
 8001a56:	73da      	strb	r2, [r3, #15]
			}

			f1 = ((uint8_t)vars[2])/10;
 8001a58:	4b50      	ldr	r3, [pc, #320]	; (8001b9c <Task2+0x2d8>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	4a51      	ldr	r2, [pc, #324]	; (8001ba4 <Task2+0x2e0>)
 8001a60:	fba2 2303 	umull	r2, r3, r2, r3
 8001a64:	08db      	lsrs	r3, r3, #3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b56      	ldr	r3, [pc, #344]	; (8001bc4 <Task2+0x300>)
 8001a6c:	601a      	str	r2, [r3, #0]
			f2 = ((uint8_t)vars[2])%10;
 8001a6e:	4b4b      	ldr	r3, [pc, #300]	; (8001b9c <Task2+0x2d8>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b4b      	ldr	r3, [pc, #300]	; (8001ba4 <Task2+0x2e0>)
 8001a76:	fba3 1302 	umull	r1, r3, r3, r2
 8001a7a:	08d9      	lsrs	r1, r3, #3
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b4f      	ldr	r3, [pc, #316]	; (8001bc8 <Task2+0x304>)
 8001a8c:	601a      	str	r2, [r3, #0]
			f3 = ((uint8_t)(vars[2]*10))%10;
 8001a8e:	4b43      	ldr	r3, [pc, #268]	; (8001b9c <Task2+0x2d8>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <Task2+0x2e0>)
 8001aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8001aa4:	08d9      	lsrs	r1, r3, #3
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4b45      	ldr	r3, [pc, #276]	; (8001bcc <Task2+0x308>)
 8001ab6:	601a      	str	r2, [r3, #0]
			msg4[5] = f1+'0';
 8001ab8:	4b42      	ldr	r3, [pc, #264]	; (8001bc4 <Task2+0x300>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	3330      	adds	r3, #48	; 0x30
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b3f      	ldr	r3, [pc, #252]	; (8001bc0 <Task2+0x2fc>)
 8001ac4:	715a      	strb	r2, [r3, #5]
			msg4[6] = f2+'0';
 8001ac6:	4b40      	ldr	r3, [pc, #256]	; (8001bc8 <Task2+0x304>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	3330      	adds	r3, #48	; 0x30
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <Task2+0x2fc>)
 8001ad2:	719a      	strb	r2, [r3, #6]
			msg4[8] = f3+'0';
 8001ad4:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <Task2+0x308>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	3330      	adds	r3, #48	; 0x30
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <Task2+0x2fc>)
 8001ae0:	721a      	strb	r2, [r3, #8]

			v1 = ((uint16_t)vars[3]/10)%10;
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <Task2+0x2d8>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	4a2e      	ldr	r2, [pc, #184]	; (8001ba4 <Task2+0x2e0>)
 8001aea:	fba2 2303 	umull	r2, r3, r2, r3
 8001aee:	08db      	lsrs	r3, r3, #3
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <Task2+0x2e0>)
 8001af4:	fba3 1302 	umull	r1, r3, r3, r2
 8001af8:	08d9      	lsrs	r1, r3, #3
 8001afa:	460b      	mov	r3, r1
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <Task2+0x30c>)
 8001b0a:	601a      	str	r2, [r3, #0]
			v2 = (uint16_t)(vars[3])%10;
 8001b0c:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <Task2+0x2d8>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <Task2+0x2e0>)
 8001b14:	fba3 1302 	umull	r1, r3, r3, r2
 8001b18:	08d9      	lsrs	r1, r3, #3
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	440b      	add	r3, r1
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	461a      	mov	r2, r3
 8001b28:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <Task2+0x310>)
 8001b2a:	601a      	str	r2, [r3, #0]
			msg4[0] = v1+'0';
 8001b2c:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <Task2+0x30c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	3330      	adds	r3, #48	; 0x30
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <Task2+0x2fc>)
 8001b38:	701a      	strb	r2, [r3, #0]
			msg4[2] = v2+'0';
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <Task2+0x310>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	3330      	adds	r3, #48	; 0x30
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <Task2+0x2fc>)
 8001b46:	709a      	strb	r2, [r3, #2]

			LCD_Set_Cursor(1,0);
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f7ff fa22 	bl	8000f94 <LCD_Set_Cursor>
			LCD_Put_Str(msg3);
 8001b50:	4813      	ldr	r0, [pc, #76]	; (8001ba0 <Task2+0x2dc>)
 8001b52:	f7ff fa4a 	bl	8000fea <LCD_Put_Str>
			LCD_Set_Cursor(2,0);
 8001b56:	2100      	movs	r1, #0
 8001b58:	2002      	movs	r0, #2
 8001b5a:	f7ff fa1b 	bl	8000f94 <LCD_Set_Cursor>
			LCD_Put_Str(msg4);
 8001b5e:	4818      	ldr	r0, [pc, #96]	; (8001bc0 <Task2+0x2fc>)
 8001b60:	f7ff fa43 	bl	8000fea <LCD_Put_Str>
		}

		temp = osKernelSysTick() - (500 * counter++);
 8001b64:	f001 fd9d 	bl	80036a2 <osKernelSysTick>
 8001b68:	4601      	mov	r1, r0
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	617a      	str	r2, [r7, #20]
 8001b70:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b74:	fb02 f303 	mul.w	r3, r2, r3
 8001b78:	1acb      	subs	r3, r1, r3
 8001b7a:	60fb      	str	r3, [r7, #12]
		osDelay(500 - temp);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8001b82:	4618      	mov	r0, r3
 8001b84:	f001 fde9 	bl	800375a <osDelay>
		if(virgin){
 8001b88:	e6a2      	b.n	80018d0 <Task2+0xc>
 8001b8a:	bf00      	nop
 8001b8c:	20000048 	.word	0x20000048
 8001b90:	2000004c 	.word	0x2000004c
 8001b94:	20000060 	.word	0x20000060
 8001b98:	200008ec 	.word	0x200008ec
 8001b9c:	20000034 	.word	0x20000034
 8001ba0:	20000074 	.word	0x20000074
 8001ba4:	cccccccd 	.word	0xcccccccd
 8001ba8:	1b4e81b5 	.word	0x1b4e81b5
 8001bac:	20000894 	.word	0x20000894
 8001bb0:	88888889 	.word	0x88888889
 8001bb4:	20000898 	.word	0x20000898
 8001bb8:	20000030 	.word	0x20000030
 8001bbc:	2000089c 	.word	0x2000089c
 8001bc0:	20000088 	.word	0x20000088
 8001bc4:	200008a0 	.word	0x200008a0
 8001bc8:	200008a4 	.word	0x200008a4
 8001bcc:	200008a8 	.word	0x200008a8
 8001bd0:	200008ac 	.word	0x200008ac
 8001bd4:	200008b0 	.word	0x200008b0

08001bd8 <Task3>:
	}
}

void Task3(void const * argument){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6178      	str	r0, [r7, #20]
	for(;;)
	{
		osSignalWait(1, osWaitForever);
 8001be0:	463b      	mov	r3, r7
 8001be2:	f04f 32ff 	mov.w	r2, #4294967295
 8001be6:	2101      	movs	r1, #1
 8001be8:	4618      	mov	r0, r3
 8001bea:	f001 fe3f 	bl	800386c <osSignalWait>
		osMutexWait(mutexHandle, osWaitForever);
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <Task3+0x44>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f001 fe9c 	bl	8003934 <osMutexWait>
		printf("KILLSWITCH PRESSED!\r\n");
 8001bfc:	4808      	ldr	r0, [pc, #32]	; (8001c20 <Task3+0x48>)
 8001bfe:	f005 fc5b 	bl	80074b8 <puts>
		GPIOA->BSRR = (1 << 17) | (1 << 25) | (1 << 31);
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <Task3+0x4c>)
 8001c04:	4a08      	ldr	r2, [pc, #32]	; (8001c28 <Task3+0x50>)
 8001c06:	611a      	str	r2, [r3, #16]
		ks = true
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <Task3+0x54>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
				;
		osMutexRelease(mutexHandle);
 8001c0e:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <Task3+0x44>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f001 fedc 	bl	80039d0 <osMutexRelease>
		osSignalWait(1, osWaitForever);
 8001c18:	e7e2      	b.n	8001be0 <Task3+0x8>
 8001c1a:	bf00      	nop
 8001c1c:	200008d0 	.word	0x200008d0
 8001c20:	080082f4 	.word	0x080082f4
 8001c24:	40010800 	.word	0x40010800
 8001c28:	82020000 	.word	0x82020000
 8001c2c:	200008ec 	.word	0x200008ec

08001c30 <Task4>:
		/*temp = osKernelSysTick() - (1000 * counter++);
		osDelay(1000 - temp);*/
	}
}

void Task4(void const * argument){
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	uint32_t counter = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]
	uint16_t dataADC;
	osStatus ret;
	float v;
	for(;;)
	{
		dataADC = USER_ADC_Read();
 8001c3c:	f000 fae4 	bl	8002208 <USER_ADC_Read>
 8001c40:	4603      	mov	r3, r0
 8001c42:	837b      	strh	r3, [r7, #26]
		v = (float)(dataADC*33/4095);
 8001c44:	8b7a      	ldrh	r2, [r7, #26]
 8001c46:	4613      	mov	r3, r2
 8001c48:	015b      	lsls	r3, r3, #5
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a1c      	ldr	r2, [pc, #112]	; (8001cc0 <Task4+0x90>)
 8001c4e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c52:	441a      	add	r2, r3
 8001c54:	12d2      	asrs	r2, r2, #11
 8001c56:	17db      	asrs	r3, r3, #31
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fe68 	bl	8000930 <__aeabi_i2f>
 8001c60:	4603      	mov	r3, r0
 8001c62:	617b      	str	r3, [r7, #20]
		ret = osMessagePut(vQueueHandle, v, 0);
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <Task4+0x94>)
 8001c66:	681c      	ldr	r4, [r3, #0]
 8001c68:	6978      	ldr	r0, [r7, #20]
 8001c6a:	f7ff f805 	bl	8000c78 <__aeabi_f2uiz>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2200      	movs	r2, #0
 8001c72:	4619      	mov	r1, r3
 8001c74:	4620      	mov	r0, r4
 8001c76:	f001 ff09 	bl	8003a8c <osMessagePut>
 8001c7a:	6138      	str	r0, [r7, #16]
		if(ret != osOK ){
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <Task4+0x6a>
			osMutexWait(mutexHandle, osWaitForever);
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <Task4+0x98>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f04f 31ff 	mov.w	r1, #4294967295
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f001 fe52 	bl	8003934 <osMutexWait>
			//printf("Error T4 (pressure voltage): %d\r\n", ret);
			osMutexRelease(mutexHandle);
 8001c90:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <Task4+0x98>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f001 fe9b 	bl	80039d0 <osMutexRelease>
		}

		//printf("Sending %d.%d\r\n", (uint8_t)v%10, (uint8_t)(v*10)%10);
		temp = osKernelSysTick() - (100 * counter++);
 8001c9a:	f001 fd02 	bl	80036a2 <osKernelSysTick>
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	61fa      	str	r2, [r7, #28]
 8001ca6:	2264      	movs	r2, #100	; 0x64
 8001ca8:	fb02 f303 	mul.w	r3, r2, r3
 8001cac:	1acb      	subs	r3, r1, r3
 8001cae:	60fb      	str	r3, [r7, #12]
		osDelay(100 - temp);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f001 fd4f 	bl	800375a <osDelay>
		dataADC = USER_ADC_Read();
 8001cbc:	e7be      	b.n	8001c3c <Task4+0xc>
 8001cbe:	bf00      	nop
 8001cc0:	80080081 	.word	0x80080081
 8001cc4:	200008e0 	.word	0x200008e0
 8001cc8:	200008d0 	.word	0x200008d0

08001ccc <Task5>:
	}
}

void Task5(void const * argument){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	uint32_t temp, counter = 0, v_state;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
	osEvent valve_event;
	for(;;)
	{
		valve_event = osMessageGet(valveQueueHandle, osWaitForever);
 8001cd8:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <Task5+0x8c>)
 8001cda:	6819      	ldr	r1, [r3, #0]
 8001cdc:	f107 0308 	add.w	r3, r7, #8
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f001 ff11 	bl	8003b0c <osMessageGet>
		if(valve_event.status == osEventMessage){
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b10      	cmp	r3, #16
 8001cee:	d114      	bne.n	8001d1a <Task5+0x4e>
			v_state = valve_event.value.v;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	61bb      	str	r3, [r7, #24]
			switch(v_state){
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d003      	beq.n	8001d02 <Task5+0x36>
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d004      	beq.n	8001d0a <Task5+0x3e>
 8001d00:	e007      	b.n	8001d12 <Task5+0x46>
			case 1:
				GPIOA->BSRR = (1 << 1) | (1 << 9) | (1 << 31);
 8001d02:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <Task5+0x90>)
 8001d04:	4a16      	ldr	r2, [pc, #88]	; (8001d60 <Task5+0x94>)
 8001d06:	611a      	str	r2, [r3, #16]
				break;
 8001d08:	e008      	b.n	8001d1c <Task5+0x50>
			case 2:
				GPIOA->BSRR = (1 << 17) | (1 << 25) | (1 << 15);
 8001d0a:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <Task5+0x90>)
 8001d0c:	4a15      	ldr	r2, [pc, #84]	; (8001d64 <Task5+0x98>)
 8001d0e:	611a      	str	r2, [r3, #16]
				break;
 8001d10:	e004      	b.n	8001d1c <Task5+0x50>
			default:
				GPIOA->BSRR = (1 << 17) | (1 << 25) | (1 << 31);
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <Task5+0x90>)
 8001d14:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <Task5+0x9c>)
 8001d16:	611a      	str	r2, [r3, #16]
				break;
 8001d18:	e000      	b.n	8001d1c <Task5+0x50>
			}
		}
 8001d1a:	bf00      	nop
		osMutexWait(mutexHandle, osWaitForever);
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <Task5+0xa0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295
 8001d24:	4618      	mov	r0, r3
 8001d26:	f001 fe05 	bl	8003934 <osMutexWait>
		//osTimerStart(timHandle2, 1000);
		osMutexRelease(mutexHandle);
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <Task5+0xa0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f001 fe4e 	bl	80039d0 <osMutexRelease>
		temp = osKernelSysTick() - (100 * counter++);
 8001d34:	f001 fcb5 	bl	80036a2 <osKernelSysTick>
 8001d38:	4601      	mov	r1, r0
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	61fa      	str	r2, [r7, #28]
 8001d40:	2264      	movs	r2, #100	; 0x64
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	1acb      	subs	r3, r1, r3
 8001d48:	617b      	str	r3, [r7, #20]
		osDelay(100 - temp);
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001d50:	4618      	mov	r0, r3
 8001d52:	f001 fd02 	bl	800375a <osDelay>
		valve_event = osMessageGet(valveQueueHandle, osWaitForever);
 8001d56:	e7bf      	b.n	8001cd8 <Task5+0xc>
 8001d58:	200008e4 	.word	0x200008e4
 8001d5c:	40010800 	.word	0x40010800
 8001d60:	80000202 	.word	0x80000202
 8001d64:	02028000 	.word	0x02028000
 8001d68:	82020000 	.word	0x82020000
 8001d6c:	200008d0 	.word	0x200008d0

08001d70 <Task6>:
	}
}

void Task6(void const * argument){
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	b08a      	sub	sp, #40	; 0x28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	uint32_t temp, counter = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
	float pressed_t;
	uint32_t freq;
	osStatus ret;
	for(;;)
	{
		if((TIM3->SR & TIM_SR_CC1IF)){
 8001d7c:	4b44      	ldr	r3, [pc, #272]	; (8001e90 <Task6+0x120>)
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d053      	beq.n	8001e30 <Task6+0xc0>
			event_val1 = USER_TIM3_Capture_Event();//	capture the 1st event
 8001d88:	f000 fa92 	bl	80022b0 <USER_TIM3_Capture_Event>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	83fb      	strh	r3, [r7, #30]
			TIM2->CCER ^=	TIM_CCER_CC1P;//		capture is done on different edge
 8001d90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d9a:	f083 0302 	eor.w	r3, r3, #2
 8001d9e:	6213      	str	r3, [r2, #32]
			event_val2 = USER_TIM3_Capture_Event();//	capture the 2nd event
 8001da0:	f000 fa86 	bl	80022b0 <USER_TIM3_Capture_Event>
 8001da4:	4603      	mov	r3, r0
 8001da6:	83bb      	strh	r3, [r7, #28]
			TIM2->CCER ^=	TIM_CCER_CC1P;//		capture is done on different edge
 8001da8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001db2:	f083 0302 	eor.w	r3, r3, #2
 8001db6:	6213      	str	r3, [r2, #32]
			event_diff = event_val2 - event_val1;//		2nd event - 1st event
 8001db8:	8bba      	ldrh	r2, [r7, #28]
 8001dba:	8bfb      	ldrh	r3, [r7, #30]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	837b      	strh	r3, [r7, #26]

			pressed_t = ( 1.0 / 64000000.0 ) * event_diff * (TIM3->PSC + 1);
 8001dc0:	8b7b      	ldrh	r3, [r7, #26]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fc40 	bl	8000648 <__aeabi_i2d>
 8001dc8:	a32f      	add	r3, pc, #188	; (adr r3, 8001e88 <Task6+0x118>)
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	f7fe f9bf 	bl	8000150 <__aeabi_dmul>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4614      	mov	r4, r2
 8001dd8:	461d      	mov	r5, r3
 8001dda:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <Task6+0x120>)
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dde:	3301      	adds	r3, #1
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fc21 	bl	8000628 <__aeabi_ui2d>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4620      	mov	r0, r4
 8001dec:	4629      	mov	r1, r5
 8001dee:	f7fe f9af 	bl	8000150 <__aeabi_dmul>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7fe fc8f 	bl	800071c <__aeabi_d2f>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	617b      	str	r3, [r7, #20]
			freq = (1/(pressed_t));
 8001e02:	6979      	ldr	r1, [r7, #20]
 8001e04:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001e08:	f7fe fe9a 	bl	8000b40 <__aeabi_fdiv>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe ff32 	bl	8000c78 <__aeabi_f2uiz>
 8001e14:	4603      	mov	r3, r0
 8001e16:	623b      	str	r3, [r7, #32]
			osMutexWait(mutexHandle, osWaitForever);
 8001e18:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <Task6+0x124>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	4618      	mov	r0, r3
 8001e22:	f001 fd87 	bl	8003934 <osMutexWait>
			//printf("Freq: %d\r\n", (uint16_t)freq);
			osMutexRelease(mutexHandle);
 8001e26:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <Task6+0x124>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f001 fdd0 	bl	80039d0 <osMutexRelease>
		}
		ret = osMessagePut(fQueueHandle, freq, 0);
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <Task6+0x128>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2200      	movs	r2, #0
 8001e36:	6a39      	ldr	r1, [r7, #32]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f001 fe27 	bl	8003a8c <osMessagePut>
 8001e3e:	6138      	str	r0, [r7, #16]
		if(ret != osOK ){
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <Task6+0xee>
		  osMutexWait(mutexHandle, osWaitForever);
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <Task6+0x124>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f001 fd70 	bl	8003934 <osMutexWait>
		  //printf("Error T6 (flow frequency): %d\r\n", ret);
		  osMutexRelease(mutexHandle);
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <Task6+0x124>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f001 fdb9 	bl	80039d0 <osMutexRelease>
		}
		temp = osKernelSysTick() - (100 * counter++);
 8001e5e:	f001 fc20 	bl	80036a2 <osKernelSysTick>
 8001e62:	4601      	mov	r1, r0
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	627a      	str	r2, [r7, #36]	; 0x24
 8001e6a:	2264      	movs	r2, #100	; 0x64
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	1acb      	subs	r3, r1, r3
 8001e72:	60fb      	str	r3, [r7, #12]
		osDelay(100 - temp);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f001 fc6d 	bl	800375a <osDelay>
		if((TIM3->SR & TIM_SR_CC1IF)){
 8001e80:	e77c      	b.n	8001d7c <Task6+0xc>
 8001e82:	bf00      	nop
 8001e84:	f3af 8000 	nop.w
 8001e88:	a0b5ed8d 	.word	0xa0b5ed8d
 8001e8c:	3e50c6f7 	.word	0x3e50c6f7
 8001e90:	40000400 	.word	0x40000400
 8001e94:	200008d0 	.word	0x200008d0
 8001e98:	200008e8 	.word	0x200008e8

08001e9c <USER_RCC_Init>:
	}
}

void USER_RCC_Init(void){
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
	//I/O port A clock enable
	RCC->APB2ENR	|=	 RCC_APB2ENR_IOPAEN
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <USER_RCC_Init+0x38>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <USER_RCC_Init+0x38>)
 8001ea6:	f443 7305 	orr.w	r3, r3, #532	; 0x214
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6193      	str	r3, [r2, #24]
					|	 RCC_APB2ENR_IOPCEN
  					|	 RCC_APB2ENR_ADC1EN//	ADC 1 clock enable
					|	 RCC_APB2ENR_AFIOEN;//          AFIO clock enable


	RCC->CFGR	|=	 RCC_CFGR_ADCPRE;//	ADC prescaler 1:8 for 8 MHz
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <USER_RCC_Init+0x38>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4a07      	ldr	r2, [pc, #28]	; (8001ed4 <USER_RCC_Init+0x38>)
 8001eb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eba:	6053      	str	r3, [r2, #4]


	RCC->APB1ENR	|=	 RCC_APB1ENR_TIM2EN//Timer 2 clock enable
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <USER_RCC_Init+0x38>)
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <USER_RCC_Init+0x38>)
 8001ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec6:	f043 0303 	orr.w	r3, r3, #3
 8001eca:	61d3      	str	r3, [r2, #28]
					|	 RCC_APB1ENR_TIM3EN//Timer 3 clock enable
					|	 RCC_APB1ENR_USART2EN;//  	USART2 clock enable

}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
	if( EXTI->PR & EXTI_PR_PR8 ){
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <EXTI9_5_IRQHandler+0x2c>)
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00b      	beq.n	8001f00 <EXTI9_5_IRQHandler+0x28>
		osSignalSet(taskHandle3, 1);
 8001ee8:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <EXTI9_5_IRQHandler+0x30>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 fc7c 	bl	80037ec <osSignalSet>
		EXTI->PR	|=	EXTI_PR_PR8;//		External Interrupt Flag cleared
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <EXTI9_5_IRQHandler+0x2c>)
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	4a02      	ldr	r2, [pc, #8]	; (8001f04 <EXTI9_5_IRQHandler+0x2c>)
 8001efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efe:	6153      	str	r3, [r2, #20]
	}
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40010400 	.word	0x40010400
 8001f08:	200008c0 	.word	0x200008c0

08001f0c <USER_GPIO_Init>:

void USER_GPIO_Init(void){
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0

	//PA0 (TIM2_CH1) as input floating
	GPIOA->CRL	&=	~GPIO_CRL_CNF0_1 & ~GPIO_CRL_MODE0; //Transmit timer
 8001f10:	4b7f      	ldr	r3, [pc, #508]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a7e      	ldr	r2, [pc, #504]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f16:	f023 030b 	bic.w	r3, r3, #11
 8001f1a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF0_0;
 8001f1c:	4b7c      	ldr	r3, [pc, #496]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a7b      	ldr	r2, [pc, #492]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	6013      	str	r3, [r2, #0]

	//PA8 (button) as input pull-up
	GPIOA->CRH &= ~GPIO_CRH_CNF8_0 & ~GPIO_CRH_MODE8;
 8001f28:	4b79      	ldr	r3, [pc, #484]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4a78      	ldr	r2, [pc, #480]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f2e:	f023 0307 	bic.w	r3, r3, #7
 8001f32:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF8_1;
 8001f34:	4b76      	ldr	r3, [pc, #472]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4a75      	ldr	r2, [pc, #468]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f3a:	f043 0308 	orr.w	r3, r3, #8
 8001f3e:	6053      	str	r3, [r2, #4]

	//pin PA2 (USART2_TX) as alternate function output push-pull, max speed 10MHz
	GPIOA->CRL	&=	~GPIO_CRL_CNF2_0 & ~GPIO_CRL_MODE2_1;
 8001f40:	4b73      	ldr	r3, [pc, #460]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a72      	ldr	r2, [pc, #456]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f4a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF2_1 | GPIO_CRL_MODE2_0;
 8001f4c:	4b70      	ldr	r3, [pc, #448]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a6f      	ldr	r2, [pc, #444]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f52:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
 8001f56:	6013      	str	r3, [r2, #0]

	//pin PA3 (USART2_RX) as input pull-up
	GPIOA->CRL	&=	~GPIO_CRL_CNF3_0 & ~GPIO_CRL_MODE3;
 8001f58:	4b6d      	ldr	r3, [pc, #436]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a6c      	ldr	r2, [pc, #432]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f62:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF3_1;
 8001f64:	4b6a      	ldr	r3, [pc, #424]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a69      	ldr	r2, [pc, #420]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f6e:	6013      	str	r3, [r2, #0]

	//PA4 (ADC12_IN4) as analog
	GPIOA->CRL	&=	~GPIO_CRL_CNF4 & ~GPIO_CRL_MODE4; //Pressure Sensor
 8001f70:	4b67      	ldr	r3, [pc, #412]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a66      	ldr	r2, [pc, #408]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f76:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001f7a:	6013      	str	r3, [r2, #0]

	//PA6 (TIM3_CH1) as input floating
	GPIOA->CRL	&=	~GPIO_CRL_CNF6_1 & ~GPIO_CRL_MODE6; //Flow Sensor
 8001f7c:	4b64      	ldr	r3, [pc, #400]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a63      	ldr	r2, [pc, #396]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f82:	f023 6330 	bic.w	r3, r3, #184549376	; 0xb000000
 8001f86:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF6_0;
 8001f88:	4b61      	ldr	r3, [pc, #388]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a60      	ldr	r2, [pc, #384]	; (8002110 <USER_GPIO_Init+0x204>)
 8001f8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f92:	6013      	str	r3, [r2, #0]

	//TECLADO MATRICIAL
	GPIOB->BSRR &= GPIO_BSRR_BR0 & GPIO_BSRR_BR1 & GPIO_BSRR_BR2 & GPIO_BSRR_BR3;
 8001f94:	4b5f      	ldr	r3, [pc, #380]	; (8002114 <USER_GPIO_Init+0x208>)
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	4b5e      	ldr	r3, [pc, #376]	; (8002114 <USER_GPIO_Init+0x208>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	611a      	str	r2, [r3, #16]
	//pins PB0-PB3 as output push-pull
	GPIOB->CRL &= ~GPIO_CRL_CNF0 & ~GPIO_CRL_MODE0_1;
 8001f9e:	4b5d      	ldr	r3, [pc, #372]	; (8002114 <USER_GPIO_Init+0x208>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a5c      	ldr	r2, [pc, #368]	; (8002114 <USER_GPIO_Init+0x208>)
 8001fa4:	f023 030e 	bic.w	r3, r3, #14
 8001fa8:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE0_0;
 8001faa:	4b5a      	ldr	r3, [pc, #360]	; (8002114 <USER_GPIO_Init+0x208>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a59      	ldr	r2, [pc, #356]	; (8002114 <USER_GPIO_Init+0x208>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~GPIO_CRL_CNF1 & ~GPIO_CRL_MODE1_1;
 8001fb6:	4b57      	ldr	r3, [pc, #348]	; (8002114 <USER_GPIO_Init+0x208>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a56      	ldr	r2, [pc, #344]	; (8002114 <USER_GPIO_Init+0x208>)
 8001fbc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8001fc0:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE1_0;
 8001fc2:	4b54      	ldr	r3, [pc, #336]	; (8002114 <USER_GPIO_Init+0x208>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a53      	ldr	r2, [pc, #332]	; (8002114 <USER_GPIO_Init+0x208>)
 8001fc8:	f043 0310 	orr.w	r3, r3, #16
 8001fcc:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~GPIO_CRL_CNF2 & ~GPIO_CRL_MODE2_1;
 8001fce:	4b51      	ldr	r3, [pc, #324]	; (8002114 <USER_GPIO_Init+0x208>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a50      	ldr	r2, [pc, #320]	; (8002114 <USER_GPIO_Init+0x208>)
 8001fd4:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8001fd8:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE2_0;
 8001fda:	4b4e      	ldr	r3, [pc, #312]	; (8002114 <USER_GPIO_Init+0x208>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a4d      	ldr	r2, [pc, #308]	; (8002114 <USER_GPIO_Init+0x208>)
 8001fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe4:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~GPIO_CRL_CNF3 & ~GPIO_CRL_MODE3_1;
 8001fe6:	4b4b      	ldr	r3, [pc, #300]	; (8002114 <USER_GPIO_Init+0x208>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a4a      	ldr	r2, [pc, #296]	; (8002114 <USER_GPIO_Init+0x208>)
 8001fec:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001ff0:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE3_0;
 8001ff2:	4b48      	ldr	r3, [pc, #288]	; (8002114 <USER_GPIO_Init+0x208>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a47      	ldr	r2, [pc, #284]	; (8002114 <USER_GPIO_Init+0x208>)
 8001ff8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ffc:	6013      	str	r3, [r2, #0]

	//pins PB4-PB7 as input pull-up
	GPIOB->CRL &= ~GPIO_CRL_CNF4_0 & ~GPIO_CRL_MODE4;
 8001ffe:	4b45      	ldr	r3, [pc, #276]	; (8002114 <USER_GPIO_Init+0x208>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a44      	ldr	r2, [pc, #272]	; (8002114 <USER_GPIO_Init+0x208>)
 8002004:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002008:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF4_1;
 800200a:	4b42      	ldr	r3, [pc, #264]	; (8002114 <USER_GPIO_Init+0x208>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a41      	ldr	r2, [pc, #260]	; (8002114 <USER_GPIO_Init+0x208>)
 8002010:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002014:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= GPIO_ODR_ODR4;
 8002016:	4b3f      	ldr	r3, [pc, #252]	; (8002114 <USER_GPIO_Init+0x208>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	4a3e      	ldr	r2, [pc, #248]	; (8002114 <USER_GPIO_Init+0x208>)
 800201c:	f043 0310 	orr.w	r3, r3, #16
 8002020:	60d3      	str	r3, [r2, #12]
	GPIOB->CRL &= ~GPIO_CRL_CNF5_0 & ~GPIO_CRL_MODE5;
 8002022:	4b3c      	ldr	r3, [pc, #240]	; (8002114 <USER_GPIO_Init+0x208>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a3b      	ldr	r2, [pc, #236]	; (8002114 <USER_GPIO_Init+0x208>)
 8002028:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800202c:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF5_1;
 800202e:	4b39      	ldr	r3, [pc, #228]	; (8002114 <USER_GPIO_Init+0x208>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a38      	ldr	r2, [pc, #224]	; (8002114 <USER_GPIO_Init+0x208>)
 8002034:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002038:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= GPIO_ODR_ODR5;
 800203a:	4b36      	ldr	r3, [pc, #216]	; (8002114 <USER_GPIO_Init+0x208>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	4a35      	ldr	r2, [pc, #212]	; (8002114 <USER_GPIO_Init+0x208>)
 8002040:	f043 0320 	orr.w	r3, r3, #32
 8002044:	60d3      	str	r3, [r2, #12]
	GPIOB->CRL &= ~GPIO_CRL_CNF6_0 & ~GPIO_CRL_MODE6;
 8002046:	4b33      	ldr	r3, [pc, #204]	; (8002114 <USER_GPIO_Init+0x208>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a32      	ldr	r2, [pc, #200]	; (8002114 <USER_GPIO_Init+0x208>)
 800204c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002050:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF6_1;
 8002052:	4b30      	ldr	r3, [pc, #192]	; (8002114 <USER_GPIO_Init+0x208>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a2f      	ldr	r2, [pc, #188]	; (8002114 <USER_GPIO_Init+0x208>)
 8002058:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800205c:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= GPIO_ODR_ODR6;
 800205e:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <USER_GPIO_Init+0x208>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	4a2c      	ldr	r2, [pc, #176]	; (8002114 <USER_GPIO_Init+0x208>)
 8002064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002068:	60d3      	str	r3, [r2, #12]
	GPIOB->CRL &= ~GPIO_CRL_CNF7_0 & ~GPIO_CRL_MODE7;
 800206a:	4b2a      	ldr	r3, [pc, #168]	; (8002114 <USER_GPIO_Init+0x208>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a29      	ldr	r2, [pc, #164]	; (8002114 <USER_GPIO_Init+0x208>)
 8002070:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8002074:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF7_1;
 8002076:	4b27      	ldr	r3, [pc, #156]	; (8002114 <USER_GPIO_Init+0x208>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a26      	ldr	r2, [pc, #152]	; (8002114 <USER_GPIO_Init+0x208>)
 800207c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002080:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= GPIO_ODR_ODR7;
 8002082:	4b24      	ldr	r3, [pc, #144]	; (8002114 <USER_GPIO_Init+0x208>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	4a23      	ldr	r2, [pc, #140]	; (8002114 <USER_GPIO_Init+0x208>)
 8002088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800208c:	60d3      	str	r3, [r2, #12]

	//pin PB10 (USART3_TX) as alternate function output push-pull, max speed 10MHz
	GPIOB->CRH	&=	~GPIO_CRH_CNF10_0 & ~GPIO_CRH_MODE10_1;
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <USER_GPIO_Init+0x208>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4a20      	ldr	r2, [pc, #128]	; (8002114 <USER_GPIO_Init+0x208>)
 8002094:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002098:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|=	 GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10_0; //UART TX
 800209a:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <USER_GPIO_Init+0x208>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <USER_GPIO_Init+0x208>)
 80020a0:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
 80020a4:	6053      	str	r3, [r2, #4]

	//pin PB11 (USART3_RX) as input pull-up
	GPIOB->CRH	&=	~GPIO_CRH_CNF11_0 & ~GPIO_CRH_MODE11; //UART RX
 80020a6:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <USER_GPIO_Init+0x208>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <USER_GPIO_Init+0x208>)
 80020ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020b0:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|=	 GPIO_CRH_CNF11_1;
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <USER_GPIO_Init+0x208>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4a17      	ldr	r2, [pc, #92]	; (8002114 <USER_GPIO_Init+0x208>)
 80020b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020bc:	6053      	str	r3, [r2, #4]

	//pin PA1 (Relay Pump) as output push-pull
	GPIOA->CRL &= ~GPIO_CRL_CNF1 & ~GPIO_CRL_MODE1_1;
 80020be:	4b14      	ldr	r3, [pc, #80]	; (8002110 <USER_GPIO_Init+0x204>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a13      	ldr	r2, [pc, #76]	; (8002110 <USER_GPIO_Init+0x204>)
 80020c4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80020c8:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE1_0;
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <USER_GPIO_Init+0x204>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a10      	ldr	r2, [pc, #64]	; (8002110 <USER_GPIO_Init+0x204>)
 80020d0:	f043 0310 	orr.w	r3, r3, #16
 80020d4:	6013      	str	r3, [r2, #0]

	//pin PA9 (Relay Valve In) as output push-pull
	GPIOA->CRH &= ~GPIO_CRH_CNF9 & ~GPIO_CRH_MODE9_1;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <USER_GPIO_Init+0x204>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4a0d      	ldr	r2, [pc, #52]	; (8002110 <USER_GPIO_Init+0x204>)
 80020dc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80020e0:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_MODE9_0;
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <USER_GPIO_Init+0x204>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <USER_GPIO_Init+0x204>)
 80020e8:	f043 0310 	orr.w	r3, r3, #16
 80020ec:	6053      	str	r3, [r2, #4]

	//pin PA15 (Relay Valve Out) as output push-pull
	GPIOA->CRH &= ~GPIO_CRH_CNF15 & ~GPIO_CRH_MODE15_1;
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <USER_GPIO_Init+0x204>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4a07      	ldr	r2, [pc, #28]	; (8002110 <USER_GPIO_Init+0x204>)
 80020f4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80020f8:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_MODE15_0;
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <USER_GPIO_Init+0x204>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4a04      	ldr	r2, [pc, #16]	; (8002110 <USER_GPIO_Init+0x204>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	6053      	str	r3, [r2, #4]
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40010800 	.word	0x40010800
 8002114:	40010c00 	.word	0x40010c00

08002118 <USER_EXTI_Init>:

void USER_EXTI_Init(void){
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	AFIO->EXTICR[3]	&=	~AFIO_EXTICR3_EXTI8;
 800211c:	4b10      	ldr	r3, [pc, #64]	; (8002160 <USER_EXTI_Init+0x48>)
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	4a0f      	ldr	r2, [pc, #60]	; (8002160 <USER_EXTI_Init+0x48>)
 8002122:	f023 030f 	bic.w	r3, r3, #15
 8002126:	6153      	str	r3, [r2, #20]
	EXTI->PR	|=	 EXTI_PR_PR8;
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <USER_EXTI_Init+0x4c>)
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	4a0d      	ldr	r2, [pc, #52]	; (8002164 <USER_EXTI_Init+0x4c>)
 800212e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002132:	6153      	str	r3, [r2, #20]
	EXTI->IMR	|=	 EXTI_IMR_MR8;
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <USER_EXTI_Init+0x4c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <USER_EXTI_Init+0x4c>)
 800213a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213e:	6013      	str	r3, [r2, #0]
	EXTI->FTSR	|=	 EXTI_FTSR_TR8;
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <USER_EXTI_Init+0x4c>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a07      	ldr	r2, [pc, #28]	; (8002164 <USER_EXTI_Init+0x4c>)
 8002146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214a:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(EXTI9_5_IRQn, 5);//    		The priority must be above level 5
 800214c:	2105      	movs	r1, #5
 800214e:	2017      	movs	r0, #23
 8002150:	f7fe ffda 	bl	8001108 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002154:	2017      	movs	r0, #23
 8002156:	f7fe ffbb 	bl	80010d0 <__NVIC_EnableIRQ>
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40010000 	.word	0x40010000
 8002164:	40010400 	.word	0x40010400

08002168 <USER_ADC_Init>:

void USER_ADC_Init(void){
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	ADC1->CR1	&=	~ADC_CR1_DUALMOD;//	independent mode
 800216c:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <USER_ADC_Init+0x70>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4a19      	ldr	r2, [pc, #100]	; (80021d8 <USER_ADC_Init+0x70>)
 8002172:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002176:	6053      	str	r3, [r2, #4]
	ADC1->CR2	&=	~ADC_CR2_ALIGN;//	right alignment for the result
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <USER_ADC_Init+0x70>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4a16      	ldr	r2, [pc, #88]	; (80021d8 <USER_ADC_Init+0x70>)
 800217e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002182:	6093      	str	r3, [r2, #8]
	ADC1->CR2	|=	 ADC_CR2_CONT;//	continuous conversion mode
 8002184:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <USER_ADC_Init+0x70>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4a13      	ldr	r2, [pc, #76]	; (80021d8 <USER_ADC_Init+0x70>)
 800218a:	f043 0302 	orr.w	r3, r3, #2
 800218e:	6093      	str	r3, [r2, #8]
	ADC1->SMPR2	&=	~ADC_SMPR2_SMP0;//	1.5 cycles channel sample time
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <USER_ADC_Init+0x70>)
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	4a10      	ldr	r2, [pc, #64]	; (80021d8 <USER_ADC_Init+0x70>)
 8002196:	f023 0307 	bic.w	r3, r3, #7
 800219a:	6113      	str	r3, [r2, #16]
	ADC1->SQR1	&=	~ADC_SQR1_L;//		1 conversion on regular channels
 800219c:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <USER_ADC_Init+0x70>)
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	4a0d      	ldr	r2, [pc, #52]	; (80021d8 <USER_ADC_Init+0x70>)
 80021a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80021a6:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR3 	&=	~ADC_SQR3_SQ1;//	first and only conversion in Ch0
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <USER_ADC_Init+0x70>)
 80021aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ac:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <USER_ADC_Init+0x70>)
 80021ae:	f023 031f 	bic.w	r3, r3, #31
 80021b2:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3	|=	ADC_SQR3_SQ1_2;
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <USER_ADC_Init+0x70>)
 80021b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b8:	4a07      	ldr	r2, [pc, #28]	; (80021d8 <USER_ADC_Init+0x70>)
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->CR2	|=	 ADC_CR2_ADON;//	ADC enabled
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <USER_ADC_Init+0x70>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <USER_ADC_Init+0x70>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6093      	str	r3, [r2, #8]
	HAL_Delay(1);//					tstab(1us) after ADC enabled, real 1ms
 80021cc:	2001      	movs	r0, #1
 80021ce:	f000 fabf 	bl	8002750 <HAL_Delay>
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40012400 	.word	0x40012400

080021dc <USER_ADC_Calibration>:
void USER_ADC_Calibration(void){
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
	ADC1->CR2	|=	 ADC_CR2_CAL;//		start calibration
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <USER_ADC_Calibration+0x28>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a07      	ldr	r2, [pc, #28]	; (8002204 <USER_ADC_Calibration+0x28>)
 80021e6:	f043 0304 	orr.w	r3, r3, #4
 80021ea:	6093      	str	r3, [r2, #8]
	while( ADC1->CR2 & ADC_CR2_CAL );//		wait until calibration is done
 80021ec:	bf00      	nop
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <USER_ADC_Calibration+0x28>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f9      	bne.n	80021ee <USER_ADC_Calibration+0x12>
}
 80021fa:	bf00      	nop
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	40012400 	.word	0x40012400

08002208 <USER_ADC_Read>:
uint16_t USER_ADC_Read( void ){
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
	while( !( ADC1->SR & ADC_SR_EOC ) );//		wait until conversion is done
 800220c:	bf00      	nop
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <USER_ADC_Read+0x20>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f9      	beq.n	800220e <USER_ADC_Read+0x6>
	return (uint16_t)ADC1->DR;//			return ADC data
 800221a:	4b03      	ldr	r3, [pc, #12]	; (8002228 <USER_ADC_Read+0x20>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	b29b      	uxth	r3, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	40012400 	.word	0x40012400

0800222c <USER_TIM3_Capture_Init>:
uint16_t USER_TIM2_Capture_Event(void){
	while( !(TIM2->SR & TIM_SR_CC1IF) );//		wait until a capture occurs
	return TIM2->CCR1;//				return the captured value
}

void USER_TIM3_Capture_Init(void){
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
	TIM3->CR1	&=	~TIM_CR1_CKD_0;
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <USER_TIM3_Capture_Init+0x80>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a1d      	ldr	r2, [pc, #116]	; (80022ac <USER_TIM3_Capture_Init+0x80>)
 8002236:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800223a:	6013      	str	r3, [r2, #0]
	TIM3->CR1	|=	 TIM_CR1_CKD_1;//	sampling (DTS) = TIM_CLK/4
 800223c:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <USER_TIM3_Capture_Init+0x80>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a1a      	ldr	r2, [pc, #104]	; (80022ac <USER_TIM3_Capture_Init+0x80>)
 8002242:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002246:	6013      	str	r3, [r2, #0]
	TIM3->CCMR1 	&=	~TIM_CCMR1_CC1S_1;
 8002248:	4b18      	ldr	r3, [pc, #96]	; (80022ac <USER_TIM3_Capture_Init+0x80>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	4a17      	ldr	r2, [pc, #92]	; (80022ac <USER_TIM3_Capture_Init+0x80>)
 800224e:	f023 0302 	bic.w	r3, r3, #2
 8002252:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 	|=	 TIM_CCMR1_CC1S_0;//	CC1 channel as input, mapped on TI1
 8002254:	4b15      	ldr	r3, [pc, #84]	; (80022ac <USER_TIM3_Capture_Init+0x80>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	4a14      	ldr	r2, [pc, #80]	; (80022ac <USER_TIM3_Capture_Init+0x80>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 	|=	 TIM_CCMR1_IC1F;//	filter -> DTS/32, N=8
 8002260:	4b12      	ldr	r3, [pc, #72]	; (80022ac <USER_TIM3_Capture_Init+0x80>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	4a11      	ldr	r2, [pc, #68]	; (80022ac <USER_TIM3_Capture_Init+0x80>)
 8002266:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800226a:	6193      	str	r3, [r2, #24]
	TIM3->CCER	|=	 TIM_CCER_CC1P;//	capture is done on falling edge
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <USER_TIM3_Capture_Init+0x80>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <USER_TIM3_Capture_Init+0x80>)
 8002272:	f043 0302 	orr.w	r3, r3, #2
 8002276:	6213      	str	r3, [r2, #32]
	TIM3->CCMR1 	&=	~TIM_CCMR1_IC1PSC;//	no prescaler
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <USER_TIM3_Capture_Init+0x80>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <USER_TIM3_Capture_Init+0x80>)
 800227e:	f023 030c 	bic.w	r3, r3, #12
 8002282:	6193      	str	r3, [r2, #24]
	TIM3->CCER	|=	 TIM_CCER_CC1E;//	capture enabled
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <USER_TIM3_Capture_Init+0x80>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4a08      	ldr	r2, [pc, #32]	; (80022ac <USER_TIM3_Capture_Init+0x80>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6213      	str	r3, [r2, #32]
	TIM3->PSC	 =	 97;//		maximum prescaler
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <USER_TIM3_Capture_Init+0x80>)
 8002292:	2261      	movs	r2, #97	; 0x61
 8002294:	629a      	str	r2, [r3, #40]	; 0x28

	TIM3->CR1	|=	 TIM_CR1_CEN;//		counter enabled
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <USER_TIM3_Capture_Init+0x80>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a04      	ldr	r2, [pc, #16]	; (80022ac <USER_TIM3_Capture_Init+0x80>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6013      	str	r3, [r2, #0]
}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40000400 	.word	0x40000400

080022b0 <USER_TIM3_Capture_Event>:

uint16_t USER_TIM3_Capture_Event(void){
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
	while( !(TIM3->SR & TIM_SR_CC1IF) );//		wait until a capture occurs
 80022b4:	bf00      	nop
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <USER_TIM3_Capture_Event+0x20>)
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f9      	beq.n	80022b6 <USER_TIM3_Capture_Event+0x6>
	return TIM3->CCR1;//				return the captured value
 80022c2:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <USER_TIM3_Capture_Event+0x20>)
 80022c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c6:	b29b      	uxth	r3, r3
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	40000400 	.word	0x40000400

080022d4 <USER_USART2_Init>:

void USER_USART2_Init(void){
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
	USART2->CR1	|=	 USART_CR1_UE;//		USART enabled
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <USER_USART2_Init+0x50>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a11      	ldr	r2, [pc, #68]	; (8002324 <USER_USART2_Init+0x50>)
 80022de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022e2:	60d3      	str	r3, [r2, #12]
	USART2->CR1	&=	~USART_CR1_M//		  	1 start bit, 8 data bits
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <USER_USART2_Init+0x50>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <USER_USART2_Init+0x50>)
 80022ea:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 80022ee:	60d3      	str	r3, [r2, #12]
			&	~USART_CR1_PCE;//		parity control disabled
	USART2->CR2	&=	~USART_CR2_STOP;//  		1 stop bit
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <USER_USART2_Init+0x50>)
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	4a0b      	ldr	r2, [pc, #44]	; (8002324 <USER_USART2_Init+0x50>)
 80022f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022fa:	6113      	str	r3, [r2, #16]
	USART2->BRR	 =	 0xD05;//			9600 bps -> 208.33,
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <USER_USART2_Init+0x50>)
 80022fe:	f640 5205 	movw	r2, #3333	; 0xd05
 8002302:	609a      	str	r2, [r3, #8]
	//USARTDIV = 32*10^6/(16*9600)
	//NEW USARTDIV = 32*10^6/(16*115200)=17.361
	//BRR = [17->HEX=11][.361*16->HEX=6]=116
	//`->BRR = 0x116;

	USART2->CR1	|=	 USART_CR1_TE;//		        transmitter enabled
 8002304:	4b07      	ldr	r3, [pc, #28]	; (8002324 <USER_USART2_Init+0x50>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4a06      	ldr	r2, [pc, #24]	; (8002324 <USER_USART2_Init+0x50>)
 800230a:	f043 0308 	orr.w	r3, r3, #8
 800230e:	60d3      	str	r3, [r2, #12]
	USART2->CR1	|=	 USART_CR1_RE;//		        receiver enabled
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <USER_USART2_Init+0x50>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a03      	ldr	r2, [pc, #12]	; (8002324 <USER_USART2_Init+0x50>)
 8002316:	f043 0304 	orr.w	r3, r3, #4
 800231a:	60d3      	str	r3, [r2, #12]
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	40004400 	.word	0x40004400

08002328 <Timer_Callback1>:
uint32_t USER_USART2_Receive(void){
	while((USART2->SR & USART_SR_RXNE) == 0){}
	return USART2->DR;
}

void Timer_Callback1(void const * argument){
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	vars[0]-=1;
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <Timer_Callback1+0x1c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	3b01      	subs	r3, #1
 8002336:	4a03      	ldr	r2, [pc, #12]	; (8002344 <Timer_Callback1+0x1c>)
 8002338:	6013      	str	r3, [r2, #0]
	//printf("T4\r\n");
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	20000034 	.word	0x20000034

08002348 <Timer_Callback2>:

void Timer_Callback2(void const * argument){
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	printf("T5\r\n");
 8002350:	4803      	ldr	r0, [pc, #12]	; (8002360 <Timer_Callback2+0x18>)
 8002352:	f005 f8b1 	bl	80074b8 <puts>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	0800830c 	.word	0x0800830c

08002364 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a04      	ldr	r2, [pc, #16]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d101      	bne.n	800237a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002376:	f000 f9cf 	bl	8002718 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40000800 	.word	0x40000800

08002388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <_write>:
 */

#include "myprintf.h"
#include "main.h"

int _write(int file, char *ptr, int len){
 8002394:	b480      	push	{r7}
 8002396:	b087      	sub	sp, #28
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++){
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	e00f      	b.n	80023c6 <_write+0x32>
		while( ( USART2->SR & USART_SR_TXE ) == 0 ){}
 80023a6:	bf00      	nop
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <_write+0x48>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f9      	beq.n	80023a8 <_write+0x14>
		USART2->DR = *ptr++;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	60ba      	str	r2, [r7, #8]
 80023ba:	781a      	ldrb	r2, [r3, #0]
 80023bc:	4b07      	ldr	r3, [pc, #28]	; (80023dc <_write+0x48>)
 80023be:	605a      	str	r2, [r3, #4]
	for(DataIdx=0; DataIdx<len; DataIdx++){
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	3301      	adds	r3, #1
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	dbeb      	blt.n	80023a6 <_write+0x12>
	}
	return len;
 80023ce:	687b      	ldr	r3, [r7, #4]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40004400 	.word	0x40004400

080023e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <HAL_MspInit+0x68>)
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	4a17      	ldr	r2, [pc, #92]	; (8002448 <HAL_MspInit+0x68>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6193      	str	r3, [r2, #24]
 80023f2:	4b15      	ldr	r3, [pc, #84]	; (8002448 <HAL_MspInit+0x68>)
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	4b12      	ldr	r3, [pc, #72]	; (8002448 <HAL_MspInit+0x68>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	4a11      	ldr	r2, [pc, #68]	; (8002448 <HAL_MspInit+0x68>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002408:	61d3      	str	r3, [r2, #28]
 800240a:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <HAL_MspInit+0x68>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	210f      	movs	r1, #15
 800241a:	f06f 0001 	mvn.w	r0, #1
 800241e:	f000 fa70 	bl	8002902 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_MspInit+0x6c>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	4a04      	ldr	r2, [pc, #16]	; (800244c <HAL_MspInit+0x6c>)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000
 800244c:	40010000 	.word	0x40010000

08002450 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08e      	sub	sp, #56	; 0x38
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002466:	4b34      	ldr	r3, [pc, #208]	; (8002538 <HAL_InitTick+0xe8>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	4a33      	ldr	r2, [pc, #204]	; (8002538 <HAL_InitTick+0xe8>)
 800246c:	f043 0304 	orr.w	r3, r3, #4
 8002470:	61d3      	str	r3, [r2, #28]
 8002472:	4b31      	ldr	r3, [pc, #196]	; (8002538 <HAL_InitTick+0xe8>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800247e:	f107 0210 	add.w	r2, r7, #16
 8002482:	f107 0314 	add.w	r3, r7, #20
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fe43 	bl	8003114 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002494:	2b00      	cmp	r3, #0
 8002496:	d103      	bne.n	80024a0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002498:	f000 fe28 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 800249c:	6378      	str	r0, [r7, #52]	; 0x34
 800249e:	e004      	b.n	80024aa <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80024a0:	f000 fe24 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 80024a4:	4603      	mov	r3, r0
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ac:	4a23      	ldr	r2, [pc, #140]	; (800253c <HAL_InitTick+0xec>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	0c9b      	lsrs	r3, r3, #18
 80024b4:	3b01      	subs	r3, #1
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <HAL_InitTick+0xf0>)
 80024ba:	4a22      	ldr	r2, [pc, #136]	; (8002544 <HAL_InitTick+0xf4>)
 80024bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <HAL_InitTick+0xf0>)
 80024c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024c4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80024c6:	4a1e      	ldr	r2, [pc, #120]	; (8002540 <HAL_InitTick+0xf0>)
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80024cc:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <HAL_InitTick+0xf0>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d2:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_InitTick+0xf0>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_InitTick+0xf0>)
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80024de:	4818      	ldr	r0, [pc, #96]	; (8002540 <HAL_InitTick+0xf0>)
 80024e0:	f000 fe66 	bl	80031b0 <HAL_TIM_Base_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80024ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d11b      	bne.n	800252a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80024f2:	4813      	ldr	r0, [pc, #76]	; (8002540 <HAL_InitTick+0xf0>)
 80024f4:	f000 feb4 	bl	8003260 <HAL_TIM_Base_Start_IT>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80024fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002502:	2b00      	cmp	r3, #0
 8002504:	d111      	bne.n	800252a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002506:	201e      	movs	r0, #30
 8002508:	f000 fa17 	bl	800293a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b0f      	cmp	r3, #15
 8002510:	d808      	bhi.n	8002524 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002512:	2200      	movs	r2, #0
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	201e      	movs	r0, #30
 8002518:	f000 f9f3 	bl	8002902 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800251c:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <HAL_InitTick+0xf8>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e002      	b.n	800252a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800252a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800252e:	4618      	mov	r0, r3
 8002530:	3738      	adds	r7, #56	; 0x38
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	431bde83 	.word	0x431bde83
 8002540:	200008f0 	.word	0x200008f0
 8002544:	40000800 	.word	0x40000800
 8002548:	200000a0 	.word	0x200000a0

0800254c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <NMI_Handler+0x4>

08002552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002556:	e7fe      	b.n	8002556 <HardFault_Handler+0x4>

08002558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800255c:	e7fe      	b.n	800255c <MemManage_Handler+0x4>

0800255e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002562:	e7fe      	b.n	8002562 <BusFault_Handler+0x4>

08002564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002568:	e7fe      	b.n	8002568 <UsageFault_Handler+0x4>

0800256a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
	...

08002578 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <TIM4_IRQHandler+0x10>)
 800257e:	f000 fec1 	bl	8003304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200008f0 	.word	0x200008f0

0800258c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	e00a      	b.n	80025b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800259e:	f3af 8000 	nop.w
 80025a2:	4601      	mov	r1, r0
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	60ba      	str	r2, [r7, #8]
 80025aa:	b2ca      	uxtb	r2, r1
 80025ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3301      	adds	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	dbf0      	blt.n	800259e <_read+0x12>
  }

  return len;
 80025bc:	687b      	ldr	r3, [r7, #4]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ec:	605a      	str	r2, [r3, #4]
  return 0;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr

080025fa <_isatty>:

int _isatty(int file)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002602:	2301      	movs	r3, #1
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800260e:	b480      	push	{r7}
 8002610:	b085      	sub	sp, #20
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
	...

08002628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002630:	4a14      	ldr	r2, [pc, #80]	; (8002684 <_sbrk+0x5c>)
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <_sbrk+0x60>)
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <_sbrk+0x64>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <_sbrk+0x64>)
 8002646:	4a12      	ldr	r2, [pc, #72]	; (8002690 <_sbrk+0x68>)
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	429a      	cmp	r2, r3
 8002656:	d207      	bcs.n	8002668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002658:	f004 fcda 	bl	8007010 <__errno>
 800265c:	4603      	mov	r3, r0
 800265e:	220c      	movs	r2, #12
 8002660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	e009      	b.n	800267c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <_sbrk+0x64>)
 8002678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20005000 	.word	0x20005000
 8002688:	00000400 	.word	0x00000400
 800268c:	20000938 	.word	0x20000938
 8002690:	200023d8 	.word	0x200023d8

08002694 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026a0:	f7ff fff8 	bl	8002694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a4:	480b      	ldr	r0, [pc, #44]	; (80026d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026a6:	490c      	ldr	r1, [pc, #48]	; (80026d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80026a8:	4a0c      	ldr	r2, [pc, #48]	; (80026dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80026aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ac:	e002      	b.n	80026b4 <LoopCopyDataInit>

080026ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b2:	3304      	adds	r3, #4

080026b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b8:	d3f9      	bcc.n	80026ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ba:	4a09      	ldr	r2, [pc, #36]	; (80026e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80026bc:	4c09      	ldr	r4, [pc, #36]	; (80026e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c0:	e001      	b.n	80026c6 <LoopFillZerobss>

080026c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c4:	3204      	adds	r2, #4

080026c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c8:	d3fb      	bcc.n	80026c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ca:	f004 fd9d 	bl	8007208 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ce:	f7fe fd45 	bl	800115c <main>
  bx lr
 80026d2:	4770      	bx	lr
  ldr r0, =_sdata
 80026d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026d8:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80026dc:	08008438 	.word	0x08008438
  ldr r2, =_sbss
 80026e0:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80026e4:	200023d8 	.word	0x200023d8

080026e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026e8:	e7fe      	b.n	80026e8 <ADC1_2_IRQHandler>
	...

080026ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <HAL_Init+0x28>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a07      	ldr	r2, [pc, #28]	; (8002714 <HAL_Init+0x28>)
 80026f6:	f043 0310 	orr.w	r3, r3, #16
 80026fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026fc:	2003      	movs	r0, #3
 80026fe:	f000 f8f5 	bl	80028ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002702:	200f      	movs	r0, #15
 8002704:	f7ff fea4 	bl	8002450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002708:	f7ff fe6a 	bl	80023e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40022000 	.word	0x40022000

08002718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_IncTick+0x1c>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_IncTick+0x20>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4413      	add	r3, r2
 8002728:	4a03      	ldr	r2, [pc, #12]	; (8002738 <HAL_IncTick+0x20>)
 800272a:	6013      	str	r3, [r2, #0]
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	200000a4 	.word	0x200000a4
 8002738:	2000093c 	.word	0x2000093c

0800273c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return uwTick;
 8002740:	4b02      	ldr	r3, [pc, #8]	; (800274c <HAL_GetTick+0x10>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	2000093c 	.word	0x2000093c

08002750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff fff0 	bl	800273c <HAL_GetTick>
 800275c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d005      	beq.n	8002776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800276a:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <HAL_Delay+0x44>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4413      	add	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002776:	bf00      	nop
 8002778:	f7ff ffe0 	bl	800273c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	429a      	cmp	r2, r3
 8002786:	d8f7      	bhi.n	8002778 <HAL_Delay+0x28>
  {
  }
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	200000a4 	.word	0x200000a4

08002798 <__NVIC_SetPriorityGrouping>:
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b4:	4013      	ands	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ca:	4a04      	ldr	r2, [pc, #16]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	60d3      	str	r3, [r2, #12]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_GetPriorityGrouping>:
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <__NVIC_GetPriorityGrouping+0x18>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	f003 0307 	and.w	r3, r3, #7
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_EnableIRQ>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	2b00      	cmp	r3, #0
 800280c:	db0b      	blt.n	8002826 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	4906      	ldr	r1, [pc, #24]	; (8002830 <__NVIC_EnableIRQ+0x34>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2001      	movs	r0, #1
 800281e:	fa00 f202 	lsl.w	r2, r0, r2
 8002822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	e000e100 	.word	0xe000e100

08002834 <__NVIC_SetPriority>:
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	6039      	str	r1, [r7, #0]
 800283e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002844:	2b00      	cmp	r3, #0
 8002846:	db0a      	blt.n	800285e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	b2da      	uxtb	r2, r3
 800284c:	490c      	ldr	r1, [pc, #48]	; (8002880 <__NVIC_SetPriority+0x4c>)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	0112      	lsls	r2, r2, #4
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	440b      	add	r3, r1
 8002858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800285c:	e00a      	b.n	8002874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4908      	ldr	r1, [pc, #32]	; (8002884 <__NVIC_SetPriority+0x50>)
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	3b04      	subs	r3, #4
 800286c:	0112      	lsls	r2, r2, #4
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	440b      	add	r3, r1
 8002872:	761a      	strb	r2, [r3, #24]
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000e100 	.word	0xe000e100
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002888:	b480      	push	{r7}
 800288a:	b089      	sub	sp, #36	; 0x24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f1c3 0307 	rsb	r3, r3, #7
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	bf28      	it	cs
 80028a6:	2304      	movcs	r3, #4
 80028a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3304      	adds	r3, #4
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d902      	bls.n	80028b8 <NVIC_EncodePriority+0x30>
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3b03      	subs	r3, #3
 80028b6:	e000      	b.n	80028ba <NVIC_EncodePriority+0x32>
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028bc:	f04f 32ff 	mov.w	r2, #4294967295
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43da      	mvns	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	401a      	ands	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d0:	f04f 31ff 	mov.w	r1, #4294967295
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	fa01 f303 	lsl.w	r3, r1, r3
 80028da:	43d9      	mvns	r1, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e0:	4313      	orrs	r3, r2
         );
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3724      	adds	r7, #36	; 0x24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ff4f 	bl	8002798 <__NVIC_SetPriorityGrouping>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	4603      	mov	r3, r0
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002914:	f7ff ff64 	bl	80027e0 <__NVIC_GetPriorityGrouping>
 8002918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68b9      	ldr	r1, [r7, #8]
 800291e:	6978      	ldr	r0, [r7, #20]
 8002920:	f7ff ffb2 	bl	8002888 <NVIC_EncodePriority>
 8002924:	4602      	mov	r2, r0
 8002926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ff81 	bl	8002834 <__NVIC_SetPriority>
}
 8002932:	bf00      	nop
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	4603      	mov	r3, r0
 8002942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff ff57 	bl	80027fc <__NVIC_EnableIRQ>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e272      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8087 	beq.w	8002a86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002978:	4b92      	ldr	r3, [pc, #584]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	2b04      	cmp	r3, #4
 8002982:	d00c      	beq.n	800299e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002984:	4b8f      	ldr	r3, [pc, #572]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	2b08      	cmp	r3, #8
 800298e:	d112      	bne.n	80029b6 <HAL_RCC_OscConfig+0x5e>
 8002990:	4b8c      	ldr	r3, [pc, #560]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299c:	d10b      	bne.n	80029b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299e:	4b89      	ldr	r3, [pc, #548]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d06c      	beq.n	8002a84 <HAL_RCC_OscConfig+0x12c>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d168      	bne.n	8002a84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e24c      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x76>
 80029c0:	4b80      	ldr	r3, [pc, #512]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a7f      	ldr	r2, [pc, #508]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 80029c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	e02e      	b.n	8002a2c <HAL_RCC_OscConfig+0xd4>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x98>
 80029d6:	4b7b      	ldr	r3, [pc, #492]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a7a      	ldr	r2, [pc, #488]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b78      	ldr	r3, [pc, #480]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a77      	ldr	r2, [pc, #476]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e01d      	b.n	8002a2c <HAL_RCC_OscConfig+0xd4>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0xbc>
 80029fa:	4b72      	ldr	r3, [pc, #456]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a71      	ldr	r2, [pc, #452]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b6f      	ldr	r3, [pc, #444]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a6e      	ldr	r2, [pc, #440]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e00b      	b.n	8002a2c <HAL_RCC_OscConfig+0xd4>
 8002a14:	4b6b      	ldr	r3, [pc, #428]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a6a      	ldr	r2, [pc, #424]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b68      	ldr	r3, [pc, #416]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a67      	ldr	r2, [pc, #412]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d013      	beq.n	8002a5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7ff fe82 	bl	800273c <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7ff fe7e 	bl	800273c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e200      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	4b5d      	ldr	r3, [pc, #372]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0xe4>
 8002a5a:	e014      	b.n	8002a86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7ff fe6e 	bl	800273c <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a64:	f7ff fe6a 	bl	800273c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e1ec      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a76:	4b53      	ldr	r3, [pc, #332]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x10c>
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d063      	beq.n	8002b5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a92:	4b4c      	ldr	r3, [pc, #304]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00b      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a9e:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d11c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x18c>
 8002aaa:	4b46      	ldr	r3, [pc, #280]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d116      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab6:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_RCC_OscConfig+0x176>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d001      	beq.n	8002ace <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e1c0      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ace:	4b3d      	ldr	r3, [pc, #244]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4939      	ldr	r1, [pc, #228]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae2:	e03a      	b.n	8002b5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d020      	beq.n	8002b2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aec:	4b36      	ldr	r3, [pc, #216]	; (8002bc8 <HAL_RCC_OscConfig+0x270>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af2:	f7ff fe23 	bl	800273c <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002afa:	f7ff fe1f 	bl	800273c <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e1a1      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0c:	4b2d      	ldr	r3, [pc, #180]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b18:	4b2a      	ldr	r3, [pc, #168]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4927      	ldr	r1, [pc, #156]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	600b      	str	r3, [r1, #0]
 8002b2c:	e015      	b.n	8002b5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2e:	4b26      	ldr	r3, [pc, #152]	; (8002bc8 <HAL_RCC_OscConfig+0x270>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7ff fe02 	bl	800273c <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3c:	f7ff fdfe 	bl	800273c <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e180      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4e:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d03a      	beq.n	8002bdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d019      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b6e:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b74:	f7ff fde2 	bl	800273c <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b7c:	f7ff fdde 	bl	800273c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e160      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b9a:	2001      	movs	r0, #1
 8002b9c:	f000 faea 	bl	8003174 <RCC_Delay>
 8002ba0:	e01c      	b.n	8002bdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba8:	f7ff fdc8 	bl	800273c <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bae:	e00f      	b.n	8002bd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb0:	f7ff fdc4 	bl	800273c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d908      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e146      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	42420000 	.word	0x42420000
 8002bcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd0:	4b92      	ldr	r3, [pc, #584]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1e9      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80a6 	beq.w	8002d36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bea:	2300      	movs	r3, #0
 8002bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bee:	4b8b      	ldr	r3, [pc, #556]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10d      	bne.n	8002c16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfa:	4b88      	ldr	r3, [pc, #544]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	4a87      	ldr	r2, [pc, #540]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c04:	61d3      	str	r3, [r2, #28]
 8002c06:	4b85      	ldr	r3, [pc, #532]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c12:	2301      	movs	r3, #1
 8002c14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c16:	4b82      	ldr	r3, [pc, #520]	; (8002e20 <HAL_RCC_OscConfig+0x4c8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d118      	bne.n	8002c54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c22:	4b7f      	ldr	r3, [pc, #508]	; (8002e20 <HAL_RCC_OscConfig+0x4c8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a7e      	ldr	r2, [pc, #504]	; (8002e20 <HAL_RCC_OscConfig+0x4c8>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2e:	f7ff fd85 	bl	800273c <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c36:	f7ff fd81 	bl	800273c <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b64      	cmp	r3, #100	; 0x64
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e103      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c48:	4b75      	ldr	r3, [pc, #468]	; (8002e20 <HAL_RCC_OscConfig+0x4c8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d106      	bne.n	8002c6a <HAL_RCC_OscConfig+0x312>
 8002c5c:	4b6f      	ldr	r3, [pc, #444]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	4a6e      	ldr	r2, [pc, #440]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	6213      	str	r3, [r2, #32]
 8002c68:	e02d      	b.n	8002cc6 <HAL_RCC_OscConfig+0x36e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x334>
 8002c72:	4b6a      	ldr	r3, [pc, #424]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	4a69      	ldr	r2, [pc, #420]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	6213      	str	r3, [r2, #32]
 8002c7e:	4b67      	ldr	r3, [pc, #412]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	4a66      	ldr	r2, [pc, #408]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	f023 0304 	bic.w	r3, r3, #4
 8002c88:	6213      	str	r3, [r2, #32]
 8002c8a:	e01c      	b.n	8002cc6 <HAL_RCC_OscConfig+0x36e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2b05      	cmp	r3, #5
 8002c92:	d10c      	bne.n	8002cae <HAL_RCC_OscConfig+0x356>
 8002c94:	4b61      	ldr	r3, [pc, #388]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	4a60      	ldr	r2, [pc, #384]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	f043 0304 	orr.w	r3, r3, #4
 8002c9e:	6213      	str	r3, [r2, #32]
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	4a5d      	ldr	r2, [pc, #372]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	6213      	str	r3, [r2, #32]
 8002cac:	e00b      	b.n	8002cc6 <HAL_RCC_OscConfig+0x36e>
 8002cae:	4b5b      	ldr	r3, [pc, #364]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	4a5a      	ldr	r2, [pc, #360]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	6213      	str	r3, [r2, #32]
 8002cba:	4b58      	ldr	r3, [pc, #352]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	4a57      	ldr	r2, [pc, #348]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	f023 0304 	bic.w	r3, r3, #4
 8002cc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d015      	beq.n	8002cfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cce:	f7ff fd35 	bl	800273c <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd4:	e00a      	b.n	8002cec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd6:	f7ff fd31 	bl	800273c <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e0b1      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cec:	4b4b      	ldr	r3, [pc, #300]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0ee      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x37e>
 8002cf8:	e014      	b.n	8002d24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfa:	f7ff fd1f 	bl	800273c <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d00:	e00a      	b.n	8002d18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d02:	f7ff fd1b 	bl	800273c <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e09b      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d18:	4b40      	ldr	r3, [pc, #256]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1ee      	bne.n	8002d02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d105      	bne.n	8002d36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2a:	4b3c      	ldr	r3, [pc, #240]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	4a3b      	ldr	r2, [pc, #236]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 8087 	beq.w	8002e4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d40:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d061      	beq.n	8002e10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d146      	bne.n	8002de2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d54:	4b33      	ldr	r3, [pc, #204]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5a:	f7ff fcef 	bl	800273c <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d62:	f7ff fceb 	bl	800273c <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e06d      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d74:	4b29      	ldr	r3, [pc, #164]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f0      	bne.n	8002d62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d88:	d108      	bne.n	8002d9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d8a:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	4921      	ldr	r1, [pc, #132]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d9c:	4b1f      	ldr	r3, [pc, #124]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a19      	ldr	r1, [r3, #32]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	430b      	orrs	r3, r1
 8002dae:	491b      	ldr	r1, [pc, #108]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db4:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dba:	f7ff fcbf 	bl	800273c <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc2:	f7ff fcbb 	bl	800273c <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e03d      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x46a>
 8002de0:	e035      	b.n	8002e4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <HAL_RCC_OscConfig+0x4cc>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7ff fca8 	bl	800273c <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df0:	f7ff fca4 	bl	800273c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e026      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x498>
 8002e0e:	e01e      	b.n	8002e4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e019      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40007000 	.word	0x40007000
 8002e24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_RCC_OscConfig+0x500>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d106      	bne.n	8002e4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d001      	beq.n	8002e4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000

08002e5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0d0      	b.n	8003012 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e70:	4b6a      	ldr	r3, [pc, #424]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d910      	bls.n	8002ea0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7e:	4b67      	ldr	r3, [pc, #412]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 0207 	bic.w	r2, r3, #7
 8002e86:	4965      	ldr	r1, [pc, #404]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b63      	ldr	r3, [pc, #396]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0b8      	b.n	8003012 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d020      	beq.n	8002eee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb8:	4b59      	ldr	r3, [pc, #356]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4a58      	ldr	r2, [pc, #352]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ec2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed0:	4b53      	ldr	r3, [pc, #332]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4a52      	ldr	r2, [pc, #328]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002eda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002edc:	4b50      	ldr	r3, [pc, #320]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	494d      	ldr	r1, [pc, #308]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d040      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d107      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f02:	4b47      	ldr	r3, [pc, #284]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d115      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e07f      	b.n	8003012 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d107      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1a:	4b41      	ldr	r3, [pc, #260]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e073      	b.n	8003012 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2a:	4b3d      	ldr	r3, [pc, #244]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e06b      	b.n	8003012 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f3a:	4b39      	ldr	r3, [pc, #228]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f023 0203 	bic.w	r2, r3, #3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4936      	ldr	r1, [pc, #216]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f4c:	f7ff fbf6 	bl	800273c <HAL_GetTick>
 8002f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f52:	e00a      	b.n	8002f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f54:	f7ff fbf2 	bl	800273c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e053      	b.n	8003012 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6a:	4b2d      	ldr	r3, [pc, #180]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 020c 	and.w	r2, r3, #12
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d1eb      	bne.n	8002f54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f7c:	4b27      	ldr	r3, [pc, #156]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d210      	bcs.n	8002fac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	4b24      	ldr	r3, [pc, #144]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 0207 	bic.w	r2, r3, #7
 8002f92:	4922      	ldr	r1, [pc, #136]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e032      	b.n	8003012 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4916      	ldr	r1, [pc, #88]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d009      	beq.n	8002fea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fd6:	4b12      	ldr	r3, [pc, #72]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	490e      	ldr	r1, [pc, #56]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fea:	f000 f821 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	490a      	ldr	r1, [pc, #40]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffc:	5ccb      	ldrb	r3, [r1, r3]
 8002ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8003002:	4a09      	ldr	r2, [pc, #36]	; (8003028 <HAL_RCC_ClockConfig+0x1cc>)
 8003004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <HAL_RCC_ClockConfig+0x1d0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fa20 	bl	8002450 <HAL_InitTick>

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40022000 	.word	0x40022000
 8003020:	40021000 	.word	0x40021000
 8003024:	0800836c 	.word	0x0800836c
 8003028:	2000009c 	.word	0x2000009c
 800302c:	200000a0 	.word	0x200000a0

08003030 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	2300      	movs	r3, #0
 8003044:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800304a:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b04      	cmp	r3, #4
 8003058:	d002      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0x30>
 800305a:	2b08      	cmp	r3, #8
 800305c:	d003      	beq.n	8003066 <HAL_RCC_GetSysClockFreq+0x36>
 800305e:	e027      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003060:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003062:	613b      	str	r3, [r7, #16]
      break;
 8003064:	e027      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	0c9b      	lsrs	r3, r3, #18
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	4a17      	ldr	r2, [pc, #92]	; (80030cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003070:	5cd3      	ldrb	r3, [r2, r3]
 8003072:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d010      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800307e:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	0c5b      	lsrs	r3, r3, #17
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	4a11      	ldr	r2, [pc, #68]	; (80030d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800308a:	5cd3      	ldrb	r3, [r2, r3]
 800308c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a0d      	ldr	r2, [pc, #52]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003092:	fb03 f202 	mul.w	r2, r3, r2
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	fbb2 f3f3 	udiv	r3, r2, r3
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	e004      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a0c      	ldr	r2, [pc, #48]	; (80030d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030a4:	fb02 f303 	mul.w	r3, r2, r3
 80030a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	613b      	str	r3, [r7, #16]
      break;
 80030ae:	e002      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80030b2:	613b      	str	r3, [r7, #16]
      break;
 80030b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030b6:	693b      	ldr	r3, [r7, #16]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	371c      	adds	r7, #28
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000
 80030c8:	007a1200 	.word	0x007a1200
 80030cc:	08008384 	.word	0x08008384
 80030d0:	08008394 	.word	0x08008394
 80030d4:	003d0900 	.word	0x003d0900

080030d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030dc:	4b02      	ldr	r3, [pc, #8]	; (80030e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80030de:	681b      	ldr	r3, [r3, #0]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr
 80030e8:	2000009c 	.word	0x2000009c

080030ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030f0:	f7ff fff2 	bl	80030d8 <HAL_RCC_GetHCLKFreq>
 80030f4:	4602      	mov	r2, r0
 80030f6:	4b05      	ldr	r3, [pc, #20]	; (800310c <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	4903      	ldr	r1, [pc, #12]	; (8003110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003102:	5ccb      	ldrb	r3, [r1, r3]
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40021000 	.word	0x40021000
 8003110:	0800837c 	.word	0x0800837c

08003114 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	220f      	movs	r2, #15
 8003122:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <HAL_RCC_GetClockConfig+0x58>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 0203 	and.w	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003130:	4b0e      	ldr	r3, [pc, #56]	; (800316c <HAL_RCC_GetClockConfig+0x58>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_GetClockConfig+0x58>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003148:	4b08      	ldr	r3, [pc, #32]	; (800316c <HAL_RCC_GetClockConfig+0x58>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	08db      	lsrs	r3, r3, #3
 800314e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_RCC_GetClockConfig+0x5c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0207 	and.w	r2, r3, #7
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	40021000 	.word	0x40021000
 8003170:	40022000 	.word	0x40022000

08003174 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800317c:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <RCC_Delay+0x34>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <RCC_Delay+0x38>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	0a5b      	lsrs	r3, r3, #9
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	fb02 f303 	mul.w	r3, r2, r3
 800318e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003190:	bf00      	nop
  }
  while (Delay --);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1e5a      	subs	r2, r3, #1
 8003196:	60fa      	str	r2, [r7, #12]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1f9      	bne.n	8003190 <RCC_Delay+0x1c>
}
 800319c:	bf00      	nop
 800319e:	bf00      	nop
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr
 80031a8:	2000009c 	.word	0x2000009c
 80031ac:	10624dd3 	.word	0x10624dd3

080031b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e041      	b.n	8003246 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f839 	bl	800324e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3304      	adds	r3, #4
 80031ec:	4619      	mov	r1, r3
 80031ee:	4610      	mov	r0, r2
 80031f0:	f000 f9b4 	bl	800355c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d001      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e03a      	b.n	80032ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a18      	ldr	r2, [pc, #96]	; (80032f8 <HAL_TIM_Base_Start_IT+0x98>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00e      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x58>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a2:	d009      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x58>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a14      	ldr	r2, [pc, #80]	; (80032fc <HAL_TIM_Base_Start_IT+0x9c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d004      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x58>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a13      	ldr	r2, [pc, #76]	; (8003300 <HAL_TIM_Base_Start_IT+0xa0>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d111      	bne.n	80032dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b06      	cmp	r3, #6
 80032c8:	d010      	beq.n	80032ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0201 	orr.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032da:	e007      	b.n	80032ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	40012c00 	.word	0x40012c00
 80032fc:	40000400 	.word	0x40000400
 8003300:	40000800 	.word	0x40000800

08003304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b02      	cmp	r3, #2
 8003318:	d122      	bne.n	8003360 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b02      	cmp	r3, #2
 8003326:	d11b      	bne.n	8003360 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0202 	mvn.w	r2, #2
 8003330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8ed 	bl	8003526 <HAL_TIM_IC_CaptureCallback>
 800334c:	e005      	b.n	800335a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8e0 	bl	8003514 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f8ef 	bl	8003538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b04      	cmp	r3, #4
 800336c:	d122      	bne.n	80033b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b04      	cmp	r3, #4
 800337a:	d11b      	bne.n	80033b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f06f 0204 	mvn.w	r2, #4
 8003384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2202      	movs	r2, #2
 800338a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f8c3 	bl	8003526 <HAL_TIM_IC_CaptureCallback>
 80033a0:	e005      	b.n	80033ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f8b6 	bl	8003514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f8c5 	bl	8003538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d122      	bne.n	8003408 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d11b      	bne.n	8003408 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0208 	mvn.w	r2, #8
 80033d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2204      	movs	r2, #4
 80033de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f899 	bl	8003526 <HAL_TIM_IC_CaptureCallback>
 80033f4:	e005      	b.n	8003402 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f88c 	bl	8003514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f89b 	bl	8003538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b10      	cmp	r3, #16
 8003414:	d122      	bne.n	800345c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b10      	cmp	r3, #16
 8003422:	d11b      	bne.n	800345c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0210 	mvn.w	r2, #16
 800342c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2208      	movs	r2, #8
 8003432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f86f 	bl	8003526 <HAL_TIM_IC_CaptureCallback>
 8003448:	e005      	b.n	8003456 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f862 	bl	8003514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f871 	bl	8003538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b01      	cmp	r3, #1
 8003468:	d10e      	bne.n	8003488 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b01      	cmp	r3, #1
 8003476:	d107      	bne.n	8003488 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0201 	mvn.w	r2, #1
 8003480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fe ff6e 	bl	8002364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003492:	2b80      	cmp	r3, #128	; 0x80
 8003494:	d10e      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a0:	2b80      	cmp	r3, #128	; 0x80
 80034a2:	d107      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f8bf 	bl	8003632 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b40      	cmp	r3, #64	; 0x40
 80034c0:	d10e      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034cc:	2b40      	cmp	r3, #64	; 0x40
 80034ce:	d107      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f835 	bl	800354a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d10e      	bne.n	800350c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	d107      	bne.n	800350c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0220 	mvn.w	r2, #32
 8003504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f88a 	bl	8003620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800350c:	bf00      	nop
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr

08003526 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr

08003538 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr

0800354a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a29      	ldr	r2, [pc, #164]	; (8003614 <TIM_Base_SetConfig+0xb8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00b      	beq.n	800358c <TIM_Base_SetConfig+0x30>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357a:	d007      	beq.n	800358c <TIM_Base_SetConfig+0x30>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a26      	ldr	r2, [pc, #152]	; (8003618 <TIM_Base_SetConfig+0xbc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <TIM_Base_SetConfig+0x30>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a25      	ldr	r2, [pc, #148]	; (800361c <TIM_Base_SetConfig+0xc0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d108      	bne.n	800359e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a1c      	ldr	r2, [pc, #112]	; (8003614 <TIM_Base_SetConfig+0xb8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00b      	beq.n	80035be <TIM_Base_SetConfig+0x62>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ac:	d007      	beq.n	80035be <TIM_Base_SetConfig+0x62>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a19      	ldr	r2, [pc, #100]	; (8003618 <TIM_Base_SetConfig+0xbc>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d003      	beq.n	80035be <TIM_Base_SetConfig+0x62>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a18      	ldr	r2, [pc, #96]	; (800361c <TIM_Base_SetConfig+0xc0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d108      	bne.n	80035d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a07      	ldr	r2, [pc, #28]	; (8003614 <TIM_Base_SetConfig+0xb8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d103      	bne.n	8003604 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	615a      	str	r2, [r3, #20]
}
 800360a:	bf00      	nop
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr
 8003614:	40012c00 	.word	0x40012c00
 8003618:	40000400 	.word	0x40000400
 800361c:	40000800 	.word	0x40000800

08003620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr

08003632 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003656:	2b84      	cmp	r3, #132	; 0x84
 8003658:	d005      	beq.n	8003666 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800365a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4413      	add	r3, r2
 8003662:	3303      	adds	r3, #3
 8003664:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003666:	68fb      	ldr	r3, [r7, #12]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr

08003672 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003678:	f3ef 8305 	mrs	r3, IPSR
 800367c:	607b      	str	r3, [r7, #4]
  return(result);
 800367e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf14      	ite	ne
 8003684:	2301      	movne	r3, #1
 8003686:	2300      	moveq	r3, #0
 8003688:	b2db      	uxtb	r3, r3
}
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr

08003694 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003698:	f001 fcd0 	bl	800503c <vTaskStartScheduler>
  
  return osOK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80036a6:	f7ff ffe4 	bl	8003672 <inHandlerMode>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80036b0:	f001 fdec 	bl	800528c <xTaskGetTickCountFromISR>
 80036b4:	4603      	mov	r3, r0
 80036b6:	e002      	b.n	80036be <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80036b8:	f001 fdda 	bl	8005270 <xTaskGetTickCount>
 80036bc:	4603      	mov	r3, r0
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80036c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036c4:	b089      	sub	sp, #36	; 0x24
 80036c6:	af04      	add	r7, sp, #16
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d020      	beq.n	8003716 <osThreadCreate+0x54>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d01c      	beq.n	8003716 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685c      	ldr	r4, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681d      	ldr	r5, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691e      	ldr	r6, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff ffa8 	bl	8003644 <makeFreeRtosPriority>
 80036f4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036fe:	9202      	str	r2, [sp, #8]
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	9100      	str	r1, [sp, #0]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	4632      	mov	r2, r6
 8003708:	4629      	mov	r1, r5
 800370a:	4620      	mov	r0, r4
 800370c:	f001 fac0 	bl	8004c90 <xTaskCreateStatic>
 8003710:	4603      	mov	r3, r0
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	e01c      	b.n	8003750 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685c      	ldr	r4, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003722:	b29e      	uxth	r6, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff ff8a 	bl	8003644 <makeFreeRtosPriority>
 8003730:	4602      	mov	r2, r0
 8003732:	f107 030c 	add.w	r3, r7, #12
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	9200      	str	r2, [sp, #0]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	4632      	mov	r2, r6
 800373e:	4629      	mov	r1, r5
 8003740:	4620      	mov	r0, r4
 8003742:	f001 fb01 	bl	8004d48 <xTaskCreate>
 8003746:	4603      	mov	r3, r0
 8003748:	2b01      	cmp	r3, #1
 800374a:	d001      	beq.n	8003750 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800374c:	2300      	movs	r3, #0
 800374e:	e000      	b.n	8003752 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003750:	68fb      	ldr	r3, [r7, #12]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800375a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <osDelay+0x16>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	e000      	b.n	8003772 <osDelay+0x18>
 8003770:	2301      	movs	r3, #1
 8003772:	4618      	mov	r0, r3
 8003774:	f001 fc2e 	bl	8004fd4 <vTaskDelay>
  
  return osOK;
 8003778:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	460b      	mov	r3, r1
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d013      	beq.n	80037c2 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800379a:	7afb      	ldrb	r3, [r7, #11]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <osTimerCreate+0x20>
 80037a0:	2101      	movs	r1, #1
 80037a2:	e000      	b.n	80037a6 <osTimerCreate+0x22>
 80037a4:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80037ae:	9201      	str	r2, [sp, #4]
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	460a      	mov	r2, r1
 80037b6:	2101      	movs	r1, #1
 80037b8:	480b      	ldr	r0, [pc, #44]	; (80037e8 <osTimerCreate+0x64>)
 80037ba:	f002 fd34 	bl	8006226 <xTimerCreateStatic>
 80037be:	4603      	mov	r3, r0
 80037c0:	e00e      	b.n	80037e0 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80037c2:	7afb      	ldrb	r3, [r7, #11]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <osTimerCreate+0x48>
 80037c8:	2201      	movs	r2, #1
 80037ca:	e000      	b.n	80037ce <osTimerCreate+0x4a>
 80037cc:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2101      	movs	r1, #1
 80037d8:	4803      	ldr	r0, [pc, #12]	; (80037e8 <osTimerCreate+0x64>)
 80037da:	f002 fd03 	bl	80061e4 <xTimerCreate>
 80037de:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	08008310 	.word	0x08008310

080037ec <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80037fe:	f7ff ff38 	bl	8003672 <inHandlerMode>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01c      	beq.n	8003842 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8003808:	6839      	ldr	r1, [r7, #0]
 800380a:	f107 0208 	add.w	r2, r7, #8
 800380e:	f107 030c 	add.w	r3, r7, #12
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	2201      	movs	r2, #1
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f002 fb65 	bl	8005ee8 <xTaskGenericNotifyFromISR>
 800381e:	4603      	mov	r3, r0
 8003820:	2b01      	cmp	r3, #1
 8003822:	d002      	beq.n	800382a <osSignalSet+0x3e>
      return 0x80000000;
 8003824:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003828:	e019      	b.n	800385e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d015      	beq.n	800385c <osSignalSet+0x70>
 8003830:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <osSignalSet+0x7c>)
 8003832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	e00c      	b.n	800385c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8003842:	6839      	ldr	r1, [r7, #0]
 8003844:	f107 0308 	add.w	r3, r7, #8
 8003848:	2201      	movs	r2, #1
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f002 faa2 	bl	8005d94 <xTaskGenericNotify>
 8003850:	4603      	mov	r3, r0
 8003852:	2b01      	cmp	r3, #1
 8003854:	d002      	beq.n	800385c <osSignalSet+0x70>
    return 0x80000000;
 8003856:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800385a:	e000      	b.n	800385e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800385c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	e000ed04 	.word	0xe000ed04

0800386c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800386c:	b590      	push	{r4, r7, lr}
 800386e:	b089      	sub	sp, #36	; 0x24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d103      	bne.n	8003890 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8003888:	f04f 33ff 	mov.w	r3, #4294967295
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	e009      	b.n	80038a4 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d006      	beq.n	80038a4 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <osSignalWait+0x38>
      ticks = 1;
 80038a0:	2301      	movs	r3, #1
 80038a2:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80038a4:	f7ff fee5 	bl	8003672 <inHandlerMode>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80038ae:	2382      	movs	r3, #130	; 0x82
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	e01b      	b.n	80038ec <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	f107 0310 	add.w	r3, r7, #16
 80038ba:	1d1a      	adds	r2, r3, #4
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	2000      	movs	r0, #0
 80038c0:	f002 fa08 	bl	8005cd4 <xTaskNotifyWait>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d008      	beq.n	80038dc <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <osSignalWait+0x6a>
 80038d0:	2300      	movs	r3, #0
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	e00a      	b.n	80038ec <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80038d6:	2340      	movs	r3, #64	; 0x40
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	e007      	b.n	80038ec <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	da02      	bge.n	80038e8 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80038e2:	2386      	movs	r3, #134	; 0x86
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	e001      	b.n	80038ec <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80038e8:	2308      	movs	r3, #8
 80038ea:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	461c      	mov	r4, r3
 80038f0:	f107 0310 	add.w	r3, r7, #16
 80038f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	3724      	adds	r7, #36	; 0x24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd90      	pop	{r4, r7, pc}

08003904 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d007      	beq.n	8003924 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	4619      	mov	r1, r3
 800391a:	2001      	movs	r0, #1
 800391c:	f000 fb88 	bl	8004030 <xQueueCreateMutexStatic>
 8003920:	4603      	mov	r3, r0
 8003922:	e003      	b.n	800392c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003924:	2001      	movs	r0, #1
 8003926:	f000 fb6b 	bl	8004000 <xQueueCreateMutex>
 800392a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800393e:	2300      	movs	r3, #0
 8003940:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <osMutexWait+0x18>
    return osErrorParameter;
 8003948:	2380      	movs	r3, #128	; 0x80
 800394a:	e03a      	b.n	80039c2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003956:	d103      	bne.n	8003960 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003958:	f04f 33ff 	mov.w	r3, #4294967295
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	e009      	b.n	8003974 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d006      	beq.n	8003974 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <osMutexWait+0x40>
      ticks = 1;
 8003970:	2301      	movs	r3, #1
 8003972:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003974:	f7ff fe7d 	bl	8003672 <inHandlerMode>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d017      	beq.n	80039ae <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800397e:	f107 0308 	add.w	r3, r7, #8
 8003982:	461a      	mov	r2, r3
 8003984:	2100      	movs	r1, #0
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 ff7e 	bl	8004888 <xQueueReceiveFromISR>
 800398c:	4603      	mov	r3, r0
 800398e:	2b01      	cmp	r3, #1
 8003990:	d001      	beq.n	8003996 <osMutexWait+0x62>
      return osErrorOS;
 8003992:	23ff      	movs	r3, #255	; 0xff
 8003994:	e015      	b.n	80039c2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d011      	beq.n	80039c0 <osMutexWait+0x8c>
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <osMutexWait+0x98>)
 800399e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	e008      	b.n	80039c0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80039ae:	68f9      	ldr	r1, [r7, #12]
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fe5d 	bl	8004670 <xQueueSemaphoreTake>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d001      	beq.n	80039c0 <osMutexWait+0x8c>
    return osErrorOS;
 80039bc:	23ff      	movs	r3, #255	; 0xff
 80039be:	e000      	b.n	80039c2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	e000ed04 	.word	0xe000ed04

080039d0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80039d8:	2300      	movs	r3, #0
 80039da:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80039dc:	2300      	movs	r3, #0
 80039de:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80039e0:	f7ff fe47 	bl	8003672 <inHandlerMode>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d016      	beq.n	8003a18 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80039ea:	f107 0308 	add.w	r3, r7, #8
 80039ee:	4619      	mov	r1, r3
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 fccf 	bl	8004394 <xQueueGiveFromISR>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d001      	beq.n	8003a00 <osMutexRelease+0x30>
      return osErrorOS;
 80039fc:	23ff      	movs	r3, #255	; 0xff
 80039fe:	e017      	b.n	8003a30 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d013      	beq.n	8003a2e <osMutexRelease+0x5e>
 8003a06:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <osMutexRelease+0x68>)
 8003a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	e00a      	b.n	8003a2e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003a18:	2300      	movs	r3, #0
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fb22 	bl	8004068 <xQueueGenericSend>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d001      	beq.n	8003a2e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003a2a:	23ff      	movs	r3, #255	; 0xff
 8003a2c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	e000ed04 	.word	0xe000ed04

08003a3c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003a3c:	b590      	push	{r4, r7, lr}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d011      	beq.n	8003a72 <osMessageCreate+0x36>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00d      	beq.n	8003a72 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6859      	ldr	r1, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2400      	movs	r4, #0
 8003a68:	9400      	str	r4, [sp, #0]
 8003a6a:	f000 f9db 	bl	8003e24 <xQueueGenericCreateStatic>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	e008      	b.n	8003a84 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	f000 fa48 	bl	8003f12 <xQueueGenericCreate>
 8003a82:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd90      	pop	{r4, r7, pc}

08003a8c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <osMessagePut+0x1e>
    ticks = 1;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003aaa:	f7ff fde2 	bl	8003672 <inHandlerMode>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d018      	beq.n	8003ae6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003ab4:	f107 0210 	add.w	r2, r7, #16
 8003ab8:	f107 0108 	add.w	r1, r7, #8
 8003abc:	2300      	movs	r3, #0
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fbd0 	bl	8004264 <xQueueGenericSendFromISR>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d001      	beq.n	8003ace <osMessagePut+0x42>
      return osErrorOS;
 8003aca:	23ff      	movs	r3, #255	; 0xff
 8003acc:	e018      	b.n	8003b00 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d014      	beq.n	8003afe <osMessagePut+0x72>
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <osMessagePut+0x7c>)
 8003ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	e00b      	b.n	8003afe <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003ae6:	f107 0108 	add.w	r1, r7, #8
 8003aea:	2300      	movs	r3, #0
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 faba 	bl	8004068 <xQueueGenericSend>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d001      	beq.n	8003afe <osMessagePut+0x72>
      return osErrorOS;
 8003afa:	23ff      	movs	r3, #255	; 0xff
 8003afc:	e000      	b.n	8003b00 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	e000ed04 	.word	0xe000ed04

08003b0c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003b0c:	b590      	push	{r4, r7, lr}
 8003b0e:	b08b      	sub	sp, #44	; 0x2c
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003b26:	2380      	movs	r3, #128	; 0x80
 8003b28:	617b      	str	r3, [r7, #20]
    return event;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	461c      	mov	r4, r3
 8003b2e:	f107 0314 	add.w	r3, r7, #20
 8003b32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003b3a:	e054      	b.n	8003be6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4a:	d103      	bne.n	8003b54 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
 8003b52:	e009      	b.n	8003b68 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <osMessageGet+0x5c>
      ticks = 1;
 8003b64:	2301      	movs	r3, #1
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003b68:	f7ff fd83 	bl	8003672 <inHandlerMode>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01c      	beq.n	8003bac <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003b72:	f107 0220 	add.w	r2, r7, #32
 8003b76:	f107 0314 	add.w	r3, r7, #20
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	68b8      	ldr	r0, [r7, #8]
 8003b80:	f000 fe82 	bl	8004888 <xQueueReceiveFromISR>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d102      	bne.n	8003b90 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8003b8a:	2310      	movs	r3, #16
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	e001      	b.n	8003b94 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d01d      	beq.n	8003bd6 <osMessageGet+0xca>
 8003b9a:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <osMessageGet+0xe4>)
 8003b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	e014      	b.n	8003bd6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	68b8      	ldr	r0, [r7, #8]
 8003bb8:	f000 fc7a 	bl	80044b0 <xQueueReceive>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d102      	bne.n	8003bc8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003bc2:	2310      	movs	r3, #16
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	e006      	b.n	8003bd6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <osMessageGet+0xc6>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e000      	b.n	8003bd4 <osMessageGet+0xc8>
 8003bd2:	2340      	movs	r3, #64	; 0x40
 8003bd4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	461c      	mov	r4, r3
 8003bda:	f107 0314 	add.w	r3, r7, #20
 8003bde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003be2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	372c      	adds	r7, #44	; 0x2c
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd90      	pop	{r4, r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	e000ed04 	.word	0xe000ed04

08003bf4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f103 0208 	add.w	r2, r3, #8
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f04f 32ff 	mov.w	r2, #4294967295
 8003c0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f103 0208 	add.w	r2, r3, #8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f103 0208 	add.w	r2, r3, #8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr

08003c32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr

08003c4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b085      	sub	sp, #20
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	601a      	str	r2, [r3, #0]
}
 8003c86:	bf00      	nop
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr

08003c90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca6:	d103      	bne.n	8003cb0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	e00c      	b.n	8003cca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e002      	b.n	8003cbe <vListInsert+0x2e>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d2f6      	bcs.n	8003cb8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	601a      	str	r2, [r3, #0]
}
 8003cf6:	bf00      	nop
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6892      	ldr	r2, [r2, #8]
 8003d16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6852      	ldr	r2, [r2, #4]
 8003d20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d103      	bne.n	8003d34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	1e5a      	subs	r2, r3, #1
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr
	...

08003d54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10a      	bne.n	8003d7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d7a:	bf00      	nop
 8003d7c:	e7fe      	b.n	8003d7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d7e:	f002 fe65 	bl	8006a4c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8a:	68f9      	ldr	r1, [r7, #12]
 8003d8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d8e:	fb01 f303 	mul.w	r3, r1, r3
 8003d92:	441a      	add	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dae:	3b01      	subs	r3, #1
 8003db0:	68f9      	ldr	r1, [r7, #12]
 8003db2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
 8003db8:	441a      	add	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	22ff      	movs	r2, #255	; 0xff
 8003dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	22ff      	movs	r2, #255	; 0xff
 8003dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d114      	bne.n	8003dfe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01a      	beq.n	8003e12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3310      	adds	r3, #16
 8003de0:	4618      	mov	r0, r3
 8003de2:	f001 fbd5 	bl	8005590 <xTaskRemoveFromEventList>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d012      	beq.n	8003e12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003dec:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <xQueueGenericReset+0xcc>)
 8003dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	e009      	b.n	8003e12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3310      	adds	r3, #16
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff fef6 	bl	8003bf4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3324      	adds	r3, #36	; 0x24
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fef1 	bl	8003bf4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e12:	f002 fe4b 	bl	8006aac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e16:	2301      	movs	r3, #1
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	e000ed04 	.word	0xe000ed04

08003e24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08e      	sub	sp, #56	; 0x38
 8003e28:	af02      	add	r7, sp, #8
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3c:	f383 8811 	msr	BASEPRI, r3
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e4a:	bf00      	nop
 8003e4c:	e7fe      	b.n	8003e4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10a      	bne.n	8003e6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e66:	bf00      	nop
 8003e68:	e7fe      	b.n	8003e68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <xQueueGenericCreateStatic+0x52>
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <xQueueGenericCreateStatic+0x56>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <xQueueGenericCreateStatic+0x58>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	623b      	str	r3, [r7, #32]
}
 8003e92:	bf00      	nop
 8003e94:	e7fe      	b.n	8003e94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <xQueueGenericCreateStatic+0x7e>
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <xQueueGenericCreateStatic+0x82>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <xQueueGenericCreateStatic+0x84>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10a      	bne.n	8003ec2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	61fb      	str	r3, [r7, #28]
}
 8003ebe:	bf00      	nop
 8003ec0:	e7fe      	b.n	8003ec0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003ec2:	2348      	movs	r3, #72	; 0x48
 8003ec4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b48      	cmp	r3, #72	; 0x48
 8003eca:	d00a      	beq.n	8003ee2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed0:	f383 8811 	msr	BASEPRI, r3
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	61bb      	str	r3, [r7, #24]
}
 8003ede:	bf00      	nop
 8003ee0:	e7fe      	b.n	8003ee0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00d      	beq.n	8003f08 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ef4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	4613      	mov	r3, r2
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f843 	bl	8003f8e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3730      	adds	r7, #48	; 0x30
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b08a      	sub	sp, #40	; 0x28
 8003f16:	af02      	add	r7, sp, #8
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10a      	bne.n	8003f3c <xQueueGenericCreate+0x2a>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	613b      	str	r3, [r7, #16]
}
 8003f38:	bf00      	nop
 8003f3a:	e7fe      	b.n	8003f3a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d102      	bne.n	8003f48 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	e004      	b.n	8003f52 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	fb02 f303 	mul.w	r3, r2, r3
 8003f50:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	3348      	adds	r3, #72	; 0x48
 8003f56:	4618      	mov	r0, r3
 8003f58:	f002 fe78 	bl	8006c4c <pvPortMalloc>
 8003f5c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00f      	beq.n	8003f84 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	3348      	adds	r3, #72	; 0x48
 8003f68:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f72:	79fa      	ldrb	r2, [r7, #7]
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f805 	bl	8003f8e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003f84:	69bb      	ldr	r3, [r7, #24]
	}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	607a      	str	r2, [r7, #4]
 8003f9a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d103      	bne.n	8003faa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	e002      	b.n	8003fb0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	69b8      	ldr	r0, [r7, #24]
 8003fc0:	f7ff fec8 	bl	8003d54 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00e      	beq.n	8003ff8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003fec:	2300      	movs	r3, #0
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f838 	bl	8004068 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003ff8:	bf00      	nop
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800400a:	2301      	movs	r3, #1
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	2300      	movs	r3, #0
 8004010:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	461a      	mov	r2, r3
 8004016:	6939      	ldr	r1, [r7, #16]
 8004018:	6978      	ldr	r0, [r7, #20]
 800401a:	f7ff ff7a 	bl	8003f12 <xQueueGenericCreate>
 800401e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f7ff ffd3 	bl	8003fcc <prvInitialiseMutex>

		return pxNewQueue;
 8004026:	68fb      	ldr	r3, [r7, #12]
	}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af02      	add	r7, sp, #8
 8004036:	4603      	mov	r3, r0
 8004038:	6039      	str	r1, [r7, #0]
 800403a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800403c:	2301      	movs	r3, #1
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	2300      	movs	r3, #0
 8004042:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004044:	79fb      	ldrb	r3, [r7, #7]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2200      	movs	r2, #0
 800404c:	6939      	ldr	r1, [r7, #16]
 800404e:	6978      	ldr	r0, [r7, #20]
 8004050:	f7ff fee8 	bl	8003e24 <xQueueGenericCreateStatic>
 8004054:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f7ff ffb8 	bl	8003fcc <prvInitialiseMutex>

		return pxNewQueue;
 800405c:	68fb      	ldr	r3, [r7, #12]
	}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08e      	sub	sp, #56	; 0x38
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004076:	2300      	movs	r3, #0
 8004078:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800407e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <xQueueGenericSend+0x32>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d103      	bne.n	80040a8 <xQueueGenericSend+0x40>
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <xQueueGenericSend+0x44>
 80040a8:	2301      	movs	r3, #1
 80040aa:	e000      	b.n	80040ae <xQueueGenericSend+0x46>
 80040ac:	2300      	movs	r3, #0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10a      	bne.n	80040c8 <xQueueGenericSend+0x60>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040c4:	bf00      	nop
 80040c6:	e7fe      	b.n	80040c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d103      	bne.n	80040d6 <xQueueGenericSend+0x6e>
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <xQueueGenericSend+0x72>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <xQueueGenericSend+0x74>
 80040da:	2300      	movs	r3, #0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10a      	bne.n	80040f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	623b      	str	r3, [r7, #32]
}
 80040f2:	bf00      	nop
 80040f4:	e7fe      	b.n	80040f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040f6:	f001 fc0f 	bl	8005918 <xTaskGetSchedulerState>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d102      	bne.n	8004106 <xQueueGenericSend+0x9e>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <xQueueGenericSend+0xa2>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <xQueueGenericSend+0xa4>
 800410a:	2300      	movs	r3, #0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <xQueueGenericSend+0xbe>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	61fb      	str	r3, [r7, #28]
}
 8004122:	bf00      	nop
 8004124:	e7fe      	b.n	8004124 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004126:	f002 fc91 	bl	8006a4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	429a      	cmp	r2, r3
 8004134:	d302      	bcc.n	800413c <xQueueGenericSend+0xd4>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b02      	cmp	r3, #2
 800413a:	d129      	bne.n	8004190 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004142:	f000 fc38 	bl	80049b6 <prvCopyDataToQueue>
 8004146:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	2b00      	cmp	r3, #0
 800414e:	d010      	beq.n	8004172 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004152:	3324      	adds	r3, #36	; 0x24
 8004154:	4618      	mov	r0, r3
 8004156:	f001 fa1b 	bl	8005590 <xTaskRemoveFromEventList>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d013      	beq.n	8004188 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004160:	4b3f      	ldr	r3, [pc, #252]	; (8004260 <xQueueGenericSend+0x1f8>)
 8004162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	e00a      	b.n	8004188 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d007      	beq.n	8004188 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004178:	4b39      	ldr	r3, [pc, #228]	; (8004260 <xQueueGenericSend+0x1f8>)
 800417a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004188:	f002 fc90 	bl	8006aac <vPortExitCritical>
				return pdPASS;
 800418c:	2301      	movs	r3, #1
 800418e:	e063      	b.n	8004258 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d103      	bne.n	800419e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004196:	f002 fc89 	bl	8006aac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800419a:	2300      	movs	r3, #0
 800419c:	e05c      	b.n	8004258 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800419e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041a4:	f107 0314 	add.w	r3, r7, #20
 80041a8:	4618      	mov	r0, r3
 80041aa:	f001 fa53 	bl	8005654 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041ae:	2301      	movs	r3, #1
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041b2:	f002 fc7b 	bl	8006aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041b6:	f000 ffb1 	bl	800511c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041ba:	f002 fc47 	bl	8006a4c <vPortEnterCritical>
 80041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041c4:	b25b      	sxtb	r3, r3
 80041c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ca:	d103      	bne.n	80041d4 <xQueueGenericSend+0x16c>
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041da:	b25b      	sxtb	r3, r3
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e0:	d103      	bne.n	80041ea <xQueueGenericSend+0x182>
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041ea:	f002 fc5f 	bl	8006aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041ee:	1d3a      	adds	r2, r7, #4
 80041f0:	f107 0314 	add.w	r3, r7, #20
 80041f4:	4611      	mov	r1, r2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f001 fa42 	bl	8005680 <xTaskCheckForTimeOut>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d124      	bne.n	800424c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004204:	f000 fccf 	bl	8004ba6 <prvIsQueueFull>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d018      	beq.n	8004240 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004210:	3310      	adds	r3, #16
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	4611      	mov	r1, r2
 8004216:	4618      	mov	r0, r3
 8004218:	f001 f96a 	bl	80054f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800421c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800421e:	f000 fc5a 	bl	8004ad6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004222:	f000 ff89 	bl	8005138 <xTaskResumeAll>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	f47f af7c 	bne.w	8004126 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800422e:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <xQueueGenericSend+0x1f8>)
 8004230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	e772      	b.n	8004126 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004242:	f000 fc48 	bl	8004ad6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004246:	f000 ff77 	bl	8005138 <xTaskResumeAll>
 800424a:	e76c      	b.n	8004126 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800424c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800424e:	f000 fc42 	bl	8004ad6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004252:	f000 ff71 	bl	8005138 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004256:	2300      	movs	r3, #0
		}
	}
}
 8004258:	4618      	mov	r0, r3
 800425a:	3738      	adds	r7, #56	; 0x38
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	e000ed04 	.word	0xe000ed04

08004264 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08e      	sub	sp, #56	; 0x38
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10a      	bne.n	8004292 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800428e:	bf00      	nop
 8004290:	e7fe      	b.n	8004290 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d103      	bne.n	80042a0 <xQueueGenericSendFromISR+0x3c>
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <xQueueGenericSendFromISR+0x40>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <xQueueGenericSendFromISR+0x42>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10a      	bne.n	80042c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	623b      	str	r3, [r7, #32]
}
 80042bc:	bf00      	nop
 80042be:	e7fe      	b.n	80042be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d103      	bne.n	80042ce <xQueueGenericSendFromISR+0x6a>
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <xQueueGenericSendFromISR+0x6e>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <xQueueGenericSendFromISR+0x70>
 80042d2:	2300      	movs	r3, #0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10a      	bne.n	80042ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	61fb      	str	r3, [r7, #28]
}
 80042ea:	bf00      	nop
 80042ec:	e7fe      	b.n	80042ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042ee:	f002 fc6f 	bl	8006bd0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80042f2:	f3ef 8211 	mrs	r2, BASEPRI
 80042f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	61ba      	str	r2, [r7, #24]
 8004308:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800430a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800430c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004316:	429a      	cmp	r2, r3
 8004318:	d302      	bcc.n	8004320 <xQueueGenericSendFromISR+0xbc>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b02      	cmp	r3, #2
 800431e:	d12c      	bne.n	800437a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	68b9      	ldr	r1, [r7, #8]
 800432e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004330:	f000 fb41 	bl	80049b6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004334:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433c:	d112      	bne.n	8004364 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	2b00      	cmp	r3, #0
 8004344:	d016      	beq.n	8004374 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	3324      	adds	r3, #36	; 0x24
 800434a:	4618      	mov	r0, r3
 800434c:	f001 f920 	bl	8005590 <xTaskRemoveFromEventList>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00e      	beq.n	8004374 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00b      	beq.n	8004374 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e007      	b.n	8004374 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004364:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004368:	3301      	adds	r3, #1
 800436a:	b2db      	uxtb	r3, r3
 800436c:	b25a      	sxtb	r2, r3
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004374:	2301      	movs	r3, #1
 8004376:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004378:	e001      	b.n	800437e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800437a:	2300      	movs	r3, #0
 800437c:	637b      	str	r3, [r7, #52]	; 0x34
 800437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004380:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004388:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800438a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800438c:	4618      	mov	r0, r3
 800438e:	3738      	adds	r7, #56	; 0x38
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08e      	sub	sp, #56	; 0x38
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <xQueueGiveFromISR+0x2a>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	623b      	str	r3, [r7, #32]
}
 80043ba:	bf00      	nop
 80043bc:	e7fe      	b.n	80043bc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <xQueueGiveFromISR+0x48>
	__asm volatile
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	61fb      	str	r3, [r7, #28]
}
 80043d8:	bf00      	nop
 80043da:	e7fe      	b.n	80043da <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80043dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d103      	bne.n	80043ec <xQueueGiveFromISR+0x58>
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <xQueueGiveFromISR+0x5c>
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <xQueueGiveFromISR+0x5e>
 80043f0:	2300      	movs	r3, #0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <xQueueGiveFromISR+0x78>
	__asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	61bb      	str	r3, [r7, #24]
}
 8004408:	bf00      	nop
 800440a:	e7fe      	b.n	800440a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800440c:	f002 fbe0 	bl	8006bd0 <vPortValidateInterruptPriority>
	__asm volatile
 8004410:	f3ef 8211 	mrs	r2, BASEPRI
 8004414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	617a      	str	r2, [r7, #20]
 8004426:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004428:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004438:	429a      	cmp	r2, r3
 800443a:	d22b      	bcs.n	8004494 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800444e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004456:	d112      	bne.n	800447e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	2b00      	cmp	r3, #0
 800445e:	d016      	beq.n	800448e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004462:	3324      	adds	r3, #36	; 0x24
 8004464:	4618      	mov	r0, r3
 8004466:	f001 f893 	bl	8005590 <xTaskRemoveFromEventList>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00e      	beq.n	800448e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00b      	beq.n	800448e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2201      	movs	r2, #1
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e007      	b.n	800448e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800447e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004482:	3301      	adds	r3, #1
 8004484:	b2db      	uxtb	r3, r3
 8004486:	b25a      	sxtb	r2, r3
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800448e:	2301      	movs	r3, #1
 8004490:	637b      	str	r3, [r7, #52]	; 0x34
 8004492:	e001      	b.n	8004498 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004494:	2300      	movs	r3, #0
 8004496:	637b      	str	r3, [r7, #52]	; 0x34
 8004498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f383 8811 	msr	BASEPRI, r3
}
 80044a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3738      	adds	r7, #56	; 0x38
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08c      	sub	sp, #48	; 0x30
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044bc:	2300      	movs	r3, #0
 80044be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10a      	bne.n	80044e0 <xQueueReceive+0x30>
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	623b      	str	r3, [r7, #32]
}
 80044dc:	bf00      	nop
 80044de:	e7fe      	b.n	80044de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d103      	bne.n	80044ee <xQueueReceive+0x3e>
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <xQueueReceive+0x42>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e000      	b.n	80044f4 <xQueueReceive+0x44>
 80044f2:	2300      	movs	r3, #0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10a      	bne.n	800450e <xQueueReceive+0x5e>
	__asm volatile
 80044f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	61fb      	str	r3, [r7, #28]
}
 800450a:	bf00      	nop
 800450c:	e7fe      	b.n	800450c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800450e:	f001 fa03 	bl	8005918 <xTaskGetSchedulerState>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d102      	bne.n	800451e <xQueueReceive+0x6e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <xQueueReceive+0x72>
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <xQueueReceive+0x74>
 8004522:	2300      	movs	r3, #0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10a      	bne.n	800453e <xQueueReceive+0x8e>
	__asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	61bb      	str	r3, [r7, #24]
}
 800453a:	bf00      	nop
 800453c:	e7fe      	b.n	800453c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800453e:	f002 fa85 	bl	8006a4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	2b00      	cmp	r3, #0
 800454c:	d01f      	beq.n	800458e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004552:	f000 fa9a 	bl	8004a8a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	1e5a      	subs	r2, r3, #1
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00f      	beq.n	8004586 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004568:	3310      	adds	r3, #16
 800456a:	4618      	mov	r0, r3
 800456c:	f001 f810 	bl	8005590 <xTaskRemoveFromEventList>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004576:	4b3d      	ldr	r3, [pc, #244]	; (800466c <xQueueReceive+0x1bc>)
 8004578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004586:	f002 fa91 	bl	8006aac <vPortExitCritical>
				return pdPASS;
 800458a:	2301      	movs	r3, #1
 800458c:	e069      	b.n	8004662 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d103      	bne.n	800459c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004594:	f002 fa8a 	bl	8006aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004598:	2300      	movs	r3, #0
 800459a:	e062      	b.n	8004662 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800459c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045a2:	f107 0310 	add.w	r3, r7, #16
 80045a6:	4618      	mov	r0, r3
 80045a8:	f001 f854 	bl	8005654 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045ac:	2301      	movs	r3, #1
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045b0:	f002 fa7c 	bl	8006aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045b4:	f000 fdb2 	bl	800511c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045b8:	f002 fa48 	bl	8006a4c <vPortEnterCritical>
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045c2:	b25b      	sxtb	r3, r3
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c8:	d103      	bne.n	80045d2 <xQueueReceive+0x122>
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045d8:	b25b      	sxtb	r3, r3
 80045da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045de:	d103      	bne.n	80045e8 <xQueueReceive+0x138>
 80045e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045e8:	f002 fa60 	bl	8006aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045ec:	1d3a      	adds	r2, r7, #4
 80045ee:	f107 0310 	add.w	r3, r7, #16
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f001 f843 	bl	8005680 <xTaskCheckForTimeOut>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d123      	bne.n	8004648 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004602:	f000 faba 	bl	8004b7a <prvIsQueueEmpty>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d017      	beq.n	800463c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460e:	3324      	adds	r3, #36	; 0x24
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	4611      	mov	r1, r2
 8004614:	4618      	mov	r0, r3
 8004616:	f000 ff6b 	bl	80054f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800461a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800461c:	f000 fa5b 	bl	8004ad6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004620:	f000 fd8a 	bl	8005138 <xTaskResumeAll>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d189      	bne.n	800453e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800462a:	4b10      	ldr	r3, [pc, #64]	; (800466c <xQueueReceive+0x1bc>)
 800462c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	e780      	b.n	800453e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800463c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800463e:	f000 fa4a 	bl	8004ad6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004642:	f000 fd79 	bl	8005138 <xTaskResumeAll>
 8004646:	e77a      	b.n	800453e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800464a:	f000 fa44 	bl	8004ad6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800464e:	f000 fd73 	bl	8005138 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004654:	f000 fa91 	bl	8004b7a <prvIsQueueEmpty>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	f43f af6f 	beq.w	800453e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004660:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004662:	4618      	mov	r0, r3
 8004664:	3730      	adds	r7, #48	; 0x30
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	e000ed04 	.word	0xe000ed04

08004670 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08e      	sub	sp, #56	; 0x38
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800467a:	2300      	movs	r3, #0
 800467c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004682:	2300      	movs	r3, #0
 8004684:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	623b      	str	r3, [r7, #32]
}
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	61fb      	str	r3, [r7, #28]
}
 80046bc:	bf00      	nop
 80046be:	e7fe      	b.n	80046be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046c0:	f001 f92a 	bl	8005918 <xTaskGetSchedulerState>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d102      	bne.n	80046d0 <xQueueSemaphoreTake+0x60>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <xQueueSemaphoreTake+0x64>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <xQueueSemaphoreTake+0x66>
 80046d4:	2300      	movs	r3, #0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	61bb      	str	r3, [r7, #24]
}
 80046ec:	bf00      	nop
 80046ee:	e7fe      	b.n	80046ee <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80046f0:	f002 f9ac 	bl	8006a4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80046f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d024      	beq.n	800474a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	1e5a      	subs	r2, r3, #1
 8004704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004706:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d104      	bne.n	800471a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004710:	f001 facc 	bl	8005cac <pvTaskIncrementMutexHeldCount>
 8004714:	4602      	mov	r2, r0
 8004716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004718:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00f      	beq.n	8004742 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	3310      	adds	r3, #16
 8004726:	4618      	mov	r0, r3
 8004728:	f000 ff32 	bl	8005590 <xTaskRemoveFromEventList>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004732:	4b54      	ldr	r3, [pc, #336]	; (8004884 <xQueueSemaphoreTake+0x214>)
 8004734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004742:	f002 f9b3 	bl	8006aac <vPortExitCritical>
				return pdPASS;
 8004746:	2301      	movs	r3, #1
 8004748:	e097      	b.n	800487a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d111      	bne.n	8004774 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	617b      	str	r3, [r7, #20]
}
 8004768:	bf00      	nop
 800476a:	e7fe      	b.n	800476a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800476c:	f002 f99e 	bl	8006aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004770:	2300      	movs	r3, #0
 8004772:	e082      	b.n	800487a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800477a:	f107 030c 	add.w	r3, r7, #12
 800477e:	4618      	mov	r0, r3
 8004780:	f000 ff68 	bl	8005654 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004784:	2301      	movs	r3, #1
 8004786:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004788:	f002 f990 	bl	8006aac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800478c:	f000 fcc6 	bl	800511c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004790:	f002 f95c 	bl	8006a4c <vPortEnterCritical>
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800479a:	b25b      	sxtb	r3, r3
 800479c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a0:	d103      	bne.n	80047aa <xQueueSemaphoreTake+0x13a>
 80047a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047b0:	b25b      	sxtb	r3, r3
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b6:	d103      	bne.n	80047c0 <xQueueSemaphoreTake+0x150>
 80047b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047c0:	f002 f974 	bl	8006aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047c4:	463a      	mov	r2, r7
 80047c6:	f107 030c 	add.w	r3, r7, #12
 80047ca:	4611      	mov	r1, r2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 ff57 	bl	8005680 <xTaskCheckForTimeOut>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d132      	bne.n	800483e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047da:	f000 f9ce 	bl	8004b7a <prvIsQueueEmpty>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d026      	beq.n	8004832 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d109      	bne.n	8004800 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80047ec:	f002 f92e 	bl	8006a4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80047f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f001 f8ad 	bl	8005954 <xTaskPriorityInherit>
 80047fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80047fc:	f002 f956 	bl	8006aac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004802:	3324      	adds	r3, #36	; 0x24
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	4611      	mov	r1, r2
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fe71 	bl	80054f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800480e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004810:	f000 f961 	bl	8004ad6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004814:	f000 fc90 	bl	8005138 <xTaskResumeAll>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	f47f af68 	bne.w	80046f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004820:	4b18      	ldr	r3, [pc, #96]	; (8004884 <xQueueSemaphoreTake+0x214>)
 8004822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	e75e      	b.n	80046f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004834:	f000 f94f 	bl	8004ad6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004838:	f000 fc7e 	bl	8005138 <xTaskResumeAll>
 800483c:	e758      	b.n	80046f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800483e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004840:	f000 f949 	bl	8004ad6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004844:	f000 fc78 	bl	8005138 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004848:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800484a:	f000 f996 	bl	8004b7a <prvIsQueueEmpty>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	f43f af4d 	beq.w	80046f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00d      	beq.n	8004878 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800485c:	f002 f8f6 	bl	8006a4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004860:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004862:	f000 f891 	bl	8004988 <prvGetDisinheritPriorityAfterTimeout>
 8004866:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800486e:	4618      	mov	r0, r3
 8004870:	f001 f97c 	bl	8005b6c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004874:	f002 f91a 	bl	8006aac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004878:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800487a:	4618      	mov	r0, r3
 800487c:	3738      	adds	r7, #56	; 0x38
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	e000ed04 	.word	0xe000ed04

08004888 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08e      	sub	sp, #56	; 0x38
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10a      	bne.n	80048b4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	623b      	str	r3, [r7, #32]
}
 80048b0:	bf00      	nop
 80048b2:	e7fe      	b.n	80048b2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d103      	bne.n	80048c2 <xQueueReceiveFromISR+0x3a>
 80048ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <xQueueReceiveFromISR+0x3e>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <xQueueReceiveFromISR+0x40>
 80048c6:	2300      	movs	r3, #0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	61fb      	str	r3, [r7, #28]
}
 80048de:	bf00      	nop
 80048e0:	e7fe      	b.n	80048e0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048e2:	f002 f975 	bl	8006bd0 <vPortValidateInterruptPriority>
	__asm volatile
 80048e6:	f3ef 8211 	mrs	r2, BASEPRI
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	61ba      	str	r2, [r7, #24]
 80048fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80048fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	2b00      	cmp	r3, #0
 800490c:	d02f      	beq.n	800496e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800491c:	f000 f8b5 	bl	8004a8a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	1e5a      	subs	r2, r3, #1
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004928:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004930:	d112      	bne.n	8004958 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d016      	beq.n	8004968 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	3310      	adds	r3, #16
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fe26 	bl	8005590 <xTaskRemoveFromEventList>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00e      	beq.n	8004968 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00b      	beq.n	8004968 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	e007      	b.n	8004968 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800495c:	3301      	adds	r3, #1
 800495e:	b2db      	uxtb	r3, r3
 8004960:	b25a      	sxtb	r2, r3
 8004962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004968:	2301      	movs	r3, #1
 800496a:	637b      	str	r3, [r7, #52]	; 0x34
 800496c:	e001      	b.n	8004972 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800496e:	2300      	movs	r3, #0
 8004970:	637b      	str	r3, [r7, #52]	; 0x34
 8004972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004974:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f383 8811 	msr	BASEPRI, r3
}
 800497c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800497e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004980:	4618      	mov	r0, r3
 8004982:	3738      	adds	r7, #56	; 0x38
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	2b00      	cmp	r3, #0
 8004996:	d006      	beq.n	80049a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f1c3 0307 	rsb	r3, r3, #7
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e001      	b.n	80049aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80049aa:	68fb      	ldr	r3, [r7, #12]
	}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr

080049b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b086      	sub	sp, #24
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10d      	bne.n	80049f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d14d      	bne.n	8004a78 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f001 f83d 	bl	8005a60 <xTaskPriorityDisinherit>
 80049e6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	605a      	str	r2, [r3, #4]
 80049ee:	e043      	b.n	8004a78 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d119      	bne.n	8004a2a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6898      	ldr	r0, [r3, #8]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	461a      	mov	r2, r3
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	f002 fc28 	bl	8007256 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	441a      	add	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d32b      	bcc.n	8004a78 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	609a      	str	r2, [r3, #8]
 8004a28:	e026      	b.n	8004a78 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	68d8      	ldr	r0, [r3, #12]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	461a      	mov	r2, r3
 8004a34:	68b9      	ldr	r1, [r7, #8]
 8004a36:	f002 fc0e 	bl	8007256 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	425b      	negs	r3, r3
 8004a44:	441a      	add	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d207      	bcs.n	8004a66 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	425b      	negs	r3, r3
 8004a60:	441a      	add	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d105      	bne.n	8004a78 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	3b01      	subs	r3, #1
 8004a76:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1c5a      	adds	r2, r3, #1
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004a80:	697b      	ldr	r3, [r7, #20]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d018      	beq.n	8004ace <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	441a      	add	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d303      	bcc.n	8004abe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68d9      	ldr	r1, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	6838      	ldr	r0, [r7, #0]
 8004aca:	f002 fbc4 	bl	8007256 <memcpy>
	}
}
 8004ace:	bf00      	nop
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ade:	f001 ffb5 	bl	8006a4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ae8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004aea:	e011      	b.n	8004b10 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d012      	beq.n	8004b1a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3324      	adds	r3, #36	; 0x24
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fd49 	bl	8005590 <xTaskRemoveFromEventList>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b04:	f000 fe1e 	bl	8005744 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	dce9      	bgt.n	8004aec <prvUnlockQueue+0x16>
 8004b18:	e000      	b.n	8004b1c <prvUnlockQueue+0x46>
					break;
 8004b1a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	22ff      	movs	r2, #255	; 0xff
 8004b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b24:	f001 ffc2 	bl	8006aac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b28:	f001 ff90 	bl	8006a4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b32:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b34:	e011      	b.n	8004b5a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d012      	beq.n	8004b64 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3310      	adds	r3, #16
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fd24 	bl	8005590 <xTaskRemoveFromEventList>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b4e:	f000 fdf9 	bl	8005744 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b52:	7bbb      	ldrb	r3, [r7, #14]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	dce9      	bgt.n	8004b36 <prvUnlockQueue+0x60>
 8004b62:	e000      	b.n	8004b66 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b64:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	22ff      	movs	r2, #255	; 0xff
 8004b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b6e:	f001 ff9d 	bl	8006aac <vPortExitCritical>
}
 8004b72:	bf00      	nop
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b82:	f001 ff63 	bl	8006a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d102      	bne.n	8004b94 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	e001      	b.n	8004b98 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b98:	f001 ff88 	bl	8006aac <vPortExitCritical>

	return xReturn;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bae:	f001 ff4d 	bl	8006a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d102      	bne.n	8004bc4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	e001      	b.n	8004bc8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bc8:	f001 ff70 	bl	8006aac <vPortExitCritical>

	return xReturn;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	e014      	b.n	8004c12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004be8:	4a0e      	ldr	r2, [pc, #56]	; (8004c24 <vQueueAddToRegistry+0x4c>)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10b      	bne.n	8004c0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004bf4:	490b      	ldr	r1, [pc, #44]	; (8004c24 <vQueueAddToRegistry+0x4c>)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004bfe:	4a09      	ldr	r2, [pc, #36]	; (8004c24 <vQueueAddToRegistry+0x4c>)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	4413      	add	r3, r2
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c0a:	e006      	b.n	8004c1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b07      	cmp	r3, #7
 8004c16:	d9e7      	bls.n	8004be8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr
 8004c24:	20000940 	.word	0x20000940

08004c28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c38:	f001 ff08 	bl	8006a4c <vPortEnterCritical>
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c42:	b25b      	sxtb	r3, r3
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c48:	d103      	bne.n	8004c52 <vQueueWaitForMessageRestricted+0x2a>
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c58:	b25b      	sxtb	r3, r3
 8004c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5e:	d103      	bne.n	8004c68 <vQueueWaitForMessageRestricted+0x40>
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c68:	f001 ff20 	bl	8006aac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d106      	bne.n	8004c82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	3324      	adds	r3, #36	; 0x24
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fc5b 	bl	8005538 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c82:	6978      	ldr	r0, [r7, #20]
 8004c84:	f7ff ff27 	bl	8004ad6 <prvUnlockQueue>
	}
 8004c88:	bf00      	nop
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08e      	sub	sp, #56	; 0x38
 8004c94:	af04      	add	r7, sp, #16
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10a      	bne.n	8004cba <xTaskCreateStatic+0x2a>
	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	623b      	str	r3, [r7, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	e7fe      	b.n	8004cb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <xTaskCreateStatic+0x46>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	61fb      	str	r3, [r7, #28]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004cd6:	23b4      	movs	r3, #180	; 0xb4
 8004cd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2bb4      	cmp	r3, #180	; 0xb4
 8004cde:	d00a      	beq.n	8004cf6 <xTaskCreateStatic+0x66>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	61bb      	str	r3, [r7, #24]
}
 8004cf2:	bf00      	nop
 8004cf4:	e7fe      	b.n	8004cf4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01e      	beq.n	8004d3a <xTaskCreateStatic+0xaa>
 8004cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d01b      	beq.n	8004d3a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d14:	2300      	movs	r3, #0
 8004d16:	9303      	str	r3, [sp, #12]
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	9302      	str	r3, [sp, #8]
 8004d1c:	f107 0314 	add.w	r3, r7, #20
 8004d20:	9301      	str	r3, [sp, #4]
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f851 	bl	8004dd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d34:	f000 f8e4 	bl	8004f00 <prvAddNewTaskToReadyList>
 8004d38:	e001      	b.n	8004d3e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d3e:	697b      	ldr	r3, [r7, #20]
	}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3728      	adds	r7, #40	; 0x28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08c      	sub	sp, #48	; 0x30
 8004d4c:	af04      	add	r7, sp, #16
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	4613      	mov	r3, r2
 8004d56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d58:	88fb      	ldrh	r3, [r7, #6]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f001 ff75 	bl	8006c4c <pvPortMalloc>
 8004d62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00e      	beq.n	8004d88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004d6a:	20b4      	movs	r0, #180	; 0xb4
 8004d6c:	f001 ff6e 	bl	8006c4c <pvPortMalloc>
 8004d70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d7e:	e005      	b.n	8004d8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d80:	6978      	ldr	r0, [r7, #20]
 8004d82:	f002 f827 	bl	8006dd4 <vPortFree>
 8004d86:	e001      	b.n	8004d8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d017      	beq.n	8004dc2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d9a:	88fa      	ldrh	r2, [r7, #6]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	9303      	str	r3, [sp, #12]
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	9302      	str	r3, [sp, #8]
 8004da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	68b9      	ldr	r1, [r7, #8]
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 f80f 	bl	8004dd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004db6:	69f8      	ldr	r0, [r7, #28]
 8004db8:	f000 f8a2 	bl	8004f00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	61bb      	str	r3, [r7, #24]
 8004dc0:	e002      	b.n	8004dc8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004dc8:	69bb      	ldr	r3, [r7, #24]
	}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3720      	adds	r7, #32
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004dec:	3b01      	subs	r3, #1
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	f023 0307 	bic.w	r3, r3, #7
 8004dfa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <prvInitialiseNewTask+0x48>
	__asm volatile
 8004e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	617b      	str	r3, [r7, #20]
}
 8004e18:	bf00      	nop
 8004e1a:	e7fe      	b.n	8004e1a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	e012      	b.n	8004e48 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	4413      	add	r3, r2
 8004e28:	7819      	ldrb	r1, [r3, #0]
 8004e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	4413      	add	r3, r2
 8004e30:	3334      	adds	r3, #52	; 0x34
 8004e32:	460a      	mov	r2, r1
 8004e34:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d006      	beq.n	8004e50 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	3301      	adds	r3, #1
 8004e46:	61fb      	str	r3, [r7, #28]
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	2b0f      	cmp	r3, #15
 8004e4c:	d9e9      	bls.n	8004e22 <prvInitialiseNewTask+0x4e>
 8004e4e:	e000      	b.n	8004e52 <prvInitialiseNewTask+0x7e>
		{
			break;
 8004e50:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5c:	2b06      	cmp	r3, #6
 8004e5e:	d901      	bls.n	8004e64 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e60:	2306      	movs	r3, #6
 8004e62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e6e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e72:	2200      	movs	r2, #0
 8004e74:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e78:	3304      	adds	r3, #4
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fe fed9 	bl	8003c32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	3318      	adds	r3, #24
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fe fed4 	bl	8003c32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e92:	f1c3 0207 	rsb	r2, r3, #7
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb2:	334c      	adds	r3, #76	; 0x4c
 8004eb4:	2260      	movs	r2, #96	; 0x60
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f002 f9da 	bl	8007272 <memset>
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	4a0c      	ldr	r2, [pc, #48]	; (8004ef4 <prvInitialiseNewTask+0x120>)
 8004ec2:	651a      	str	r2, [r3, #80]	; 0x50
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	4a0c      	ldr	r2, [pc, #48]	; (8004ef8 <prvInitialiseNewTask+0x124>)
 8004ec8:	655a      	str	r2, [r3, #84]	; 0x54
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	4a0b      	ldr	r2, [pc, #44]	; (8004efc <prvInitialiseNewTask+0x128>)
 8004ece:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	68f9      	ldr	r1, [r7, #12]
 8004ed4:	69b8      	ldr	r0, [r7, #24]
 8004ed6:	f001 fcc5 	bl	8006864 <pxPortInitialiseStack>
 8004eda:	4602      	mov	r2, r0
 8004edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ede:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eec:	bf00      	nop
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	080083b8 	.word	0x080083b8
 8004ef8:	080083d8 	.word	0x080083d8
 8004efc:	08008398 	.word	0x08008398

08004f00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f08:	f001 fda0 	bl	8006a4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f0c:	4b2a      	ldr	r3, [pc, #168]	; (8004fb8 <prvAddNewTaskToReadyList+0xb8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3301      	adds	r3, #1
 8004f12:	4a29      	ldr	r2, [pc, #164]	; (8004fb8 <prvAddNewTaskToReadyList+0xb8>)
 8004f14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f16:	4b29      	ldr	r3, [pc, #164]	; (8004fbc <prvAddNewTaskToReadyList+0xbc>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f1e:	4a27      	ldr	r2, [pc, #156]	; (8004fbc <prvAddNewTaskToReadyList+0xbc>)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f24:	4b24      	ldr	r3, [pc, #144]	; (8004fb8 <prvAddNewTaskToReadyList+0xb8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d110      	bne.n	8004f4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f2c:	f000 fc2e 	bl	800578c <prvInitialiseTaskLists>
 8004f30:	e00d      	b.n	8004f4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f32:	4b23      	ldr	r3, [pc, #140]	; (8004fc0 <prvAddNewTaskToReadyList+0xc0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d109      	bne.n	8004f4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f3a:	4b20      	ldr	r3, [pc, #128]	; (8004fbc <prvAddNewTaskToReadyList+0xbc>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d802      	bhi.n	8004f4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f48:	4a1c      	ldr	r2, [pc, #112]	; (8004fbc <prvAddNewTaskToReadyList+0xbc>)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f4e:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <prvAddNewTaskToReadyList+0xc4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3301      	adds	r3, #1
 8004f54:	4a1b      	ldr	r2, [pc, #108]	; (8004fc4 <prvAddNewTaskToReadyList+0xc4>)
 8004f56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	409a      	lsls	r2, r3
 8004f60:	4b19      	ldr	r3, [pc, #100]	; (8004fc8 <prvAddNewTaskToReadyList+0xc8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	4a18      	ldr	r2, [pc, #96]	; (8004fc8 <prvAddNewTaskToReadyList+0xc8>)
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6e:	4613      	mov	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4a15      	ldr	r2, [pc, #84]	; (8004fcc <prvAddNewTaskToReadyList+0xcc>)
 8004f78:	441a      	add	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4610      	mov	r0, r2
 8004f82:	f7fe fe62 	bl	8003c4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f86:	f001 fd91 	bl	8006aac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f8a:	4b0d      	ldr	r3, [pc, #52]	; (8004fc0 <prvAddNewTaskToReadyList+0xc0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00e      	beq.n	8004fb0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f92:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <prvAddNewTaskToReadyList+0xbc>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d207      	bcs.n	8004fb0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <prvAddNewTaskToReadyList+0xd0>)
 8004fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	20000a80 	.word	0x20000a80
 8004fbc:	20000980 	.word	0x20000980
 8004fc0:	20000a8c 	.word	0x20000a8c
 8004fc4:	20000a9c 	.word	0x20000a9c
 8004fc8:	20000a88 	.word	0x20000a88
 8004fcc:	20000984 	.word	0x20000984
 8004fd0:	e000ed04 	.word	0xe000ed04

08004fd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d017      	beq.n	8005016 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004fe6:	4b13      	ldr	r3, [pc, #76]	; (8005034 <vTaskDelay+0x60>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <vTaskDelay+0x30>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	60bb      	str	r3, [r7, #8]
}
 8005000:	bf00      	nop
 8005002:	e7fe      	b.n	8005002 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005004:	f000 f88a 	bl	800511c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005008:	2100      	movs	r1, #0
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f001 f83c 	bl	8006088 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005010:	f000 f892 	bl	8005138 <xTaskResumeAll>
 8005014:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d107      	bne.n	800502c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800501c:	4b06      	ldr	r3, [pc, #24]	; (8005038 <vTaskDelay+0x64>)
 800501e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800502c:	bf00      	nop
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20000aa8 	.word	0x20000aa8
 8005038:	e000ed04 	.word	0xe000ed04

0800503c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08a      	sub	sp, #40	; 0x28
 8005040:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005042:	2300      	movs	r3, #0
 8005044:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005046:	2300      	movs	r3, #0
 8005048:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800504a:	463a      	mov	r2, r7
 800504c:	1d39      	adds	r1, r7, #4
 800504e:	f107 0308 	add.w	r3, r7, #8
 8005052:	4618      	mov	r0, r3
 8005054:	f7fb fe30 	bl	8000cb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005058:	6839      	ldr	r1, [r7, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	9202      	str	r2, [sp, #8]
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	2300      	movs	r3, #0
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	2300      	movs	r3, #0
 8005068:	460a      	mov	r2, r1
 800506a:	4924      	ldr	r1, [pc, #144]	; (80050fc <vTaskStartScheduler+0xc0>)
 800506c:	4824      	ldr	r0, [pc, #144]	; (8005100 <vTaskStartScheduler+0xc4>)
 800506e:	f7ff fe0f 	bl	8004c90 <xTaskCreateStatic>
 8005072:	4603      	mov	r3, r0
 8005074:	4a23      	ldr	r2, [pc, #140]	; (8005104 <vTaskStartScheduler+0xc8>)
 8005076:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005078:	4b22      	ldr	r3, [pc, #136]	; (8005104 <vTaskStartScheduler+0xc8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005080:	2301      	movs	r3, #1
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e001      	b.n	800508a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d102      	bne.n	8005096 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005090:	f001 f860 	bl	8006154 <xTimerCreateTimerTask>
 8005094:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d11b      	bne.n	80050d4 <vTaskStartScheduler+0x98>
	__asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	613b      	str	r3, [r7, #16]
}
 80050ae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050b0:	4b15      	ldr	r3, [pc, #84]	; (8005108 <vTaskStartScheduler+0xcc>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	334c      	adds	r3, #76	; 0x4c
 80050b6:	4a15      	ldr	r2, [pc, #84]	; (800510c <vTaskStartScheduler+0xd0>)
 80050b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050ba:	4b15      	ldr	r3, [pc, #84]	; (8005110 <vTaskStartScheduler+0xd4>)
 80050bc:	f04f 32ff 	mov.w	r2, #4294967295
 80050c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050c2:	4b14      	ldr	r3, [pc, #80]	; (8005114 <vTaskStartScheduler+0xd8>)
 80050c4:	2201      	movs	r2, #1
 80050c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80050c8:	4b13      	ldr	r3, [pc, #76]	; (8005118 <vTaskStartScheduler+0xdc>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050ce:	f001 fc4b 	bl	8006968 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050d2:	e00e      	b.n	80050f2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050da:	d10a      	bne.n	80050f2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	60fb      	str	r3, [r7, #12]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <vTaskStartScheduler+0xb4>
}
 80050f2:	bf00      	nop
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	08008314 	.word	0x08008314
 8005100:	0800575d 	.word	0x0800575d
 8005104:	20000aa4 	.word	0x20000aa4
 8005108:	20000980 	.word	0x20000980
 800510c:	200000ac 	.word	0x200000ac
 8005110:	20000aa0 	.word	0x20000aa0
 8005114:	20000a8c 	.word	0x20000a8c
 8005118:	20000a84 	.word	0x20000a84

0800511c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005120:	4b04      	ldr	r3, [pc, #16]	; (8005134 <vTaskSuspendAll+0x18>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3301      	adds	r3, #1
 8005126:	4a03      	ldr	r2, [pc, #12]	; (8005134 <vTaskSuspendAll+0x18>)
 8005128:	6013      	str	r3, [r2, #0]
}
 800512a:	bf00      	nop
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20000aa8 	.word	0x20000aa8

08005138 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005142:	2300      	movs	r3, #0
 8005144:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005146:	4b41      	ldr	r3, [pc, #260]	; (800524c <xTaskResumeAll+0x114>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10a      	bne.n	8005164 <xTaskResumeAll+0x2c>
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	603b      	str	r3, [r7, #0]
}
 8005160:	bf00      	nop
 8005162:	e7fe      	b.n	8005162 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005164:	f001 fc72 	bl	8006a4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005168:	4b38      	ldr	r3, [pc, #224]	; (800524c <xTaskResumeAll+0x114>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3b01      	subs	r3, #1
 800516e:	4a37      	ldr	r2, [pc, #220]	; (800524c <xTaskResumeAll+0x114>)
 8005170:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005172:	4b36      	ldr	r3, [pc, #216]	; (800524c <xTaskResumeAll+0x114>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d161      	bne.n	800523e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800517a:	4b35      	ldr	r3, [pc, #212]	; (8005250 <xTaskResumeAll+0x118>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d05d      	beq.n	800523e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005182:	e02e      	b.n	80051e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005184:	4b33      	ldr	r3, [pc, #204]	; (8005254 <xTaskResumeAll+0x11c>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	3318      	adds	r3, #24
 8005190:	4618      	mov	r0, r3
 8005192:	f7fe fdb5 	bl	8003d00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3304      	adds	r3, #4
 800519a:	4618      	mov	r0, r3
 800519c:	f7fe fdb0 	bl	8003d00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	2201      	movs	r2, #1
 80051a6:	409a      	lsls	r2, r3
 80051a8:	4b2b      	ldr	r3, [pc, #172]	; (8005258 <xTaskResumeAll+0x120>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	4a2a      	ldr	r2, [pc, #168]	; (8005258 <xTaskResumeAll+0x120>)
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4a27      	ldr	r2, [pc, #156]	; (800525c <xTaskResumeAll+0x124>)
 80051c0:	441a      	add	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3304      	adds	r3, #4
 80051c6:	4619      	mov	r1, r3
 80051c8:	4610      	mov	r0, r2
 80051ca:	f7fe fd3e 	bl	8003c4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d2:	4b23      	ldr	r3, [pc, #140]	; (8005260 <xTaskResumeAll+0x128>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	429a      	cmp	r2, r3
 80051da:	d302      	bcc.n	80051e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80051dc:	4b21      	ldr	r3, [pc, #132]	; (8005264 <xTaskResumeAll+0x12c>)
 80051de:	2201      	movs	r2, #1
 80051e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051e2:	4b1c      	ldr	r3, [pc, #112]	; (8005254 <xTaskResumeAll+0x11c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1cc      	bne.n	8005184 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051f0:	f000 fb6e 	bl	80058d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80051f4:	4b1c      	ldr	r3, [pc, #112]	; (8005268 <xTaskResumeAll+0x130>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d010      	beq.n	8005222 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005200:	f000 f856 	bl	80052b0 <xTaskIncrementTick>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800520a:	4b16      	ldr	r3, [pc, #88]	; (8005264 <xTaskResumeAll+0x12c>)
 800520c:	2201      	movs	r2, #1
 800520e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3b01      	subs	r3, #1
 8005214:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1f1      	bne.n	8005200 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800521c:	4b12      	ldr	r3, [pc, #72]	; (8005268 <xTaskResumeAll+0x130>)
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005222:	4b10      	ldr	r3, [pc, #64]	; (8005264 <xTaskResumeAll+0x12c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d009      	beq.n	800523e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800522a:	2301      	movs	r3, #1
 800522c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800522e:	4b0f      	ldr	r3, [pc, #60]	; (800526c <xTaskResumeAll+0x134>)
 8005230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800523e:	f001 fc35 	bl	8006aac <vPortExitCritical>

	return xAlreadyYielded;
 8005242:	68bb      	ldr	r3, [r7, #8]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20000aa8 	.word	0x20000aa8
 8005250:	20000a80 	.word	0x20000a80
 8005254:	20000a40 	.word	0x20000a40
 8005258:	20000a88 	.word	0x20000a88
 800525c:	20000984 	.word	0x20000984
 8005260:	20000980 	.word	0x20000980
 8005264:	20000a94 	.word	0x20000a94
 8005268:	20000a90 	.word	0x20000a90
 800526c:	e000ed04 	.word	0xe000ed04

08005270 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005276:	4b04      	ldr	r3, [pc, #16]	; (8005288 <xTaskGetTickCount+0x18>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800527c:	687b      	ldr	r3, [r7, #4]
}
 800527e:	4618      	mov	r0, r3
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr
 8005288:	20000a84 	.word	0x20000a84

0800528c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005292:	f001 fc9d 	bl	8006bd0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005296:	2300      	movs	r3, #0
 8005298:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800529a:	4b04      	ldr	r3, [pc, #16]	; (80052ac <xTaskGetTickCountFromISR+0x20>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052a0:	683b      	ldr	r3, [r7, #0]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20000a84 	.word	0x20000a84

080052b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052b6:	2300      	movs	r3, #0
 80052b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ba:	4b51      	ldr	r3, [pc, #324]	; (8005400 <xTaskIncrementTick+0x150>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f040 808d 	bne.w	80053de <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052c4:	4b4f      	ldr	r3, [pc, #316]	; (8005404 <xTaskIncrementTick+0x154>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3301      	adds	r3, #1
 80052ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052cc:	4a4d      	ldr	r2, [pc, #308]	; (8005404 <xTaskIncrementTick+0x154>)
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d120      	bne.n	800531a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80052d8:	4b4b      	ldr	r3, [pc, #300]	; (8005408 <xTaskIncrementTick+0x158>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	603b      	str	r3, [r7, #0]
}
 80052f4:	bf00      	nop
 80052f6:	e7fe      	b.n	80052f6 <xTaskIncrementTick+0x46>
 80052f8:	4b43      	ldr	r3, [pc, #268]	; (8005408 <xTaskIncrementTick+0x158>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	4b43      	ldr	r3, [pc, #268]	; (800540c <xTaskIncrementTick+0x15c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a41      	ldr	r2, [pc, #260]	; (8005408 <xTaskIncrementTick+0x158>)
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	4a41      	ldr	r2, [pc, #260]	; (800540c <xTaskIncrementTick+0x15c>)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	4b40      	ldr	r3, [pc, #256]	; (8005410 <xTaskIncrementTick+0x160>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3301      	adds	r3, #1
 8005312:	4a3f      	ldr	r2, [pc, #252]	; (8005410 <xTaskIncrementTick+0x160>)
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	f000 fadb 	bl	80058d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800531a:	4b3e      	ldr	r3, [pc, #248]	; (8005414 <xTaskIncrementTick+0x164>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	429a      	cmp	r2, r3
 8005322:	d34d      	bcc.n	80053c0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005324:	4b38      	ldr	r3, [pc, #224]	; (8005408 <xTaskIncrementTick+0x158>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <xTaskIncrementTick+0x82>
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <xTaskIncrementTick+0x84>
 8005332:	2300      	movs	r3, #0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d004      	beq.n	8005342 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005338:	4b36      	ldr	r3, [pc, #216]	; (8005414 <xTaskIncrementTick+0x164>)
 800533a:	f04f 32ff 	mov.w	r2, #4294967295
 800533e:	601a      	str	r2, [r3, #0]
					break;
 8005340:	e03e      	b.n	80053c0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005342:	4b31      	ldr	r3, [pc, #196]	; (8005408 <xTaskIncrementTick+0x158>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	429a      	cmp	r2, r3
 8005358:	d203      	bcs.n	8005362 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800535a:	4a2e      	ldr	r2, [pc, #184]	; (8005414 <xTaskIncrementTick+0x164>)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6013      	str	r3, [r2, #0]
						break;
 8005360:	e02e      	b.n	80053c0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	3304      	adds	r3, #4
 8005366:	4618      	mov	r0, r3
 8005368:	f7fe fcca 	bl	8003d00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005370:	2b00      	cmp	r3, #0
 8005372:	d004      	beq.n	800537e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	3318      	adds	r3, #24
 8005378:	4618      	mov	r0, r3
 800537a:	f7fe fcc1 	bl	8003d00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	2201      	movs	r2, #1
 8005384:	409a      	lsls	r2, r3
 8005386:	4b24      	ldr	r3, [pc, #144]	; (8005418 <xTaskIncrementTick+0x168>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4313      	orrs	r3, r2
 800538c:	4a22      	ldr	r2, [pc, #136]	; (8005418 <xTaskIncrementTick+0x168>)
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4a1f      	ldr	r2, [pc, #124]	; (800541c <xTaskIncrementTick+0x16c>)
 800539e:	441a      	add	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	3304      	adds	r3, #4
 80053a4:	4619      	mov	r1, r3
 80053a6:	4610      	mov	r0, r2
 80053a8:	f7fe fc4f 	bl	8003c4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b0:	4b1b      	ldr	r3, [pc, #108]	; (8005420 <xTaskIncrementTick+0x170>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d3b4      	bcc.n	8005324 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80053ba:	2301      	movs	r3, #1
 80053bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053be:	e7b1      	b.n	8005324 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053c0:	4b17      	ldr	r3, [pc, #92]	; (8005420 <xTaskIncrementTick+0x170>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c6:	4915      	ldr	r1, [pc, #84]	; (800541c <xTaskIncrementTick+0x16c>)
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d907      	bls.n	80053e8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80053d8:	2301      	movs	r3, #1
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	e004      	b.n	80053e8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80053de:	4b11      	ldr	r3, [pc, #68]	; (8005424 <xTaskIncrementTick+0x174>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3301      	adds	r3, #1
 80053e4:	4a0f      	ldr	r2, [pc, #60]	; (8005424 <xTaskIncrementTick+0x174>)
 80053e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80053e8:	4b0f      	ldr	r3, [pc, #60]	; (8005428 <xTaskIncrementTick+0x178>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80053f0:	2301      	movs	r3, #1
 80053f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80053f4:	697b      	ldr	r3, [r7, #20]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20000aa8 	.word	0x20000aa8
 8005404:	20000a84 	.word	0x20000a84
 8005408:	20000a38 	.word	0x20000a38
 800540c:	20000a3c 	.word	0x20000a3c
 8005410:	20000a98 	.word	0x20000a98
 8005414:	20000aa0 	.word	0x20000aa0
 8005418:	20000a88 	.word	0x20000a88
 800541c:	20000984 	.word	0x20000984
 8005420:	20000980 	.word	0x20000980
 8005424:	20000a90 	.word	0x20000a90
 8005428:	20000a94 	.word	0x20000a94

0800542c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005432:	4b29      	ldr	r3, [pc, #164]	; (80054d8 <vTaskSwitchContext+0xac>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800543a:	4b28      	ldr	r3, [pc, #160]	; (80054dc <vTaskSwitchContext+0xb0>)
 800543c:	2201      	movs	r2, #1
 800543e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005440:	e044      	b.n	80054cc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005442:	4b26      	ldr	r3, [pc, #152]	; (80054dc <vTaskSwitchContext+0xb0>)
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005448:	4b25      	ldr	r3, [pc, #148]	; (80054e0 <vTaskSwitchContext+0xb4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	fab3 f383 	clz	r3, r3
 8005454:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005456:	7afb      	ldrb	r3, [r7, #11]
 8005458:	f1c3 031f 	rsb	r3, r3, #31
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	4921      	ldr	r1, [pc, #132]	; (80054e4 <vTaskSwitchContext+0xb8>)
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4613      	mov	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	440b      	add	r3, r1
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10a      	bne.n	8005488 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	607b      	str	r3, [r7, #4]
}
 8005484:	bf00      	nop
 8005486:	e7fe      	b.n	8005486 <vTaskSwitchContext+0x5a>
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4613      	mov	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4a14      	ldr	r2, [pc, #80]	; (80054e4 <vTaskSwitchContext+0xb8>)
 8005494:	4413      	add	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	3308      	adds	r3, #8
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d104      	bne.n	80054b8 <vTaskSwitchContext+0x8c>
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	605a      	str	r2, [r3, #4]
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	4a0a      	ldr	r2, [pc, #40]	; (80054e8 <vTaskSwitchContext+0xbc>)
 80054c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054c2:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <vTaskSwitchContext+0xbc>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	334c      	adds	r3, #76	; 0x4c
 80054c8:	4a08      	ldr	r2, [pc, #32]	; (80054ec <vTaskSwitchContext+0xc0>)
 80054ca:	6013      	str	r3, [r2, #0]
}
 80054cc:	bf00      	nop
 80054ce:	371c      	adds	r7, #28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	20000aa8 	.word	0x20000aa8
 80054dc:	20000a94 	.word	0x20000a94
 80054e0:	20000a88 	.word	0x20000a88
 80054e4:	20000984 	.word	0x20000984
 80054e8:	20000980 	.word	0x20000980
 80054ec:	200000ac 	.word	0x200000ac

080054f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	60fb      	str	r3, [r7, #12]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005516:	4b07      	ldr	r3, [pc, #28]	; (8005534 <vTaskPlaceOnEventList+0x44>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3318      	adds	r3, #24
 800551c:	4619      	mov	r1, r3
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fe fbb6 	bl	8003c90 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005524:	2101      	movs	r1, #1
 8005526:	6838      	ldr	r0, [r7, #0]
 8005528:	f000 fdae 	bl	8006088 <prvAddCurrentTaskToDelayedList>
}
 800552c:	bf00      	nop
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20000980 	.word	0x20000980

08005538 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	617b      	str	r3, [r7, #20]
}
 800555c:	bf00      	nop
 800555e:	e7fe      	b.n	800555e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005560:	4b0a      	ldr	r3, [pc, #40]	; (800558c <vTaskPlaceOnEventListRestricted+0x54>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3318      	adds	r3, #24
 8005566:	4619      	mov	r1, r3
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f7fe fb6e 	bl	8003c4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005574:	f04f 33ff 	mov.w	r3, #4294967295
 8005578:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800557a:	6879      	ldr	r1, [r7, #4]
 800557c:	68b8      	ldr	r0, [r7, #8]
 800557e:	f000 fd83 	bl	8006088 <prvAddCurrentTaskToDelayedList>
	}
 8005582:	bf00      	nop
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	20000980 	.word	0x20000980

08005590 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10a      	bne.n	80055bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80055a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	60fb      	str	r3, [r7, #12]
}
 80055b8:	bf00      	nop
 80055ba:	e7fe      	b.n	80055ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	3318      	adds	r3, #24
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fe fb9d 	bl	8003d00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055c6:	4b1d      	ldr	r3, [pc, #116]	; (800563c <xTaskRemoveFromEventList+0xac>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d11c      	bne.n	8005608 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	3304      	adds	r3, #4
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fe fb94 	bl	8003d00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055dc:	2201      	movs	r2, #1
 80055de:	409a      	lsls	r2, r3
 80055e0:	4b17      	ldr	r3, [pc, #92]	; (8005640 <xTaskRemoveFromEventList+0xb0>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	4a16      	ldr	r2, [pc, #88]	; (8005640 <xTaskRemoveFromEventList+0xb0>)
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ee:	4613      	mov	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4a13      	ldr	r2, [pc, #76]	; (8005644 <xTaskRemoveFromEventList+0xb4>)
 80055f8:	441a      	add	r2, r3
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	3304      	adds	r3, #4
 80055fe:	4619      	mov	r1, r3
 8005600:	4610      	mov	r0, r2
 8005602:	f7fe fb22 	bl	8003c4a <vListInsertEnd>
 8005606:	e005      	b.n	8005614 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	3318      	adds	r3, #24
 800560c:	4619      	mov	r1, r3
 800560e:	480e      	ldr	r0, [pc, #56]	; (8005648 <xTaskRemoveFromEventList+0xb8>)
 8005610:	f7fe fb1b 	bl	8003c4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005618:	4b0c      	ldr	r3, [pc, #48]	; (800564c <xTaskRemoveFromEventList+0xbc>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	429a      	cmp	r2, r3
 8005620:	d905      	bls.n	800562e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005622:	2301      	movs	r3, #1
 8005624:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005626:	4b0a      	ldr	r3, [pc, #40]	; (8005650 <xTaskRemoveFromEventList+0xc0>)
 8005628:	2201      	movs	r2, #1
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	e001      	b.n	8005632 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005632:	697b      	ldr	r3, [r7, #20]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3718      	adds	r7, #24
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	20000aa8 	.word	0x20000aa8
 8005640:	20000a88 	.word	0x20000a88
 8005644:	20000984 	.word	0x20000984
 8005648:	20000a40 	.word	0x20000a40
 800564c:	20000980 	.word	0x20000980
 8005650:	20000a94 	.word	0x20000a94

08005654 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800565c:	4b06      	ldr	r3, [pc, #24]	; (8005678 <vTaskInternalSetTimeOutState+0x24>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005664:	4b05      	ldr	r3, [pc, #20]	; (800567c <vTaskInternalSetTimeOutState+0x28>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	605a      	str	r2, [r3, #4]
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	20000a98 	.word	0x20000a98
 800567c:	20000a84 	.word	0x20000a84

08005680 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	613b      	str	r3, [r7, #16]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10a      	bne.n	80056c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	60fb      	str	r3, [r7, #12]
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80056c2:	f001 f9c3 	bl	8006a4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056c6:	4b1d      	ldr	r3, [pc, #116]	; (800573c <xTaskCheckForTimeOut+0xbc>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056de:	d102      	bne.n	80056e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80056e0:	2300      	movs	r3, #0
 80056e2:	61fb      	str	r3, [r7, #28]
 80056e4:	e023      	b.n	800572e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4b15      	ldr	r3, [pc, #84]	; (8005740 <xTaskCheckForTimeOut+0xc0>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d007      	beq.n	8005702 <xTaskCheckForTimeOut+0x82>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d302      	bcc.n	8005702 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056fc:	2301      	movs	r3, #1
 80056fe:	61fb      	str	r3, [r7, #28]
 8005700:	e015      	b.n	800572e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	429a      	cmp	r2, r3
 800570a:	d20b      	bcs.n	8005724 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	1ad2      	subs	r2, r2, r3
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff ff9b 	bl	8005654 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800571e:	2300      	movs	r3, #0
 8005720:	61fb      	str	r3, [r7, #28]
 8005722:	e004      	b.n	800572e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800572a:	2301      	movs	r3, #1
 800572c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800572e:	f001 f9bd 	bl	8006aac <vPortExitCritical>

	return xReturn;
 8005732:	69fb      	ldr	r3, [r7, #28]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3720      	adds	r7, #32
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	20000a84 	.word	0x20000a84
 8005740:	20000a98 	.word	0x20000a98

08005744 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005748:	4b03      	ldr	r3, [pc, #12]	; (8005758 <vTaskMissedYield+0x14>)
 800574a:	2201      	movs	r2, #1
 800574c:	601a      	str	r2, [r3, #0]
}
 800574e:	bf00      	nop
 8005750:	46bd      	mov	sp, r7
 8005752:	bc80      	pop	{r7}
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	20000a94 	.word	0x20000a94

0800575c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005764:	f000 f852 	bl	800580c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005768:	4b06      	ldr	r3, [pc, #24]	; (8005784 <prvIdleTask+0x28>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d9f9      	bls.n	8005764 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005770:	4b05      	ldr	r3, [pc, #20]	; (8005788 <prvIdleTask+0x2c>)
 8005772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005780:	e7f0      	b.n	8005764 <prvIdleTask+0x8>
 8005782:	bf00      	nop
 8005784:	20000984 	.word	0x20000984
 8005788:	e000ed04 	.word	0xe000ed04

0800578c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005792:	2300      	movs	r3, #0
 8005794:	607b      	str	r3, [r7, #4]
 8005796:	e00c      	b.n	80057b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	4613      	mov	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4a12      	ldr	r2, [pc, #72]	; (80057ec <prvInitialiseTaskLists+0x60>)
 80057a4:	4413      	add	r3, r2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fe fa24 	bl	8003bf4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3301      	adds	r3, #1
 80057b0:	607b      	str	r3, [r7, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b06      	cmp	r3, #6
 80057b6:	d9ef      	bls.n	8005798 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057b8:	480d      	ldr	r0, [pc, #52]	; (80057f0 <prvInitialiseTaskLists+0x64>)
 80057ba:	f7fe fa1b 	bl	8003bf4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057be:	480d      	ldr	r0, [pc, #52]	; (80057f4 <prvInitialiseTaskLists+0x68>)
 80057c0:	f7fe fa18 	bl	8003bf4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057c4:	480c      	ldr	r0, [pc, #48]	; (80057f8 <prvInitialiseTaskLists+0x6c>)
 80057c6:	f7fe fa15 	bl	8003bf4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057ca:	480c      	ldr	r0, [pc, #48]	; (80057fc <prvInitialiseTaskLists+0x70>)
 80057cc:	f7fe fa12 	bl	8003bf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057d0:	480b      	ldr	r0, [pc, #44]	; (8005800 <prvInitialiseTaskLists+0x74>)
 80057d2:	f7fe fa0f 	bl	8003bf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057d6:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <prvInitialiseTaskLists+0x78>)
 80057d8:	4a05      	ldr	r2, [pc, #20]	; (80057f0 <prvInitialiseTaskLists+0x64>)
 80057da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057dc:	4b0a      	ldr	r3, [pc, #40]	; (8005808 <prvInitialiseTaskLists+0x7c>)
 80057de:	4a05      	ldr	r2, [pc, #20]	; (80057f4 <prvInitialiseTaskLists+0x68>)
 80057e0:	601a      	str	r2, [r3, #0]
}
 80057e2:	bf00      	nop
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	20000984 	.word	0x20000984
 80057f0:	20000a10 	.word	0x20000a10
 80057f4:	20000a24 	.word	0x20000a24
 80057f8:	20000a40 	.word	0x20000a40
 80057fc:	20000a54 	.word	0x20000a54
 8005800:	20000a6c 	.word	0x20000a6c
 8005804:	20000a38 	.word	0x20000a38
 8005808:	20000a3c 	.word	0x20000a3c

0800580c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005812:	e019      	b.n	8005848 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005814:	f001 f91a 	bl	8006a4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005818:	4b10      	ldr	r3, [pc, #64]	; (800585c <prvCheckTasksWaitingTermination+0x50>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3304      	adds	r3, #4
 8005824:	4618      	mov	r0, r3
 8005826:	f7fe fa6b 	bl	8003d00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800582a:	4b0d      	ldr	r3, [pc, #52]	; (8005860 <prvCheckTasksWaitingTermination+0x54>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3b01      	subs	r3, #1
 8005830:	4a0b      	ldr	r2, [pc, #44]	; (8005860 <prvCheckTasksWaitingTermination+0x54>)
 8005832:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005834:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <prvCheckTasksWaitingTermination+0x58>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3b01      	subs	r3, #1
 800583a:	4a0a      	ldr	r2, [pc, #40]	; (8005864 <prvCheckTasksWaitingTermination+0x58>)
 800583c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800583e:	f001 f935 	bl	8006aac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f810 	bl	8005868 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005848:	4b06      	ldr	r3, [pc, #24]	; (8005864 <prvCheckTasksWaitingTermination+0x58>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e1      	bne.n	8005814 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005850:	bf00      	nop
 8005852:	bf00      	nop
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	20000a54 	.word	0x20000a54
 8005860:	20000a80 	.word	0x20000a80
 8005864:	20000a68 	.word	0x20000a68

08005868 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	334c      	adds	r3, #76	; 0x4c
 8005874:	4618      	mov	r0, r3
 8005876:	f001 fe35 	bl	80074e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d108      	bne.n	8005896 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005888:	4618      	mov	r0, r3
 800588a:	f001 faa3 	bl	8006dd4 <vPortFree>
				vPortFree( pxTCB );
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f001 faa0 	bl	8006dd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005894:	e018      	b.n	80058c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800589c:	2b01      	cmp	r3, #1
 800589e:	d103      	bne.n	80058a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f001 fa97 	bl	8006dd4 <vPortFree>
	}
 80058a6:	e00f      	b.n	80058c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d00a      	beq.n	80058c8 <prvDeleteTCB+0x60>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	60fb      	str	r3, [r7, #12]
}
 80058c4:	bf00      	nop
 80058c6:	e7fe      	b.n	80058c6 <prvDeleteTCB+0x5e>
	}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058d6:	4b0e      	ldr	r3, [pc, #56]	; (8005910 <prvResetNextTaskUnblockTime+0x40>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <prvResetNextTaskUnblockTime+0x14>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <prvResetNextTaskUnblockTime+0x16>
 80058e4:	2300      	movs	r3, #0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d004      	beq.n	80058f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058ea:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <prvResetNextTaskUnblockTime+0x44>)
 80058ec:	f04f 32ff 	mov.w	r2, #4294967295
 80058f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058f2:	e008      	b.n	8005906 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80058f4:	4b06      	ldr	r3, [pc, #24]	; (8005910 <prvResetNextTaskUnblockTime+0x40>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	4a04      	ldr	r2, [pc, #16]	; (8005914 <prvResetNextTaskUnblockTime+0x44>)
 8005904:	6013      	str	r3, [r2, #0]
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	bc80      	pop	{r7}
 800590e:	4770      	bx	lr
 8005910:	20000a38 	.word	0x20000a38
 8005914:	20000aa0 	.word	0x20000aa0

08005918 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800591e:	4b0b      	ldr	r3, [pc, #44]	; (800594c <xTaskGetSchedulerState+0x34>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d102      	bne.n	800592c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005926:	2301      	movs	r3, #1
 8005928:	607b      	str	r3, [r7, #4]
 800592a:	e008      	b.n	800593e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800592c:	4b08      	ldr	r3, [pc, #32]	; (8005950 <xTaskGetSchedulerState+0x38>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d102      	bne.n	800593a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005934:	2302      	movs	r3, #2
 8005936:	607b      	str	r3, [r7, #4]
 8005938:	e001      	b.n	800593e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800593a:	2300      	movs	r3, #0
 800593c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800593e:	687b      	ldr	r3, [r7, #4]
	}
 8005940:	4618      	mov	r0, r3
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	bc80      	pop	{r7}
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	20000a8c 	.word	0x20000a8c
 8005950:	20000aa8 	.word	0x20000aa8

08005954 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d06e      	beq.n	8005a48 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596e:	4b39      	ldr	r3, [pc, #228]	; (8005a54 <xTaskPriorityInherit+0x100>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	429a      	cmp	r2, r3
 8005976:	d25e      	bcs.n	8005a36 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	db06      	blt.n	800598e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005980:	4b34      	ldr	r3, [pc, #208]	; (8005a54 <xTaskPriorityInherit+0x100>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	f1c3 0207 	rsb	r2, r3, #7
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	6959      	ldr	r1, [r3, #20]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4a2e      	ldr	r2, [pc, #184]	; (8005a58 <xTaskPriorityInherit+0x104>)
 80059a0:	4413      	add	r3, r2
 80059a2:	4299      	cmp	r1, r3
 80059a4:	d101      	bne.n	80059aa <xTaskPriorityInherit+0x56>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <xTaskPriorityInherit+0x58>
 80059aa:	2300      	movs	r3, #0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d03a      	beq.n	8005a26 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fe f9a3 	bl	8003d00 <uxListRemove>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d115      	bne.n	80059ec <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c4:	4924      	ldr	r1, [pc, #144]	; (8005a58 <xTaskPriorityInherit+0x104>)
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	440b      	add	r3, r1
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10a      	bne.n	80059ec <xTaskPriorityInherit+0x98>
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059da:	2201      	movs	r2, #1
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	43da      	mvns	r2, r3
 80059e2:	4b1e      	ldr	r3, [pc, #120]	; (8005a5c <xTaskPriorityInherit+0x108>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4013      	ands	r3, r2
 80059e8:	4a1c      	ldr	r2, [pc, #112]	; (8005a5c <xTaskPriorityInherit+0x108>)
 80059ea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059ec:	4b19      	ldr	r3, [pc, #100]	; (8005a54 <xTaskPriorityInherit+0x100>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fa:	2201      	movs	r2, #1
 80059fc:	409a      	lsls	r2, r3
 80059fe:	4b17      	ldr	r3, [pc, #92]	; (8005a5c <xTaskPriorityInherit+0x108>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	4a15      	ldr	r2, [pc, #84]	; (8005a5c <xTaskPriorityInherit+0x108>)
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4a10      	ldr	r2, [pc, #64]	; (8005a58 <xTaskPriorityInherit+0x104>)
 8005a16:	441a      	add	r2, r3
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4610      	mov	r0, r2
 8005a20:	f7fe f913 	bl	8003c4a <vListInsertEnd>
 8005a24:	e004      	b.n	8005a30 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a26:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <xTaskPriorityInherit+0x100>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005a30:	2301      	movs	r3, #1
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	e008      	b.n	8005a48 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a3a:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <xTaskPriorityInherit+0x100>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d201      	bcs.n	8005a48 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005a44:	2301      	movs	r3, #1
 8005a46:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a48:	68fb      	ldr	r3, [r7, #12]
	}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20000980 	.word	0x20000980
 8005a58:	20000984 	.word	0x20000984
 8005a5c:	20000a88 	.word	0x20000a88

08005a60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d06e      	beq.n	8005b54 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a76:	4b3a      	ldr	r3, [pc, #232]	; (8005b60 <xTaskPriorityDisinherit+0x100>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d00a      	beq.n	8005a96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	60fb      	str	r3, [r7, #12]
}
 8005a92:	bf00      	nop
 8005a94:	e7fe      	b.n	8005a94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10a      	bne.n	8005ab4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	60bb      	str	r3, [r7, #8]
}
 8005ab0:	bf00      	nop
 8005ab2:	e7fe      	b.n	8005ab2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab8:	1e5a      	subs	r2, r3, #1
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d044      	beq.n	8005b54 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d140      	bne.n	8005b54 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fe f912 	bl	8003d00 <uxListRemove>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d115      	bne.n	8005b0e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae6:	491f      	ldr	r1, [pc, #124]	; (8005b64 <xTaskPriorityDisinherit+0x104>)
 8005ae8:	4613      	mov	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	440b      	add	r3, r1
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10a      	bne.n	8005b0e <xTaskPriorityDisinherit+0xae>
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	2201      	movs	r2, #1
 8005afe:	fa02 f303 	lsl.w	r3, r2, r3
 8005b02:	43da      	mvns	r2, r3
 8005b04:	4b18      	ldr	r3, [pc, #96]	; (8005b68 <xTaskPriorityDisinherit+0x108>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	4a17      	ldr	r2, [pc, #92]	; (8005b68 <xTaskPriorityDisinherit+0x108>)
 8005b0c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1a:	f1c3 0207 	rsb	r2, r3, #7
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	2201      	movs	r2, #1
 8005b28:	409a      	lsls	r2, r3
 8005b2a:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <xTaskPriorityDisinherit+0x108>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	4a0d      	ldr	r2, [pc, #52]	; (8005b68 <xTaskPriorityDisinherit+0x108>)
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b38:	4613      	mov	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4a08      	ldr	r2, [pc, #32]	; (8005b64 <xTaskPriorityDisinherit+0x104>)
 8005b42:	441a      	add	r2, r3
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	3304      	adds	r3, #4
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	f7fe f87d 	bl	8003c4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b50:	2301      	movs	r3, #1
 8005b52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b54:	697b      	ldr	r3, [r7, #20]
	}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20000980 	.word	0x20000980
 8005b64:	20000984 	.word	0x20000984
 8005b68:	20000a88 	.word	0x20000a88

08005b6c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b088      	sub	sp, #32
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8088 	beq.w	8005c96 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	60fb      	str	r3, [r7, #12]
}
 8005ba0:	bf00      	nop
 8005ba2:	e7fe      	b.n	8005ba2 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d902      	bls.n	8005bb4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	61fb      	str	r3, [r7, #28]
 8005bb2:	e002      	b.n	8005bba <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d068      	beq.n	8005c96 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d163      	bne.n	8005c96 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005bce:	4b34      	ldr	r3, [pc, #208]	; (8005ca0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d10a      	bne.n	8005bee <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	60bb      	str	r3, [r7, #8]
}
 8005bea:	bf00      	nop
 8005bec:	e7fe      	b.n	8005bec <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	db04      	blt.n	8005c0c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	f1c3 0207 	rsb	r2, r3, #7
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	6959      	ldr	r1, [r3, #20]
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4a22      	ldr	r2, [pc, #136]	; (8005ca4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005c1c:	4413      	add	r3, r2
 8005c1e:	4299      	cmp	r1, r3
 8005c20:	d101      	bne.n	8005c26 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e000      	b.n	8005c28 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8005c26:	2300      	movs	r3, #0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d034      	beq.n	8005c96 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fe f865 	bl	8003d00 <uxListRemove>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d115      	bne.n	8005c68 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c40:	4918      	ldr	r1, [pc, #96]	; (8005ca4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10a      	bne.n	8005c68 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	2201      	movs	r2, #1
 8005c58:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5c:	43da      	mvns	r2, r3
 8005c5e:	4b12      	ldr	r3, [pc, #72]	; (8005ca8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4013      	ands	r3, r2
 8005c64:	4a10      	ldr	r2, [pc, #64]	; (8005ca8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005c66:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	409a      	lsls	r2, r3
 8005c70:	4b0d      	ldr	r3, [pc, #52]	; (8005ca8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	4a0c      	ldr	r2, [pc, #48]	; (8005ca8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4a07      	ldr	r2, [pc, #28]	; (8005ca4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005c88:	441a      	add	r2, r3
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4610      	mov	r0, r2
 8005c92:	f7fd ffda 	bl	8003c4a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c96:	bf00      	nop
 8005c98:	3720      	adds	r7, #32
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000980 	.word	0x20000980
 8005ca4:	20000984 	.word	0x20000984
 8005ca8:	20000a88 	.word	0x20000a88

08005cac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d004      	beq.n	8005cc2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005cb8:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cbe:	3201      	adds	r2, #1
 8005cc0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005cc2:	4b03      	ldr	r3, [pc, #12]	; (8005cd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
	}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bc80      	pop	{r7}
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	20000980 	.word	0x20000980

08005cd4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005ce2:	f000 feb3 	bl	8006a4c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005ce6:	4b29      	ldr	r3, [pc, #164]	; (8005d8c <xTaskNotifyWait+0xb8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d01c      	beq.n	8005d2e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005cf4:	4b25      	ldr	r3, [pc, #148]	; (8005d8c <xTaskNotifyWait+0xb8>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	43d2      	mvns	r2, r2
 8005d00:	400a      	ands	r2, r1
 8005d02:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005d06:	4b21      	ldr	r3, [pc, #132]	; (8005d8c <xTaskNotifyWait+0xb8>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00b      	beq.n	8005d2e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d16:	2101      	movs	r1, #1
 8005d18:	6838      	ldr	r0, [r7, #0]
 8005d1a:	f000 f9b5 	bl	8006088 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005d1e:	4b1c      	ldr	r3, [pc, #112]	; (8005d90 <xTaskNotifyWait+0xbc>)
 8005d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005d2e:	f000 febd 	bl	8006aac <vPortExitCritical>

		taskENTER_CRITICAL();
 8005d32:	f000 fe8b 	bl	8006a4c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d005      	beq.n	8005d48 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005d3c:	4b13      	ldr	r3, [pc, #76]	; (8005d8c <xTaskNotifyWait+0xb8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005d48:	4b10      	ldr	r3, [pc, #64]	; (8005d8c <xTaskNotifyWait+0xb8>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d002      	beq.n	8005d5c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8005d56:	2300      	movs	r3, #0
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	e00a      	b.n	8005d72 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005d5c:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <xTaskNotifyWait+0xb8>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	43d2      	mvns	r2, r2
 8005d68:	400a      	ands	r2, r1
 8005d6a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d72:	4b06      	ldr	r3, [pc, #24]	; (8005d8c <xTaskNotifyWait+0xb8>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8005d7c:	f000 fe96 	bl	8006aac <vPortExitCritical>

		return xReturn;
 8005d80:	697b      	ldr	r3, [r7, #20]
	}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3718      	adds	r7, #24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20000980 	.word	0x20000980
 8005d90:	e000ed04 	.word	0xe000ed04

08005d94 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08a      	sub	sp, #40	; 0x28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	603b      	str	r3, [r7, #0]
 8005da0:	4613      	mov	r3, r2
 8005da2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005da4:	2301      	movs	r3, #1
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10a      	bne.n	8005dc4 <xTaskGenericNotify+0x30>
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	61bb      	str	r3, [r7, #24]
}
 8005dc0:	bf00      	nop
 8005dc2:	e7fe      	b.n	8005dc2 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005dc8:	f000 fe40 	bl	8006a4c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d004      	beq.n	8005ddc <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005de2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8005dec:	79fb      	ldrb	r3, [r7, #7]
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d82d      	bhi.n	8005e4e <xTaskGenericNotify+0xba>
 8005df2:	a201      	add	r2, pc, #4	; (adr r2, 8005df8 <xTaskGenericNotify+0x64>)
 8005df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df8:	08005e4f 	.word	0x08005e4f
 8005dfc:	08005e0d 	.word	0x08005e0d
 8005e00:	08005e1f 	.word	0x08005e1f
 8005e04:	08005e2f 	.word	0x08005e2f
 8005e08:	08005e39 	.word	0x08005e39
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	431a      	orrs	r2, r3
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8005e1c:	e017      	b.n	8005e4e <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8005e2c:	e00f      	b.n	8005e4e <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8005e36:	e00a      	b.n	8005e4e <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005e38:	7ffb      	ldrb	r3, [r7, #31]
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d004      	beq.n	8005e48 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005e46:	e001      	b.n	8005e4c <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8005e4c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005e4e:	7ffb      	ldrb	r3, [r7, #31]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d139      	bne.n	8005ec8 <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	3304      	adds	r3, #4
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fd ff51 	bl	8003d00 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	2201      	movs	r2, #1
 8005e64:	409a      	lsls	r2, r3
 8005e66:	4b1c      	ldr	r3, [pc, #112]	; (8005ed8 <xTaskGenericNotify+0x144>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	4a1a      	ldr	r2, [pc, #104]	; (8005ed8 <xTaskGenericNotify+0x144>)
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e74:	4613      	mov	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4a17      	ldr	r2, [pc, #92]	; (8005edc <xTaskGenericNotify+0x148>)
 8005e7e:	441a      	add	r2, r3
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	3304      	adds	r3, #4
 8005e84:	4619      	mov	r1, r3
 8005e86:	4610      	mov	r0, r2
 8005e88:	f7fd fedf 	bl	8003c4a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00a      	beq.n	8005eaa <xTaskGenericNotify+0x116>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	617b      	str	r3, [r7, #20]
}
 8005ea6:	bf00      	nop
 8005ea8:	e7fe      	b.n	8005ea8 <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eae:	4b0c      	ldr	r3, [pc, #48]	; (8005ee0 <xTaskGenericNotify+0x14c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d907      	bls.n	8005ec8 <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005eb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <xTaskGenericNotify+0x150>)
 8005eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005ec8:	f000 fdf0 	bl	8006aac <vPortExitCritical>

		return xReturn;
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3728      	adds	r7, #40	; 0x28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20000a88 	.word	0x20000a88
 8005edc:	20000984 	.word	0x20000984
 8005ee0:	20000980 	.word	0x20000980
 8005ee4:	e000ed04 	.word	0xe000ed04

08005ee8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08e      	sub	sp, #56	; 0x38
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10a      	bne.n	8005f18 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f14:	bf00      	nop
 8005f16:	e7fe      	b.n	8005f16 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f18:	f000 fe5a 	bl	8006bd0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8005f20:	f3ef 8211 	mrs	r2, BASEPRI
 8005f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	623a      	str	r2, [r7, #32]
 8005f36:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005f38:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d004      	beq.n	8005f4c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	2202      	movs	r2, #2
 8005f5a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d82f      	bhi.n	8005fc4 <xTaskGenericNotifyFromISR+0xdc>
 8005f64:	a201      	add	r2, pc, #4	; (adr r2, 8005f6c <xTaskGenericNotifyFromISR+0x84>)
 8005f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6a:	bf00      	nop
 8005f6c:	08005fc5 	.word	0x08005fc5
 8005f70:	08005f81 	.word	0x08005f81
 8005f74:	08005f93 	.word	0x08005f93
 8005f78:	08005fa3 	.word	0x08005fa3
 8005f7c:	08005fad 	.word	0x08005fad
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f82:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8005f90:	e018      	b.n	8005fc4 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8005fa0:	e010      	b.n	8005fc4 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8005faa:	e00b      	b.n	8005fc4 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005fac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d004      	beq.n	8005fbe <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005fbc:	e001      	b.n	8005fc2 <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005fc2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005fc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d146      	bne.n	800605a <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00a      	beq.n	8005fea <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8005fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	61bb      	str	r3, [r7, #24]
}
 8005fe6:	bf00      	nop
 8005fe8:	e7fe      	b.n	8005fe8 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fea:	4b21      	ldr	r3, [pc, #132]	; (8006070 <xTaskGenericNotifyFromISR+0x188>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d11c      	bne.n	800602c <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fd fe82 	bl	8003d00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	2201      	movs	r2, #1
 8006002:	409a      	lsls	r2, r3
 8006004:	4b1b      	ldr	r3, [pc, #108]	; (8006074 <xTaskGenericNotifyFromISR+0x18c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4313      	orrs	r3, r2
 800600a:	4a1a      	ldr	r2, [pc, #104]	; (8006074 <xTaskGenericNotifyFromISR+0x18c>)
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006012:	4613      	mov	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4a17      	ldr	r2, [pc, #92]	; (8006078 <xTaskGenericNotifyFromISR+0x190>)
 800601c:	441a      	add	r2, r3
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	3304      	adds	r3, #4
 8006022:	4619      	mov	r1, r3
 8006024:	4610      	mov	r0, r2
 8006026:	f7fd fe10 	bl	8003c4a <vListInsertEnd>
 800602a:	e005      	b.n	8006038 <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	3318      	adds	r3, #24
 8006030:	4619      	mov	r1, r3
 8006032:	4812      	ldr	r0, [pc, #72]	; (800607c <xTaskGenericNotifyFromISR+0x194>)
 8006034:	f7fd fe09 	bl	8003c4a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603c:	4b10      	ldr	r3, [pc, #64]	; (8006080 <xTaskGenericNotifyFromISR+0x198>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006042:	429a      	cmp	r2, r3
 8006044:	d909      	bls.n	800605a <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800604c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800604e:	2201      	movs	r2, #1
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	e002      	b.n	800605a <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8006054:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <xTaskGenericNotifyFromISR+0x19c>)
 8006056:	2201      	movs	r2, #1
 8006058:	601a      	str	r2, [r3, #0]
 800605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f383 8811 	msr	BASEPRI, r3
}
 8006064:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8006066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8006068:	4618      	mov	r0, r3
 800606a:	3738      	adds	r7, #56	; 0x38
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	20000aa8 	.word	0x20000aa8
 8006074:	20000a88 	.word	0x20000a88
 8006078:	20000984 	.word	0x20000984
 800607c:	20000a40 	.word	0x20000a40
 8006080:	20000980 	.word	0x20000980
 8006084:	20000a94 	.word	0x20000a94

08006088 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006092:	4b29      	ldr	r3, [pc, #164]	; (8006138 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006098:	4b28      	ldr	r3, [pc, #160]	; (800613c <prvAddCurrentTaskToDelayedList+0xb4>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3304      	adds	r3, #4
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fd fe2e 	bl	8003d00 <uxListRemove>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10b      	bne.n	80060c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80060aa:	4b24      	ldr	r3, [pc, #144]	; (800613c <prvAddCurrentTaskToDelayedList+0xb4>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	2201      	movs	r2, #1
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	43da      	mvns	r2, r3
 80060b8:	4b21      	ldr	r3, [pc, #132]	; (8006140 <prvAddCurrentTaskToDelayedList+0xb8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4013      	ands	r3, r2
 80060be:	4a20      	ldr	r2, [pc, #128]	; (8006140 <prvAddCurrentTaskToDelayedList+0xb8>)
 80060c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c8:	d10a      	bne.n	80060e0 <prvAddCurrentTaskToDelayedList+0x58>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d007      	beq.n	80060e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060d0:	4b1a      	ldr	r3, [pc, #104]	; (800613c <prvAddCurrentTaskToDelayedList+0xb4>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3304      	adds	r3, #4
 80060d6:	4619      	mov	r1, r3
 80060d8:	481a      	ldr	r0, [pc, #104]	; (8006144 <prvAddCurrentTaskToDelayedList+0xbc>)
 80060da:	f7fd fdb6 	bl	8003c4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060de:	e026      	b.n	800612e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4413      	add	r3, r2
 80060e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060e8:	4b14      	ldr	r3, [pc, #80]	; (800613c <prvAddCurrentTaskToDelayedList+0xb4>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d209      	bcs.n	800610c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060f8:	4b13      	ldr	r3, [pc, #76]	; (8006148 <prvAddCurrentTaskToDelayedList+0xc0>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	4b0f      	ldr	r3, [pc, #60]	; (800613c <prvAddCurrentTaskToDelayedList+0xb4>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3304      	adds	r3, #4
 8006102:	4619      	mov	r1, r3
 8006104:	4610      	mov	r0, r2
 8006106:	f7fd fdc3 	bl	8003c90 <vListInsert>
}
 800610a:	e010      	b.n	800612e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800610c:	4b0f      	ldr	r3, [pc, #60]	; (800614c <prvAddCurrentTaskToDelayedList+0xc4>)
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	4b0a      	ldr	r3, [pc, #40]	; (800613c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3304      	adds	r3, #4
 8006116:	4619      	mov	r1, r3
 8006118:	4610      	mov	r0, r2
 800611a:	f7fd fdb9 	bl	8003c90 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800611e:	4b0c      	ldr	r3, [pc, #48]	; (8006150 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	429a      	cmp	r2, r3
 8006126:	d202      	bcs.n	800612e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006128:	4a09      	ldr	r2, [pc, #36]	; (8006150 <prvAddCurrentTaskToDelayedList+0xc8>)
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	6013      	str	r3, [r2, #0]
}
 800612e:	bf00      	nop
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20000a84 	.word	0x20000a84
 800613c:	20000980 	.word	0x20000980
 8006140:	20000a88 	.word	0x20000a88
 8006144:	20000a6c 	.word	0x20000a6c
 8006148:	20000a3c 	.word	0x20000a3c
 800614c:	20000a38 	.word	0x20000a38
 8006150:	20000aa0 	.word	0x20000aa0

08006154 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08a      	sub	sp, #40	; 0x28
 8006158:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800615a:	2300      	movs	r3, #0
 800615c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800615e:	f000 fb41 	bl	80067e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006162:	4b1c      	ldr	r3, [pc, #112]	; (80061d4 <xTimerCreateTimerTask+0x80>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d021      	beq.n	80061ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006172:	1d3a      	adds	r2, r7, #4
 8006174:	f107 0108 	add.w	r1, r7, #8
 8006178:	f107 030c 	add.w	r3, r7, #12
 800617c:	4618      	mov	r0, r3
 800617e:	f7fa fdb3 	bl	8000ce8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	9202      	str	r2, [sp, #8]
 800618a:	9301      	str	r3, [sp, #4]
 800618c:	2302      	movs	r3, #2
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	2300      	movs	r3, #0
 8006192:	460a      	mov	r2, r1
 8006194:	4910      	ldr	r1, [pc, #64]	; (80061d8 <xTimerCreateTimerTask+0x84>)
 8006196:	4811      	ldr	r0, [pc, #68]	; (80061dc <xTimerCreateTimerTask+0x88>)
 8006198:	f7fe fd7a 	bl	8004c90 <xTaskCreateStatic>
 800619c:	4603      	mov	r3, r0
 800619e:	4a10      	ldr	r2, [pc, #64]	; (80061e0 <xTimerCreateTimerTask+0x8c>)
 80061a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80061a2:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <xTimerCreateTimerTask+0x8c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80061aa:	2301      	movs	r3, #1
 80061ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	613b      	str	r3, [r7, #16]
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80061ca:	697b      	ldr	r3, [r7, #20]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	20000adc 	.word	0x20000adc
 80061d8:	0800831c 	.word	0x0800831c
 80061dc:	08006421 	.word	0x08006421
 80061e0:	20000ae0 	.word	0x20000ae0

080061e4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b088      	sub	sp, #32
 80061e8:	af02      	add	r7, sp, #8
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80061f2:	202c      	movs	r0, #44	; 0x2c
 80061f4:	f000 fd2a 	bl	8006c4c <pvPortMalloc>
 80061f8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00d      	beq.n	800621c <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	9301      	str	r3, [sp, #4]
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	68b9      	ldr	r1, [r7, #8]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 f846 	bl	80062a0 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800621c:	697b      	ldr	r3, [r7, #20]
	}
 800621e:	4618      	mov	r0, r3
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006226:	b580      	push	{r7, lr}
 8006228:	b08a      	sub	sp, #40	; 0x28
 800622a:	af02      	add	r7, sp, #8
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
 8006232:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006234:	232c      	movs	r3, #44	; 0x2c
 8006236:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	2b2c      	cmp	r3, #44	; 0x2c
 800623c:	d00a      	beq.n	8006254 <xTimerCreateStatic+0x2e>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	61bb      	str	r3, [r7, #24]
}
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10a      	bne.n	8006270 <xTimerCreateStatic+0x4a>
	__asm volatile
 800625a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	617b      	str	r3, [r7, #20]
}
 800626c:	bf00      	nop
 800626e:	e7fe      	b.n	800626e <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006272:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00d      	beq.n	8006296 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	68b9      	ldr	r1, [r7, #8]
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 f809 	bl	80062a0 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8006296:	69fb      	ldr	r3, [r7, #28]
	}
 8006298:	4618      	mov	r0, r3
 800629a:	3720      	adds	r7, #32
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10a      	bne.n	80062ca <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	617b      	str	r3, [r7, #20]
}
 80062c6:	bf00      	nop
 80062c8:	e7fe      	b.n	80062c8 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d015      	beq.n	80062fc <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80062d0:	f000 fa88 	bl	80067e4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	6a3a      	ldr	r2, [r7, #32]
 80062f0:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	3304      	adds	r3, #4
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fd fc9b 	bl	8003c32 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80062fc:	bf00      	nop
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08a      	sub	sp, #40	; 0x28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006312:	2300      	movs	r3, #0
 8006314:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10a      	bne.n	8006332 <xTimerGenericCommand+0x2e>
	__asm volatile
 800631c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	623b      	str	r3, [r7, #32]
}
 800632e:	bf00      	nop
 8006330:	e7fe      	b.n	8006330 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006332:	4b1a      	ldr	r3, [pc, #104]	; (800639c <xTimerGenericCommand+0x98>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d02a      	beq.n	8006390 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2b05      	cmp	r3, #5
 800634a:	dc18      	bgt.n	800637e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800634c:	f7ff fae4 	bl	8005918 <xTaskGetSchedulerState>
 8006350:	4603      	mov	r3, r0
 8006352:	2b02      	cmp	r3, #2
 8006354:	d109      	bne.n	800636a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006356:	4b11      	ldr	r3, [pc, #68]	; (800639c <xTimerGenericCommand+0x98>)
 8006358:	6818      	ldr	r0, [r3, #0]
 800635a:	f107 0114 	add.w	r1, r7, #20
 800635e:	2300      	movs	r3, #0
 8006360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006362:	f7fd fe81 	bl	8004068 <xQueueGenericSend>
 8006366:	6278      	str	r0, [r7, #36]	; 0x24
 8006368:	e012      	b.n	8006390 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800636a:	4b0c      	ldr	r3, [pc, #48]	; (800639c <xTimerGenericCommand+0x98>)
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	f107 0114 	add.w	r1, r7, #20
 8006372:	2300      	movs	r3, #0
 8006374:	2200      	movs	r2, #0
 8006376:	f7fd fe77 	bl	8004068 <xQueueGenericSend>
 800637a:	6278      	str	r0, [r7, #36]	; 0x24
 800637c:	e008      	b.n	8006390 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800637e:	4b07      	ldr	r3, [pc, #28]	; (800639c <xTimerGenericCommand+0x98>)
 8006380:	6818      	ldr	r0, [r3, #0]
 8006382:	f107 0114 	add.w	r1, r7, #20
 8006386:	2300      	movs	r3, #0
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	f7fd ff6b 	bl	8004264 <xQueueGenericSendFromISR>
 800638e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006392:	4618      	mov	r0, r3
 8006394:	3728      	adds	r7, #40	; 0x28
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	20000adc 	.word	0x20000adc

080063a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063aa:	4b1c      	ldr	r3, [pc, #112]	; (800641c <prvProcessExpiredTimer+0x7c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	3304      	adds	r3, #4
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fd fca1 	bl	8003d00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d122      	bne.n	800640c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	18d1      	adds	r1, r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	6978      	ldr	r0, [r7, #20]
 80063d4:	f000 f8c8 	bl	8006568 <prvInsertTimerInActiveList>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d016      	beq.n	800640c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063de:	2300      	movs	r3, #0
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	2300      	movs	r3, #0
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	2100      	movs	r1, #0
 80063e8:	6978      	ldr	r0, [r7, #20]
 80063ea:	f7ff ff8b 	bl	8006304 <xTimerGenericCommand>
 80063ee:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10a      	bne.n	800640c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	60fb      	str	r3, [r7, #12]
}
 8006408:	bf00      	nop
 800640a:	e7fe      	b.n	800640a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	6978      	ldr	r0, [r7, #20]
 8006412:	4798      	blx	r3
}
 8006414:	bf00      	nop
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	20000ad4 	.word	0x20000ad4

08006420 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006428:	f107 0308 	add.w	r3, r7, #8
 800642c:	4618      	mov	r0, r3
 800642e:	f000 f857 	bl	80064e0 <prvGetNextExpireTime>
 8006432:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4619      	mov	r1, r3
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 f803 	bl	8006444 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800643e:	f000 f8d5 	bl	80065ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006442:	e7f1      	b.n	8006428 <prvTimerTask+0x8>

08006444 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800644e:	f7fe fe65 	bl	800511c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006452:	f107 0308 	add.w	r3, r7, #8
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f866 	bl	8006528 <prvSampleTimeNow>
 800645c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d130      	bne.n	80064c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10a      	bne.n	8006480 <prvProcessTimerOrBlockTask+0x3c>
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	429a      	cmp	r2, r3
 8006470:	d806      	bhi.n	8006480 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006472:	f7fe fe61 	bl	8005138 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006476:	68f9      	ldr	r1, [r7, #12]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff ff91 	bl	80063a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800647e:	e024      	b.n	80064ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d008      	beq.n	8006498 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006486:	4b13      	ldr	r3, [pc, #76]	; (80064d4 <prvProcessTimerOrBlockTask+0x90>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	bf0c      	ite	eq
 8006490:	2301      	moveq	r3, #1
 8006492:	2300      	movne	r3, #0
 8006494:	b2db      	uxtb	r3, r3
 8006496:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006498:	4b0f      	ldr	r3, [pc, #60]	; (80064d8 <prvProcessTimerOrBlockTask+0x94>)
 800649a:	6818      	ldr	r0, [r3, #0]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	4619      	mov	r1, r3
 80064a6:	f7fe fbbf 	bl	8004c28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80064aa:	f7fe fe45 	bl	8005138 <xTaskResumeAll>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10a      	bne.n	80064ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064b4:	4b09      	ldr	r3, [pc, #36]	; (80064dc <prvProcessTimerOrBlockTask+0x98>)
 80064b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	f3bf 8f6f 	isb	sy
}
 80064c4:	e001      	b.n	80064ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064c6:	f7fe fe37 	bl	8005138 <xTaskResumeAll>
}
 80064ca:	bf00      	nop
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000ad8 	.word	0x20000ad8
 80064d8:	20000adc 	.word	0x20000adc
 80064dc:	e000ed04 	.word	0xe000ed04

080064e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80064e8:	4b0e      	ldr	r3, [pc, #56]	; (8006524 <prvGetNextExpireTime+0x44>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	bf0c      	ite	eq
 80064f2:	2301      	moveq	r3, #1
 80064f4:	2300      	movne	r3, #0
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	461a      	mov	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d105      	bne.n	8006512 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006506:	4b07      	ldr	r3, [pc, #28]	; (8006524 <prvGetNextExpireTime+0x44>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	e001      	b.n	8006516 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006516:	68fb      	ldr	r3, [r7, #12]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	bc80      	pop	{r7}
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	20000ad4 	.word	0x20000ad4

08006528 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006530:	f7fe fe9e 	bl	8005270 <xTaskGetTickCount>
 8006534:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006536:	4b0b      	ldr	r3, [pc, #44]	; (8006564 <prvSampleTimeNow+0x3c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	429a      	cmp	r2, r3
 800653e:	d205      	bcs.n	800654c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006540:	f000 f8ee 	bl	8006720 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	e002      	b.n	8006552 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006552:	4a04      	ldr	r2, [pc, #16]	; (8006564 <prvSampleTimeNow+0x3c>)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006558:	68fb      	ldr	r3, [r7, #12]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000ae4 	.word	0x20000ae4

08006568 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006576:	2300      	movs	r3, #0
 8006578:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	429a      	cmp	r2, r3
 800658c:	d812      	bhi.n	80065b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	1ad2      	subs	r2, r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	429a      	cmp	r2, r3
 800659a:	d302      	bcc.n	80065a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800659c:	2301      	movs	r3, #1
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	e01b      	b.n	80065da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065a2:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <prvInsertTimerInActiveList+0x7c>)
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3304      	adds	r3, #4
 80065aa:	4619      	mov	r1, r3
 80065ac:	4610      	mov	r0, r2
 80065ae:	f7fd fb6f 	bl	8003c90 <vListInsert>
 80065b2:	e012      	b.n	80065da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d206      	bcs.n	80065ca <prvInsertTimerInActiveList+0x62>
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d302      	bcc.n	80065ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065c4:	2301      	movs	r3, #1
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	e007      	b.n	80065da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065ca:	4b07      	ldr	r3, [pc, #28]	; (80065e8 <prvInsertTimerInActiveList+0x80>)
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3304      	adds	r3, #4
 80065d2:	4619      	mov	r1, r3
 80065d4:	4610      	mov	r0, r2
 80065d6:	f7fd fb5b 	bl	8003c90 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80065da:	697b      	ldr	r3, [r7, #20]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	20000ad8 	.word	0x20000ad8
 80065e8:	20000ad4 	.word	0x20000ad4

080065ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08c      	sub	sp, #48	; 0x30
 80065f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065f2:	e081      	b.n	80066f8 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	db7d      	blt.n	80066f6 <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d004      	beq.n	8006610 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	3304      	adds	r3, #4
 800660a:	4618      	mov	r0, r3
 800660c:	f7fd fb78 	bl	8003d00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006610:	1d3b      	adds	r3, r7, #4
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff ff88 	bl	8006528 <prvSampleTimeNow>
 8006618:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b09      	cmp	r3, #9
 800661e:	d86b      	bhi.n	80066f8 <prvProcessReceivedCommands+0x10c>
 8006620:	a201      	add	r2, pc, #4	; (adr r2, 8006628 <prvProcessReceivedCommands+0x3c>)
 8006622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006626:	bf00      	nop
 8006628:	08006651 	.word	0x08006651
 800662c:	08006651 	.word	0x08006651
 8006630:	08006651 	.word	0x08006651
 8006634:	080066f9 	.word	0x080066f9
 8006638:	080066ad 	.word	0x080066ad
 800663c:	080066e5 	.word	0x080066e5
 8006640:	08006651 	.word	0x08006651
 8006644:	08006651 	.word	0x08006651
 8006648:	080066f9 	.word	0x080066f9
 800664c:	080066ad 	.word	0x080066ad
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	18d1      	adds	r1, r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a3a      	ldr	r2, [r7, #32]
 800665c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800665e:	f7ff ff83 	bl	8006568 <prvInsertTimerInActiveList>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d047      	beq.n	80066f8 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800666e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d13f      	bne.n	80066f8 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	441a      	add	r2, r3
 8006680:	2300      	movs	r3, #0
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	2300      	movs	r3, #0
 8006686:	2100      	movs	r1, #0
 8006688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800668a:	f7ff fe3b 	bl	8006304 <xTimerGenericCommand>
 800668e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d130      	bne.n	80066f8 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	61bb      	str	r3, [r7, #24]
}
 80066a8:	bf00      	nop
 80066aa:	e7fe      	b.n	80066aa <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10a      	bne.n	80066d0 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	617b      	str	r3, [r7, #20]
}
 80066cc:	bf00      	nop
 80066ce:	e7fe      	b.n	80066ce <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	699a      	ldr	r2, [r3, #24]
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	18d1      	adds	r1, r2, r3
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	6a3a      	ldr	r2, [r7, #32]
 80066dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066de:	f7ff ff43 	bl	8006568 <prvInsertTimerInActiveList>
					break;
 80066e2:	e009      	b.n	80066f8 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d104      	bne.n	80066f8 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 80066ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066f0:	f000 fb70 	bl	8006dd4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80066f4:	e000      	b.n	80066f8 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80066f6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066f8:	4b08      	ldr	r3, [pc, #32]	; (800671c <prvProcessReceivedCommands+0x130>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f107 0108 	add.w	r1, r7, #8
 8006700:	2200      	movs	r2, #0
 8006702:	4618      	mov	r0, r3
 8006704:	f7fd fed4 	bl	80044b0 <xQueueReceive>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	f47f af72 	bne.w	80065f4 <prvProcessReceivedCommands+0x8>
	}
}
 8006710:	bf00      	nop
 8006712:	bf00      	nop
 8006714:	3728      	adds	r7, #40	; 0x28
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	20000adc 	.word	0x20000adc

08006720 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006726:	e045      	b.n	80067b4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006728:	4b2c      	ldr	r3, [pc, #176]	; (80067dc <prvSwitchTimerLists+0xbc>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006732:	4b2a      	ldr	r3, [pc, #168]	; (80067dc <prvSwitchTimerLists+0xbc>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3304      	adds	r3, #4
 8006740:	4618      	mov	r0, r3
 8006742:	f7fd fadd 	bl	8003d00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d12e      	bne.n	80067b4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	4413      	add	r3, r2
 800675e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	429a      	cmp	r2, r3
 8006766:	d90e      	bls.n	8006786 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006774:	4b19      	ldr	r3, [pc, #100]	; (80067dc <prvSwitchTimerLists+0xbc>)
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3304      	adds	r3, #4
 800677c:	4619      	mov	r1, r3
 800677e:	4610      	mov	r0, r2
 8006780:	f7fd fa86 	bl	8003c90 <vListInsert>
 8006784:	e016      	b.n	80067b4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006786:	2300      	movs	r3, #0
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	2300      	movs	r3, #0
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	2100      	movs	r1, #0
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f7ff fdb7 	bl	8006304 <xTimerGenericCommand>
 8006796:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10a      	bne.n	80067b4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	603b      	str	r3, [r7, #0]
}
 80067b0:	bf00      	nop
 80067b2:	e7fe      	b.n	80067b2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067b4:	4b09      	ldr	r3, [pc, #36]	; (80067dc <prvSwitchTimerLists+0xbc>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1b4      	bne.n	8006728 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80067be:	4b07      	ldr	r3, [pc, #28]	; (80067dc <prvSwitchTimerLists+0xbc>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80067c4:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <prvSwitchTimerLists+0xc0>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a04      	ldr	r2, [pc, #16]	; (80067dc <prvSwitchTimerLists+0xbc>)
 80067ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80067cc:	4a04      	ldr	r2, [pc, #16]	; (80067e0 <prvSwitchTimerLists+0xc0>)
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	6013      	str	r3, [r2, #0]
}
 80067d2:	bf00      	nop
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20000ad4 	.word	0x20000ad4
 80067e0:	20000ad8 	.word	0x20000ad8

080067e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80067ea:	f000 f92f 	bl	8006a4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80067ee:	4b15      	ldr	r3, [pc, #84]	; (8006844 <prvCheckForValidListAndQueue+0x60>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d120      	bne.n	8006838 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067f6:	4814      	ldr	r0, [pc, #80]	; (8006848 <prvCheckForValidListAndQueue+0x64>)
 80067f8:	f7fd f9fc 	bl	8003bf4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067fc:	4813      	ldr	r0, [pc, #76]	; (800684c <prvCheckForValidListAndQueue+0x68>)
 80067fe:	f7fd f9f9 	bl	8003bf4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006802:	4b13      	ldr	r3, [pc, #76]	; (8006850 <prvCheckForValidListAndQueue+0x6c>)
 8006804:	4a10      	ldr	r2, [pc, #64]	; (8006848 <prvCheckForValidListAndQueue+0x64>)
 8006806:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006808:	4b12      	ldr	r3, [pc, #72]	; (8006854 <prvCheckForValidListAndQueue+0x70>)
 800680a:	4a10      	ldr	r2, [pc, #64]	; (800684c <prvCheckForValidListAndQueue+0x68>)
 800680c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800680e:	2300      	movs	r3, #0
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	4b11      	ldr	r3, [pc, #68]	; (8006858 <prvCheckForValidListAndQueue+0x74>)
 8006814:	4a11      	ldr	r2, [pc, #68]	; (800685c <prvCheckForValidListAndQueue+0x78>)
 8006816:	210c      	movs	r1, #12
 8006818:	200a      	movs	r0, #10
 800681a:	f7fd fb03 	bl	8003e24 <xQueueGenericCreateStatic>
 800681e:	4603      	mov	r3, r0
 8006820:	4a08      	ldr	r2, [pc, #32]	; (8006844 <prvCheckForValidListAndQueue+0x60>)
 8006822:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006824:	4b07      	ldr	r3, [pc, #28]	; (8006844 <prvCheckForValidListAndQueue+0x60>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d005      	beq.n	8006838 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800682c:	4b05      	ldr	r3, [pc, #20]	; (8006844 <prvCheckForValidListAndQueue+0x60>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	490b      	ldr	r1, [pc, #44]	; (8006860 <prvCheckForValidListAndQueue+0x7c>)
 8006832:	4618      	mov	r0, r3
 8006834:	f7fe f9d0 	bl	8004bd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006838:	f000 f938 	bl	8006aac <vPortExitCritical>
}
 800683c:	bf00      	nop
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	20000adc 	.word	0x20000adc
 8006848:	20000aac 	.word	0x20000aac
 800684c:	20000ac0 	.word	0x20000ac0
 8006850:	20000ad4 	.word	0x20000ad4
 8006854:	20000ad8 	.word	0x20000ad8
 8006858:	20000b60 	.word	0x20000b60
 800685c:	20000ae8 	.word	0x20000ae8
 8006860:	08008324 	.word	0x08008324

08006864 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	3b04      	subs	r3, #4
 8006874:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800687c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3b04      	subs	r3, #4
 8006882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f023 0201 	bic.w	r2, r3, #1
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3b04      	subs	r3, #4
 8006892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006894:	4a08      	ldr	r2, [pc, #32]	; (80068b8 <pxPortInitialiseStack+0x54>)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3b14      	subs	r3, #20
 800689e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	3b20      	subs	r3, #32
 80068aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068ac:	68fb      	ldr	r3, [r7, #12]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bc80      	pop	{r7}
 80068b6:	4770      	bx	lr
 80068b8:	080068bd 	.word	0x080068bd

080068bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068c6:	4b12      	ldr	r3, [pc, #72]	; (8006910 <prvTaskExitError+0x54>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ce:	d00a      	beq.n	80068e6 <prvTaskExitError+0x2a>
	__asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	60fb      	str	r3, [r7, #12]
}
 80068e2:	bf00      	nop
 80068e4:	e7fe      	b.n	80068e4 <prvTaskExitError+0x28>
	__asm volatile
 80068e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	60bb      	str	r3, [r7, #8]
}
 80068f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068fa:	bf00      	nop
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0fc      	beq.n	80068fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006902:	bf00      	nop
 8006904:	bf00      	nop
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	bc80      	pop	{r7}
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	200000a8 	.word	0x200000a8
	...

08006920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006920:	4b07      	ldr	r3, [pc, #28]	; (8006940 <pxCurrentTCBConst2>)
 8006922:	6819      	ldr	r1, [r3, #0]
 8006924:	6808      	ldr	r0, [r1, #0]
 8006926:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800692a:	f380 8809 	msr	PSP, r0
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f04f 0000 	mov.w	r0, #0
 8006936:	f380 8811 	msr	BASEPRI, r0
 800693a:	f04e 0e0d 	orr.w	lr, lr, #13
 800693e:	4770      	bx	lr

08006940 <pxCurrentTCBConst2>:
 8006940:	20000980 	.word	0x20000980
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006944:	bf00      	nop
 8006946:	bf00      	nop

08006948 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006948:	4806      	ldr	r0, [pc, #24]	; (8006964 <prvPortStartFirstTask+0x1c>)
 800694a:	6800      	ldr	r0, [r0, #0]
 800694c:	6800      	ldr	r0, [r0, #0]
 800694e:	f380 8808 	msr	MSP, r0
 8006952:	b662      	cpsie	i
 8006954:	b661      	cpsie	f
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	df00      	svc	0
 8006960:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006962:	bf00      	nop
 8006964:	e000ed08 	.word	0xe000ed08

08006968 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800696e:	4b32      	ldr	r3, [pc, #200]	; (8006a38 <xPortStartScheduler+0xd0>)
 8006970:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	b2db      	uxtb	r3, r3
 8006978:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	22ff      	movs	r2, #255	; 0xff
 800697e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	b2db      	uxtb	r3, r3
 800698c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006990:	b2da      	uxtb	r2, r3
 8006992:	4b2a      	ldr	r3, [pc, #168]	; (8006a3c <xPortStartScheduler+0xd4>)
 8006994:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006996:	4b2a      	ldr	r3, [pc, #168]	; (8006a40 <xPortStartScheduler+0xd8>)
 8006998:	2207      	movs	r2, #7
 800699a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800699c:	e009      	b.n	80069b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800699e:	4b28      	ldr	r3, [pc, #160]	; (8006a40 <xPortStartScheduler+0xd8>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	4a26      	ldr	r2, [pc, #152]	; (8006a40 <xPortStartScheduler+0xd8>)
 80069a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069b2:	78fb      	ldrb	r3, [r7, #3]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ba:	2b80      	cmp	r3, #128	; 0x80
 80069bc:	d0ef      	beq.n	800699e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069be:	4b20      	ldr	r3, [pc, #128]	; (8006a40 <xPortStartScheduler+0xd8>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f1c3 0307 	rsb	r3, r3, #7
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d00a      	beq.n	80069e0 <xPortStartScheduler+0x78>
	__asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	60bb      	str	r3, [r7, #8]
}
 80069dc:	bf00      	nop
 80069de:	e7fe      	b.n	80069de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069e0:	4b17      	ldr	r3, [pc, #92]	; (8006a40 <xPortStartScheduler+0xd8>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	021b      	lsls	r3, r3, #8
 80069e6:	4a16      	ldr	r2, [pc, #88]	; (8006a40 <xPortStartScheduler+0xd8>)
 80069e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069ea:	4b15      	ldr	r3, [pc, #84]	; (8006a40 <xPortStartScheduler+0xd8>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069f2:	4a13      	ldr	r2, [pc, #76]	; (8006a40 <xPortStartScheduler+0xd8>)
 80069f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069fe:	4b11      	ldr	r3, [pc, #68]	; (8006a44 <xPortStartScheduler+0xdc>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a10      	ldr	r2, [pc, #64]	; (8006a44 <xPortStartScheduler+0xdc>)
 8006a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a0a:	4b0e      	ldr	r3, [pc, #56]	; (8006a44 <xPortStartScheduler+0xdc>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a0d      	ldr	r2, [pc, #52]	; (8006a44 <xPortStartScheduler+0xdc>)
 8006a10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a16:	f000 f8b9 	bl	8006b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a1a:	4b0b      	ldr	r3, [pc, #44]	; (8006a48 <xPortStartScheduler+0xe0>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a20:	f7ff ff92 	bl	8006948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a24:	f7fe fd02 	bl	800542c <vTaskSwitchContext>
	prvTaskExitError();
 8006a28:	f7ff ff48 	bl	80068bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	e000e400 	.word	0xe000e400
 8006a3c:	20000ba8 	.word	0x20000ba8
 8006a40:	20000bac 	.word	0x20000bac
 8006a44:	e000ed20 	.word	0xe000ed20
 8006a48:	200000a8 	.word	0x200000a8

08006a4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	607b      	str	r3, [r7, #4]
}
 8006a64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a66:	4b0f      	ldr	r3, [pc, #60]	; (8006aa4 <vPortEnterCritical+0x58>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	4a0d      	ldr	r2, [pc, #52]	; (8006aa4 <vPortEnterCritical+0x58>)
 8006a6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a70:	4b0c      	ldr	r3, [pc, #48]	; (8006aa4 <vPortEnterCritical+0x58>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d10f      	bne.n	8006a98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a78:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <vPortEnterCritical+0x5c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	603b      	str	r3, [r7, #0]
}
 8006a94:	bf00      	nop
 8006a96:	e7fe      	b.n	8006a96 <vPortEnterCritical+0x4a>
	}
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	200000a8 	.word	0x200000a8
 8006aa8:	e000ed04 	.word	0xe000ed04

08006aac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ab2:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <vPortExitCritical+0x4c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10a      	bne.n	8006ad0 <vPortExitCritical+0x24>
	__asm volatile
 8006aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abe:	f383 8811 	msr	BASEPRI, r3
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	607b      	str	r3, [r7, #4]
}
 8006acc:	bf00      	nop
 8006ace:	e7fe      	b.n	8006ace <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ad0:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <vPortExitCritical+0x4c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	4a08      	ldr	r2, [pc, #32]	; (8006af8 <vPortExitCritical+0x4c>)
 8006ad8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ada:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <vPortExitCritical+0x4c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d105      	bne.n	8006aee <vPortExitCritical+0x42>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	f383 8811 	msr	BASEPRI, r3
}
 8006aec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bc80      	pop	{r7}
 8006af6:	4770      	bx	lr
 8006af8:	200000a8 	.word	0x200000a8
 8006afc:	00000000 	.word	0x00000000

08006b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b00:	f3ef 8009 	mrs	r0, PSP
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	4b0d      	ldr	r3, [pc, #52]	; (8006b40 <pxCurrentTCBConst>)
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b10:	6010      	str	r0, [r2, #0]
 8006b12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006b16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b1a:	f380 8811 	msr	BASEPRI, r0
 8006b1e:	f7fe fc85 	bl	800542c <vTaskSwitchContext>
 8006b22:	f04f 0000 	mov.w	r0, #0
 8006b26:	f380 8811 	msr	BASEPRI, r0
 8006b2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b2e:	6819      	ldr	r1, [r3, #0]
 8006b30:	6808      	ldr	r0, [r1, #0]
 8006b32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b36:	f380 8809 	msr	PSP, r0
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	4770      	bx	lr

08006b40 <pxCurrentTCBConst>:
 8006b40:	20000980 	.word	0x20000980
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop

08006b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	607b      	str	r3, [r7, #4]
}
 8006b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b62:	f7fe fba5 	bl	80052b0 <xTaskIncrementTick>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b6c:	4b06      	ldr	r3, [pc, #24]	; (8006b88 <SysTick_Handler+0x40>)
 8006b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	2300      	movs	r3, #0
 8006b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	f383 8811 	msr	BASEPRI, r3
}
 8006b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b80:	bf00      	nop
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	e000ed04 	.word	0xe000ed04

08006b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b90:	4b0a      	ldr	r3, [pc, #40]	; (8006bbc <vPortSetupTimerInterrupt+0x30>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b96:	4b0a      	ldr	r3, [pc, #40]	; (8006bc0 <vPortSetupTimerInterrupt+0x34>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b9c:	4b09      	ldr	r3, [pc, #36]	; (8006bc4 <vPortSetupTimerInterrupt+0x38>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a09      	ldr	r2, [pc, #36]	; (8006bc8 <vPortSetupTimerInterrupt+0x3c>)
 8006ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba6:	099b      	lsrs	r3, r3, #6
 8006ba8:	4a08      	ldr	r2, [pc, #32]	; (8006bcc <vPortSetupTimerInterrupt+0x40>)
 8006baa:	3b01      	subs	r3, #1
 8006bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bae:	4b03      	ldr	r3, [pc, #12]	; (8006bbc <vPortSetupTimerInterrupt+0x30>)
 8006bb0:	2207      	movs	r2, #7
 8006bb2:	601a      	str	r2, [r3, #0]
}
 8006bb4:	bf00      	nop
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bc80      	pop	{r7}
 8006bba:	4770      	bx	lr
 8006bbc:	e000e010 	.word	0xe000e010
 8006bc0:	e000e018 	.word	0xe000e018
 8006bc4:	2000009c 	.word	0x2000009c
 8006bc8:	10624dd3 	.word	0x10624dd3
 8006bcc:	e000e014 	.word	0xe000e014

08006bd0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bd6:	f3ef 8305 	mrs	r3, IPSR
 8006bda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2b0f      	cmp	r3, #15
 8006be0:	d914      	bls.n	8006c0c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006be2:	4a16      	ldr	r2, [pc, #88]	; (8006c3c <vPortValidateInterruptPriority+0x6c>)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006bec:	4b14      	ldr	r3, [pc, #80]	; (8006c40 <vPortValidateInterruptPriority+0x70>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	7afa      	ldrb	r2, [r7, #11]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d20a      	bcs.n	8006c0c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	607b      	str	r3, [r7, #4]
}
 8006c08:	bf00      	nop
 8006c0a:	e7fe      	b.n	8006c0a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c0c:	4b0d      	ldr	r3, [pc, #52]	; (8006c44 <vPortValidateInterruptPriority+0x74>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c14:	4b0c      	ldr	r3, [pc, #48]	; (8006c48 <vPortValidateInterruptPriority+0x78>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d90a      	bls.n	8006c32 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	603b      	str	r3, [r7, #0]
}
 8006c2e:	bf00      	nop
 8006c30:	e7fe      	b.n	8006c30 <vPortValidateInterruptPriority+0x60>
	}
 8006c32:	bf00      	nop
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bc80      	pop	{r7}
 8006c3a:	4770      	bx	lr
 8006c3c:	e000e3f0 	.word	0xe000e3f0
 8006c40:	20000ba8 	.word	0x20000ba8
 8006c44:	e000ed0c 	.word	0xe000ed0c
 8006c48:	20000bac 	.word	0x20000bac

08006c4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08a      	sub	sp, #40	; 0x28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c54:	2300      	movs	r3, #0
 8006c56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c58:	f7fe fa60 	bl	800511c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c5c:	4b58      	ldr	r3, [pc, #352]	; (8006dc0 <pvPortMalloc+0x174>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c64:	f000 f91a 	bl	8006e9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c68:	4b56      	ldr	r3, [pc, #344]	; (8006dc4 <pvPortMalloc+0x178>)
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f040 808e 	bne.w	8006d92 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d01d      	beq.n	8006cb8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c7c:	2208      	movs	r2, #8
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4413      	add	r3, r2
 8006c82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d014      	beq.n	8006cb8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f023 0307 	bic.w	r3, r3, #7
 8006c94:	3308      	adds	r3, #8
 8006c96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f003 0307 	and.w	r3, r3, #7
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00a      	beq.n	8006cb8 <pvPortMalloc+0x6c>
	__asm volatile
 8006ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	617b      	str	r3, [r7, #20]
}
 8006cb4:	bf00      	nop
 8006cb6:	e7fe      	b.n	8006cb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d069      	beq.n	8006d92 <pvPortMalloc+0x146>
 8006cbe:	4b42      	ldr	r3, [pc, #264]	; (8006dc8 <pvPortMalloc+0x17c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d864      	bhi.n	8006d92 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006cc8:	4b40      	ldr	r3, [pc, #256]	; (8006dcc <pvPortMalloc+0x180>)
 8006cca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ccc:	4b3f      	ldr	r3, [pc, #252]	; (8006dcc <pvPortMalloc+0x180>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cd2:	e004      	b.n	8006cde <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d903      	bls.n	8006cf0 <pvPortMalloc+0xa4>
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1f1      	bne.n	8006cd4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cf0:	4b33      	ldr	r3, [pc, #204]	; (8006dc0 <pvPortMalloc+0x174>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d04b      	beq.n	8006d92 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2208      	movs	r2, #8
 8006d00:	4413      	add	r3, r2
 8006d02:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	1ad2      	subs	r2, r2, r3
 8006d14:	2308      	movs	r3, #8
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d91f      	bls.n	8006d5c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4413      	add	r3, r2
 8006d22:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <pvPortMalloc+0xf8>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	613b      	str	r3, [r7, #16]
}
 8006d40:	bf00      	nop
 8006d42:	e7fe      	b.n	8006d42 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	1ad2      	subs	r2, r2, r3
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d56:	69b8      	ldr	r0, [r7, #24]
 8006d58:	f000 f902 	bl	8006f60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d5c:	4b1a      	ldr	r3, [pc, #104]	; (8006dc8 <pvPortMalloc+0x17c>)
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	4a18      	ldr	r2, [pc, #96]	; (8006dc8 <pvPortMalloc+0x17c>)
 8006d68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d6a:	4b17      	ldr	r3, [pc, #92]	; (8006dc8 <pvPortMalloc+0x17c>)
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	4b18      	ldr	r3, [pc, #96]	; (8006dd0 <pvPortMalloc+0x184>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d203      	bcs.n	8006d7e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d76:	4b14      	ldr	r3, [pc, #80]	; (8006dc8 <pvPortMalloc+0x17c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a15      	ldr	r2, [pc, #84]	; (8006dd0 <pvPortMalloc+0x184>)
 8006d7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	4b10      	ldr	r3, [pc, #64]	; (8006dc4 <pvPortMalloc+0x178>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	431a      	orrs	r2, r3
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d92:	f7fe f9d1 	bl	8005138 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00a      	beq.n	8006db6 <pvPortMalloc+0x16a>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	60fb      	str	r3, [r7, #12]
}
 8006db2:	bf00      	nop
 8006db4:	e7fe      	b.n	8006db4 <pvPortMalloc+0x168>
	return pvReturn;
 8006db6:	69fb      	ldr	r3, [r7, #28]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3728      	adds	r7, #40	; 0x28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	200023b8 	.word	0x200023b8
 8006dc4:	200023c4 	.word	0x200023c4
 8006dc8:	200023bc 	.word	0x200023bc
 8006dcc:	200023b0 	.word	0x200023b0
 8006dd0:	200023c0 	.word	0x200023c0

08006dd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d048      	beq.n	8006e78 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006de6:	2308      	movs	r3, #8
 8006de8:	425b      	negs	r3, r3
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	4413      	add	r3, r2
 8006dee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	4b21      	ldr	r3, [pc, #132]	; (8006e80 <vPortFree+0xac>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10a      	bne.n	8006e18 <vPortFree+0x44>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	60fb      	str	r3, [r7, #12]
}
 8006e14:	bf00      	nop
 8006e16:	e7fe      	b.n	8006e16 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00a      	beq.n	8006e36 <vPortFree+0x62>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	60bb      	str	r3, [r7, #8]
}
 8006e32:	bf00      	nop
 8006e34:	e7fe      	b.n	8006e34 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	4b11      	ldr	r3, [pc, #68]	; (8006e80 <vPortFree+0xac>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d019      	beq.n	8006e78 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d115      	bne.n	8006e78 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	4b0b      	ldr	r3, [pc, #44]	; (8006e80 <vPortFree+0xac>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	43db      	mvns	r3, r3
 8006e56:	401a      	ands	r2, r3
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e5c:	f7fe f95e 	bl	800511c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	4b07      	ldr	r3, [pc, #28]	; (8006e84 <vPortFree+0xb0>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4413      	add	r3, r2
 8006e6a:	4a06      	ldr	r2, [pc, #24]	; (8006e84 <vPortFree+0xb0>)
 8006e6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e6e:	6938      	ldr	r0, [r7, #16]
 8006e70:	f000 f876 	bl	8006f60 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e74:	f7fe f960 	bl	8005138 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e78:	bf00      	nop
 8006e7a:	3718      	adds	r7, #24
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	200023c4 	.word	0x200023c4
 8006e84:	200023bc 	.word	0x200023bc

08006e88 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8006e8c:	4b02      	ldr	r3, [pc, #8]	; (8006e98 <xPortGetFreeHeapSize+0x10>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bc80      	pop	{r7}
 8006e96:	4770      	bx	lr
 8006e98:	200023bc 	.word	0x200023bc

08006e9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ea2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006ea6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ea8:	4b27      	ldr	r3, [pc, #156]	; (8006f48 <prvHeapInit+0xac>)
 8006eaa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00c      	beq.n	8006ed0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3307      	adds	r3, #7
 8006eba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 0307 	bic.w	r3, r3, #7
 8006ec2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	4a1f      	ldr	r2, [pc, #124]	; (8006f48 <prvHeapInit+0xac>)
 8006ecc:	4413      	add	r3, r2
 8006ece:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ed4:	4a1d      	ldr	r2, [pc, #116]	; (8006f4c <prvHeapInit+0xb0>)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006eda:	4b1c      	ldr	r3, [pc, #112]	; (8006f4c <prvHeapInit+0xb0>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ee8:	2208      	movs	r2, #8
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	1a9b      	subs	r3, r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f023 0307 	bic.w	r3, r3, #7
 8006ef6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	4a15      	ldr	r2, [pc, #84]	; (8006f50 <prvHeapInit+0xb4>)
 8006efc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006efe:	4b14      	ldr	r3, [pc, #80]	; (8006f50 <prvHeapInit+0xb4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2200      	movs	r2, #0
 8006f04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f06:	4b12      	ldr	r3, [pc, #72]	; (8006f50 <prvHeapInit+0xb4>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	1ad2      	subs	r2, r2, r3
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f1c:	4b0c      	ldr	r3, [pc, #48]	; (8006f50 <prvHeapInit+0xb4>)
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	4a0a      	ldr	r2, [pc, #40]	; (8006f54 <prvHeapInit+0xb8>)
 8006f2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	4a09      	ldr	r2, [pc, #36]	; (8006f58 <prvHeapInit+0xbc>)
 8006f32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f34:	4b09      	ldr	r3, [pc, #36]	; (8006f5c <prvHeapInit+0xc0>)
 8006f36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f3a:	601a      	str	r2, [r3, #0]
}
 8006f3c:	bf00      	nop
 8006f3e:	3714      	adds	r7, #20
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bc80      	pop	{r7}
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	20000bb0 	.word	0x20000bb0
 8006f4c:	200023b0 	.word	0x200023b0
 8006f50:	200023b8 	.word	0x200023b8
 8006f54:	200023c0 	.word	0x200023c0
 8006f58:	200023bc 	.word	0x200023bc
 8006f5c:	200023c4 	.word	0x200023c4

08006f60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f68:	4b27      	ldr	r3, [pc, #156]	; (8007008 <prvInsertBlockIntoFreeList+0xa8>)
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	e002      	b.n	8006f74 <prvInsertBlockIntoFreeList+0x14>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d8f7      	bhi.n	8006f6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	4413      	add	r3, r2
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d108      	bne.n	8006fa2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	441a      	add	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	441a      	add	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d118      	bne.n	8006fe8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	4b14      	ldr	r3, [pc, #80]	; (800700c <prvInsertBlockIntoFreeList+0xac>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d00d      	beq.n	8006fde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	441a      	add	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	e008      	b.n	8006ff0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fde:	4b0b      	ldr	r3, [pc, #44]	; (800700c <prvInsertBlockIntoFreeList+0xac>)
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	e003      	b.n	8006ff0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d002      	beq.n	8006ffe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ffe:	bf00      	nop
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	bc80      	pop	{r7}
 8007006:	4770      	bx	lr
 8007008:	200023b0 	.word	0x200023b0
 800700c:	200023b8 	.word	0x200023b8

08007010 <__errno>:
 8007010:	4b01      	ldr	r3, [pc, #4]	; (8007018 <__errno+0x8>)
 8007012:	6818      	ldr	r0, [r3, #0]
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	200000ac 	.word	0x200000ac

0800701c <std>:
 800701c:	2300      	movs	r3, #0
 800701e:	b510      	push	{r4, lr}
 8007020:	4604      	mov	r4, r0
 8007022:	e9c0 3300 	strd	r3, r3, [r0]
 8007026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800702a:	6083      	str	r3, [r0, #8]
 800702c:	8181      	strh	r1, [r0, #12]
 800702e:	6643      	str	r3, [r0, #100]	; 0x64
 8007030:	81c2      	strh	r2, [r0, #14]
 8007032:	6183      	str	r3, [r0, #24]
 8007034:	4619      	mov	r1, r3
 8007036:	2208      	movs	r2, #8
 8007038:	305c      	adds	r0, #92	; 0x5c
 800703a:	f000 f91a 	bl	8007272 <memset>
 800703e:	4b05      	ldr	r3, [pc, #20]	; (8007054 <std+0x38>)
 8007040:	6224      	str	r4, [r4, #32]
 8007042:	6263      	str	r3, [r4, #36]	; 0x24
 8007044:	4b04      	ldr	r3, [pc, #16]	; (8007058 <std+0x3c>)
 8007046:	62a3      	str	r3, [r4, #40]	; 0x28
 8007048:	4b04      	ldr	r3, [pc, #16]	; (800705c <std+0x40>)
 800704a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800704c:	4b04      	ldr	r3, [pc, #16]	; (8007060 <std+0x44>)
 800704e:	6323      	str	r3, [r4, #48]	; 0x30
 8007050:	bd10      	pop	{r4, pc}
 8007052:	bf00      	nop
 8007054:	080075bd 	.word	0x080075bd
 8007058:	080075df 	.word	0x080075df
 800705c:	08007617 	.word	0x08007617
 8007060:	0800763b 	.word	0x0800763b

08007064 <_cleanup_r>:
 8007064:	4901      	ldr	r1, [pc, #4]	; (800706c <_cleanup_r+0x8>)
 8007066:	f000 b8af 	b.w	80071c8 <_fwalk_reent>
 800706a:	bf00      	nop
 800706c:	0800790d 	.word	0x0800790d

08007070 <__sfmoreglue>:
 8007070:	2268      	movs	r2, #104	; 0x68
 8007072:	b570      	push	{r4, r5, r6, lr}
 8007074:	1e4d      	subs	r5, r1, #1
 8007076:	4355      	muls	r5, r2
 8007078:	460e      	mov	r6, r1
 800707a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800707e:	f000 f921 	bl	80072c4 <_malloc_r>
 8007082:	4604      	mov	r4, r0
 8007084:	b140      	cbz	r0, 8007098 <__sfmoreglue+0x28>
 8007086:	2100      	movs	r1, #0
 8007088:	e9c0 1600 	strd	r1, r6, [r0]
 800708c:	300c      	adds	r0, #12
 800708e:	60a0      	str	r0, [r4, #8]
 8007090:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007094:	f000 f8ed 	bl	8007272 <memset>
 8007098:	4620      	mov	r0, r4
 800709a:	bd70      	pop	{r4, r5, r6, pc}

0800709c <__sfp_lock_acquire>:
 800709c:	4801      	ldr	r0, [pc, #4]	; (80070a4 <__sfp_lock_acquire+0x8>)
 800709e:	f000 b8d8 	b.w	8007252 <__retarget_lock_acquire_recursive>
 80070a2:	bf00      	nop
 80070a4:	200023c9 	.word	0x200023c9

080070a8 <__sfp_lock_release>:
 80070a8:	4801      	ldr	r0, [pc, #4]	; (80070b0 <__sfp_lock_release+0x8>)
 80070aa:	f000 b8d3 	b.w	8007254 <__retarget_lock_release_recursive>
 80070ae:	bf00      	nop
 80070b0:	200023c9 	.word	0x200023c9

080070b4 <__sinit_lock_acquire>:
 80070b4:	4801      	ldr	r0, [pc, #4]	; (80070bc <__sinit_lock_acquire+0x8>)
 80070b6:	f000 b8cc 	b.w	8007252 <__retarget_lock_acquire_recursive>
 80070ba:	bf00      	nop
 80070bc:	200023ca 	.word	0x200023ca

080070c0 <__sinit_lock_release>:
 80070c0:	4801      	ldr	r0, [pc, #4]	; (80070c8 <__sinit_lock_release+0x8>)
 80070c2:	f000 b8c7 	b.w	8007254 <__retarget_lock_release_recursive>
 80070c6:	bf00      	nop
 80070c8:	200023ca 	.word	0x200023ca

080070cc <__sinit>:
 80070cc:	b510      	push	{r4, lr}
 80070ce:	4604      	mov	r4, r0
 80070d0:	f7ff fff0 	bl	80070b4 <__sinit_lock_acquire>
 80070d4:	69a3      	ldr	r3, [r4, #24]
 80070d6:	b11b      	cbz	r3, 80070e0 <__sinit+0x14>
 80070d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070dc:	f7ff bff0 	b.w	80070c0 <__sinit_lock_release>
 80070e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80070e4:	6523      	str	r3, [r4, #80]	; 0x50
 80070e6:	4b13      	ldr	r3, [pc, #76]	; (8007134 <__sinit+0x68>)
 80070e8:	4a13      	ldr	r2, [pc, #76]	; (8007138 <__sinit+0x6c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80070ee:	42a3      	cmp	r3, r4
 80070f0:	bf08      	it	eq
 80070f2:	2301      	moveq	r3, #1
 80070f4:	4620      	mov	r0, r4
 80070f6:	bf08      	it	eq
 80070f8:	61a3      	streq	r3, [r4, #24]
 80070fa:	f000 f81f 	bl	800713c <__sfp>
 80070fe:	6060      	str	r0, [r4, #4]
 8007100:	4620      	mov	r0, r4
 8007102:	f000 f81b 	bl	800713c <__sfp>
 8007106:	60a0      	str	r0, [r4, #8]
 8007108:	4620      	mov	r0, r4
 800710a:	f000 f817 	bl	800713c <__sfp>
 800710e:	2200      	movs	r2, #0
 8007110:	2104      	movs	r1, #4
 8007112:	60e0      	str	r0, [r4, #12]
 8007114:	6860      	ldr	r0, [r4, #4]
 8007116:	f7ff ff81 	bl	800701c <std>
 800711a:	2201      	movs	r2, #1
 800711c:	2109      	movs	r1, #9
 800711e:	68a0      	ldr	r0, [r4, #8]
 8007120:	f7ff ff7c 	bl	800701c <std>
 8007124:	2202      	movs	r2, #2
 8007126:	2112      	movs	r1, #18
 8007128:	68e0      	ldr	r0, [r4, #12]
 800712a:	f7ff ff77 	bl	800701c <std>
 800712e:	2301      	movs	r3, #1
 8007130:	61a3      	str	r3, [r4, #24]
 8007132:	e7d1      	b.n	80070d8 <__sinit+0xc>
 8007134:	080083f8 	.word	0x080083f8
 8007138:	08007065 	.word	0x08007065

0800713c <__sfp>:
 800713c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713e:	4607      	mov	r7, r0
 8007140:	f7ff ffac 	bl	800709c <__sfp_lock_acquire>
 8007144:	4b1e      	ldr	r3, [pc, #120]	; (80071c0 <__sfp+0x84>)
 8007146:	681e      	ldr	r6, [r3, #0]
 8007148:	69b3      	ldr	r3, [r6, #24]
 800714a:	b913      	cbnz	r3, 8007152 <__sfp+0x16>
 800714c:	4630      	mov	r0, r6
 800714e:	f7ff ffbd 	bl	80070cc <__sinit>
 8007152:	3648      	adds	r6, #72	; 0x48
 8007154:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007158:	3b01      	subs	r3, #1
 800715a:	d503      	bpl.n	8007164 <__sfp+0x28>
 800715c:	6833      	ldr	r3, [r6, #0]
 800715e:	b30b      	cbz	r3, 80071a4 <__sfp+0x68>
 8007160:	6836      	ldr	r6, [r6, #0]
 8007162:	e7f7      	b.n	8007154 <__sfp+0x18>
 8007164:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007168:	b9d5      	cbnz	r5, 80071a0 <__sfp+0x64>
 800716a:	4b16      	ldr	r3, [pc, #88]	; (80071c4 <__sfp+0x88>)
 800716c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007170:	60e3      	str	r3, [r4, #12]
 8007172:	6665      	str	r5, [r4, #100]	; 0x64
 8007174:	f000 f86c 	bl	8007250 <__retarget_lock_init_recursive>
 8007178:	f7ff ff96 	bl	80070a8 <__sfp_lock_release>
 800717c:	2208      	movs	r2, #8
 800717e:	4629      	mov	r1, r5
 8007180:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007184:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007188:	6025      	str	r5, [r4, #0]
 800718a:	61a5      	str	r5, [r4, #24]
 800718c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007190:	f000 f86f 	bl	8007272 <memset>
 8007194:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007198:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800719c:	4620      	mov	r0, r4
 800719e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071a0:	3468      	adds	r4, #104	; 0x68
 80071a2:	e7d9      	b.n	8007158 <__sfp+0x1c>
 80071a4:	2104      	movs	r1, #4
 80071a6:	4638      	mov	r0, r7
 80071a8:	f7ff ff62 	bl	8007070 <__sfmoreglue>
 80071ac:	4604      	mov	r4, r0
 80071ae:	6030      	str	r0, [r6, #0]
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d1d5      	bne.n	8007160 <__sfp+0x24>
 80071b4:	f7ff ff78 	bl	80070a8 <__sfp_lock_release>
 80071b8:	230c      	movs	r3, #12
 80071ba:	603b      	str	r3, [r7, #0]
 80071bc:	e7ee      	b.n	800719c <__sfp+0x60>
 80071be:	bf00      	nop
 80071c0:	080083f8 	.word	0x080083f8
 80071c4:	ffff0001 	.word	0xffff0001

080071c8 <_fwalk_reent>:
 80071c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071cc:	4606      	mov	r6, r0
 80071ce:	4688      	mov	r8, r1
 80071d0:	2700      	movs	r7, #0
 80071d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071da:	f1b9 0901 	subs.w	r9, r9, #1
 80071de:	d505      	bpl.n	80071ec <_fwalk_reent+0x24>
 80071e0:	6824      	ldr	r4, [r4, #0]
 80071e2:	2c00      	cmp	r4, #0
 80071e4:	d1f7      	bne.n	80071d6 <_fwalk_reent+0xe>
 80071e6:	4638      	mov	r0, r7
 80071e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ec:	89ab      	ldrh	r3, [r5, #12]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d907      	bls.n	8007202 <_fwalk_reent+0x3a>
 80071f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071f6:	3301      	adds	r3, #1
 80071f8:	d003      	beq.n	8007202 <_fwalk_reent+0x3a>
 80071fa:	4629      	mov	r1, r5
 80071fc:	4630      	mov	r0, r6
 80071fe:	47c0      	blx	r8
 8007200:	4307      	orrs	r7, r0
 8007202:	3568      	adds	r5, #104	; 0x68
 8007204:	e7e9      	b.n	80071da <_fwalk_reent+0x12>
	...

08007208 <__libc_init_array>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	2600      	movs	r6, #0
 800720c:	4d0c      	ldr	r5, [pc, #48]	; (8007240 <__libc_init_array+0x38>)
 800720e:	4c0d      	ldr	r4, [pc, #52]	; (8007244 <__libc_init_array+0x3c>)
 8007210:	1b64      	subs	r4, r4, r5
 8007212:	10a4      	asrs	r4, r4, #2
 8007214:	42a6      	cmp	r6, r4
 8007216:	d109      	bne.n	800722c <__libc_init_array+0x24>
 8007218:	f000 ffb0 	bl	800817c <_init>
 800721c:	2600      	movs	r6, #0
 800721e:	4d0a      	ldr	r5, [pc, #40]	; (8007248 <__libc_init_array+0x40>)
 8007220:	4c0a      	ldr	r4, [pc, #40]	; (800724c <__libc_init_array+0x44>)
 8007222:	1b64      	subs	r4, r4, r5
 8007224:	10a4      	asrs	r4, r4, #2
 8007226:	42a6      	cmp	r6, r4
 8007228:	d105      	bne.n	8007236 <__libc_init_array+0x2e>
 800722a:	bd70      	pop	{r4, r5, r6, pc}
 800722c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007230:	4798      	blx	r3
 8007232:	3601      	adds	r6, #1
 8007234:	e7ee      	b.n	8007214 <__libc_init_array+0xc>
 8007236:	f855 3b04 	ldr.w	r3, [r5], #4
 800723a:	4798      	blx	r3
 800723c:	3601      	adds	r6, #1
 800723e:	e7f2      	b.n	8007226 <__libc_init_array+0x1e>
 8007240:	08008430 	.word	0x08008430
 8007244:	08008430 	.word	0x08008430
 8007248:	08008430 	.word	0x08008430
 800724c:	08008434 	.word	0x08008434

08007250 <__retarget_lock_init_recursive>:
 8007250:	4770      	bx	lr

08007252 <__retarget_lock_acquire_recursive>:
 8007252:	4770      	bx	lr

08007254 <__retarget_lock_release_recursive>:
 8007254:	4770      	bx	lr

08007256 <memcpy>:
 8007256:	440a      	add	r2, r1
 8007258:	4291      	cmp	r1, r2
 800725a:	f100 33ff 	add.w	r3, r0, #4294967295
 800725e:	d100      	bne.n	8007262 <memcpy+0xc>
 8007260:	4770      	bx	lr
 8007262:	b510      	push	{r4, lr}
 8007264:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007268:	4291      	cmp	r1, r2
 800726a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800726e:	d1f9      	bne.n	8007264 <memcpy+0xe>
 8007270:	bd10      	pop	{r4, pc}

08007272 <memset>:
 8007272:	4603      	mov	r3, r0
 8007274:	4402      	add	r2, r0
 8007276:	4293      	cmp	r3, r2
 8007278:	d100      	bne.n	800727c <memset+0xa>
 800727a:	4770      	bx	lr
 800727c:	f803 1b01 	strb.w	r1, [r3], #1
 8007280:	e7f9      	b.n	8007276 <memset+0x4>
	...

08007284 <sbrk_aligned>:
 8007284:	b570      	push	{r4, r5, r6, lr}
 8007286:	4e0e      	ldr	r6, [pc, #56]	; (80072c0 <sbrk_aligned+0x3c>)
 8007288:	460c      	mov	r4, r1
 800728a:	6831      	ldr	r1, [r6, #0]
 800728c:	4605      	mov	r5, r0
 800728e:	b911      	cbnz	r1, 8007296 <sbrk_aligned+0x12>
 8007290:	f000 f984 	bl	800759c <_sbrk_r>
 8007294:	6030      	str	r0, [r6, #0]
 8007296:	4621      	mov	r1, r4
 8007298:	4628      	mov	r0, r5
 800729a:	f000 f97f 	bl	800759c <_sbrk_r>
 800729e:	1c43      	adds	r3, r0, #1
 80072a0:	d00a      	beq.n	80072b8 <sbrk_aligned+0x34>
 80072a2:	1cc4      	adds	r4, r0, #3
 80072a4:	f024 0403 	bic.w	r4, r4, #3
 80072a8:	42a0      	cmp	r0, r4
 80072aa:	d007      	beq.n	80072bc <sbrk_aligned+0x38>
 80072ac:	1a21      	subs	r1, r4, r0
 80072ae:	4628      	mov	r0, r5
 80072b0:	f000 f974 	bl	800759c <_sbrk_r>
 80072b4:	3001      	adds	r0, #1
 80072b6:	d101      	bne.n	80072bc <sbrk_aligned+0x38>
 80072b8:	f04f 34ff 	mov.w	r4, #4294967295
 80072bc:	4620      	mov	r0, r4
 80072be:	bd70      	pop	{r4, r5, r6, pc}
 80072c0:	200023d0 	.word	0x200023d0

080072c4 <_malloc_r>:
 80072c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c8:	1ccd      	adds	r5, r1, #3
 80072ca:	f025 0503 	bic.w	r5, r5, #3
 80072ce:	3508      	adds	r5, #8
 80072d0:	2d0c      	cmp	r5, #12
 80072d2:	bf38      	it	cc
 80072d4:	250c      	movcc	r5, #12
 80072d6:	2d00      	cmp	r5, #0
 80072d8:	4607      	mov	r7, r0
 80072da:	db01      	blt.n	80072e0 <_malloc_r+0x1c>
 80072dc:	42a9      	cmp	r1, r5
 80072de:	d905      	bls.n	80072ec <_malloc_r+0x28>
 80072e0:	230c      	movs	r3, #12
 80072e2:	2600      	movs	r6, #0
 80072e4:	603b      	str	r3, [r7, #0]
 80072e6:	4630      	mov	r0, r6
 80072e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ec:	4e2e      	ldr	r6, [pc, #184]	; (80073a8 <_malloc_r+0xe4>)
 80072ee:	f000 fbc1 	bl	8007a74 <__malloc_lock>
 80072f2:	6833      	ldr	r3, [r6, #0]
 80072f4:	461c      	mov	r4, r3
 80072f6:	bb34      	cbnz	r4, 8007346 <_malloc_r+0x82>
 80072f8:	4629      	mov	r1, r5
 80072fa:	4638      	mov	r0, r7
 80072fc:	f7ff ffc2 	bl	8007284 <sbrk_aligned>
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	4604      	mov	r4, r0
 8007304:	d14d      	bne.n	80073a2 <_malloc_r+0xde>
 8007306:	6834      	ldr	r4, [r6, #0]
 8007308:	4626      	mov	r6, r4
 800730a:	2e00      	cmp	r6, #0
 800730c:	d140      	bne.n	8007390 <_malloc_r+0xcc>
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	4631      	mov	r1, r6
 8007312:	4638      	mov	r0, r7
 8007314:	eb04 0803 	add.w	r8, r4, r3
 8007318:	f000 f940 	bl	800759c <_sbrk_r>
 800731c:	4580      	cmp	r8, r0
 800731e:	d13a      	bne.n	8007396 <_malloc_r+0xd2>
 8007320:	6821      	ldr	r1, [r4, #0]
 8007322:	3503      	adds	r5, #3
 8007324:	1a6d      	subs	r5, r5, r1
 8007326:	f025 0503 	bic.w	r5, r5, #3
 800732a:	3508      	adds	r5, #8
 800732c:	2d0c      	cmp	r5, #12
 800732e:	bf38      	it	cc
 8007330:	250c      	movcc	r5, #12
 8007332:	4638      	mov	r0, r7
 8007334:	4629      	mov	r1, r5
 8007336:	f7ff ffa5 	bl	8007284 <sbrk_aligned>
 800733a:	3001      	adds	r0, #1
 800733c:	d02b      	beq.n	8007396 <_malloc_r+0xd2>
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	442b      	add	r3, r5
 8007342:	6023      	str	r3, [r4, #0]
 8007344:	e00e      	b.n	8007364 <_malloc_r+0xa0>
 8007346:	6822      	ldr	r2, [r4, #0]
 8007348:	1b52      	subs	r2, r2, r5
 800734a:	d41e      	bmi.n	800738a <_malloc_r+0xc6>
 800734c:	2a0b      	cmp	r2, #11
 800734e:	d916      	bls.n	800737e <_malloc_r+0xba>
 8007350:	1961      	adds	r1, r4, r5
 8007352:	42a3      	cmp	r3, r4
 8007354:	6025      	str	r5, [r4, #0]
 8007356:	bf18      	it	ne
 8007358:	6059      	strne	r1, [r3, #4]
 800735a:	6863      	ldr	r3, [r4, #4]
 800735c:	bf08      	it	eq
 800735e:	6031      	streq	r1, [r6, #0]
 8007360:	5162      	str	r2, [r4, r5]
 8007362:	604b      	str	r3, [r1, #4]
 8007364:	4638      	mov	r0, r7
 8007366:	f104 060b 	add.w	r6, r4, #11
 800736a:	f000 fb89 	bl	8007a80 <__malloc_unlock>
 800736e:	f026 0607 	bic.w	r6, r6, #7
 8007372:	1d23      	adds	r3, r4, #4
 8007374:	1af2      	subs	r2, r6, r3
 8007376:	d0b6      	beq.n	80072e6 <_malloc_r+0x22>
 8007378:	1b9b      	subs	r3, r3, r6
 800737a:	50a3      	str	r3, [r4, r2]
 800737c:	e7b3      	b.n	80072e6 <_malloc_r+0x22>
 800737e:	6862      	ldr	r2, [r4, #4]
 8007380:	42a3      	cmp	r3, r4
 8007382:	bf0c      	ite	eq
 8007384:	6032      	streq	r2, [r6, #0]
 8007386:	605a      	strne	r2, [r3, #4]
 8007388:	e7ec      	b.n	8007364 <_malloc_r+0xa0>
 800738a:	4623      	mov	r3, r4
 800738c:	6864      	ldr	r4, [r4, #4]
 800738e:	e7b2      	b.n	80072f6 <_malloc_r+0x32>
 8007390:	4634      	mov	r4, r6
 8007392:	6876      	ldr	r6, [r6, #4]
 8007394:	e7b9      	b.n	800730a <_malloc_r+0x46>
 8007396:	230c      	movs	r3, #12
 8007398:	4638      	mov	r0, r7
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	f000 fb70 	bl	8007a80 <__malloc_unlock>
 80073a0:	e7a1      	b.n	80072e6 <_malloc_r+0x22>
 80073a2:	6025      	str	r5, [r4, #0]
 80073a4:	e7de      	b.n	8007364 <_malloc_r+0xa0>
 80073a6:	bf00      	nop
 80073a8:	200023cc 	.word	0x200023cc

080073ac <iprintf>:
 80073ac:	b40f      	push	{r0, r1, r2, r3}
 80073ae:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <iprintf+0x2c>)
 80073b0:	b513      	push	{r0, r1, r4, lr}
 80073b2:	681c      	ldr	r4, [r3, #0]
 80073b4:	b124      	cbz	r4, 80073c0 <iprintf+0x14>
 80073b6:	69a3      	ldr	r3, [r4, #24]
 80073b8:	b913      	cbnz	r3, 80073c0 <iprintf+0x14>
 80073ba:	4620      	mov	r0, r4
 80073bc:	f7ff fe86 	bl	80070cc <__sinit>
 80073c0:	ab05      	add	r3, sp, #20
 80073c2:	4620      	mov	r0, r4
 80073c4:	9a04      	ldr	r2, [sp, #16]
 80073c6:	68a1      	ldr	r1, [r4, #8]
 80073c8:	9301      	str	r3, [sp, #4]
 80073ca:	f000 fbcf 	bl	8007b6c <_vfiprintf_r>
 80073ce:	b002      	add	sp, #8
 80073d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073d4:	b004      	add	sp, #16
 80073d6:	4770      	bx	lr
 80073d8:	200000ac 	.word	0x200000ac

080073dc <_puts_r>:
 80073dc:	b570      	push	{r4, r5, r6, lr}
 80073de:	460e      	mov	r6, r1
 80073e0:	4605      	mov	r5, r0
 80073e2:	b118      	cbz	r0, 80073ec <_puts_r+0x10>
 80073e4:	6983      	ldr	r3, [r0, #24]
 80073e6:	b90b      	cbnz	r3, 80073ec <_puts_r+0x10>
 80073e8:	f7ff fe70 	bl	80070cc <__sinit>
 80073ec:	69ab      	ldr	r3, [r5, #24]
 80073ee:	68ac      	ldr	r4, [r5, #8]
 80073f0:	b913      	cbnz	r3, 80073f8 <_puts_r+0x1c>
 80073f2:	4628      	mov	r0, r5
 80073f4:	f7ff fe6a 	bl	80070cc <__sinit>
 80073f8:	4b2c      	ldr	r3, [pc, #176]	; (80074ac <_puts_r+0xd0>)
 80073fa:	429c      	cmp	r4, r3
 80073fc:	d120      	bne.n	8007440 <_puts_r+0x64>
 80073fe:	686c      	ldr	r4, [r5, #4]
 8007400:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007402:	07db      	lsls	r3, r3, #31
 8007404:	d405      	bmi.n	8007412 <_puts_r+0x36>
 8007406:	89a3      	ldrh	r3, [r4, #12]
 8007408:	0598      	lsls	r0, r3, #22
 800740a:	d402      	bmi.n	8007412 <_puts_r+0x36>
 800740c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800740e:	f7ff ff20 	bl	8007252 <__retarget_lock_acquire_recursive>
 8007412:	89a3      	ldrh	r3, [r4, #12]
 8007414:	0719      	lsls	r1, r3, #28
 8007416:	d51d      	bpl.n	8007454 <_puts_r+0x78>
 8007418:	6923      	ldr	r3, [r4, #16]
 800741a:	b1db      	cbz	r3, 8007454 <_puts_r+0x78>
 800741c:	3e01      	subs	r6, #1
 800741e:	68a3      	ldr	r3, [r4, #8]
 8007420:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007424:	3b01      	subs	r3, #1
 8007426:	60a3      	str	r3, [r4, #8]
 8007428:	bb39      	cbnz	r1, 800747a <_puts_r+0x9e>
 800742a:	2b00      	cmp	r3, #0
 800742c:	da38      	bge.n	80074a0 <_puts_r+0xc4>
 800742e:	4622      	mov	r2, r4
 8007430:	210a      	movs	r1, #10
 8007432:	4628      	mov	r0, r5
 8007434:	f000 f906 	bl	8007644 <__swbuf_r>
 8007438:	3001      	adds	r0, #1
 800743a:	d011      	beq.n	8007460 <_puts_r+0x84>
 800743c:	250a      	movs	r5, #10
 800743e:	e011      	b.n	8007464 <_puts_r+0x88>
 8007440:	4b1b      	ldr	r3, [pc, #108]	; (80074b0 <_puts_r+0xd4>)
 8007442:	429c      	cmp	r4, r3
 8007444:	d101      	bne.n	800744a <_puts_r+0x6e>
 8007446:	68ac      	ldr	r4, [r5, #8]
 8007448:	e7da      	b.n	8007400 <_puts_r+0x24>
 800744a:	4b1a      	ldr	r3, [pc, #104]	; (80074b4 <_puts_r+0xd8>)
 800744c:	429c      	cmp	r4, r3
 800744e:	bf08      	it	eq
 8007450:	68ec      	ldreq	r4, [r5, #12]
 8007452:	e7d5      	b.n	8007400 <_puts_r+0x24>
 8007454:	4621      	mov	r1, r4
 8007456:	4628      	mov	r0, r5
 8007458:	f000 f958 	bl	800770c <__swsetup_r>
 800745c:	2800      	cmp	r0, #0
 800745e:	d0dd      	beq.n	800741c <_puts_r+0x40>
 8007460:	f04f 35ff 	mov.w	r5, #4294967295
 8007464:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007466:	07da      	lsls	r2, r3, #31
 8007468:	d405      	bmi.n	8007476 <_puts_r+0x9a>
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	059b      	lsls	r3, r3, #22
 800746e:	d402      	bmi.n	8007476 <_puts_r+0x9a>
 8007470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007472:	f7ff feef 	bl	8007254 <__retarget_lock_release_recursive>
 8007476:	4628      	mov	r0, r5
 8007478:	bd70      	pop	{r4, r5, r6, pc}
 800747a:	2b00      	cmp	r3, #0
 800747c:	da04      	bge.n	8007488 <_puts_r+0xac>
 800747e:	69a2      	ldr	r2, [r4, #24]
 8007480:	429a      	cmp	r2, r3
 8007482:	dc06      	bgt.n	8007492 <_puts_r+0xb6>
 8007484:	290a      	cmp	r1, #10
 8007486:	d004      	beq.n	8007492 <_puts_r+0xb6>
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	1c5a      	adds	r2, r3, #1
 800748c:	6022      	str	r2, [r4, #0]
 800748e:	7019      	strb	r1, [r3, #0]
 8007490:	e7c5      	b.n	800741e <_puts_r+0x42>
 8007492:	4622      	mov	r2, r4
 8007494:	4628      	mov	r0, r5
 8007496:	f000 f8d5 	bl	8007644 <__swbuf_r>
 800749a:	3001      	adds	r0, #1
 800749c:	d1bf      	bne.n	800741e <_puts_r+0x42>
 800749e:	e7df      	b.n	8007460 <_puts_r+0x84>
 80074a0:	250a      	movs	r5, #10
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	6022      	str	r2, [r4, #0]
 80074a8:	701d      	strb	r5, [r3, #0]
 80074aa:	e7db      	b.n	8007464 <_puts_r+0x88>
 80074ac:	080083b8 	.word	0x080083b8
 80074b0:	080083d8 	.word	0x080083d8
 80074b4:	08008398 	.word	0x08008398

080074b8 <puts>:
 80074b8:	4b02      	ldr	r3, [pc, #8]	; (80074c4 <puts+0xc>)
 80074ba:	4601      	mov	r1, r0
 80074bc:	6818      	ldr	r0, [r3, #0]
 80074be:	f7ff bf8d 	b.w	80073dc <_puts_r>
 80074c2:	bf00      	nop
 80074c4:	200000ac 	.word	0x200000ac

080074c8 <cleanup_glue>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	460c      	mov	r4, r1
 80074cc:	6809      	ldr	r1, [r1, #0]
 80074ce:	4605      	mov	r5, r0
 80074d0:	b109      	cbz	r1, 80074d6 <cleanup_glue+0xe>
 80074d2:	f7ff fff9 	bl	80074c8 <cleanup_glue>
 80074d6:	4621      	mov	r1, r4
 80074d8:	4628      	mov	r0, r5
 80074da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074de:	f000 bad5 	b.w	8007a8c <_free_r>
	...

080074e4 <_reclaim_reent>:
 80074e4:	4b2c      	ldr	r3, [pc, #176]	; (8007598 <_reclaim_reent+0xb4>)
 80074e6:	b570      	push	{r4, r5, r6, lr}
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4604      	mov	r4, r0
 80074ec:	4283      	cmp	r3, r0
 80074ee:	d051      	beq.n	8007594 <_reclaim_reent+0xb0>
 80074f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80074f2:	b143      	cbz	r3, 8007506 <_reclaim_reent+0x22>
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d14a      	bne.n	8007590 <_reclaim_reent+0xac>
 80074fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074fc:	6819      	ldr	r1, [r3, #0]
 80074fe:	b111      	cbz	r1, 8007506 <_reclaim_reent+0x22>
 8007500:	4620      	mov	r0, r4
 8007502:	f000 fac3 	bl	8007a8c <_free_r>
 8007506:	6961      	ldr	r1, [r4, #20]
 8007508:	b111      	cbz	r1, 8007510 <_reclaim_reent+0x2c>
 800750a:	4620      	mov	r0, r4
 800750c:	f000 fabe 	bl	8007a8c <_free_r>
 8007510:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007512:	b111      	cbz	r1, 800751a <_reclaim_reent+0x36>
 8007514:	4620      	mov	r0, r4
 8007516:	f000 fab9 	bl	8007a8c <_free_r>
 800751a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800751c:	b111      	cbz	r1, 8007524 <_reclaim_reent+0x40>
 800751e:	4620      	mov	r0, r4
 8007520:	f000 fab4 	bl	8007a8c <_free_r>
 8007524:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007526:	b111      	cbz	r1, 800752e <_reclaim_reent+0x4a>
 8007528:	4620      	mov	r0, r4
 800752a:	f000 faaf 	bl	8007a8c <_free_r>
 800752e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007530:	b111      	cbz	r1, 8007538 <_reclaim_reent+0x54>
 8007532:	4620      	mov	r0, r4
 8007534:	f000 faaa 	bl	8007a8c <_free_r>
 8007538:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800753a:	b111      	cbz	r1, 8007542 <_reclaim_reent+0x5e>
 800753c:	4620      	mov	r0, r4
 800753e:	f000 faa5 	bl	8007a8c <_free_r>
 8007542:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007544:	b111      	cbz	r1, 800754c <_reclaim_reent+0x68>
 8007546:	4620      	mov	r0, r4
 8007548:	f000 faa0 	bl	8007a8c <_free_r>
 800754c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800754e:	b111      	cbz	r1, 8007556 <_reclaim_reent+0x72>
 8007550:	4620      	mov	r0, r4
 8007552:	f000 fa9b 	bl	8007a8c <_free_r>
 8007556:	69a3      	ldr	r3, [r4, #24]
 8007558:	b1e3      	cbz	r3, 8007594 <_reclaim_reent+0xb0>
 800755a:	4620      	mov	r0, r4
 800755c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800755e:	4798      	blx	r3
 8007560:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007562:	b1b9      	cbz	r1, 8007594 <_reclaim_reent+0xb0>
 8007564:	4620      	mov	r0, r4
 8007566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800756a:	f7ff bfad 	b.w	80074c8 <cleanup_glue>
 800756e:	5949      	ldr	r1, [r1, r5]
 8007570:	b941      	cbnz	r1, 8007584 <_reclaim_reent+0xa0>
 8007572:	3504      	adds	r5, #4
 8007574:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007576:	2d80      	cmp	r5, #128	; 0x80
 8007578:	68d9      	ldr	r1, [r3, #12]
 800757a:	d1f8      	bne.n	800756e <_reclaim_reent+0x8a>
 800757c:	4620      	mov	r0, r4
 800757e:	f000 fa85 	bl	8007a8c <_free_r>
 8007582:	e7ba      	b.n	80074fa <_reclaim_reent+0x16>
 8007584:	680e      	ldr	r6, [r1, #0]
 8007586:	4620      	mov	r0, r4
 8007588:	f000 fa80 	bl	8007a8c <_free_r>
 800758c:	4631      	mov	r1, r6
 800758e:	e7ef      	b.n	8007570 <_reclaim_reent+0x8c>
 8007590:	2500      	movs	r5, #0
 8007592:	e7ef      	b.n	8007574 <_reclaim_reent+0x90>
 8007594:	bd70      	pop	{r4, r5, r6, pc}
 8007596:	bf00      	nop
 8007598:	200000ac 	.word	0x200000ac

0800759c <_sbrk_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	2300      	movs	r3, #0
 80075a0:	4d05      	ldr	r5, [pc, #20]	; (80075b8 <_sbrk_r+0x1c>)
 80075a2:	4604      	mov	r4, r0
 80075a4:	4608      	mov	r0, r1
 80075a6:	602b      	str	r3, [r5, #0]
 80075a8:	f7fb f83e 	bl	8002628 <_sbrk>
 80075ac:	1c43      	adds	r3, r0, #1
 80075ae:	d102      	bne.n	80075b6 <_sbrk_r+0x1a>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	b103      	cbz	r3, 80075b6 <_sbrk_r+0x1a>
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	bd38      	pop	{r3, r4, r5, pc}
 80075b8:	200023d4 	.word	0x200023d4

080075bc <__sread>:
 80075bc:	b510      	push	{r4, lr}
 80075be:	460c      	mov	r4, r1
 80075c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c4:	f000 fd98 	bl	80080f8 <_read_r>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	bfab      	itete	ge
 80075cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075ce:	89a3      	ldrhlt	r3, [r4, #12]
 80075d0:	181b      	addge	r3, r3, r0
 80075d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075d6:	bfac      	ite	ge
 80075d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80075da:	81a3      	strhlt	r3, [r4, #12]
 80075dc:	bd10      	pop	{r4, pc}

080075de <__swrite>:
 80075de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e2:	461f      	mov	r7, r3
 80075e4:	898b      	ldrh	r3, [r1, #12]
 80075e6:	4605      	mov	r5, r0
 80075e8:	05db      	lsls	r3, r3, #23
 80075ea:	460c      	mov	r4, r1
 80075ec:	4616      	mov	r6, r2
 80075ee:	d505      	bpl.n	80075fc <__swrite+0x1e>
 80075f0:	2302      	movs	r3, #2
 80075f2:	2200      	movs	r2, #0
 80075f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f8:	f000 f9c4 	bl	8007984 <_lseek_r>
 80075fc:	89a3      	ldrh	r3, [r4, #12]
 80075fe:	4632      	mov	r2, r6
 8007600:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007604:	81a3      	strh	r3, [r4, #12]
 8007606:	4628      	mov	r0, r5
 8007608:	463b      	mov	r3, r7
 800760a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800760e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007612:	f000 b869 	b.w	80076e8 <_write_r>

08007616 <__sseek>:
 8007616:	b510      	push	{r4, lr}
 8007618:	460c      	mov	r4, r1
 800761a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800761e:	f000 f9b1 	bl	8007984 <_lseek_r>
 8007622:	1c43      	adds	r3, r0, #1
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	bf15      	itete	ne
 8007628:	6560      	strne	r0, [r4, #84]	; 0x54
 800762a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800762e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007632:	81a3      	strheq	r3, [r4, #12]
 8007634:	bf18      	it	ne
 8007636:	81a3      	strhne	r3, [r4, #12]
 8007638:	bd10      	pop	{r4, pc}

0800763a <__sclose>:
 800763a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800763e:	f000 b8d3 	b.w	80077e8 <_close_r>
	...

08007644 <__swbuf_r>:
 8007644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007646:	460e      	mov	r6, r1
 8007648:	4614      	mov	r4, r2
 800764a:	4605      	mov	r5, r0
 800764c:	b118      	cbz	r0, 8007656 <__swbuf_r+0x12>
 800764e:	6983      	ldr	r3, [r0, #24]
 8007650:	b90b      	cbnz	r3, 8007656 <__swbuf_r+0x12>
 8007652:	f7ff fd3b 	bl	80070cc <__sinit>
 8007656:	4b21      	ldr	r3, [pc, #132]	; (80076dc <__swbuf_r+0x98>)
 8007658:	429c      	cmp	r4, r3
 800765a:	d12b      	bne.n	80076b4 <__swbuf_r+0x70>
 800765c:	686c      	ldr	r4, [r5, #4]
 800765e:	69a3      	ldr	r3, [r4, #24]
 8007660:	60a3      	str	r3, [r4, #8]
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	071a      	lsls	r2, r3, #28
 8007666:	d52f      	bpl.n	80076c8 <__swbuf_r+0x84>
 8007668:	6923      	ldr	r3, [r4, #16]
 800766a:	b36b      	cbz	r3, 80076c8 <__swbuf_r+0x84>
 800766c:	6923      	ldr	r3, [r4, #16]
 800766e:	6820      	ldr	r0, [r4, #0]
 8007670:	b2f6      	uxtb	r6, r6
 8007672:	1ac0      	subs	r0, r0, r3
 8007674:	6963      	ldr	r3, [r4, #20]
 8007676:	4637      	mov	r7, r6
 8007678:	4283      	cmp	r3, r0
 800767a:	dc04      	bgt.n	8007686 <__swbuf_r+0x42>
 800767c:	4621      	mov	r1, r4
 800767e:	4628      	mov	r0, r5
 8007680:	f000 f944 	bl	800790c <_fflush_r>
 8007684:	bb30      	cbnz	r0, 80076d4 <__swbuf_r+0x90>
 8007686:	68a3      	ldr	r3, [r4, #8]
 8007688:	3001      	adds	r0, #1
 800768a:	3b01      	subs	r3, #1
 800768c:	60a3      	str	r3, [r4, #8]
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	1c5a      	adds	r2, r3, #1
 8007692:	6022      	str	r2, [r4, #0]
 8007694:	701e      	strb	r6, [r3, #0]
 8007696:	6963      	ldr	r3, [r4, #20]
 8007698:	4283      	cmp	r3, r0
 800769a:	d004      	beq.n	80076a6 <__swbuf_r+0x62>
 800769c:	89a3      	ldrh	r3, [r4, #12]
 800769e:	07db      	lsls	r3, r3, #31
 80076a0:	d506      	bpl.n	80076b0 <__swbuf_r+0x6c>
 80076a2:	2e0a      	cmp	r6, #10
 80076a4:	d104      	bne.n	80076b0 <__swbuf_r+0x6c>
 80076a6:	4621      	mov	r1, r4
 80076a8:	4628      	mov	r0, r5
 80076aa:	f000 f92f 	bl	800790c <_fflush_r>
 80076ae:	b988      	cbnz	r0, 80076d4 <__swbuf_r+0x90>
 80076b0:	4638      	mov	r0, r7
 80076b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076b4:	4b0a      	ldr	r3, [pc, #40]	; (80076e0 <__swbuf_r+0x9c>)
 80076b6:	429c      	cmp	r4, r3
 80076b8:	d101      	bne.n	80076be <__swbuf_r+0x7a>
 80076ba:	68ac      	ldr	r4, [r5, #8]
 80076bc:	e7cf      	b.n	800765e <__swbuf_r+0x1a>
 80076be:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <__swbuf_r+0xa0>)
 80076c0:	429c      	cmp	r4, r3
 80076c2:	bf08      	it	eq
 80076c4:	68ec      	ldreq	r4, [r5, #12]
 80076c6:	e7ca      	b.n	800765e <__swbuf_r+0x1a>
 80076c8:	4621      	mov	r1, r4
 80076ca:	4628      	mov	r0, r5
 80076cc:	f000 f81e 	bl	800770c <__swsetup_r>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d0cb      	beq.n	800766c <__swbuf_r+0x28>
 80076d4:	f04f 37ff 	mov.w	r7, #4294967295
 80076d8:	e7ea      	b.n	80076b0 <__swbuf_r+0x6c>
 80076da:	bf00      	nop
 80076dc:	080083b8 	.word	0x080083b8
 80076e0:	080083d8 	.word	0x080083d8
 80076e4:	08008398 	.word	0x08008398

080076e8 <_write_r>:
 80076e8:	b538      	push	{r3, r4, r5, lr}
 80076ea:	4604      	mov	r4, r0
 80076ec:	4608      	mov	r0, r1
 80076ee:	4611      	mov	r1, r2
 80076f0:	2200      	movs	r2, #0
 80076f2:	4d05      	ldr	r5, [pc, #20]	; (8007708 <_write_r+0x20>)
 80076f4:	602a      	str	r2, [r5, #0]
 80076f6:	461a      	mov	r2, r3
 80076f8:	f7fa fe4c 	bl	8002394 <_write>
 80076fc:	1c43      	adds	r3, r0, #1
 80076fe:	d102      	bne.n	8007706 <_write_r+0x1e>
 8007700:	682b      	ldr	r3, [r5, #0]
 8007702:	b103      	cbz	r3, 8007706 <_write_r+0x1e>
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	bd38      	pop	{r3, r4, r5, pc}
 8007708:	200023d4 	.word	0x200023d4

0800770c <__swsetup_r>:
 800770c:	4b32      	ldr	r3, [pc, #200]	; (80077d8 <__swsetup_r+0xcc>)
 800770e:	b570      	push	{r4, r5, r6, lr}
 8007710:	681d      	ldr	r5, [r3, #0]
 8007712:	4606      	mov	r6, r0
 8007714:	460c      	mov	r4, r1
 8007716:	b125      	cbz	r5, 8007722 <__swsetup_r+0x16>
 8007718:	69ab      	ldr	r3, [r5, #24]
 800771a:	b913      	cbnz	r3, 8007722 <__swsetup_r+0x16>
 800771c:	4628      	mov	r0, r5
 800771e:	f7ff fcd5 	bl	80070cc <__sinit>
 8007722:	4b2e      	ldr	r3, [pc, #184]	; (80077dc <__swsetup_r+0xd0>)
 8007724:	429c      	cmp	r4, r3
 8007726:	d10f      	bne.n	8007748 <__swsetup_r+0x3c>
 8007728:	686c      	ldr	r4, [r5, #4]
 800772a:	89a3      	ldrh	r3, [r4, #12]
 800772c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007730:	0719      	lsls	r1, r3, #28
 8007732:	d42c      	bmi.n	800778e <__swsetup_r+0x82>
 8007734:	06dd      	lsls	r5, r3, #27
 8007736:	d411      	bmi.n	800775c <__swsetup_r+0x50>
 8007738:	2309      	movs	r3, #9
 800773a:	6033      	str	r3, [r6, #0]
 800773c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007740:	f04f 30ff 	mov.w	r0, #4294967295
 8007744:	81a3      	strh	r3, [r4, #12]
 8007746:	e03e      	b.n	80077c6 <__swsetup_r+0xba>
 8007748:	4b25      	ldr	r3, [pc, #148]	; (80077e0 <__swsetup_r+0xd4>)
 800774a:	429c      	cmp	r4, r3
 800774c:	d101      	bne.n	8007752 <__swsetup_r+0x46>
 800774e:	68ac      	ldr	r4, [r5, #8]
 8007750:	e7eb      	b.n	800772a <__swsetup_r+0x1e>
 8007752:	4b24      	ldr	r3, [pc, #144]	; (80077e4 <__swsetup_r+0xd8>)
 8007754:	429c      	cmp	r4, r3
 8007756:	bf08      	it	eq
 8007758:	68ec      	ldreq	r4, [r5, #12]
 800775a:	e7e6      	b.n	800772a <__swsetup_r+0x1e>
 800775c:	0758      	lsls	r0, r3, #29
 800775e:	d512      	bpl.n	8007786 <__swsetup_r+0x7a>
 8007760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007762:	b141      	cbz	r1, 8007776 <__swsetup_r+0x6a>
 8007764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007768:	4299      	cmp	r1, r3
 800776a:	d002      	beq.n	8007772 <__swsetup_r+0x66>
 800776c:	4630      	mov	r0, r6
 800776e:	f000 f98d 	bl	8007a8c <_free_r>
 8007772:	2300      	movs	r3, #0
 8007774:	6363      	str	r3, [r4, #52]	; 0x34
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800777c:	81a3      	strh	r3, [r4, #12]
 800777e:	2300      	movs	r3, #0
 8007780:	6063      	str	r3, [r4, #4]
 8007782:	6923      	ldr	r3, [r4, #16]
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	89a3      	ldrh	r3, [r4, #12]
 8007788:	f043 0308 	orr.w	r3, r3, #8
 800778c:	81a3      	strh	r3, [r4, #12]
 800778e:	6923      	ldr	r3, [r4, #16]
 8007790:	b94b      	cbnz	r3, 80077a6 <__swsetup_r+0x9a>
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800779c:	d003      	beq.n	80077a6 <__swsetup_r+0x9a>
 800779e:	4621      	mov	r1, r4
 80077a0:	4630      	mov	r0, r6
 80077a2:	f000 f927 	bl	80079f4 <__smakebuf_r>
 80077a6:	89a0      	ldrh	r0, [r4, #12]
 80077a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077ac:	f010 0301 	ands.w	r3, r0, #1
 80077b0:	d00a      	beq.n	80077c8 <__swsetup_r+0xbc>
 80077b2:	2300      	movs	r3, #0
 80077b4:	60a3      	str	r3, [r4, #8]
 80077b6:	6963      	ldr	r3, [r4, #20]
 80077b8:	425b      	negs	r3, r3
 80077ba:	61a3      	str	r3, [r4, #24]
 80077bc:	6923      	ldr	r3, [r4, #16]
 80077be:	b943      	cbnz	r3, 80077d2 <__swsetup_r+0xc6>
 80077c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077c4:	d1ba      	bne.n	800773c <__swsetup_r+0x30>
 80077c6:	bd70      	pop	{r4, r5, r6, pc}
 80077c8:	0781      	lsls	r1, r0, #30
 80077ca:	bf58      	it	pl
 80077cc:	6963      	ldrpl	r3, [r4, #20]
 80077ce:	60a3      	str	r3, [r4, #8]
 80077d0:	e7f4      	b.n	80077bc <__swsetup_r+0xb0>
 80077d2:	2000      	movs	r0, #0
 80077d4:	e7f7      	b.n	80077c6 <__swsetup_r+0xba>
 80077d6:	bf00      	nop
 80077d8:	200000ac 	.word	0x200000ac
 80077dc:	080083b8 	.word	0x080083b8
 80077e0:	080083d8 	.word	0x080083d8
 80077e4:	08008398 	.word	0x08008398

080077e8 <_close_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	2300      	movs	r3, #0
 80077ec:	4d05      	ldr	r5, [pc, #20]	; (8007804 <_close_r+0x1c>)
 80077ee:	4604      	mov	r4, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	602b      	str	r3, [r5, #0]
 80077f4:	f7fa fee7 	bl	80025c6 <_close>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d102      	bne.n	8007802 <_close_r+0x1a>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	b103      	cbz	r3, 8007802 <_close_r+0x1a>
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	200023d4 	.word	0x200023d4

08007808 <__sflush_r>:
 8007808:	898a      	ldrh	r2, [r1, #12]
 800780a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780c:	4605      	mov	r5, r0
 800780e:	0710      	lsls	r0, r2, #28
 8007810:	460c      	mov	r4, r1
 8007812:	d457      	bmi.n	80078c4 <__sflush_r+0xbc>
 8007814:	684b      	ldr	r3, [r1, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	dc04      	bgt.n	8007824 <__sflush_r+0x1c>
 800781a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800781c:	2b00      	cmp	r3, #0
 800781e:	dc01      	bgt.n	8007824 <__sflush_r+0x1c>
 8007820:	2000      	movs	r0, #0
 8007822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007826:	2e00      	cmp	r6, #0
 8007828:	d0fa      	beq.n	8007820 <__sflush_r+0x18>
 800782a:	2300      	movs	r3, #0
 800782c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007830:	682f      	ldr	r7, [r5, #0]
 8007832:	602b      	str	r3, [r5, #0]
 8007834:	d032      	beq.n	800789c <__sflush_r+0x94>
 8007836:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	075a      	lsls	r2, r3, #29
 800783c:	d505      	bpl.n	800784a <__sflush_r+0x42>
 800783e:	6863      	ldr	r3, [r4, #4]
 8007840:	1ac0      	subs	r0, r0, r3
 8007842:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007844:	b10b      	cbz	r3, 800784a <__sflush_r+0x42>
 8007846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007848:	1ac0      	subs	r0, r0, r3
 800784a:	2300      	movs	r3, #0
 800784c:	4602      	mov	r2, r0
 800784e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007850:	4628      	mov	r0, r5
 8007852:	6a21      	ldr	r1, [r4, #32]
 8007854:	47b0      	blx	r6
 8007856:	1c43      	adds	r3, r0, #1
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	d106      	bne.n	800786a <__sflush_r+0x62>
 800785c:	6829      	ldr	r1, [r5, #0]
 800785e:	291d      	cmp	r1, #29
 8007860:	d82c      	bhi.n	80078bc <__sflush_r+0xb4>
 8007862:	4a29      	ldr	r2, [pc, #164]	; (8007908 <__sflush_r+0x100>)
 8007864:	40ca      	lsrs	r2, r1
 8007866:	07d6      	lsls	r6, r2, #31
 8007868:	d528      	bpl.n	80078bc <__sflush_r+0xb4>
 800786a:	2200      	movs	r2, #0
 800786c:	6062      	str	r2, [r4, #4]
 800786e:	6922      	ldr	r2, [r4, #16]
 8007870:	04d9      	lsls	r1, r3, #19
 8007872:	6022      	str	r2, [r4, #0]
 8007874:	d504      	bpl.n	8007880 <__sflush_r+0x78>
 8007876:	1c42      	adds	r2, r0, #1
 8007878:	d101      	bne.n	800787e <__sflush_r+0x76>
 800787a:	682b      	ldr	r3, [r5, #0]
 800787c:	b903      	cbnz	r3, 8007880 <__sflush_r+0x78>
 800787e:	6560      	str	r0, [r4, #84]	; 0x54
 8007880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007882:	602f      	str	r7, [r5, #0]
 8007884:	2900      	cmp	r1, #0
 8007886:	d0cb      	beq.n	8007820 <__sflush_r+0x18>
 8007888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800788c:	4299      	cmp	r1, r3
 800788e:	d002      	beq.n	8007896 <__sflush_r+0x8e>
 8007890:	4628      	mov	r0, r5
 8007892:	f000 f8fb 	bl	8007a8c <_free_r>
 8007896:	2000      	movs	r0, #0
 8007898:	6360      	str	r0, [r4, #52]	; 0x34
 800789a:	e7c2      	b.n	8007822 <__sflush_r+0x1a>
 800789c:	6a21      	ldr	r1, [r4, #32]
 800789e:	2301      	movs	r3, #1
 80078a0:	4628      	mov	r0, r5
 80078a2:	47b0      	blx	r6
 80078a4:	1c41      	adds	r1, r0, #1
 80078a6:	d1c7      	bne.n	8007838 <__sflush_r+0x30>
 80078a8:	682b      	ldr	r3, [r5, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0c4      	beq.n	8007838 <__sflush_r+0x30>
 80078ae:	2b1d      	cmp	r3, #29
 80078b0:	d001      	beq.n	80078b6 <__sflush_r+0xae>
 80078b2:	2b16      	cmp	r3, #22
 80078b4:	d101      	bne.n	80078ba <__sflush_r+0xb2>
 80078b6:	602f      	str	r7, [r5, #0]
 80078b8:	e7b2      	b.n	8007820 <__sflush_r+0x18>
 80078ba:	89a3      	ldrh	r3, [r4, #12]
 80078bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078c0:	81a3      	strh	r3, [r4, #12]
 80078c2:	e7ae      	b.n	8007822 <__sflush_r+0x1a>
 80078c4:	690f      	ldr	r7, [r1, #16]
 80078c6:	2f00      	cmp	r7, #0
 80078c8:	d0aa      	beq.n	8007820 <__sflush_r+0x18>
 80078ca:	0793      	lsls	r3, r2, #30
 80078cc:	bf18      	it	ne
 80078ce:	2300      	movne	r3, #0
 80078d0:	680e      	ldr	r6, [r1, #0]
 80078d2:	bf08      	it	eq
 80078d4:	694b      	ldreq	r3, [r1, #20]
 80078d6:	1bf6      	subs	r6, r6, r7
 80078d8:	600f      	str	r7, [r1, #0]
 80078da:	608b      	str	r3, [r1, #8]
 80078dc:	2e00      	cmp	r6, #0
 80078de:	dd9f      	ble.n	8007820 <__sflush_r+0x18>
 80078e0:	4633      	mov	r3, r6
 80078e2:	463a      	mov	r2, r7
 80078e4:	4628      	mov	r0, r5
 80078e6:	6a21      	ldr	r1, [r4, #32]
 80078e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80078ec:	47e0      	blx	ip
 80078ee:	2800      	cmp	r0, #0
 80078f0:	dc06      	bgt.n	8007900 <__sflush_r+0xf8>
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	f04f 30ff 	mov.w	r0, #4294967295
 80078f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078fc:	81a3      	strh	r3, [r4, #12]
 80078fe:	e790      	b.n	8007822 <__sflush_r+0x1a>
 8007900:	4407      	add	r7, r0
 8007902:	1a36      	subs	r6, r6, r0
 8007904:	e7ea      	b.n	80078dc <__sflush_r+0xd4>
 8007906:	bf00      	nop
 8007908:	20400001 	.word	0x20400001

0800790c <_fflush_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	690b      	ldr	r3, [r1, #16]
 8007910:	4605      	mov	r5, r0
 8007912:	460c      	mov	r4, r1
 8007914:	b913      	cbnz	r3, 800791c <_fflush_r+0x10>
 8007916:	2500      	movs	r5, #0
 8007918:	4628      	mov	r0, r5
 800791a:	bd38      	pop	{r3, r4, r5, pc}
 800791c:	b118      	cbz	r0, 8007926 <_fflush_r+0x1a>
 800791e:	6983      	ldr	r3, [r0, #24]
 8007920:	b90b      	cbnz	r3, 8007926 <_fflush_r+0x1a>
 8007922:	f7ff fbd3 	bl	80070cc <__sinit>
 8007926:	4b14      	ldr	r3, [pc, #80]	; (8007978 <_fflush_r+0x6c>)
 8007928:	429c      	cmp	r4, r3
 800792a:	d11b      	bne.n	8007964 <_fflush_r+0x58>
 800792c:	686c      	ldr	r4, [r5, #4]
 800792e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0ef      	beq.n	8007916 <_fflush_r+0xa>
 8007936:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007938:	07d0      	lsls	r0, r2, #31
 800793a:	d404      	bmi.n	8007946 <_fflush_r+0x3a>
 800793c:	0599      	lsls	r1, r3, #22
 800793e:	d402      	bmi.n	8007946 <_fflush_r+0x3a>
 8007940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007942:	f7ff fc86 	bl	8007252 <__retarget_lock_acquire_recursive>
 8007946:	4628      	mov	r0, r5
 8007948:	4621      	mov	r1, r4
 800794a:	f7ff ff5d 	bl	8007808 <__sflush_r>
 800794e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007950:	4605      	mov	r5, r0
 8007952:	07da      	lsls	r2, r3, #31
 8007954:	d4e0      	bmi.n	8007918 <_fflush_r+0xc>
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	059b      	lsls	r3, r3, #22
 800795a:	d4dd      	bmi.n	8007918 <_fflush_r+0xc>
 800795c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800795e:	f7ff fc79 	bl	8007254 <__retarget_lock_release_recursive>
 8007962:	e7d9      	b.n	8007918 <_fflush_r+0xc>
 8007964:	4b05      	ldr	r3, [pc, #20]	; (800797c <_fflush_r+0x70>)
 8007966:	429c      	cmp	r4, r3
 8007968:	d101      	bne.n	800796e <_fflush_r+0x62>
 800796a:	68ac      	ldr	r4, [r5, #8]
 800796c:	e7df      	b.n	800792e <_fflush_r+0x22>
 800796e:	4b04      	ldr	r3, [pc, #16]	; (8007980 <_fflush_r+0x74>)
 8007970:	429c      	cmp	r4, r3
 8007972:	bf08      	it	eq
 8007974:	68ec      	ldreq	r4, [r5, #12]
 8007976:	e7da      	b.n	800792e <_fflush_r+0x22>
 8007978:	080083b8 	.word	0x080083b8
 800797c:	080083d8 	.word	0x080083d8
 8007980:	08008398 	.word	0x08008398

08007984 <_lseek_r>:
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	4604      	mov	r4, r0
 8007988:	4608      	mov	r0, r1
 800798a:	4611      	mov	r1, r2
 800798c:	2200      	movs	r2, #0
 800798e:	4d05      	ldr	r5, [pc, #20]	; (80079a4 <_lseek_r+0x20>)
 8007990:	602a      	str	r2, [r5, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	f7fa fe3b 	bl	800260e <_lseek>
 8007998:	1c43      	adds	r3, r0, #1
 800799a:	d102      	bne.n	80079a2 <_lseek_r+0x1e>
 800799c:	682b      	ldr	r3, [r5, #0]
 800799e:	b103      	cbz	r3, 80079a2 <_lseek_r+0x1e>
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
 80079a4:	200023d4 	.word	0x200023d4

080079a8 <__swhatbuf_r>:
 80079a8:	b570      	push	{r4, r5, r6, lr}
 80079aa:	460e      	mov	r6, r1
 80079ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b0:	4614      	mov	r4, r2
 80079b2:	2900      	cmp	r1, #0
 80079b4:	461d      	mov	r5, r3
 80079b6:	b096      	sub	sp, #88	; 0x58
 80079b8:	da08      	bge.n	80079cc <__swhatbuf_r+0x24>
 80079ba:	2200      	movs	r2, #0
 80079bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80079c0:	602a      	str	r2, [r5, #0]
 80079c2:	061a      	lsls	r2, r3, #24
 80079c4:	d410      	bmi.n	80079e8 <__swhatbuf_r+0x40>
 80079c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079ca:	e00e      	b.n	80079ea <__swhatbuf_r+0x42>
 80079cc:	466a      	mov	r2, sp
 80079ce:	f000 fba5 	bl	800811c <_fstat_r>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	dbf1      	blt.n	80079ba <__swhatbuf_r+0x12>
 80079d6:	9a01      	ldr	r2, [sp, #4]
 80079d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80079dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80079e0:	425a      	negs	r2, r3
 80079e2:	415a      	adcs	r2, r3
 80079e4:	602a      	str	r2, [r5, #0]
 80079e6:	e7ee      	b.n	80079c6 <__swhatbuf_r+0x1e>
 80079e8:	2340      	movs	r3, #64	; 0x40
 80079ea:	2000      	movs	r0, #0
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	b016      	add	sp, #88	; 0x58
 80079f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080079f4 <__smakebuf_r>:
 80079f4:	898b      	ldrh	r3, [r1, #12]
 80079f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079f8:	079d      	lsls	r5, r3, #30
 80079fa:	4606      	mov	r6, r0
 80079fc:	460c      	mov	r4, r1
 80079fe:	d507      	bpl.n	8007a10 <__smakebuf_r+0x1c>
 8007a00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a04:	6023      	str	r3, [r4, #0]
 8007a06:	6123      	str	r3, [r4, #16]
 8007a08:	2301      	movs	r3, #1
 8007a0a:	6163      	str	r3, [r4, #20]
 8007a0c:	b002      	add	sp, #8
 8007a0e:	bd70      	pop	{r4, r5, r6, pc}
 8007a10:	466a      	mov	r2, sp
 8007a12:	ab01      	add	r3, sp, #4
 8007a14:	f7ff ffc8 	bl	80079a8 <__swhatbuf_r>
 8007a18:	9900      	ldr	r1, [sp, #0]
 8007a1a:	4605      	mov	r5, r0
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	f7ff fc51 	bl	80072c4 <_malloc_r>
 8007a22:	b948      	cbnz	r0, 8007a38 <__smakebuf_r+0x44>
 8007a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a28:	059a      	lsls	r2, r3, #22
 8007a2a:	d4ef      	bmi.n	8007a0c <__smakebuf_r+0x18>
 8007a2c:	f023 0303 	bic.w	r3, r3, #3
 8007a30:	f043 0302 	orr.w	r3, r3, #2
 8007a34:	81a3      	strh	r3, [r4, #12]
 8007a36:	e7e3      	b.n	8007a00 <__smakebuf_r+0xc>
 8007a38:	4b0d      	ldr	r3, [pc, #52]	; (8007a70 <__smakebuf_r+0x7c>)
 8007a3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	6020      	str	r0, [r4, #0]
 8007a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a44:	81a3      	strh	r3, [r4, #12]
 8007a46:	9b00      	ldr	r3, [sp, #0]
 8007a48:	6120      	str	r0, [r4, #16]
 8007a4a:	6163      	str	r3, [r4, #20]
 8007a4c:	9b01      	ldr	r3, [sp, #4]
 8007a4e:	b15b      	cbz	r3, 8007a68 <__smakebuf_r+0x74>
 8007a50:	4630      	mov	r0, r6
 8007a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a56:	f000 fb73 	bl	8008140 <_isatty_r>
 8007a5a:	b128      	cbz	r0, 8007a68 <__smakebuf_r+0x74>
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	f023 0303 	bic.w	r3, r3, #3
 8007a62:	f043 0301 	orr.w	r3, r3, #1
 8007a66:	81a3      	strh	r3, [r4, #12]
 8007a68:	89a0      	ldrh	r0, [r4, #12]
 8007a6a:	4305      	orrs	r5, r0
 8007a6c:	81a5      	strh	r5, [r4, #12]
 8007a6e:	e7cd      	b.n	8007a0c <__smakebuf_r+0x18>
 8007a70:	08007065 	.word	0x08007065

08007a74 <__malloc_lock>:
 8007a74:	4801      	ldr	r0, [pc, #4]	; (8007a7c <__malloc_lock+0x8>)
 8007a76:	f7ff bbec 	b.w	8007252 <__retarget_lock_acquire_recursive>
 8007a7a:	bf00      	nop
 8007a7c:	200023c8 	.word	0x200023c8

08007a80 <__malloc_unlock>:
 8007a80:	4801      	ldr	r0, [pc, #4]	; (8007a88 <__malloc_unlock+0x8>)
 8007a82:	f7ff bbe7 	b.w	8007254 <__retarget_lock_release_recursive>
 8007a86:	bf00      	nop
 8007a88:	200023c8 	.word	0x200023c8

08007a8c <_free_r>:
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	4605      	mov	r5, r0
 8007a90:	2900      	cmp	r1, #0
 8007a92:	d040      	beq.n	8007b16 <_free_r+0x8a>
 8007a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a98:	1f0c      	subs	r4, r1, #4
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	bfb8      	it	lt
 8007a9e:	18e4      	addlt	r4, r4, r3
 8007aa0:	f7ff ffe8 	bl	8007a74 <__malloc_lock>
 8007aa4:	4a1c      	ldr	r2, [pc, #112]	; (8007b18 <_free_r+0x8c>)
 8007aa6:	6813      	ldr	r3, [r2, #0]
 8007aa8:	b933      	cbnz	r3, 8007ab8 <_free_r+0x2c>
 8007aaa:	6063      	str	r3, [r4, #4]
 8007aac:	6014      	str	r4, [r2, #0]
 8007aae:	4628      	mov	r0, r5
 8007ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ab4:	f7ff bfe4 	b.w	8007a80 <__malloc_unlock>
 8007ab8:	42a3      	cmp	r3, r4
 8007aba:	d908      	bls.n	8007ace <_free_r+0x42>
 8007abc:	6820      	ldr	r0, [r4, #0]
 8007abe:	1821      	adds	r1, r4, r0
 8007ac0:	428b      	cmp	r3, r1
 8007ac2:	bf01      	itttt	eq
 8007ac4:	6819      	ldreq	r1, [r3, #0]
 8007ac6:	685b      	ldreq	r3, [r3, #4]
 8007ac8:	1809      	addeq	r1, r1, r0
 8007aca:	6021      	streq	r1, [r4, #0]
 8007acc:	e7ed      	b.n	8007aaa <_free_r+0x1e>
 8007ace:	461a      	mov	r2, r3
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	b10b      	cbz	r3, 8007ad8 <_free_r+0x4c>
 8007ad4:	42a3      	cmp	r3, r4
 8007ad6:	d9fa      	bls.n	8007ace <_free_r+0x42>
 8007ad8:	6811      	ldr	r1, [r2, #0]
 8007ada:	1850      	adds	r0, r2, r1
 8007adc:	42a0      	cmp	r0, r4
 8007ade:	d10b      	bne.n	8007af8 <_free_r+0x6c>
 8007ae0:	6820      	ldr	r0, [r4, #0]
 8007ae2:	4401      	add	r1, r0
 8007ae4:	1850      	adds	r0, r2, r1
 8007ae6:	4283      	cmp	r3, r0
 8007ae8:	6011      	str	r1, [r2, #0]
 8007aea:	d1e0      	bne.n	8007aae <_free_r+0x22>
 8007aec:	6818      	ldr	r0, [r3, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	4401      	add	r1, r0
 8007af2:	6011      	str	r1, [r2, #0]
 8007af4:	6053      	str	r3, [r2, #4]
 8007af6:	e7da      	b.n	8007aae <_free_r+0x22>
 8007af8:	d902      	bls.n	8007b00 <_free_r+0x74>
 8007afa:	230c      	movs	r3, #12
 8007afc:	602b      	str	r3, [r5, #0]
 8007afe:	e7d6      	b.n	8007aae <_free_r+0x22>
 8007b00:	6820      	ldr	r0, [r4, #0]
 8007b02:	1821      	adds	r1, r4, r0
 8007b04:	428b      	cmp	r3, r1
 8007b06:	bf01      	itttt	eq
 8007b08:	6819      	ldreq	r1, [r3, #0]
 8007b0a:	685b      	ldreq	r3, [r3, #4]
 8007b0c:	1809      	addeq	r1, r1, r0
 8007b0e:	6021      	streq	r1, [r4, #0]
 8007b10:	6063      	str	r3, [r4, #4]
 8007b12:	6054      	str	r4, [r2, #4]
 8007b14:	e7cb      	b.n	8007aae <_free_r+0x22>
 8007b16:	bd38      	pop	{r3, r4, r5, pc}
 8007b18:	200023cc 	.word	0x200023cc

08007b1c <__sfputc_r>:
 8007b1c:	6893      	ldr	r3, [r2, #8]
 8007b1e:	b410      	push	{r4}
 8007b20:	3b01      	subs	r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	6093      	str	r3, [r2, #8]
 8007b26:	da07      	bge.n	8007b38 <__sfputc_r+0x1c>
 8007b28:	6994      	ldr	r4, [r2, #24]
 8007b2a:	42a3      	cmp	r3, r4
 8007b2c:	db01      	blt.n	8007b32 <__sfputc_r+0x16>
 8007b2e:	290a      	cmp	r1, #10
 8007b30:	d102      	bne.n	8007b38 <__sfputc_r+0x1c>
 8007b32:	bc10      	pop	{r4}
 8007b34:	f7ff bd86 	b.w	8007644 <__swbuf_r>
 8007b38:	6813      	ldr	r3, [r2, #0]
 8007b3a:	1c58      	adds	r0, r3, #1
 8007b3c:	6010      	str	r0, [r2, #0]
 8007b3e:	7019      	strb	r1, [r3, #0]
 8007b40:	4608      	mov	r0, r1
 8007b42:	bc10      	pop	{r4}
 8007b44:	4770      	bx	lr

08007b46 <__sfputs_r>:
 8007b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b48:	4606      	mov	r6, r0
 8007b4a:	460f      	mov	r7, r1
 8007b4c:	4614      	mov	r4, r2
 8007b4e:	18d5      	adds	r5, r2, r3
 8007b50:	42ac      	cmp	r4, r5
 8007b52:	d101      	bne.n	8007b58 <__sfputs_r+0x12>
 8007b54:	2000      	movs	r0, #0
 8007b56:	e007      	b.n	8007b68 <__sfputs_r+0x22>
 8007b58:	463a      	mov	r2, r7
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b60:	f7ff ffdc 	bl	8007b1c <__sfputc_r>
 8007b64:	1c43      	adds	r3, r0, #1
 8007b66:	d1f3      	bne.n	8007b50 <__sfputs_r+0xa>
 8007b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b6c <_vfiprintf_r>:
 8007b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b70:	460d      	mov	r5, r1
 8007b72:	4614      	mov	r4, r2
 8007b74:	4698      	mov	r8, r3
 8007b76:	4606      	mov	r6, r0
 8007b78:	b09d      	sub	sp, #116	; 0x74
 8007b7a:	b118      	cbz	r0, 8007b84 <_vfiprintf_r+0x18>
 8007b7c:	6983      	ldr	r3, [r0, #24]
 8007b7e:	b90b      	cbnz	r3, 8007b84 <_vfiprintf_r+0x18>
 8007b80:	f7ff faa4 	bl	80070cc <__sinit>
 8007b84:	4b89      	ldr	r3, [pc, #548]	; (8007dac <_vfiprintf_r+0x240>)
 8007b86:	429d      	cmp	r5, r3
 8007b88:	d11b      	bne.n	8007bc2 <_vfiprintf_r+0x56>
 8007b8a:	6875      	ldr	r5, [r6, #4]
 8007b8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b8e:	07d9      	lsls	r1, r3, #31
 8007b90:	d405      	bmi.n	8007b9e <_vfiprintf_r+0x32>
 8007b92:	89ab      	ldrh	r3, [r5, #12]
 8007b94:	059a      	lsls	r2, r3, #22
 8007b96:	d402      	bmi.n	8007b9e <_vfiprintf_r+0x32>
 8007b98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b9a:	f7ff fb5a 	bl	8007252 <__retarget_lock_acquire_recursive>
 8007b9e:	89ab      	ldrh	r3, [r5, #12]
 8007ba0:	071b      	lsls	r3, r3, #28
 8007ba2:	d501      	bpl.n	8007ba8 <_vfiprintf_r+0x3c>
 8007ba4:	692b      	ldr	r3, [r5, #16]
 8007ba6:	b9eb      	cbnz	r3, 8007be4 <_vfiprintf_r+0x78>
 8007ba8:	4629      	mov	r1, r5
 8007baa:	4630      	mov	r0, r6
 8007bac:	f7ff fdae 	bl	800770c <__swsetup_r>
 8007bb0:	b1c0      	cbz	r0, 8007be4 <_vfiprintf_r+0x78>
 8007bb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bb4:	07dc      	lsls	r4, r3, #31
 8007bb6:	d50e      	bpl.n	8007bd6 <_vfiprintf_r+0x6a>
 8007bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bbc:	b01d      	add	sp, #116	; 0x74
 8007bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc2:	4b7b      	ldr	r3, [pc, #492]	; (8007db0 <_vfiprintf_r+0x244>)
 8007bc4:	429d      	cmp	r5, r3
 8007bc6:	d101      	bne.n	8007bcc <_vfiprintf_r+0x60>
 8007bc8:	68b5      	ldr	r5, [r6, #8]
 8007bca:	e7df      	b.n	8007b8c <_vfiprintf_r+0x20>
 8007bcc:	4b79      	ldr	r3, [pc, #484]	; (8007db4 <_vfiprintf_r+0x248>)
 8007bce:	429d      	cmp	r5, r3
 8007bd0:	bf08      	it	eq
 8007bd2:	68f5      	ldreq	r5, [r6, #12]
 8007bd4:	e7da      	b.n	8007b8c <_vfiprintf_r+0x20>
 8007bd6:	89ab      	ldrh	r3, [r5, #12]
 8007bd8:	0598      	lsls	r0, r3, #22
 8007bda:	d4ed      	bmi.n	8007bb8 <_vfiprintf_r+0x4c>
 8007bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bde:	f7ff fb39 	bl	8007254 <__retarget_lock_release_recursive>
 8007be2:	e7e9      	b.n	8007bb8 <_vfiprintf_r+0x4c>
 8007be4:	2300      	movs	r3, #0
 8007be6:	9309      	str	r3, [sp, #36]	; 0x24
 8007be8:	2320      	movs	r3, #32
 8007bea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bee:	2330      	movs	r3, #48	; 0x30
 8007bf0:	f04f 0901 	mov.w	r9, #1
 8007bf4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bf8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007db8 <_vfiprintf_r+0x24c>
 8007bfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c00:	4623      	mov	r3, r4
 8007c02:	469a      	mov	sl, r3
 8007c04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c08:	b10a      	cbz	r2, 8007c0e <_vfiprintf_r+0xa2>
 8007c0a:	2a25      	cmp	r2, #37	; 0x25
 8007c0c:	d1f9      	bne.n	8007c02 <_vfiprintf_r+0x96>
 8007c0e:	ebba 0b04 	subs.w	fp, sl, r4
 8007c12:	d00b      	beq.n	8007c2c <_vfiprintf_r+0xc0>
 8007c14:	465b      	mov	r3, fp
 8007c16:	4622      	mov	r2, r4
 8007c18:	4629      	mov	r1, r5
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f7ff ff93 	bl	8007b46 <__sfputs_r>
 8007c20:	3001      	adds	r0, #1
 8007c22:	f000 80aa 	beq.w	8007d7a <_vfiprintf_r+0x20e>
 8007c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c28:	445a      	add	r2, fp
 8007c2a:	9209      	str	r2, [sp, #36]	; 0x24
 8007c2c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 80a2 	beq.w	8007d7a <_vfiprintf_r+0x20e>
 8007c36:	2300      	movs	r3, #0
 8007c38:	f04f 32ff 	mov.w	r2, #4294967295
 8007c3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c40:	f10a 0a01 	add.w	sl, sl, #1
 8007c44:	9304      	str	r3, [sp, #16]
 8007c46:	9307      	str	r3, [sp, #28]
 8007c48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c4c:	931a      	str	r3, [sp, #104]	; 0x68
 8007c4e:	4654      	mov	r4, sl
 8007c50:	2205      	movs	r2, #5
 8007c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c56:	4858      	ldr	r0, [pc, #352]	; (8007db8 <_vfiprintf_r+0x24c>)
 8007c58:	f000 fa82 	bl	8008160 <memchr>
 8007c5c:	9a04      	ldr	r2, [sp, #16]
 8007c5e:	b9d8      	cbnz	r0, 8007c98 <_vfiprintf_r+0x12c>
 8007c60:	06d1      	lsls	r1, r2, #27
 8007c62:	bf44      	itt	mi
 8007c64:	2320      	movmi	r3, #32
 8007c66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c6a:	0713      	lsls	r3, r2, #28
 8007c6c:	bf44      	itt	mi
 8007c6e:	232b      	movmi	r3, #43	; 0x2b
 8007c70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c74:	f89a 3000 	ldrb.w	r3, [sl]
 8007c78:	2b2a      	cmp	r3, #42	; 0x2a
 8007c7a:	d015      	beq.n	8007ca8 <_vfiprintf_r+0x13c>
 8007c7c:	4654      	mov	r4, sl
 8007c7e:	2000      	movs	r0, #0
 8007c80:	f04f 0c0a 	mov.w	ip, #10
 8007c84:	9a07      	ldr	r2, [sp, #28]
 8007c86:	4621      	mov	r1, r4
 8007c88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c8c:	3b30      	subs	r3, #48	; 0x30
 8007c8e:	2b09      	cmp	r3, #9
 8007c90:	d94e      	bls.n	8007d30 <_vfiprintf_r+0x1c4>
 8007c92:	b1b0      	cbz	r0, 8007cc2 <_vfiprintf_r+0x156>
 8007c94:	9207      	str	r2, [sp, #28]
 8007c96:	e014      	b.n	8007cc2 <_vfiprintf_r+0x156>
 8007c98:	eba0 0308 	sub.w	r3, r0, r8
 8007c9c:	fa09 f303 	lsl.w	r3, r9, r3
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	46a2      	mov	sl, r4
 8007ca4:	9304      	str	r3, [sp, #16]
 8007ca6:	e7d2      	b.n	8007c4e <_vfiprintf_r+0xe2>
 8007ca8:	9b03      	ldr	r3, [sp, #12]
 8007caa:	1d19      	adds	r1, r3, #4
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	9103      	str	r1, [sp, #12]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	bfbb      	ittet	lt
 8007cb4:	425b      	neglt	r3, r3
 8007cb6:	f042 0202 	orrlt.w	r2, r2, #2
 8007cba:	9307      	strge	r3, [sp, #28]
 8007cbc:	9307      	strlt	r3, [sp, #28]
 8007cbe:	bfb8      	it	lt
 8007cc0:	9204      	strlt	r2, [sp, #16]
 8007cc2:	7823      	ldrb	r3, [r4, #0]
 8007cc4:	2b2e      	cmp	r3, #46	; 0x2e
 8007cc6:	d10c      	bne.n	8007ce2 <_vfiprintf_r+0x176>
 8007cc8:	7863      	ldrb	r3, [r4, #1]
 8007cca:	2b2a      	cmp	r3, #42	; 0x2a
 8007ccc:	d135      	bne.n	8007d3a <_vfiprintf_r+0x1ce>
 8007cce:	9b03      	ldr	r3, [sp, #12]
 8007cd0:	3402      	adds	r4, #2
 8007cd2:	1d1a      	adds	r2, r3, #4
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	9203      	str	r2, [sp, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	bfb8      	it	lt
 8007cdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ce0:	9305      	str	r3, [sp, #20]
 8007ce2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007dbc <_vfiprintf_r+0x250>
 8007ce6:	2203      	movs	r2, #3
 8007ce8:	4650      	mov	r0, sl
 8007cea:	7821      	ldrb	r1, [r4, #0]
 8007cec:	f000 fa38 	bl	8008160 <memchr>
 8007cf0:	b140      	cbz	r0, 8007d04 <_vfiprintf_r+0x198>
 8007cf2:	2340      	movs	r3, #64	; 0x40
 8007cf4:	eba0 000a 	sub.w	r0, r0, sl
 8007cf8:	fa03 f000 	lsl.w	r0, r3, r0
 8007cfc:	9b04      	ldr	r3, [sp, #16]
 8007cfe:	3401      	adds	r4, #1
 8007d00:	4303      	orrs	r3, r0
 8007d02:	9304      	str	r3, [sp, #16]
 8007d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d08:	2206      	movs	r2, #6
 8007d0a:	482d      	ldr	r0, [pc, #180]	; (8007dc0 <_vfiprintf_r+0x254>)
 8007d0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d10:	f000 fa26 	bl	8008160 <memchr>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d03f      	beq.n	8007d98 <_vfiprintf_r+0x22c>
 8007d18:	4b2a      	ldr	r3, [pc, #168]	; (8007dc4 <_vfiprintf_r+0x258>)
 8007d1a:	bb1b      	cbnz	r3, 8007d64 <_vfiprintf_r+0x1f8>
 8007d1c:	9b03      	ldr	r3, [sp, #12]
 8007d1e:	3307      	adds	r3, #7
 8007d20:	f023 0307 	bic.w	r3, r3, #7
 8007d24:	3308      	adds	r3, #8
 8007d26:	9303      	str	r3, [sp, #12]
 8007d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2a:	443b      	add	r3, r7
 8007d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d2e:	e767      	b.n	8007c00 <_vfiprintf_r+0x94>
 8007d30:	460c      	mov	r4, r1
 8007d32:	2001      	movs	r0, #1
 8007d34:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d38:	e7a5      	b.n	8007c86 <_vfiprintf_r+0x11a>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	f04f 0c0a 	mov.w	ip, #10
 8007d40:	4619      	mov	r1, r3
 8007d42:	3401      	adds	r4, #1
 8007d44:	9305      	str	r3, [sp, #20]
 8007d46:	4620      	mov	r0, r4
 8007d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d4c:	3a30      	subs	r2, #48	; 0x30
 8007d4e:	2a09      	cmp	r2, #9
 8007d50:	d903      	bls.n	8007d5a <_vfiprintf_r+0x1ee>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d0c5      	beq.n	8007ce2 <_vfiprintf_r+0x176>
 8007d56:	9105      	str	r1, [sp, #20]
 8007d58:	e7c3      	b.n	8007ce2 <_vfiprintf_r+0x176>
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d62:	e7f0      	b.n	8007d46 <_vfiprintf_r+0x1da>
 8007d64:	ab03      	add	r3, sp, #12
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	462a      	mov	r2, r5
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	4b16      	ldr	r3, [pc, #88]	; (8007dc8 <_vfiprintf_r+0x25c>)
 8007d6e:	a904      	add	r1, sp, #16
 8007d70:	f3af 8000 	nop.w
 8007d74:	4607      	mov	r7, r0
 8007d76:	1c78      	adds	r0, r7, #1
 8007d78:	d1d6      	bne.n	8007d28 <_vfiprintf_r+0x1bc>
 8007d7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d7c:	07d9      	lsls	r1, r3, #31
 8007d7e:	d405      	bmi.n	8007d8c <_vfiprintf_r+0x220>
 8007d80:	89ab      	ldrh	r3, [r5, #12]
 8007d82:	059a      	lsls	r2, r3, #22
 8007d84:	d402      	bmi.n	8007d8c <_vfiprintf_r+0x220>
 8007d86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d88:	f7ff fa64 	bl	8007254 <__retarget_lock_release_recursive>
 8007d8c:	89ab      	ldrh	r3, [r5, #12]
 8007d8e:	065b      	lsls	r3, r3, #25
 8007d90:	f53f af12 	bmi.w	8007bb8 <_vfiprintf_r+0x4c>
 8007d94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d96:	e711      	b.n	8007bbc <_vfiprintf_r+0x50>
 8007d98:	ab03      	add	r3, sp, #12
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	462a      	mov	r2, r5
 8007d9e:	4630      	mov	r0, r6
 8007da0:	4b09      	ldr	r3, [pc, #36]	; (8007dc8 <_vfiprintf_r+0x25c>)
 8007da2:	a904      	add	r1, sp, #16
 8007da4:	f000 f882 	bl	8007eac <_printf_i>
 8007da8:	e7e4      	b.n	8007d74 <_vfiprintf_r+0x208>
 8007daa:	bf00      	nop
 8007dac:	080083b8 	.word	0x080083b8
 8007db0:	080083d8 	.word	0x080083d8
 8007db4:	08008398 	.word	0x08008398
 8007db8:	080083fc 	.word	0x080083fc
 8007dbc:	08008402 	.word	0x08008402
 8007dc0:	08008406 	.word	0x08008406
 8007dc4:	00000000 	.word	0x00000000
 8007dc8:	08007b47 	.word	0x08007b47

08007dcc <_printf_common>:
 8007dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd0:	4616      	mov	r6, r2
 8007dd2:	4699      	mov	r9, r3
 8007dd4:	688a      	ldr	r2, [r1, #8]
 8007dd6:	690b      	ldr	r3, [r1, #16]
 8007dd8:	4607      	mov	r7, r0
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	bfb8      	it	lt
 8007dde:	4613      	movlt	r3, r2
 8007de0:	6033      	str	r3, [r6, #0]
 8007de2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007de6:	460c      	mov	r4, r1
 8007de8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007dec:	b10a      	cbz	r2, 8007df2 <_printf_common+0x26>
 8007dee:	3301      	adds	r3, #1
 8007df0:	6033      	str	r3, [r6, #0]
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	0699      	lsls	r1, r3, #26
 8007df6:	bf42      	ittt	mi
 8007df8:	6833      	ldrmi	r3, [r6, #0]
 8007dfa:	3302      	addmi	r3, #2
 8007dfc:	6033      	strmi	r3, [r6, #0]
 8007dfe:	6825      	ldr	r5, [r4, #0]
 8007e00:	f015 0506 	ands.w	r5, r5, #6
 8007e04:	d106      	bne.n	8007e14 <_printf_common+0x48>
 8007e06:	f104 0a19 	add.w	sl, r4, #25
 8007e0a:	68e3      	ldr	r3, [r4, #12]
 8007e0c:	6832      	ldr	r2, [r6, #0]
 8007e0e:	1a9b      	subs	r3, r3, r2
 8007e10:	42ab      	cmp	r3, r5
 8007e12:	dc28      	bgt.n	8007e66 <_printf_common+0x9a>
 8007e14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e18:	1e13      	subs	r3, r2, #0
 8007e1a:	6822      	ldr	r2, [r4, #0]
 8007e1c:	bf18      	it	ne
 8007e1e:	2301      	movne	r3, #1
 8007e20:	0692      	lsls	r2, r2, #26
 8007e22:	d42d      	bmi.n	8007e80 <_printf_common+0xb4>
 8007e24:	4649      	mov	r1, r9
 8007e26:	4638      	mov	r0, r7
 8007e28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e2c:	47c0      	blx	r8
 8007e2e:	3001      	adds	r0, #1
 8007e30:	d020      	beq.n	8007e74 <_printf_common+0xa8>
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	68e5      	ldr	r5, [r4, #12]
 8007e36:	f003 0306 	and.w	r3, r3, #6
 8007e3a:	2b04      	cmp	r3, #4
 8007e3c:	bf18      	it	ne
 8007e3e:	2500      	movne	r5, #0
 8007e40:	6832      	ldr	r2, [r6, #0]
 8007e42:	f04f 0600 	mov.w	r6, #0
 8007e46:	68a3      	ldr	r3, [r4, #8]
 8007e48:	bf08      	it	eq
 8007e4a:	1aad      	subeq	r5, r5, r2
 8007e4c:	6922      	ldr	r2, [r4, #16]
 8007e4e:	bf08      	it	eq
 8007e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e54:	4293      	cmp	r3, r2
 8007e56:	bfc4      	itt	gt
 8007e58:	1a9b      	subgt	r3, r3, r2
 8007e5a:	18ed      	addgt	r5, r5, r3
 8007e5c:	341a      	adds	r4, #26
 8007e5e:	42b5      	cmp	r5, r6
 8007e60:	d11a      	bne.n	8007e98 <_printf_common+0xcc>
 8007e62:	2000      	movs	r0, #0
 8007e64:	e008      	b.n	8007e78 <_printf_common+0xac>
 8007e66:	2301      	movs	r3, #1
 8007e68:	4652      	mov	r2, sl
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	4638      	mov	r0, r7
 8007e6e:	47c0      	blx	r8
 8007e70:	3001      	adds	r0, #1
 8007e72:	d103      	bne.n	8007e7c <_printf_common+0xb0>
 8007e74:	f04f 30ff 	mov.w	r0, #4294967295
 8007e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e7c:	3501      	adds	r5, #1
 8007e7e:	e7c4      	b.n	8007e0a <_printf_common+0x3e>
 8007e80:	2030      	movs	r0, #48	; 0x30
 8007e82:	18e1      	adds	r1, r4, r3
 8007e84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e8e:	4422      	add	r2, r4
 8007e90:	3302      	adds	r3, #2
 8007e92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e96:	e7c5      	b.n	8007e24 <_printf_common+0x58>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	4622      	mov	r2, r4
 8007e9c:	4649      	mov	r1, r9
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	47c0      	blx	r8
 8007ea2:	3001      	adds	r0, #1
 8007ea4:	d0e6      	beq.n	8007e74 <_printf_common+0xa8>
 8007ea6:	3601      	adds	r6, #1
 8007ea8:	e7d9      	b.n	8007e5e <_printf_common+0x92>
	...

08007eac <_printf_i>:
 8007eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb0:	7e0f      	ldrb	r7, [r1, #24]
 8007eb2:	4691      	mov	r9, r2
 8007eb4:	2f78      	cmp	r7, #120	; 0x78
 8007eb6:	4680      	mov	r8, r0
 8007eb8:	460c      	mov	r4, r1
 8007eba:	469a      	mov	sl, r3
 8007ebc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ebe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ec2:	d807      	bhi.n	8007ed4 <_printf_i+0x28>
 8007ec4:	2f62      	cmp	r7, #98	; 0x62
 8007ec6:	d80a      	bhi.n	8007ede <_printf_i+0x32>
 8007ec8:	2f00      	cmp	r7, #0
 8007eca:	f000 80d9 	beq.w	8008080 <_printf_i+0x1d4>
 8007ece:	2f58      	cmp	r7, #88	; 0x58
 8007ed0:	f000 80a4 	beq.w	800801c <_printf_i+0x170>
 8007ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ed8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007edc:	e03a      	b.n	8007f54 <_printf_i+0xa8>
 8007ede:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ee2:	2b15      	cmp	r3, #21
 8007ee4:	d8f6      	bhi.n	8007ed4 <_printf_i+0x28>
 8007ee6:	a101      	add	r1, pc, #4	; (adr r1, 8007eec <_printf_i+0x40>)
 8007ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007eec:	08007f45 	.word	0x08007f45
 8007ef0:	08007f59 	.word	0x08007f59
 8007ef4:	08007ed5 	.word	0x08007ed5
 8007ef8:	08007ed5 	.word	0x08007ed5
 8007efc:	08007ed5 	.word	0x08007ed5
 8007f00:	08007ed5 	.word	0x08007ed5
 8007f04:	08007f59 	.word	0x08007f59
 8007f08:	08007ed5 	.word	0x08007ed5
 8007f0c:	08007ed5 	.word	0x08007ed5
 8007f10:	08007ed5 	.word	0x08007ed5
 8007f14:	08007ed5 	.word	0x08007ed5
 8007f18:	08008067 	.word	0x08008067
 8007f1c:	08007f89 	.word	0x08007f89
 8007f20:	08008049 	.word	0x08008049
 8007f24:	08007ed5 	.word	0x08007ed5
 8007f28:	08007ed5 	.word	0x08007ed5
 8007f2c:	08008089 	.word	0x08008089
 8007f30:	08007ed5 	.word	0x08007ed5
 8007f34:	08007f89 	.word	0x08007f89
 8007f38:	08007ed5 	.word	0x08007ed5
 8007f3c:	08007ed5 	.word	0x08007ed5
 8007f40:	08008051 	.word	0x08008051
 8007f44:	682b      	ldr	r3, [r5, #0]
 8007f46:	1d1a      	adds	r2, r3, #4
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	602a      	str	r2, [r5, #0]
 8007f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f54:	2301      	movs	r3, #1
 8007f56:	e0a4      	b.n	80080a2 <_printf_i+0x1f6>
 8007f58:	6820      	ldr	r0, [r4, #0]
 8007f5a:	6829      	ldr	r1, [r5, #0]
 8007f5c:	0606      	lsls	r6, r0, #24
 8007f5e:	f101 0304 	add.w	r3, r1, #4
 8007f62:	d50a      	bpl.n	8007f7a <_printf_i+0xce>
 8007f64:	680e      	ldr	r6, [r1, #0]
 8007f66:	602b      	str	r3, [r5, #0]
 8007f68:	2e00      	cmp	r6, #0
 8007f6a:	da03      	bge.n	8007f74 <_printf_i+0xc8>
 8007f6c:	232d      	movs	r3, #45	; 0x2d
 8007f6e:	4276      	negs	r6, r6
 8007f70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f74:	230a      	movs	r3, #10
 8007f76:	485e      	ldr	r0, [pc, #376]	; (80080f0 <_printf_i+0x244>)
 8007f78:	e019      	b.n	8007fae <_printf_i+0x102>
 8007f7a:	680e      	ldr	r6, [r1, #0]
 8007f7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f80:	602b      	str	r3, [r5, #0]
 8007f82:	bf18      	it	ne
 8007f84:	b236      	sxthne	r6, r6
 8007f86:	e7ef      	b.n	8007f68 <_printf_i+0xbc>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	6820      	ldr	r0, [r4, #0]
 8007f8c:	1d19      	adds	r1, r3, #4
 8007f8e:	6029      	str	r1, [r5, #0]
 8007f90:	0601      	lsls	r1, r0, #24
 8007f92:	d501      	bpl.n	8007f98 <_printf_i+0xec>
 8007f94:	681e      	ldr	r6, [r3, #0]
 8007f96:	e002      	b.n	8007f9e <_printf_i+0xf2>
 8007f98:	0646      	lsls	r6, r0, #25
 8007f9a:	d5fb      	bpl.n	8007f94 <_printf_i+0xe8>
 8007f9c:	881e      	ldrh	r6, [r3, #0]
 8007f9e:	2f6f      	cmp	r7, #111	; 0x6f
 8007fa0:	bf0c      	ite	eq
 8007fa2:	2308      	moveq	r3, #8
 8007fa4:	230a      	movne	r3, #10
 8007fa6:	4852      	ldr	r0, [pc, #328]	; (80080f0 <_printf_i+0x244>)
 8007fa8:	2100      	movs	r1, #0
 8007faa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fae:	6865      	ldr	r5, [r4, #4]
 8007fb0:	2d00      	cmp	r5, #0
 8007fb2:	bfa8      	it	ge
 8007fb4:	6821      	ldrge	r1, [r4, #0]
 8007fb6:	60a5      	str	r5, [r4, #8]
 8007fb8:	bfa4      	itt	ge
 8007fba:	f021 0104 	bicge.w	r1, r1, #4
 8007fbe:	6021      	strge	r1, [r4, #0]
 8007fc0:	b90e      	cbnz	r6, 8007fc6 <_printf_i+0x11a>
 8007fc2:	2d00      	cmp	r5, #0
 8007fc4:	d04d      	beq.n	8008062 <_printf_i+0x1b6>
 8007fc6:	4615      	mov	r5, r2
 8007fc8:	fbb6 f1f3 	udiv	r1, r6, r3
 8007fcc:	fb03 6711 	mls	r7, r3, r1, r6
 8007fd0:	5dc7      	ldrb	r7, [r0, r7]
 8007fd2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007fd6:	4637      	mov	r7, r6
 8007fd8:	42bb      	cmp	r3, r7
 8007fda:	460e      	mov	r6, r1
 8007fdc:	d9f4      	bls.n	8007fc8 <_printf_i+0x11c>
 8007fde:	2b08      	cmp	r3, #8
 8007fe0:	d10b      	bne.n	8007ffa <_printf_i+0x14e>
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	07de      	lsls	r6, r3, #31
 8007fe6:	d508      	bpl.n	8007ffa <_printf_i+0x14e>
 8007fe8:	6923      	ldr	r3, [r4, #16]
 8007fea:	6861      	ldr	r1, [r4, #4]
 8007fec:	4299      	cmp	r1, r3
 8007fee:	bfde      	ittt	le
 8007ff0:	2330      	movle	r3, #48	; 0x30
 8007ff2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ff6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ffa:	1b52      	subs	r2, r2, r5
 8007ffc:	6122      	str	r2, [r4, #16]
 8007ffe:	464b      	mov	r3, r9
 8008000:	4621      	mov	r1, r4
 8008002:	4640      	mov	r0, r8
 8008004:	f8cd a000 	str.w	sl, [sp]
 8008008:	aa03      	add	r2, sp, #12
 800800a:	f7ff fedf 	bl	8007dcc <_printf_common>
 800800e:	3001      	adds	r0, #1
 8008010:	d14c      	bne.n	80080ac <_printf_i+0x200>
 8008012:	f04f 30ff 	mov.w	r0, #4294967295
 8008016:	b004      	add	sp, #16
 8008018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800801c:	4834      	ldr	r0, [pc, #208]	; (80080f0 <_printf_i+0x244>)
 800801e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008022:	6829      	ldr	r1, [r5, #0]
 8008024:	6823      	ldr	r3, [r4, #0]
 8008026:	f851 6b04 	ldr.w	r6, [r1], #4
 800802a:	6029      	str	r1, [r5, #0]
 800802c:	061d      	lsls	r5, r3, #24
 800802e:	d514      	bpl.n	800805a <_printf_i+0x1ae>
 8008030:	07df      	lsls	r7, r3, #31
 8008032:	bf44      	itt	mi
 8008034:	f043 0320 	orrmi.w	r3, r3, #32
 8008038:	6023      	strmi	r3, [r4, #0]
 800803a:	b91e      	cbnz	r6, 8008044 <_printf_i+0x198>
 800803c:	6823      	ldr	r3, [r4, #0]
 800803e:	f023 0320 	bic.w	r3, r3, #32
 8008042:	6023      	str	r3, [r4, #0]
 8008044:	2310      	movs	r3, #16
 8008046:	e7af      	b.n	8007fa8 <_printf_i+0xfc>
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	f043 0320 	orr.w	r3, r3, #32
 800804e:	6023      	str	r3, [r4, #0]
 8008050:	2378      	movs	r3, #120	; 0x78
 8008052:	4828      	ldr	r0, [pc, #160]	; (80080f4 <_printf_i+0x248>)
 8008054:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008058:	e7e3      	b.n	8008022 <_printf_i+0x176>
 800805a:	0659      	lsls	r1, r3, #25
 800805c:	bf48      	it	mi
 800805e:	b2b6      	uxthmi	r6, r6
 8008060:	e7e6      	b.n	8008030 <_printf_i+0x184>
 8008062:	4615      	mov	r5, r2
 8008064:	e7bb      	b.n	8007fde <_printf_i+0x132>
 8008066:	682b      	ldr	r3, [r5, #0]
 8008068:	6826      	ldr	r6, [r4, #0]
 800806a:	1d18      	adds	r0, r3, #4
 800806c:	6961      	ldr	r1, [r4, #20]
 800806e:	6028      	str	r0, [r5, #0]
 8008070:	0635      	lsls	r5, r6, #24
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	d501      	bpl.n	800807a <_printf_i+0x1ce>
 8008076:	6019      	str	r1, [r3, #0]
 8008078:	e002      	b.n	8008080 <_printf_i+0x1d4>
 800807a:	0670      	lsls	r0, r6, #25
 800807c:	d5fb      	bpl.n	8008076 <_printf_i+0x1ca>
 800807e:	8019      	strh	r1, [r3, #0]
 8008080:	2300      	movs	r3, #0
 8008082:	4615      	mov	r5, r2
 8008084:	6123      	str	r3, [r4, #16]
 8008086:	e7ba      	b.n	8007ffe <_printf_i+0x152>
 8008088:	682b      	ldr	r3, [r5, #0]
 800808a:	2100      	movs	r1, #0
 800808c:	1d1a      	adds	r2, r3, #4
 800808e:	602a      	str	r2, [r5, #0]
 8008090:	681d      	ldr	r5, [r3, #0]
 8008092:	6862      	ldr	r2, [r4, #4]
 8008094:	4628      	mov	r0, r5
 8008096:	f000 f863 	bl	8008160 <memchr>
 800809a:	b108      	cbz	r0, 80080a0 <_printf_i+0x1f4>
 800809c:	1b40      	subs	r0, r0, r5
 800809e:	6060      	str	r0, [r4, #4]
 80080a0:	6863      	ldr	r3, [r4, #4]
 80080a2:	6123      	str	r3, [r4, #16]
 80080a4:	2300      	movs	r3, #0
 80080a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080aa:	e7a8      	b.n	8007ffe <_printf_i+0x152>
 80080ac:	462a      	mov	r2, r5
 80080ae:	4649      	mov	r1, r9
 80080b0:	4640      	mov	r0, r8
 80080b2:	6923      	ldr	r3, [r4, #16]
 80080b4:	47d0      	blx	sl
 80080b6:	3001      	adds	r0, #1
 80080b8:	d0ab      	beq.n	8008012 <_printf_i+0x166>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	079b      	lsls	r3, r3, #30
 80080be:	d413      	bmi.n	80080e8 <_printf_i+0x23c>
 80080c0:	68e0      	ldr	r0, [r4, #12]
 80080c2:	9b03      	ldr	r3, [sp, #12]
 80080c4:	4298      	cmp	r0, r3
 80080c6:	bfb8      	it	lt
 80080c8:	4618      	movlt	r0, r3
 80080ca:	e7a4      	b.n	8008016 <_printf_i+0x16a>
 80080cc:	2301      	movs	r3, #1
 80080ce:	4632      	mov	r2, r6
 80080d0:	4649      	mov	r1, r9
 80080d2:	4640      	mov	r0, r8
 80080d4:	47d0      	blx	sl
 80080d6:	3001      	adds	r0, #1
 80080d8:	d09b      	beq.n	8008012 <_printf_i+0x166>
 80080da:	3501      	adds	r5, #1
 80080dc:	68e3      	ldr	r3, [r4, #12]
 80080de:	9903      	ldr	r1, [sp, #12]
 80080e0:	1a5b      	subs	r3, r3, r1
 80080e2:	42ab      	cmp	r3, r5
 80080e4:	dcf2      	bgt.n	80080cc <_printf_i+0x220>
 80080e6:	e7eb      	b.n	80080c0 <_printf_i+0x214>
 80080e8:	2500      	movs	r5, #0
 80080ea:	f104 0619 	add.w	r6, r4, #25
 80080ee:	e7f5      	b.n	80080dc <_printf_i+0x230>
 80080f0:	0800840d 	.word	0x0800840d
 80080f4:	0800841e 	.word	0x0800841e

080080f8 <_read_r>:
 80080f8:	b538      	push	{r3, r4, r5, lr}
 80080fa:	4604      	mov	r4, r0
 80080fc:	4608      	mov	r0, r1
 80080fe:	4611      	mov	r1, r2
 8008100:	2200      	movs	r2, #0
 8008102:	4d05      	ldr	r5, [pc, #20]	; (8008118 <_read_r+0x20>)
 8008104:	602a      	str	r2, [r5, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	f7fa fa40 	bl	800258c <_read>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d102      	bne.n	8008116 <_read_r+0x1e>
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	b103      	cbz	r3, 8008116 <_read_r+0x1e>
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	bd38      	pop	{r3, r4, r5, pc}
 8008118:	200023d4 	.word	0x200023d4

0800811c <_fstat_r>:
 800811c:	b538      	push	{r3, r4, r5, lr}
 800811e:	2300      	movs	r3, #0
 8008120:	4d06      	ldr	r5, [pc, #24]	; (800813c <_fstat_r+0x20>)
 8008122:	4604      	mov	r4, r0
 8008124:	4608      	mov	r0, r1
 8008126:	4611      	mov	r1, r2
 8008128:	602b      	str	r3, [r5, #0]
 800812a:	f7fa fa57 	bl	80025dc <_fstat>
 800812e:	1c43      	adds	r3, r0, #1
 8008130:	d102      	bne.n	8008138 <_fstat_r+0x1c>
 8008132:	682b      	ldr	r3, [r5, #0]
 8008134:	b103      	cbz	r3, 8008138 <_fstat_r+0x1c>
 8008136:	6023      	str	r3, [r4, #0]
 8008138:	bd38      	pop	{r3, r4, r5, pc}
 800813a:	bf00      	nop
 800813c:	200023d4 	.word	0x200023d4

08008140 <_isatty_r>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	2300      	movs	r3, #0
 8008144:	4d05      	ldr	r5, [pc, #20]	; (800815c <_isatty_r+0x1c>)
 8008146:	4604      	mov	r4, r0
 8008148:	4608      	mov	r0, r1
 800814a:	602b      	str	r3, [r5, #0]
 800814c:	f7fa fa55 	bl	80025fa <_isatty>
 8008150:	1c43      	adds	r3, r0, #1
 8008152:	d102      	bne.n	800815a <_isatty_r+0x1a>
 8008154:	682b      	ldr	r3, [r5, #0]
 8008156:	b103      	cbz	r3, 800815a <_isatty_r+0x1a>
 8008158:	6023      	str	r3, [r4, #0]
 800815a:	bd38      	pop	{r3, r4, r5, pc}
 800815c:	200023d4 	.word	0x200023d4

08008160 <memchr>:
 8008160:	4603      	mov	r3, r0
 8008162:	b510      	push	{r4, lr}
 8008164:	b2c9      	uxtb	r1, r1
 8008166:	4402      	add	r2, r0
 8008168:	4293      	cmp	r3, r2
 800816a:	4618      	mov	r0, r3
 800816c:	d101      	bne.n	8008172 <memchr+0x12>
 800816e:	2000      	movs	r0, #0
 8008170:	e003      	b.n	800817a <memchr+0x1a>
 8008172:	7804      	ldrb	r4, [r0, #0]
 8008174:	3301      	adds	r3, #1
 8008176:	428c      	cmp	r4, r1
 8008178:	d1f6      	bne.n	8008168 <memchr+0x8>
 800817a:	bd10      	pop	{r4, pc}

0800817c <_init>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	bf00      	nop
 8008180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008182:	bc08      	pop	{r3}
 8008184:	469e      	mov	lr, r3
 8008186:	4770      	bx	lr

08008188 <_fini>:
 8008188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818a:	bf00      	nop
 800818c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818e:	bc08      	pop	{r3}
 8008190:	469e      	mov	lr, r3
 8008192:	4770      	bx	lr
