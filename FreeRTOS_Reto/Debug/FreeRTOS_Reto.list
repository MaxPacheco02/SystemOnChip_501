
FreeRTOS_Reto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008220  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08008330  08008330  00018330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008568  08008568  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  08008568  08008568  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008568  08008568  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008568  08008568  00018568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800856c  0800856c  0001856c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08008570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022d0  20000110  08008680  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023e0  08008680  000223e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d40  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030eb  00000000  00000000  00033e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00036f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  00038110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f0d  00000000  00000000  00039150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012988  00000000  00000000  0005305d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092d4c  00000000  00000000  000659e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8731  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051bc  00000000  00000000  000f8784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000110 	.word	0x20000110
 800012c:	00000000 	.word	0x00000000
 8000130:	08008318 	.word	0x08008318

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000114 	.word	0x20000114
 800014c:	08008318 	.word	0x08008318

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_fmul>:
 80009d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009e0:	bf1e      	ittt	ne
 80009e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e6:	ea92 0f0c 	teqne	r2, ip
 80009ea:	ea93 0f0c 	teqne	r3, ip
 80009ee:	d06f      	beq.n	8000ad0 <__aeabi_fmul+0xf8>
 80009f0:	441a      	add	r2, r3
 80009f2:	ea80 0c01 	eor.w	ip, r0, r1
 80009f6:	0240      	lsls	r0, r0, #9
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fe:	d01e      	beq.n	8000a3e <__aeabi_fmul+0x66>
 8000a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a18:	bf3e      	ittt	cc
 8000a1a:	0049      	lslcc	r1, r1, #1
 8000a1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	ea40 0001 	orr.w	r0, r0, r1
 8000a26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a2a:	2afd      	cmp	r2, #253	; 0xfd
 8000a2c:	d81d      	bhi.n	8000a6a <__aeabi_fmul+0x92>
 8000a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a36:	bf08      	it	eq
 8000a38:	f020 0001 	biceq.w	r0, r0, #1
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	0249      	lsleq	r1, r1, #9
 8000a4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a52:	3a7f      	subs	r2, #127	; 0x7f
 8000a54:	bfc2      	ittt	gt
 8000a56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5e:	4770      	bxgt	lr
 8000a60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	dc5d      	bgt.n	8000b28 <__aeabi_fmul+0x150>
 8000a6c:	f112 0f19 	cmn.w	r2, #25
 8000a70:	bfdc      	itt	le
 8000a72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a76:	4770      	bxle	lr
 8000a78:	f1c2 0200 	rsb	r2, r2, #0
 8000a7c:	0041      	lsls	r1, r0, #1
 8000a7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a82:	f1c2 0220 	rsb	r2, r2, #32
 8000a86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8e:	f140 0000 	adc.w	r0, r0, #0
 8000a92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a96:	bf08      	it	eq
 8000a98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a9c:	4770      	bx	lr
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fmul+0xce>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fmul+0xe6>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fmul+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	bf18      	it	ne
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d00a      	beq.n	8000af6 <__aeabi_fmul+0x11e>
 8000ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ae4:	bf18      	it	ne
 8000ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aea:	d1d8      	bne.n	8000a9e <__aeabi_fmul+0xc6>
 8000aec:	ea80 0001 	eor.w	r0, r0, r1
 8000af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f090 0f00 	teq	r0, #0
 8000afa:	bf17      	itett	ne
 8000afc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b00:	4608      	moveq	r0, r1
 8000b02:	f091 0f00 	teqne	r1, #0
 8000b06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b0a:	d014      	beq.n	8000b36 <__aeabi_fmul+0x15e>
 8000b0c:	ea92 0f0c 	teq	r2, ip
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fmul+0x13e>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d10f      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b16:	ea93 0f0c 	teq	r3, ip
 8000b1a:	d103      	bne.n	8000b24 <__aeabi_fmul+0x14c>
 8000b1c:	024b      	lsls	r3, r1, #9
 8000b1e:	bf18      	it	ne
 8000b20:	4608      	movne	r0, r1
 8000b22:	d108      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b24:	ea80 0001 	eor.w	r0, r0, r1
 8000b28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fdiv>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d069      	beq.n	8000c2c <__aeabi_fdiv+0xec>
 8000b58:	eba2 0203 	sub.w	r2, r2, r3
 8000b5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b66:	d037      	beq.n	8000bd8 <__aeabi_fdiv+0x98>
 8000b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf38      	it	cc
 8000b7c:	005b      	lslcc	r3, r3, #1
 8000b7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b86:	428b      	cmp	r3, r1
 8000b88:	bf24      	itt	cs
 8000b8a:	1a5b      	subcs	r3, r3, r1
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b94:	bf24      	itt	cs
 8000b96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ba2:	bf24      	itt	cs
 8000ba4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bb0:	bf24      	itt	cs
 8000bb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bc2:	d1e0      	bne.n	8000b86 <__aeabi_fdiv+0x46>
 8000bc4:	2afd      	cmp	r2, #253	; 0xfd
 8000bc6:	f63f af50 	bhi.w	8000a6a <__aeabi_fmul+0x92>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be0:	327f      	adds	r2, #127	; 0x7f
 8000be2:	bfc2      	ittt	gt
 8000be4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bec:	4770      	bxgt	lr
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	e737      	b.n	8000a6a <__aeabi_fmul+0x92>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c02:	bf02      	ittt	eq
 8000c04:	0040      	lsleq	r0, r0, #1
 8000c06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c0a:	3a01      	subeq	r2, #1
 8000c0c:	d0f9      	beq.n	8000c02 <__aeabi_fdiv+0xc2>
 8000c0e:	ea40 000c 	orr.w	r0, r0, ip
 8000c12:	f093 0f00 	teq	r3, #0
 8000c16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0049      	lsleq	r1, r1, #1
 8000c1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c22:	3b01      	subeq	r3, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fdiv+0xda>
 8000c26:	ea41 010c 	orr.w	r1, r1, ip
 8000c2a:	e795      	b.n	8000b58 <__aeabi_fdiv+0x18>
 8000c2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d108      	bne.n	8000c48 <__aeabi_fdiv+0x108>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	f47f af7d 	bne.w	8000b36 <__aeabi_fmul+0x15e>
 8000c3c:	ea93 0f0c 	teq	r3, ip
 8000c40:	f47f af70 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e776      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	d104      	bne.n	8000c58 <__aeabi_fdiv+0x118>
 8000c4e:	024b      	lsls	r3, r1, #9
 8000c50:	f43f af4c 	beq.w	8000aec <__aeabi_fmul+0x114>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e76e      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c5c:	bf18      	it	ne
 8000c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c62:	d1ca      	bne.n	8000bfa <__aeabi_fdiv+0xba>
 8000c64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c68:	f47f af5c 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	f47f af3c 	bne.w	8000aec <__aeabi_fmul+0x114>
 8000c74:	e75f      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c76:	bf00      	nop

08000c78 <__aeabi_f2uiz>:
 8000c78:	0042      	lsls	r2, r0, #1
 8000c7a:	d20e      	bcs.n	8000c9a <__aeabi_f2uiz+0x22>
 8000c7c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c80:	d30b      	bcc.n	8000c9a <__aeabi_f2uiz+0x22>
 8000c82:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c86:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c8a:	d409      	bmi.n	8000ca0 <__aeabi_f2uiz+0x28>
 8000c8c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c94:	fa23 f002 	lsr.w	r0, r3, r2
 8000c98:	4770      	bx	lr
 8000c9a:	f04f 0000 	mov.w	r0, #0
 8000c9e:	4770      	bx	lr
 8000ca0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ca4:	d101      	bne.n	8000caa <__aeabi_f2uiz+0x32>
 8000ca6:	0242      	lsls	r2, r0, #9
 8000ca8:	d102      	bne.n	8000cb0 <__aeabi_f2uiz+0x38>
 8000caa:	f04f 30ff 	mov.w	r0, #4294967295
 8000cae:	4770      	bx	lr
 8000cb0:	f04f 0000 	mov.w	r0, #0
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <vApplicationGetIdleTaskMemory+0x28>)
 8000cc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000cce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	2000012c 	.word	0x2000012c
 8000ce4:	200001e0 	.word	0x200001e0

08000ce8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <vApplicationGetTimerTaskMemory+0x2c>)
 8000cf8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <vApplicationGetTimerTaskMemory+0x30>)
 8000cfe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d06:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	200003e0 	.word	0x200003e0
 8000d18:	20000494 	.word	0x20000494

08000d1c <LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* ****************************************************** */
  /* Configurar los pines del Puerto B para las lineas:
   * RW, RS, EN, D4-D7 del LCD
   * como general purpose output push-pull and 50 MHz speed */
	// 0,1,2,5,6,8,9
	GPIOC->CRL &= ~GPIO_CRL_CNF0;
 8000d22:	4b53      	ldr	r3, [pc, #332]	; (8000e70 <LCD_Init+0x154>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a52      	ldr	r2, [pc, #328]	; (8000e70 <LCD_Init+0x154>)
 8000d28:	f023 030c 	bic.w	r3, r3, #12
 8000d2c:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE0;
 8000d2e:	4b50      	ldr	r3, [pc, #320]	; (8000e70 <LCD_Init+0x154>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a4f      	ldr	r2, [pc, #316]	; (8000e70 <LCD_Init+0x154>)
 8000d34:	f043 0303 	orr.w	r3, r3, #3
 8000d38:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~GPIO_CRL_CNF1;
 8000d3a:	4b4d      	ldr	r3, [pc, #308]	; (8000e70 <LCD_Init+0x154>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a4c      	ldr	r2, [pc, #304]	; (8000e70 <LCD_Init+0x154>)
 8000d40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000d44:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE1;
 8000d46:	4b4a      	ldr	r3, [pc, #296]	; (8000e70 <LCD_Init+0x154>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a49      	ldr	r2, [pc, #292]	; (8000e70 <LCD_Init+0x154>)
 8000d4c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000d50:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~GPIO_CRL_CNF2;
 8000d52:	4b47      	ldr	r3, [pc, #284]	; (8000e70 <LCD_Init+0x154>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a46      	ldr	r2, [pc, #280]	; (8000e70 <LCD_Init+0x154>)
 8000d58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000d5c:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE2;
 8000d5e:	4b44      	ldr	r3, [pc, #272]	; (8000e70 <LCD_Init+0x154>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a43      	ldr	r2, [pc, #268]	; (8000e70 <LCD_Init+0x154>)
 8000d64:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000d68:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~GPIO_CRL_CNF5;
 8000d6a:	4b41      	ldr	r3, [pc, #260]	; (8000e70 <LCD_Init+0x154>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a40      	ldr	r2, [pc, #256]	; (8000e70 <LCD_Init+0x154>)
 8000d70:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000d74:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE5;
 8000d76:	4b3e      	ldr	r3, [pc, #248]	; (8000e70 <LCD_Init+0x154>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a3d      	ldr	r2, [pc, #244]	; (8000e70 <LCD_Init+0x154>)
 8000d7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000d80:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~GPIO_CRL_CNF6;
 8000d82:	4b3b      	ldr	r3, [pc, #236]	; (8000e70 <LCD_Init+0x154>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a3a      	ldr	r2, [pc, #232]	; (8000e70 <LCD_Init+0x154>)
 8000d88:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000d8c:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE6;
 8000d8e:	4b38      	ldr	r3, [pc, #224]	; (8000e70 <LCD_Init+0x154>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a37      	ldr	r2, [pc, #220]	; (8000e70 <LCD_Init+0x154>)
 8000d94:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000d98:	6013      	str	r3, [r2, #0]
	GPIOC->CRH &= ~GPIO_CRH_CNF8;
 8000d9a:	4b35      	ldr	r3, [pc, #212]	; (8000e70 <LCD_Init+0x154>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	4a34      	ldr	r2, [pc, #208]	; (8000e70 <LCD_Init+0x154>)
 8000da0:	f023 030c 	bic.w	r3, r3, #12
 8000da4:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE8;
 8000da6:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <LCD_Init+0x154>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	4a31      	ldr	r2, [pc, #196]	; (8000e70 <LCD_Init+0x154>)
 8000dac:	f043 0303 	orr.w	r3, r3, #3
 8000db0:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF9;
 8000db2:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <LCD_Init+0x154>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	4a2e      	ldr	r2, [pc, #184]	; (8000e70 <LCD_Init+0x154>)
 8000db8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000dbc:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE9;
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <LCD_Init+0x154>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	4a2b      	ldr	r2, [pc, #172]	; (8000e70 <LCD_Init+0x154>)
 8000dc4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000dc8:	6053      	str	r3, [r2, #4]


  /* ****************************************************** */

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000dca:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <LCD_Init+0x154>)
 8000dcc:	4a29      	ldr	r2, [pc, #164]	; (8000e74 <LCD_Init+0x158>)
 8000dce:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	HAL_Delay(15);
 8000dd0:	200f      	movs	r0, #15
 8000dd2:	f001 fd99 	bl	8002908 <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000dd6:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <LCD_Init+0x154>)
 8000dd8:	4a26      	ldr	r2, [pc, #152]	; (8000e74 <LCD_Init+0x158>)
 8000dda:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000ddc:	f000 f968 	bl	80010b0 <LCD_Pulse_EN>
	HAL_Delay(5);//					deberia ser un delay de 4.1ms
 8000de0:	2005      	movs	r0, #5
 8000de2:	f001 fd91 	bl	8002908 <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000de6:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <LCD_Init+0x154>)
 8000de8:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <LCD_Init+0x158>)
 8000dea:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000dec:	f000 f960 	bl	80010b0 <LCD_Pulse_EN>
	HAL_Delay(1);//					deberia ser un delay de 100us
 8000df0:	2001      	movs	r0, #1
 8000df2:	f001 fd89 	bl	8002908 <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <LCD_Init+0x154>)
 8000df8:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <LCD_Init+0x158>)
 8000dfa:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000dfc:	f000 f958 	bl	80010b0 <LCD_Pulse_EN>

	while( LCD_Busy( ) );//				espera a que el LCD este operativo
 8000e00:	bf00      	nop
 8000e02:	f000 f911 	bl	8001028 <LCD_Busy>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1fa      	bne.n	8000e02 <LCD_Init+0xe6>
	GPIOC->BSRR	 =	1U << LCD_D4_PIN_LOW
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <LCD_Init+0x154>)
 8000e0e:	4a1a      	ldr	r2, [pc, #104]	; (8000e78 <LCD_Init+0x15c>)
 8000e10:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000e12:	f000 f94d 	bl	80010b0 <LCD_Pulse_EN>

	while( LCD_Busy( ) );//				espera a que se complete
 8000e16:	bf00      	nop
 8000e18:	f000 f906 	bl	8001028 <LCD_Busy>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1fa      	bne.n	8000e18 <LCD_Init+0xfc>
	LCD_Write_Cmd( 0x28U );//			establecemos LCD como: datos 4-bit, #lineas=2, font=5x7 dots
 8000e22:	2028      	movs	r0, #40	; 0x28
 8000e24:	f000 f890 	bl	8000f48 <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x0CU );//			enciende el LCD sin cursor
 8000e28:	200c      	movs	r0, #12
 8000e2a:	f000 f88d 	bl	8000f48 <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x06U );//			inicializa cursor
 8000e2e:	2006      	movs	r0, #6
 8000e30:	f000 f88a 	bl	8000f48 <LCD_Write_Cmd>

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );//			establece la direccion CGRAM desde 0
 8000e34:	2040      	movs	r0, #64	; 0x40
 8000e36:	f000 f887 	bl	8000f48 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <LCD_Init+0x160>)
 8000e3c:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	e00a      	b.n	8000e5a <LCD_Init+0x13e>
		LCD_Put_Char( *p );
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 f891 	bl	8000f70 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3301      	adds	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	2b3f      	cmp	r3, #63	; 0x3f
 8000e5e:	d9f1      	bls.n	8000e44 <LCD_Init+0x128>

	LCD_Write_Cmd( 0x80 );
 8000e60:	2080      	movs	r0, #128	; 0x80
 8000e62:	f000 f871 	bl	8000f48 <LCD_Write_Cmd>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40011000 	.word	0x40011000
 8000e74:	03000060 	.word	0x03000060
 8000e78:	03200040 	.word	0x03200040
 8000e7c:	08008464 	.word	0x08008464

08000e80 <LCD_Out_Data4>:

//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(unsigned char val){
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )//			Bit[0]
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <LCD_Out_Data4+0x1c>
		GPIOC->BSRR	=	1U << LCD_D4_PIN_HIGH;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <LCD_Out_Data4+0x80>)
 8000e96:	2220      	movs	r2, #32
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	e003      	b.n	8000ea4 <LCD_Out_Data4+0x24>
	else
		GPIOC->BSRR	=	1U << LCD_D4_PIN_LOW;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <LCD_Out_Data4+0x80>)
 8000e9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ea2:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )//			Bit[1]
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <LCD_Out_Data4+0x36>
		GPIOC->BSRR	=	1U << LCD_D5_PIN_HIGH;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <LCD_Out_Data4+0x80>)
 8000eb0:	2240      	movs	r2, #64	; 0x40
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	e003      	b.n	8000ebe <LCD_Out_Data4+0x3e>
	else
		GPIOC->BSRR	=	1U << LCD_D5_PIN_LOW;
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <LCD_Out_Data4+0x80>)
 8000eb8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ebc:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )//			Bit[2]
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d004      	beq.n	8000ed2 <LCD_Out_Data4+0x52>
		GPIOC->BSRR	=	1U << LCD_D6_PIN_HIGH;
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <LCD_Out_Data4+0x80>)
 8000eca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ece:	611a      	str	r2, [r3, #16]
 8000ed0:	e003      	b.n	8000eda <LCD_Out_Data4+0x5a>
	else
		GPIOC->BSRR	=	1U << LCD_D6_PIN_LOW;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <LCD_Out_Data4+0x80>)
 8000ed4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ed8:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )//			Bit[3]
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d004      	beq.n	8000eee <LCD_Out_Data4+0x6e>
		GPIOC->BSRR	=	1U << LCD_D7_PIN_HIGH;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <LCD_Out_Data4+0x80>)
 8000ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eea:	611a      	str	r2, [r3, #16]
	else
		GPIOC->BSRR	=	1U << LCD_D7_PIN_LOW;
}
 8000eec:	e003      	b.n	8000ef6 <LCD_Out_Data4+0x76>
		GPIOC->BSRR	=	1U << LCD_D7_PIN_LOW;
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <LCD_Out_Data4+0x80>)
 8000ef0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ef4:	611a      	str	r2, [r3, #16]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	40011000 	.word	0x40011000

08000f04 <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(unsigned char val){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	091b      	lsrs	r3, r3, #4
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ffb3 	bl	8000e80 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8000f1a:	f000 f8c9 	bl	80010b0 <LCD_Pulse_EN>

	LCD_Out_Data4( val & 0x0FU );
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 030f 	and.w	r3, r3, #15
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ffaa 	bl	8000e80 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8000f2c:	f000 f8c0 	bl	80010b0 <LCD_Pulse_EN>

	while( LCD_Busy( ) );
 8000f30:	bf00      	nop
 8000f32:	f000 f879 	bl	8001028 <LCD_Busy>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1fa      	bne.n	8000f32 <LCD_Write_Byte+0x2e>
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(unsigned char val){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	1U << LCD_RS_PIN_LOW;//		RS=0 (seleccion de comando)
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <LCD_Write_Cmd+0x24>)
 8000f54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f58:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ffd1 	bl	8000f04 <LCD_Write_Byte>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40011000 	.word	0x40011000

08000f70 <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(unsigned char c){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	1U << LCD_RS_PIN_HIGH;//	RS=1 (seleccion de caracteres)
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <LCD_Put_Char+0x20>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( c );
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ffbe 	bl	8000f04 <LCD_Write_Byte>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40011000 	.word	0x40011000

08000f94 <LCD_Set_Cursor>:

//Funcion que establece el cursor en una posicion de la pantalla del LCD
void LCD_Set_Cursor(unsigned char line, unsigned char column){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
	unsigned char address;
	if( column != 0 )
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <LCD_Set_Cursor+0x1c>
		column--;
 8000faa:	79bb      	ldrb	r3, [r7, #6]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	71bb      	strb	r3, [r7, #6]
	if( line != 0 )
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <LCD_Set_Cursor+0x28>
		line--;
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	71fb      	strb	r3, [r7, #7]
	address = ( line * 40 ) + column;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	0092      	lsls	r2, r2, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	4413      	add	r3, r2
 8000fcc:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	3b80      	subs	r3, #128	; 0x80
 8000fd8:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ffb3 	bl	8000f48 <LCD_Write_Cmd>
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <LCD_Put_Str>:

//Funcion que envia una cadena de caracteres ASCII al LCD
void LCD_Put_Str(char* str){
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b084      	sub	sp, #16
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
	for( int i = 0; i < 16 && str[ i ] != 0; i++ )
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e009      	b.n	800100c <LCD_Put_Str+0x22>
		LCD_Put_Char( str[ i ] );//			envia 1 byte al LCD
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ffb5 	bl	8000f70 <LCD_Put_Char>
	for( int i = 0; i < 16 && str[ i ] != 0; i++ )
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2b0f      	cmp	r3, #15
 8001010:	dc05      	bgt.n	800101e <LCD_Put_Str+0x34>
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1ec      	bne.n	8000ff8 <LCD_Put_Str+0xe>
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <LCD_Busy>:
			LCD_Put_Char( ch[ i ] );
	}
}

//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* ***************************************************** */
  /* Configurar la linea D7 del LCD como:
   * floating input                                        */
	GPIOC->CRH &= ~GPIO_CRH_CNF9_1 & ~GPIO_CRH_MODE9;
 800102c:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <LCD_Busy+0x80>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <LCD_Busy+0x80>)
 8001032:	f023 03b0 	bic.w	r3, r3, #176	; 0xb0
 8001036:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_CNF9_0;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <LCD_Busy+0x80>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	4a1a      	ldr	r2, [pc, #104]	; (80010a8 <LCD_Busy+0x80>)
 800103e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001042:	6053      	str	r3, [r2, #4]

  /* ***************************************************** */

	GPIOC->BSRR	 =	1U << LCD_RS_PIN_LOW
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <LCD_Busy+0x80>)
 8001046:	4a19      	ldr	r2, [pc, #100]	; (80010ac <LCD_Busy+0x84>)
 8001048:	611a      	str	r2, [r3, #16]
			|	1U << LCD_RW_PIN_HIGH
			|	1U << LCD_EN_PIN_HIGH;
	HAL_Delay(1);//					          deberia de ser un delay of 100us
 800104a:	2001      	movs	r0, #1
 800104c:	f001 fc5c 	bl	8002908 <HAL_Delay>

  /* ***************************************************** */
  if(GPIOC->IDR & 1U << LCD_D7_PIN_HIGH){//					                  if D7 is set, then
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <LCD_Busy+0x80>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001058:	2b00      	cmp	r3, #0
 800105a:	d011      	beq.n	8001080 <LCD_Busy+0x58>
  /* ***************************************************** */
		GPIOC->BSRR	 =	1U << LCD_RW_PIN_LOW
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <LCD_Busy+0x80>)
 800105e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001062:	611a      	str	r2, [r3, #16]
				|	1U << LCD_EN_PIN_LOW;

    /* ***************************************************** */
    /* Configurar la linea D7 del LCD como:
     * general purpose output and 50 MHz speed               */
		GPIOC->CRH &= ~GPIO_CRH_CNF9;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <LCD_Busy+0x80>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <LCD_Busy+0x80>)
 800106a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800106e:	6053      	str	r3, [r2, #4]
		GPIOC->CRH |= GPIO_CRH_MODE9;
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <LCD_Busy+0x80>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	4a0c      	ldr	r2, [pc, #48]	; (80010a8 <LCD_Busy+0x80>)
 8001076:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800107a:	6053      	str	r3, [r2, #4]

    /* ***************************************************** */
		return 1;
 800107c:	2301      	movs	r3, #1
 800107e:	e010      	b.n	80010a2 <LCD_Busy+0x7a>
	} else {
		GPIOC->BSRR	 =	1U << LCD_RW_PIN_LOW
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <LCD_Busy+0x80>)
 8001082:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001086:	611a      	str	r2, [r3, #16]
				|	1U << LCD_EN_PIN_LOW;

    /* ***************************************************** */
    /* Configurar la linea D7 del LCD como:
     * general purpose output and 50 MHz speed               */
		GPIOC->CRH &= ~GPIO_CRH_CNF9;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <LCD_Busy+0x80>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <LCD_Busy+0x80>)
 800108e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001092:	6053      	str	r3, [r2, #4]
		GPIOC->CRH |= GPIO_CRH_MODE9;
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <LCD_Busy+0x80>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	4a03      	ldr	r2, [pc, #12]	; (80010a8 <LCD_Busy+0x80>)
 800109a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800109e:	6053      	str	r3, [r2, #4]

    /* ***************************************************** */
		return 0;
 80010a0:	2300      	movs	r3, #0
	}
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40011000 	.word	0x40011000
 80010ac:	00010006 	.word	0x00010006

080010b0 <LCD_Pulse_EN>:

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	GPIOC->BSRR	=	1U << LCD_EN_PIN_HIGH;//		habilita pin EN ON
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <LCD_Pulse_EN+0x1c>)
 80010b6:	2202      	movs	r2, #2
 80010b8:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);//							deberia de ser un delay de 50us
 80010ba:	2001      	movs	r0, #1
 80010bc:	f001 fc24 	bl	8002908 <HAL_Delay>
	GPIOC->BSRR	=	1U << LCD_EN_PIN_LOW;//			habilita pin EN OFF
 80010c0:	4b02      	ldr	r3, [pc, #8]	; (80010cc <LCD_Pulse_EN+0x1c>)
 80010c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010c6:	611a      	str	r2, [r3, #16]
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40011000 	.word	0x40011000

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4906      	ldr	r1, [pc, #24]	; (8001104 <__NVIC_EnableIRQ+0x34>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800115c:	b5b0      	push	{r4, r5, r7, lr}
 800115e:	b0c8      	sub	sp, #288	; 0x120
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001162:	f001 fb9f 	bl	80028a4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001166:	f000 f957 	bl	8001418 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116a:	f000 f997 	bl	800149c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init();
 800116e:	f000 ff71 	bl	8002054 <USER_RCC_Init>
  USER_GPIO_Init();
 8001172:	f000 ffa7 	bl	80020c4 <USER_GPIO_Init>
  //USER_TIM2_Capture_Init();
  USER_TIM3_Capture_Init();
 8001176:	f001 f935 	bl	80023e4 <USER_TIM3_Capture_Init>
  //USER_USART2_Init();
  USER_USART2_Init();
 800117a:	f001 f987 	bl	800248c <USER_USART2_Init>
  USER_ADC_Init();
 800117e:	f001 f8cf 	bl	8002320 <USER_ADC_Init>
  USER_ADC_Calibration();
 8001182:	f001 f907 	bl	8002394 <USER_ADC_Calibration>

  LCD_Init( );//				inicializamos la libreria del LCD
 8001186:	f7ff fdc9 	bl	8000d1c <LCD_Init>
  LCD_Clear( );//			borra la pantalla
 800118a:	2001      	movs	r0, #1
 800118c:	f7ff fedc 	bl	8000f48 <LCD_Write_Cmd>
  LCD_Set_Cursor( 1, 0 );//		posiciona cursor en la fila 1 columna 0
 8001190:	2100      	movs	r1, #0
 8001192:	2001      	movs	r0, #1
 8001194:	f7ff fefe 	bl	8000f94 <LCD_Set_Cursor>
  LCD_Put_Str(msg1);
 8001198:	4884      	ldr	r0, [pc, #528]	; (80013ac <main+0x250>)
 800119a:	f7ff ff26 	bl	8000fea <LCD_Put_Str>
  LCD_Set_Cursor(2,0);
 800119e:	2100      	movs	r1, #0
 80011a0:	2002      	movs	r0, #2
 80011a2:	f7ff fef7 	bl	8000f94 <LCD_Set_Cursor>
  LCD_Put_Str(msg2);
 80011a6:	4882      	ldr	r0, [pc, #520]	; (80013b0 <main+0x254>)
 80011a8:	f7ff ff1f 	bl	8000fea <LCD_Put_Str>

  USER_EXTI_Init();
 80011ac:	f001 f890 	bl	80022d0 <USER_EXTI_Init>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  osMutexDef(mutex);
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  mutexHandle = osMutexCreate(osMutex(mutex));
 80011bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011c0:	4618      	mov	r0, r3
 80011c2:	f002 fc7b 	bl	8003abc <osMutexCreate>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4a7a      	ldr	r2, [pc, #488]	; (80013b4 <main+0x258>)
 80011ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  osTimerDef(tim1, Timer_Callback1);
 80011cc:	4b7a      	ldr	r3, [pc, #488]	; (80013b8 <main+0x25c>)
 80011ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  timHandle1 = osTimerCreate(osTimer(tim1), osTimerOnce, NULL);
 80011d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 fbab 	bl	800393c <osTimerCreate>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a74      	ldr	r2, [pc, #464]	; (80013bc <main+0x260>)
 80011ea:	6013      	str	r3, [r2, #0]
  osTimerDef(tim2, Timer_Callback2);
 80011ec:	4b74      	ldr	r3, [pc, #464]	; (80013c0 <main+0x264>)
 80011ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  timHandle2 = osTimerCreate(osTimer(tim2), osTimerOnce, NULL);
 80011f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f002 fb9b 	bl	800393c <osTimerCreate>
 8001206:	4603      	mov	r3, r0
 8001208:	4a6e      	ldr	r2, [pc, #440]	; (80013c4 <main+0x268>)
 800120a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  osMessageQDef(keyboardQueue, 1, uint32_t);
 800120c:	4b6e      	ldr	r3, [pc, #440]	; (80013c8 <main+0x26c>)
 800120e:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8001212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  keyboardQueueHandle = osMessageCreate(osMessageQ(keyboardQueue), NULL);
 8001218:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f002 fce8 	bl	8003bf4 <osMessageCreate>
 8001224:	4603      	mov	r3, r0
 8001226:	4a69      	ldr	r2, [pc, #420]	; (80013cc <main+0x270>)
 8001228:	6013      	str	r3, [r2, #0]
  osMessageQDef(vQueue, 1, uint32_t);
 800122a:	4b67      	ldr	r3, [pc, #412]	; (80013c8 <main+0x26c>)
 800122c:	f107 04e8 	add.w	r4, r7, #232	; 0xe8
 8001230:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001232:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  vQueueHandle = osMessageCreate(osMessageQ(vQueue), NULL);
 8001236:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f002 fcd9 	bl	8003bf4 <osMessageCreate>
 8001242:	4603      	mov	r3, r0
 8001244:	4a62      	ldr	r2, [pc, #392]	; (80013d0 <main+0x274>)
 8001246:	6013      	str	r3, [r2, #0]
  osMessageQDef(valveQueue, 1, uint32_t);
 8001248:	4b5f      	ldr	r3, [pc, #380]	; (80013c8 <main+0x26c>)
 800124a:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 800124e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  valveQueueHandle = osMessageCreate(osMessageQ(valveQueue), NULL);
 8001254:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fcca 	bl	8003bf4 <osMessageCreate>
 8001260:	4603      	mov	r3, r0
 8001262:	4a5c      	ldr	r2, [pc, #368]	; (80013d4 <main+0x278>)
 8001264:	6013      	str	r3, [r2, #0]
  osMessageQDef(fQueue, 1, uint32_t);
 8001266:	4b58      	ldr	r3, [pc, #352]	; (80013c8 <main+0x26c>)
 8001268:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800126c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800126e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  fQueueHandle = osMessageCreate(osMessageQ(fQueue), NULL);
 8001272:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f002 fcbb 	bl	8003bf4 <osMessageCreate>
 800127e:	4603      	mov	r3, r0
 8001280:	4a55      	ldr	r2, [pc, #340]	; (80013d8 <main+0x27c>)
 8001282:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(task0, Task0, osPriorityNormal, 0, 128); //Read from keyboard
 8001284:	4b55      	ldr	r3, [pc, #340]	; (80013dc <main+0x280>)
 8001286:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800128a:	461d      	mov	r5, r3
 800128c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001290:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001294:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskHandle0 = osThreadCreate(osThread(task0), NULL);
 8001298:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 faeb 	bl	800387a <osThreadCreate>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a4e      	ldr	r2, [pc, #312]	; (80013e0 <main+0x284>)
 80012a8:	6013      	str	r3, [r2, #0]
  osThreadDef(task1, Task1, osPriorityNormal, 0, 128); //Read from keyboard
 80012aa:	4b4e      	ldr	r3, [pc, #312]	; (80013e4 <main+0x288>)
 80012ac:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80012b0:	461d      	mov	r5, r3
 80012b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskHandle1 = osThreadCreate(osThread(task1), NULL);
 80012be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f002 fad8 	bl	800387a <osThreadCreate>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4a46      	ldr	r2, [pc, #280]	; (80013e8 <main+0x28c>)
 80012ce:	6013      	str	r3, [r2, #0]
  osThreadDef(task2, Task2, osPriorityNormal, 0, 128); //Send Data
 80012d0:	4b46      	ldr	r3, [pc, #280]	; (80013ec <main+0x290>)
 80012d2:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80012d6:	461d      	mov	r5, r3
 80012d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskHandle2 = osThreadCreate(osThread(task2), NULL);
 80012e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 fac5 	bl	800387a <osThreadCreate>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4a3f      	ldr	r2, [pc, #252]	; (80013f0 <main+0x294>)
 80012f4:	6013      	str	r3, [r2, #0]
  osThreadDef(task3, Task3, osPriorityNormal, 0, 128); //Update LCD
 80012f6:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <main+0x298>)
 80012f8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80012fc:	461d      	mov	r5, r3
 80012fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001302:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001306:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskHandle3 = osThreadCreate(osThread(task3), NULL);
 800130a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f002 fab2 	bl	800387a <osThreadCreate>
 8001316:	4603      	mov	r3, r0
 8001318:	4a37      	ldr	r2, [pc, #220]	; (80013f8 <main+0x29c>)
 800131a:	6013      	str	r3, [r2, #0]
  osThreadDef(task4, Task4, osPriorityNormal, 0, 128);
 800131c:	4b37      	ldr	r3, [pc, #220]	; (80013fc <main+0x2a0>)
 800131e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001322:	461d      	mov	r5, r3
 8001324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001328:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800132c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskHandle4 = osThreadCreate(osThread(task4), NULL);
 8001330:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f002 fa9f 	bl	800387a <osThreadCreate>
 800133c:	4603      	mov	r3, r0
 800133e:	4a30      	ldr	r2, [pc, #192]	; (8001400 <main+0x2a4>)
 8001340:	6013      	str	r3, [r2, #0]
  osThreadDef(task5, Task5, osPriorityNormal, 0, 128);
 8001342:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001346:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800134a:	4a2e      	ldr	r2, [pc, #184]	; (8001404 <main+0x2a8>)
 800134c:	461c      	mov	r4, r3
 800134e:	4615      	mov	r5, r2
 8001350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001354:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001358:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskHandle5 = osThreadCreate(osThread(task5), NULL);
 800135c:	f107 0320 	add.w	r3, r7, #32
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f002 fa89 	bl	800387a <osThreadCreate>
 8001368:	4603      	mov	r3, r0
 800136a:	4a27      	ldr	r2, [pc, #156]	; (8001408 <main+0x2ac>)
 800136c:	6013      	str	r3, [r2, #0]
  osThreadDef(task6, Task6, osPriorityNormal, 0, 128);
 800136e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001372:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001376:	4a25      	ldr	r2, [pc, #148]	; (800140c <main+0x2b0>)
 8001378:	461c      	mov	r4, r3
 800137a:	4615      	mov	r5, r2
 800137c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001380:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001384:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskHandle6 = osThreadCreate(osThread(task6), NULL);
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f002 fa74 	bl	800387a <osThreadCreate>
 8001392:	4603      	mov	r3, r0
 8001394:	4a1e      	ldr	r2, [pc, #120]	; (8001410 <main+0x2b4>)
 8001396:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  //printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nStarting...%ld\r\n", xPortGetFreeHeapSize());
  ADC1->CR2	|=	 ADC_CR2_ADON;//	starts the conversion
 8001398:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <main+0x2b8>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	4a1d      	ldr	r2, [pc, #116]	; (8001414 <main+0x2b8>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6093      	str	r3, [r2, #8]
  osKernelStart();
 80013a4:	f002 fa52 	bl	800384c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <main+0x24c>
 80013aa:	bf00      	nop
 80013ac:	2000004c 	.word	0x2000004c
 80013b0:	20000060 	.word	0x20000060
 80013b4:	200008d8 	.word	0x200008d8
 80013b8:	080024e1 	.word	0x080024e1
 80013bc:	200008dc 	.word	0x200008dc
 80013c0:	08002501 	.word	0x08002501
 80013c4:	200008e0 	.word	0x200008e0
 80013c8:	08008368 	.word	0x08008368
 80013cc:	200008e4 	.word	0x200008e4
 80013d0:	200008e8 	.word	0x200008e8
 80013d4:	200008ec 	.word	0x200008ec
 80013d8:	200008f0 	.word	0x200008f0
 80013dc:	08008378 	.word	0x08008378
 80013e0:	200008bc 	.word	0x200008bc
 80013e4:	08008394 	.word	0x08008394
 80013e8:	200008c0 	.word	0x200008c0
 80013ec:	080083b0 	.word	0x080083b0
 80013f0:	200008c4 	.word	0x200008c4
 80013f4:	080083cc 	.word	0x080083cc
 80013f8:	200008c8 	.word	0x200008c8
 80013fc:	080083e8 	.word	0x080083e8
 8001400:	200008cc 	.word	0x200008cc
 8001404:	08008404 	.word	0x08008404
 8001408:	200008d0 	.word	0x200008d0
 800140c:	08008420 	.word	0x08008420
 8001410:	200008d4 	.word	0x200008d4
 8001414:	40012400 	.word	0x40012400

08001418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b090      	sub	sp, #64	; 0x40
 800141c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141e:	f107 0318 	add.w	r3, r7, #24
 8001422:	2228      	movs	r2, #40	; 0x28
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f005 fff1 	bl	800740e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800143a:	2302      	movs	r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143e:	2301      	movs	r3, #1
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001442:	2310      	movs	r3, #16
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001446:	2302      	movs	r3, #2
 8001448:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800144a:	2300      	movs	r3, #0
 800144c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800144e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001452:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001454:	f107 0318 	add.w	r3, r7, #24
 8001458:	4618      	mov	r0, r3
 800145a:	f001 fb59 	bl	8002b10 <HAL_RCC_OscConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001464:	f001 f86c 	bl	8002540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001468:	230f      	movs	r3, #15
 800146a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146c:	2302      	movs	r3, #2
 800146e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001478:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2102      	movs	r1, #2
 8001482:	4618      	mov	r0, r3
 8001484:	f001 fdc6 	bl	8003014 <HAL_RCC_ClockConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800148e:	f001 f857 	bl	8002540 <Error_Handler>
  }
}
 8001492:	bf00      	nop
 8001494:	3740      	adds	r7, #64	; 0x40
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MX_GPIO_Init+0x70>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	4a19      	ldr	r2, [pc, #100]	; (800150c <MX_GPIO_Init+0x70>)
 80014a8:	f043 0310 	orr.w	r3, r3, #16
 80014ac:	6193      	str	r3, [r2, #24]
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <MX_GPIO_Init+0x70>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <MX_GPIO_Init+0x70>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	4a13      	ldr	r2, [pc, #76]	; (800150c <MX_GPIO_Init+0x70>)
 80014c0:	f043 0320 	orr.w	r3, r3, #32
 80014c4:	6193      	str	r3, [r2, #24]
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_GPIO_Init+0x70>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f003 0320 	and.w	r3, r3, #32
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_GPIO_Init+0x70>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	4a0d      	ldr	r2, [pc, #52]	; (800150c <MX_GPIO_Init+0x70>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6193      	str	r3, [r2, #24]
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_GPIO_Init+0x70>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_GPIO_Init+0x70>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	4a07      	ldr	r2, [pc, #28]	; (800150c <MX_GPIO_Init+0x70>)
 80014f0:	f043 0308 	orr.w	r3, r3, #8
 80014f4:	6193      	str	r3, [r2, #24]
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <MX_GPIO_Init+0x70>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001502:	bf00      	nop
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	40021000 	.word	0x40021000

08001510 <read_keyboard>:

/* USER CODE BEGIN 4 */

uint32_t read_keyboard(){
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
	uint32_t tecla, found;
	found = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
	for(int i = 0 ; i < 4 ; i++){
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	e07a      	b.n	8001616 <read_keyboard+0x106>
		for(int j = 0 ; j < 4 ; j++){
 8001520:	2300      	movs	r3, #0
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	e00a      	b.n	800153c <read_keyboard+0x2c>
			key_change[j] = key_change_template[j];
 8001526:	4a43      	ldr	r2, [pc, #268]	; (8001634 <read_keyboard+0x124>)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800152e:	4a42      	ldr	r2, [pc, #264]	; (8001638 <read_keyboard+0x128>)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int j = 0 ; j < 4 ; j++){
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	3301      	adds	r3, #1
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2b03      	cmp	r3, #3
 8001540:	ddf1      	ble.n	8001526 <read_keyboard+0x16>
		}
		key_change[i]+=16;
 8001542:	4a3d      	ldr	r2, [pc, #244]	; (8001638 <read_keyboard+0x128>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800154a:	3310      	adds	r3, #16
 800154c:	b299      	uxth	r1, r3
 800154e:	4a3a      	ldr	r2, [pc, #232]	; (8001638 <read_keyboard+0x128>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		GPIOB->BSRR = (1 << key_change[0]) | (1 << key_change[1]) | (1 << key_change[2]) | (1 << key_change[3]);
 8001556:	4b38      	ldr	r3, [pc, #224]	; (8001638 <read_keyboard+0x128>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	2301      	movs	r3, #1
 800155e:	fa03 f202 	lsl.w	r2, r3, r2
 8001562:	4b35      	ldr	r3, [pc, #212]	; (8001638 <read_keyboard+0x128>)
 8001564:	885b      	ldrh	r3, [r3, #2]
 8001566:	4619      	mov	r1, r3
 8001568:	2301      	movs	r3, #1
 800156a:	408b      	lsls	r3, r1
 800156c:	431a      	orrs	r2, r3
 800156e:	4b32      	ldr	r3, [pc, #200]	; (8001638 <read_keyboard+0x128>)
 8001570:	889b      	ldrh	r3, [r3, #4]
 8001572:	4619      	mov	r1, r3
 8001574:	2301      	movs	r3, #1
 8001576:	408b      	lsls	r3, r1
 8001578:	431a      	orrs	r2, r3
 800157a:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <read_keyboard+0x128>)
 800157c:	88db      	ldrh	r3, [r3, #6]
 800157e:	4619      	mov	r1, r3
 8001580:	2301      	movs	r3, #1
 8001582:	408b      	lsls	r3, r1
 8001584:	431a      	orrs	r2, r3
 8001586:	4b2d      	ldr	r3, [pc, #180]	; (800163c <read_keyboard+0x12c>)
 8001588:	611a      	str	r2, [r3, #16]
		if(!(GPIOB->IDR & GPIO_IDR_IDR4 ) & !found){
 800158a:	4b2c      	ldr	r3, [pc, #176]	; (800163c <read_keyboard+0x12c>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 0210 	and.w	r2, r3, #16
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	4313      	orrs	r3, r2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d107      	bne.n	80015aa <read_keyboard+0x9a>
		 tecla = keys[4*i];
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4a28      	ldr	r2, [pc, #160]	; (8001640 <read_keyboard+0x130>)
 80015a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015a4:	60fb      	str	r3, [r7, #12]
		 found = 1;
 80015a6:	2301      	movs	r3, #1
 80015a8:	60bb      	str	r3, [r7, #8]
		}
		if(!(GPIOB->IDR & GPIO_IDR_IDR5 ) & !found){
 80015aa:	4b24      	ldr	r3, [pc, #144]	; (800163c <read_keyboard+0x12c>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 0220 	and.w	r2, r3, #32
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d108      	bne.n	80015cc <read_keyboard+0xbc>
		  tecla = keys[1+4*i];
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	3301      	adds	r3, #1
 80015c0:	4a1f      	ldr	r2, [pc, #124]	; (8001640 <read_keyboard+0x130>)
 80015c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015c6:	60fb      	str	r3, [r7, #12]
		  found = 1;
 80015c8:	2301      	movs	r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
		}
		if(!(GPIOB->IDR & GPIO_IDR_IDR6 ) & !found){
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <read_keyboard+0x12c>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d108      	bne.n	80015ee <read_keyboard+0xde>
		  tecla = keys[2+4*i];
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	3302      	adds	r3, #2
 80015e2:	4a17      	ldr	r2, [pc, #92]	; (8001640 <read_keyboard+0x130>)
 80015e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015e8:	60fb      	str	r3, [r7, #12]
		  found = 1;
 80015ea:	2301      	movs	r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
		}
		if(!(GPIOB->IDR & GPIO_IDR_IDR7 ) & !found){
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <read_keyboard+0x12c>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d108      	bne.n	8001610 <read_keyboard+0x100>
		  tecla = keys[3+4*i];
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	3303      	adds	r3, #3
 8001604:	4a0e      	ldr	r2, [pc, #56]	; (8001640 <read_keyboard+0x130>)
 8001606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800160a:	60fb      	str	r3, [r7, #12]
		  found = 1;
 800160c:	2301      	movs	r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
	for(int i = 0 ; i < 4 ; i++){
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3301      	adds	r3, #1
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b03      	cmp	r3, #3
 800161a:	dd81      	ble.n	8001520 <read_keyboard+0x10>
		}
	}

	if(found){
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <read_keyboard+0x116>
		return tecla;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	e001      	b.n	800162a <read_keyboard+0x11a>
	} else
		return -1;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	20000000 	.word	0x20000000
 8001638:	20000008 	.word	0x20000008
 800163c:	40010c00 	.word	0x40010c00
 8001640:	20000010 	.word	0x20000010

08001644 <Task0>:
void Task0(void const * argument){
 8001644:	b580      	push	{r7, lr}
 8001646:	b094      	sub	sp, #80	; 0x50
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	uint32_t counter = 0, temp, tec, v, f, diff;
 800164c:	2300      	movs	r3, #0
 800164e:	64fb      	str	r3, [r7, #76]	; 0x4c
	osEvent key_event, v_event, f_event, ks_event;
	for(;;)
	{
		time0 = osKernelSysTick();
 8001650:	f002 f903 	bl	800385a <osKernelSysTick>
 8001654:	4603      	mov	r3, r0
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff f966 	bl	8000928 <__aeabi_ui2f>
 800165c:	4603      	mov	r3, r0
 800165e:	4a7b      	ldr	r2, [pc, #492]	; (800184c <Task0+0x208>)
 8001660:	6013      	str	r3, [r2, #0]
		if(vars[4] == 1){
 8001662:	4b7b      	ldr	r3, [pc, #492]	; (8001850 <Task0+0x20c>)
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d10b      	bne.n	8001682 <Task0+0x3e>
			osMutexWait(mutexHandle, osWaitForever);
 800166a:	4b7a      	ldr	r3, [pc, #488]	; (8001854 <Task0+0x210>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f04f 31ff 	mov.w	r1, #4294967295
 8001672:	4618      	mov	r0, r3
 8001674:	f002 fa3a 	bl	8003aec <osMutexWait>
			//printf("Time: %d, Valve State: %d, Flow: %d, Pressure: %d, KillSwitch: %d\r\n", vars[0], vars[1], vars[2], vars[3], ks);
			osMutexRelease(mutexHandle);
 8001678:	4b76      	ldr	r3, [pc, #472]	; (8001854 <Task0+0x210>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f002 fa83 	bl	8003b88 <osMutexRelease>
		}

		if(ks){
 8001682:	4b75      	ldr	r3, [pc, #468]	; (8001858 <Task0+0x214>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d002      	beq.n	8001690 <Task0+0x4c>
			vars[1] = 0;
 800168a:	4b71      	ldr	r3, [pc, #452]	; (8001850 <Task0+0x20c>)
 800168c:	2200      	movs	r2, #0
 800168e:	605a      	str	r2, [r3, #4]
		}

		key_event = osMessageGet(keyboardQueueHandle, 0);
 8001690:	4b72      	ldr	r3, [pc, #456]	; (800185c <Task0+0x218>)
 8001692:	6819      	ldr	r1, [r3, #0]
 8001694:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001698:	2200      	movs	r2, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f002 fb12 	bl	8003cc4 <osMessageGet>

		if(key_event.status == osEventMessage){
 80016a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a2:	2b10      	cmp	r3, #16
 80016a4:	d162      	bne.n	800176c <Task0+0x128>
			tec = key_event.value.v;
 80016a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a8:	64bb      	str	r3, [r7, #72]	; 0x48

			if(tec > 0 && tec < 6){
 80016aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d05d      	beq.n	800176c <Task0+0x128>
 80016b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	d85a      	bhi.n	800176c <Task0+0x128>
				switch(tec){
 80016b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016b8:	3b01      	subs	r3, #1
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d85d      	bhi.n	800177a <Task0+0x136>
 80016be:	a201      	add	r2, pc, #4	; (adr r2, 80016c4 <Task0+0x80>)
 80016c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c4:	080016d9 	.word	0x080016d9
 80016c8:	080016ff 	.word	0x080016ff
 80016cc:	0800170b 	.word	0x0800170b
 80016d0:	08001723 	.word	0x08001723
 80016d4:	08001749 	.word	0x08001749
				case 1:
					if(!ks){
 80016d8:	4b5f      	ldr	r3, [pc, #380]	; (8001858 <Task0+0x214>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	f083 0301 	eor.w	r3, r3, #1
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d044      	beq.n	8001770 <Task0+0x12c>
						if(vars[1] > 0)
 80016e6:	4b5a      	ldr	r3, [pc, #360]	; (8001850 <Task0+0x20c>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <Task0+0xb2>
							vars[1] = 0;
 80016ee:	4b58      	ldr	r3, [pc, #352]	; (8001850 <Task0+0x20c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	605a      	str	r2, [r3, #4]
						else
							vars[1] = 1;
					}
					break;
 80016f4:	e03c      	b.n	8001770 <Task0+0x12c>
							vars[1] = 1;
 80016f6:	4b56      	ldr	r3, [pc, #344]	; (8001850 <Task0+0x20c>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	605a      	str	r2, [r3, #4]
					break;
 80016fc:	e038      	b.n	8001770 <Task0+0x12c>
				case 2:
					vars[0]+=50;
 80016fe:	4b54      	ldr	r3, [pc, #336]	; (8001850 <Task0+0x20c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	3332      	adds	r3, #50	; 0x32
 8001704:	4a52      	ldr	r2, [pc, #328]	; (8001850 <Task0+0x20c>)
 8001706:	6013      	str	r3, [r2, #0]
					break;
 8001708:	e037      	b.n	800177a <Task0+0x136>
				case 3:
					if(vars[4] == 0)
 800170a:	4b51      	ldr	r3, [pc, #324]	; (8001850 <Task0+0x20c>)
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d103      	bne.n	800171a <Task0+0xd6>
						vars[4] = 1;
 8001712:	4b4f      	ldr	r3, [pc, #316]	; (8001850 <Task0+0x20c>)
 8001714:	2201      	movs	r2, #1
 8001716:	611a      	str	r2, [r3, #16]
					else
						vars[4] = 0;
					break;
 8001718:	e02f      	b.n	800177a <Task0+0x136>
						vars[4] = 0;
 800171a:	4b4d      	ldr	r3, [pc, #308]	; (8001850 <Task0+0x20c>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
					break;
 8001720:	e02b      	b.n	800177a <Task0+0x136>
				case 4:
					if(!ks){
 8001722:	4b4d      	ldr	r3, [pc, #308]	; (8001858 <Task0+0x214>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	f083 0301 	eor.w	r3, r3, #1
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d021      	beq.n	8001774 <Task0+0x130>
						if(vars[1] > 0)
 8001730:	4b47      	ldr	r3, [pc, #284]	; (8001850 <Task0+0x20c>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <Task0+0xfc>
							vars[1] = 0;
 8001738:	4b45      	ldr	r3, [pc, #276]	; (8001850 <Task0+0x20c>)
 800173a:	2200      	movs	r2, #0
 800173c:	605a      	str	r2, [r3, #4]
						else
							vars[1] = 2;
					}
					break;
 800173e:	e019      	b.n	8001774 <Task0+0x130>
							vars[1] = 2;
 8001740:	4b43      	ldr	r3, [pc, #268]	; (8001850 <Task0+0x20c>)
 8001742:	2202      	movs	r2, #2
 8001744:	605a      	str	r2, [r3, #4]
					break;
 8001746:	e015      	b.n	8001774 <Task0+0x130>
				case 5:
					if(vars[0] >= 50)
 8001748:	4b41      	ldr	r3, [pc, #260]	; (8001850 <Task0+0x20c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b31      	cmp	r3, #49	; 0x31
 800174e:	d905      	bls.n	800175c <Task0+0x118>
						vars[0]-=50;
 8001750:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <Task0+0x20c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	3b32      	subs	r3, #50	; 0x32
 8001756:	4a3e      	ldr	r2, [pc, #248]	; (8001850 <Task0+0x20c>)
 8001758:	6013      	str	r3, [r2, #0]
					else if (vars[0] > 0)
						vars[0] = 0;
					break;
 800175a:	e00d      	b.n	8001778 <Task0+0x134>
					else if (vars[0] > 0)
 800175c:	4b3c      	ldr	r3, [pc, #240]	; (8001850 <Task0+0x20c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d009      	beq.n	8001778 <Task0+0x134>
						vars[0] = 0;
 8001764:	4b3a      	ldr	r3, [pc, #232]	; (8001850 <Task0+0x20c>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
					break;
 800176a:	e005      	b.n	8001778 <Task0+0x134>
				}
			}
 800176c:	bf00      	nop
 800176e:	e004      	b.n	800177a <Task0+0x136>
					break;
 8001770:	bf00      	nop
 8001772:	e002      	b.n	800177a <Task0+0x136>
					break;
 8001774:	bf00      	nop
 8001776:	e000      	b.n	800177a <Task0+0x136>
					break;
 8001778:	bf00      	nop
		}

		if(!ks){
 800177a:	4b37      	ldr	r3, [pc, #220]	; (8001858 <Task0+0x214>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	f083 0301 	eor.w	r3, r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d070      	beq.n	800186a <Task0+0x226>
			if(vars[1]==1 || vars[1] == 2){
 8001788:	4b31      	ldr	r3, [pc, #196]	; (8001850 <Task0+0x20c>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d003      	beq.n	8001798 <Task0+0x154>
 8001790:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <Task0+0x20c>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d138      	bne.n	800180a <Task0+0x1c6>
				virgin2 = false;
 8001798:	4b31      	ldr	r3, [pc, #196]	; (8001860 <Task0+0x21c>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
				if(vars[0] >= 1)
 800179e:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <Task0+0x20c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <Task0+0x16a>
					Timer_Callback1(100);
 80017a6:	2064      	movs	r0, #100	; 0x64
 80017a8:	f000 fe9a 	bl	80024e0 <Timer_Callback1>
				if(vars[0] >= 1)
 80017ac:	e05c      	b.n	8001868 <Task0+0x224>
				else{
					if(vars[1] == 1){
 80017ae:	4b28      	ldr	r3, [pc, #160]	; (8001850 <Task0+0x20c>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d112      	bne.n	80017dc <Task0+0x198>
						vars[1] = 0;
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <Task0+0x20c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	605a      	str	r2, [r3, #4]
						sense = !sense;
 80017bc:	4b29      	ldr	r3, [pc, #164]	; (8001864 <Task0+0x220>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bf14      	ite	ne
 80017c4:	2301      	movne	r3, #1
 80017c6:	2300      	moveq	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	f083 0301 	eor.w	r3, r3, #1
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b23      	ldr	r3, [pc, #140]	; (8001864 <Task0+0x220>)
 80017d8:	701a      	strb	r2, [r3, #0]
				if(vars[0] >= 1)
 80017da:	e045      	b.n	8001868 <Task0+0x224>
					} else if(vars[1] == 2){
 80017dc:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <Task0+0x20c>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d141      	bne.n	8001868 <Task0+0x224>
						vars[1] = 0;
 80017e4:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <Task0+0x20c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	605a      	str	r2, [r3, #4]
						sense = !sense;
 80017ea:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <Task0+0x220>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	bf14      	ite	ne
 80017f2:	2301      	movne	r3, #1
 80017f4:	2300      	moveq	r3, #0
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	f083 0301 	eor.w	r3, r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b17      	ldr	r3, [pc, #92]	; (8001864 <Task0+0x220>)
 8001806:	701a      	strb	r2, [r3, #0]
				if(vars[0] >= 1)
 8001808:	e02e      	b.n	8001868 <Task0+0x224>
					}
				}
			} else {
				if(!virgin2){
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <Task0+0x21c>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	f083 0301 	eor.w	r3, r3, #1
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d028      	beq.n	800186a <Task0+0x226>
					vars[0]++;
 8001818:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <Task0+0x20c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	4a0c      	ldr	r2, [pc, #48]	; (8001850 <Task0+0x20c>)
 8001820:	6013      	str	r3, [r2, #0]
					if(!sense){
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <Task0+0x220>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	f083 0301 	eor.w	r3, r3, #1
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <Task0+0x1fa>
						vars[1] = 1;
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <Task0+0x20c>)
 8001832:	2201      	movs	r2, #1
 8001834:	605a      	str	r2, [r3, #4]
						vars[0] = 30;
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <Task0+0x20c>)
 8001838:	221e      	movs	r2, #30
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	e015      	b.n	800186a <Task0+0x226>
					} else {
						vars[1] = 2;
 800183e:	4b04      	ldr	r3, [pc, #16]	; (8001850 <Task0+0x20c>)
 8001840:	2202      	movs	r2, #2
 8001842:	605a      	str	r2, [r3, #4]
						vars[0] = 90;
 8001844:	4b02      	ldr	r3, [pc, #8]	; (8001850 <Task0+0x20c>)
 8001846:	225a      	movs	r2, #90	; 0x5a
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e00e      	b.n	800186a <Task0+0x226>
 800184c:	200008b4 	.word	0x200008b4
 8001850:	20000034 	.word	0x20000034
 8001854:	200008d8 	.word	0x200008d8
 8001858:	200008f4 	.word	0x200008f4
 800185c:	200008e4 	.word	0x200008e4
 8001860:	20000049 	.word	0x20000049
 8001864:	200008f5 	.word	0x200008f5
				if(vars[0] >= 1)
 8001868:	bf00      	nop
					}
				}
			}
		}

		v_event = osMessageGet(vQueueHandle, 100);
 800186a:	4b34      	ldr	r3, [pc, #208]	; (800193c <Task0+0x2f8>)
 800186c:	6819      	ldr	r1, [r3, #0]
 800186e:	f107 0320 	add.w	r3, r7, #32
 8001872:	2264      	movs	r2, #100	; 0x64
 8001874:	4618      	mov	r0, r3
 8001876:	f002 fa25 	bl	8003cc4 <osMessageGet>
		if(v_event.status == osEventMessage){
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	2b10      	cmp	r3, #16
 800187e:	d104      	bne.n	800188a <Task0+0x246>
			v = v_event.value.v;
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	647b      	str	r3, [r7, #68]	; 0x44
			vars[3] = v;
 8001884:	4a2e      	ldr	r2, [pc, #184]	; (8001940 <Task0+0x2fc>)
 8001886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001888:	60d3      	str	r3, [r2, #12]
		}

		if(osMessagePut(valveQueueHandle, vars[1], 0) != osOK ){
 800188a:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <Task0+0x300>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a2c      	ldr	r2, [pc, #176]	; (8001940 <Task0+0x2fc>)
 8001890:	6851      	ldr	r1, [r2, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f002 f9d5 	bl	8003c44 <osMessagePut>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00b      	beq.n	80018b8 <Task0+0x274>
			osMutexWait(mutexHandle, osWaitForever);
 80018a0:	4b29      	ldr	r3, [pc, #164]	; (8001948 <Task0+0x304>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	4618      	mov	r0, r3
 80018aa:	f002 f91f 	bl	8003aec <osMutexWait>
			//printf("Error T0 (valve)\r\n");
			osMutexRelease(mutexHandle);
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <Task0+0x304>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f002 f968 	bl	8003b88 <osMutexRelease>
		}

		f_event = osMessageGet(fQueueHandle, 100);
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <Task0+0x308>)
 80018ba:	6819      	ldr	r1, [r3, #0]
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2264      	movs	r2, #100	; 0x64
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 f9fe 	bl	8003cc4 <osMessageGet>
		if(f_event.status == osEventMessage){
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d104      	bne.n	80018d8 <Task0+0x294>
			f = f_event.value.v;
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	643b      	str	r3, [r7, #64]	; 0x40
			vars[2] = f;
 80018d2:	4a1b      	ldr	r2, [pc, #108]	; (8001940 <Task0+0x2fc>)
 80018d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018d6:	6093      	str	r3, [r2, #8]
		if(ks_event.status == osEventMessage){
			//ks = ks_event.value.v;
			vars[1] = 0;
		}*/

		time1 = osKernelSysTick();
 80018d8:	f001 ffbf 	bl	800385a <osKernelSysTick>
 80018dc:	4603      	mov	r3, r0
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff f822 	bl	8000928 <__aeabi_ui2f>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4a1a      	ldr	r2, [pc, #104]	; (8001950 <Task0+0x30c>)
 80018e8:	6013      	str	r3, [r2, #0]
		diff = (uint32_t)((time1-time0)*1000000);
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <Task0+0x30c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a19      	ldr	r2, [pc, #100]	; (8001954 <Task0+0x310>)
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	4611      	mov	r1, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe ff65 	bl	80007c4 <__aeabi_fsub>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4916      	ldr	r1, [pc, #88]	; (8001958 <Task0+0x314>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f86a 	bl	80009d8 <__aeabi_fmul>
 8001904:	4603      	mov	r3, r0
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff f9b6 	bl	8000c78 <__aeabi_f2uiz>
 800190c:	4603      	mov	r3, r0
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
		printf("%d\r\n", diff);
 8001910:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001912:	4812      	ldr	r0, [pc, #72]	; (800195c <Task0+0x318>)
 8001914:	f005 fe18 	bl	8007548 <iprintf>
		temp = osKernelSysTick() - (100 * counter++);
 8001918:	f001 ff9f 	bl	800385a <osKernelSysTick>
 800191c:	4601      	mov	r1, r0
 800191e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001924:	2264      	movs	r2, #100	; 0x64
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	1acb      	subs	r3, r1, r3
 800192c:	63bb      	str	r3, [r7, #56]	; 0x38
		osDelay(100 - temp);
 800192e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001930:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001934:	4618      	mov	r0, r3
 8001936:	f001 ffec 	bl	8003912 <osDelay>
		time0 = osKernelSysTick();
 800193a:	e689      	b.n	8001650 <Task0+0xc>
 800193c:	200008e8 	.word	0x200008e8
 8001940:	20000034 	.word	0x20000034
 8001944:	200008ec 	.word	0x200008ec
 8001948:	200008d8 	.word	0x200008d8
 800194c:	200008f0 	.word	0x200008f0
 8001950:	200008b8 	.word	0x200008b8
 8001954:	200008b4 	.word	0x200008b4
 8001958:	49742400 	.word	0x49742400
 800195c:	0800843c 	.word	0x0800843c

08001960 <Task1>:
	}
}

void Task1(void const * argument){
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	uint32_t counter = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
	uint32_t temp, tecla;
	osStatus ret;
	for(;;)
	{
		tecla = read_keyboard();
 800196c:	f7ff fdd0 	bl	8001510 <read_keyboard>
 8001970:	6138      	str	r0, [r7, #16]
		ret = osMessagePut(keyboardQueueHandle, tecla, 0);
 8001972:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <Task1+0x64>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2200      	movs	r2, #0
 8001978:	6939      	ldr	r1, [r7, #16]
 800197a:	4618      	mov	r0, r3
 800197c:	f002 f962 	bl	8003c44 <osMessagePut>
 8001980:	60f8      	str	r0, [r7, #12]
		if(ret != osOK ){
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00b      	beq.n	80019a0 <Task1+0x40>
			osMutexWait(mutexHandle, osWaitForever);
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <Task1+0x68>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	4618      	mov	r0, r3
 8001992:	f002 f8ab 	bl	8003aec <osMutexWait>
			//printf("Error T1 (keyboard): %d\r\n", ret);
			osMutexRelease(mutexHandle);
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <Task1+0x68>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f002 f8f4 	bl	8003b88 <osMutexRelease>
		}

		temp = osKernelSysTick() - (200 * counter++);
 80019a0:	f001 ff5b 	bl	800385a <osKernelSysTick>
 80019a4:	4601      	mov	r1, r0
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	617a      	str	r2, [r7, #20]
 80019ac:	22c8      	movs	r2, #200	; 0xc8
 80019ae:	fb02 f303 	mul.w	r3, r2, r3
 80019b2:	1acb      	subs	r3, r1, r3
 80019b4:	60bb      	str	r3, [r7, #8]
		osDelay(200 - temp);
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80019bc:	4618      	mov	r0, r3
 80019be:	f001 ffa8 	bl	8003912 <osDelay>
		tecla = read_keyboard();
 80019c2:	e7d3      	b.n	800196c <Task1+0xc>
 80019c4:	200008e4 	.word	0x200008e4
 80019c8:	200008d8 	.word	0x200008d8

080019cc <Task2>:
	}
}

void Task2(void const * argument){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	uint32_t counter = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
	float time;
	//char msg3[] = "VOFF 00:30  COMM";
	//char msg4[] = "0.0V 00.0HZ  OFF";
	for(;;)
	{
		if(virgin){
 80019d8:	4b71      	ldr	r3, [pc, #452]	; (8001ba0 <Task2+0x1d4>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00e      	beq.n	80019fe <Task2+0x32>
			LCD_Set_Cursor(1,0);
 80019e0:	2100      	movs	r1, #0
 80019e2:	2001      	movs	r0, #1
 80019e4:	f7ff fad6 	bl	8000f94 <LCD_Set_Cursor>
			LCD_Put_Str(msg1);
 80019e8:	486e      	ldr	r0, [pc, #440]	; (8001ba4 <Task2+0x1d8>)
 80019ea:	f7ff fafe 	bl	8000fea <LCD_Put_Str>
			LCD_Set_Cursor(2,0);
 80019ee:	2100      	movs	r1, #0
 80019f0:	2002      	movs	r0, #2
 80019f2:	f7ff facf 	bl	8000f94 <LCD_Set_Cursor>
			LCD_Put_Str(msg2);
 80019f6:	486c      	ldr	r0, [pc, #432]	; (8001ba8 <Task2+0x1dc>)
 80019f8:	f7ff faf7 	bl	8000fea <LCD_Put_Str>
 80019fc:	e17e      	b.n	8001cfc <Task2+0x330>
		} else {
			//osMutexWait(mutexHandle, osWaitForever);//pc10,11,12,pump,in,out
			//osMutexRelease(mutexHandle);

			if(!ks){
 80019fe:	4b6b      	ldr	r3, [pc, #428]	; (8001bac <Task2+0x1e0>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	f083 0301 	eor.w	r3, r3, #1
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d02b      	beq.n	8001a64 <Task2+0x98>
				if(vars[1] == 0){
 8001a0c:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <Task2+0x1e4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d109      	bne.n	8001a28 <Task2+0x5c>
					msg3[1] = 'O';
 8001a14:	4b67      	ldr	r3, [pc, #412]	; (8001bb4 <Task2+0x1e8>)
 8001a16:	224f      	movs	r2, #79	; 0x4f
 8001a18:	705a      	strb	r2, [r3, #1]
					msg3[2] = 'F';
 8001a1a:	4b66      	ldr	r3, [pc, #408]	; (8001bb4 <Task2+0x1e8>)
 8001a1c:	2246      	movs	r2, #70	; 0x46
 8001a1e:	709a      	strb	r2, [r3, #2]
					msg3[3] = 'F';
 8001a20:	4b64      	ldr	r3, [pc, #400]	; (8001bb4 <Task2+0x1e8>)
 8001a22:	2246      	movs	r2, #70	; 0x46
 8001a24:	70da      	strb	r2, [r3, #3]
 8001a26:	e016      	b.n	8001a56 <Task2+0x8a>
				} else if(vars[1] == 1){
 8001a28:	4b61      	ldr	r3, [pc, #388]	; (8001bb0 <Task2+0x1e4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d109      	bne.n	8001a44 <Task2+0x78>
					msg3[1] = 'I';
 8001a30:	4b60      	ldr	r3, [pc, #384]	; (8001bb4 <Task2+0x1e8>)
 8001a32:	2249      	movs	r2, #73	; 0x49
 8001a34:	705a      	strb	r2, [r3, #1]
					msg3[2] = 'N';
 8001a36:	4b5f      	ldr	r3, [pc, #380]	; (8001bb4 <Task2+0x1e8>)
 8001a38:	224e      	movs	r2, #78	; 0x4e
 8001a3a:	709a      	strb	r2, [r3, #2]
					msg3[3] = ' ';
 8001a3c:	4b5d      	ldr	r3, [pc, #372]	; (8001bb4 <Task2+0x1e8>)
 8001a3e:	2220      	movs	r2, #32
 8001a40:	70da      	strb	r2, [r3, #3]
 8001a42:	e008      	b.n	8001a56 <Task2+0x8a>
				} else {
					msg3[1] = 'O';
 8001a44:	4b5b      	ldr	r3, [pc, #364]	; (8001bb4 <Task2+0x1e8>)
 8001a46:	224f      	movs	r2, #79	; 0x4f
 8001a48:	705a      	strb	r2, [r3, #1]
					msg3[2] = 'U';
 8001a4a:	4b5a      	ldr	r3, [pc, #360]	; (8001bb4 <Task2+0x1e8>)
 8001a4c:	2255      	movs	r2, #85	; 0x55
 8001a4e:	709a      	strb	r2, [r3, #2]
					msg3[3] = 'T';
 8001a50:	4b58      	ldr	r3, [pc, #352]	; (8001bb4 <Task2+0x1e8>)
 8001a52:	2254      	movs	r2, #84	; 0x54
 8001a54:	70da      	strb	r2, [r3, #3]
				}
				msg4[14] = ' ';
 8001a56:	4b58      	ldr	r3, [pc, #352]	; (8001bb8 <Task2+0x1ec>)
 8001a58:	2220      	movs	r2, #32
 8001a5a:	739a      	strb	r2, [r3, #14]
				msg4[15] = ' ';
 8001a5c:	4b56      	ldr	r3, [pc, #344]	; (8001bb8 <Task2+0x1ec>)
 8001a5e:	2220      	movs	r2, #32
 8001a60:	73da      	strb	r2, [r3, #15]
 8001a62:	e00e      	b.n	8001a82 <Task2+0xb6>
			} else {
				msg3[1] = 'O';
 8001a64:	4b53      	ldr	r3, [pc, #332]	; (8001bb4 <Task2+0x1e8>)
 8001a66:	224f      	movs	r2, #79	; 0x4f
 8001a68:	705a      	strb	r2, [r3, #1]
				msg3[2] = 'F';
 8001a6a:	4b52      	ldr	r3, [pc, #328]	; (8001bb4 <Task2+0x1e8>)
 8001a6c:	2246      	movs	r2, #70	; 0x46
 8001a6e:	709a      	strb	r2, [r3, #2]
				msg3[3] = 'F';
 8001a70:	4b50      	ldr	r3, [pc, #320]	; (8001bb4 <Task2+0x1e8>)
 8001a72:	2246      	movs	r2, #70	; 0x46
 8001a74:	70da      	strb	r2, [r3, #3]

				msg4[14] = 'K';
 8001a76:	4b50      	ldr	r3, [pc, #320]	; (8001bb8 <Task2+0x1ec>)
 8001a78:	224b      	movs	r2, #75	; 0x4b
 8001a7a:	739a      	strb	r2, [r3, #14]
				msg4[15] = 'S';
 8001a7c:	4b4e      	ldr	r3, [pc, #312]	; (8001bb8 <Task2+0x1ec>)
 8001a7e:	2253      	movs	r2, #83	; 0x53
 8001a80:	73da      	strb	r2, [r3, #15]
			}

			time = vars[0]/10;
 8001a82:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <Task2+0x1e4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a4d      	ldr	r2, [pc, #308]	; (8001bbc <Task2+0x1f0>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	08db      	lsrs	r3, r3, #3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe ff4a 	bl	8000928 <__aeabi_ui2f>
 8001a94:	4603      	mov	r3, r0
 8001a96:	613b      	str	r3, [r7, #16]
			t1 = ((uint16_t)time/60)/10;
 8001a98:	6938      	ldr	r0, [r7, #16]
 8001a9a:	f7ff f8ed 	bl	8000c78 <__aeabi_f2uiz>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	4a47      	ldr	r2, [pc, #284]	; (8001bc0 <Task2+0x1f4>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	099b      	lsrs	r3, r3, #6
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b45      	ldr	r3, [pc, #276]	; (8001bc4 <Task2+0x1f8>)
 8001ab0:	601a      	str	r2, [r3, #0]
			t2 = ((uint16_t)time/60)%10;
 8001ab2:	6938      	ldr	r0, [r7, #16]
 8001ab4:	f7ff f8e0 	bl	8000c78 <__aeabi_f2uiz>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	4a42      	ldr	r2, [pc, #264]	; (8001bc8 <Task2+0x1fc>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	095b      	lsrs	r3, r3, #5
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <Task2+0x1f0>)
 8001ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8001acc:	08d9      	lsrs	r1, r3, #3
 8001ace:	460b      	mov	r3, r1
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <Task2+0x200>)
 8001ade:	601a      	str	r2, [r3, #0]
			t3 = ((uint16_t)time%60)/10;
 8001ae0:	6938      	ldr	r0, [r7, #16]
 8001ae2:	f7ff f8c9 	bl	8000c78 <__aeabi_f2uiz>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	4b37      	ldr	r3, [pc, #220]	; (8001bc8 <Task2+0x1fc>)
 8001aec:	fba3 1302 	umull	r1, r3, r3, r2
 8001af0:	0959      	lsrs	r1, r3, #5
 8001af2:	460b      	mov	r3, r1
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	1a5b      	subs	r3, r3, r1
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	4a2f      	ldr	r2, [pc, #188]	; (8001bbc <Task2+0x1f0>)
 8001b00:	fba2 2303 	umull	r2, r3, r2, r3
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <Task2+0x204>)
 8001b0c:	601a      	str	r2, [r3, #0]
			t4 = ((uint16_t)time%60)%10;
 8001b0e:	6938      	ldr	r0, [r7, #16]
 8001b10:	f7ff f8b2 	bl	8000c78 <__aeabi_f2uiz>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <Task2+0x1fc>)
 8001b1a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b1e:	0959      	lsrs	r1, r3, #5
 8001b20:	460b      	mov	r3, r1
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	1a5b      	subs	r3, r3, r1
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <Task2+0x1f0>)
 8001b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8001b32:	08d9      	lsrs	r1, r3, #3
 8001b34:	460b      	mov	r3, r1
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <Task2+0x208>)
 8001b44:	601a      	str	r2, [r3, #0]
			msg3[5] = t1+'0';
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <Task2+0x1f8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	3330      	adds	r3, #48	; 0x30
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <Task2+0x1e8>)
 8001b52:	715a      	strb	r2, [r3, #5]
			msg3[6] = t2+'0';
 8001b54:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <Task2+0x200>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	3330      	adds	r3, #48	; 0x30
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <Task2+0x1e8>)
 8001b60:	719a      	strb	r2, [r3, #6]
			msg3[8] = t3+'0';
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <Task2+0x204>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	3330      	adds	r3, #48	; 0x30
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <Task2+0x1e8>)
 8001b6e:	721a      	strb	r2, [r3, #8]
			msg3[9] = t4+'0';
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <Task2+0x208>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	3330      	adds	r3, #48	; 0x30
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <Task2+0x1e8>)
 8001b7c:	725a      	strb	r2, [r3, #9]

			if(vars[4]){
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <Task2+0x1e4>)
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d028      	beq.n	8001bd8 <Task2+0x20c>
				msg3[12] = 'C';
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <Task2+0x1e8>)
 8001b88:	2243      	movs	r2, #67	; 0x43
 8001b8a:	731a      	strb	r2, [r3, #12]
				msg3[13] = 'O';
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <Task2+0x1e8>)
 8001b8e:	224f      	movs	r2, #79	; 0x4f
 8001b90:	735a      	strb	r2, [r3, #13]
				msg3[14] = 'M';
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <Task2+0x1e8>)
 8001b94:	224d      	movs	r2, #77	; 0x4d
 8001b96:	739a      	strb	r2, [r3, #14]
				msg3[15] = 'M';
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <Task2+0x1e8>)
 8001b9a:	224d      	movs	r2, #77	; 0x4d
 8001b9c:	73da      	strb	r2, [r3, #15]
 8001b9e:	e027      	b.n	8001bf0 <Task2+0x224>
 8001ba0:	20000048 	.word	0x20000048
 8001ba4:	2000004c 	.word	0x2000004c
 8001ba8:	20000060 	.word	0x20000060
 8001bac:	200008f4 	.word	0x200008f4
 8001bb0:	20000034 	.word	0x20000034
 8001bb4:	20000074 	.word	0x20000074
 8001bb8:	20000088 	.word	0x20000088
 8001bbc:	cccccccd 	.word	0xcccccccd
 8001bc0:	1b4e81b5 	.word	0x1b4e81b5
 8001bc4:	20000894 	.word	0x20000894
 8001bc8:	88888889 	.word	0x88888889
 8001bcc:	20000898 	.word	0x20000898
 8001bd0:	20000030 	.word	0x20000030
 8001bd4:	2000089c 	.word	0x2000089c
			} else {
				msg3[12] = ' ';
 8001bd8:	4b51      	ldr	r3, [pc, #324]	; (8001d20 <Task2+0x354>)
 8001bda:	2220      	movs	r2, #32
 8001bdc:	731a      	strb	r2, [r3, #12]
				msg3[13] = ' ';
 8001bde:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <Task2+0x354>)
 8001be0:	2220      	movs	r2, #32
 8001be2:	735a      	strb	r2, [r3, #13]
				msg3[14] = ' ';
 8001be4:	4b4e      	ldr	r3, [pc, #312]	; (8001d20 <Task2+0x354>)
 8001be6:	2220      	movs	r2, #32
 8001be8:	739a      	strb	r2, [r3, #14]
				msg3[15] = ' ';
 8001bea:	4b4d      	ldr	r3, [pc, #308]	; (8001d20 <Task2+0x354>)
 8001bec:	2220      	movs	r2, #32
 8001bee:	73da      	strb	r2, [r3, #15]
			}

			f1 = ((uint8_t)vars[2])/10;
 8001bf0:	4b4c      	ldr	r3, [pc, #304]	; (8001d24 <Task2+0x358>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	4a4c      	ldr	r2, [pc, #304]	; (8001d28 <Task2+0x35c>)
 8001bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfc:	08db      	lsrs	r3, r3, #3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <Task2+0x360>)
 8001c04:	601a      	str	r2, [r3, #0]
			f2 = ((uint8_t)vars[2])%10;
 8001c06:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <Task2+0x358>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	4b46      	ldr	r3, [pc, #280]	; (8001d28 <Task2+0x35c>)
 8001c0e:	fba3 1302 	umull	r1, r3, r3, r2
 8001c12:	08d9      	lsrs	r1, r3, #3
 8001c14:	460b      	mov	r3, r1
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b43      	ldr	r3, [pc, #268]	; (8001d30 <Task2+0x364>)
 8001c24:	601a      	str	r2, [r3, #0]
			f3 = ((uint8_t)(vars[2]*10))%10;
 8001c26:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <Task2+0x358>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	0092      	lsls	r2, r2, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4b3c      	ldr	r3, [pc, #240]	; (8001d28 <Task2+0x35c>)
 8001c38:	fba3 1302 	umull	r1, r3, r3, r2
 8001c3c:	08d9      	lsrs	r1, r3, #3
 8001c3e:	460b      	mov	r3, r1
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	440b      	add	r3, r1
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b39      	ldr	r3, [pc, #228]	; (8001d34 <Task2+0x368>)
 8001c4e:	601a      	str	r2, [r3, #0]
			msg4[5] = f1+'0';
 8001c50:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <Task2+0x360>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	3330      	adds	r3, #48	; 0x30
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4b37      	ldr	r3, [pc, #220]	; (8001d38 <Task2+0x36c>)
 8001c5c:	715a      	strb	r2, [r3, #5]
			msg4[6] = f2+'0';
 8001c5e:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <Task2+0x364>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	3330      	adds	r3, #48	; 0x30
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <Task2+0x36c>)
 8001c6a:	719a      	strb	r2, [r3, #6]
			msg4[8] = f3+'0';
 8001c6c:	4b31      	ldr	r3, [pc, #196]	; (8001d34 <Task2+0x368>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	3330      	adds	r3, #48	; 0x30
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <Task2+0x36c>)
 8001c78:	721a      	strb	r2, [r3, #8]

			v1 = ((uint16_t)vars[3]/10)%10;
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <Task2+0x358>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	4a29      	ldr	r2, [pc, #164]	; (8001d28 <Task2+0x35c>)
 8001c82:	fba2 2303 	umull	r2, r3, r2, r3
 8001c86:	08db      	lsrs	r3, r3, #3
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <Task2+0x35c>)
 8001c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8001c90:	08d9      	lsrs	r1, r3, #3
 8001c92:	460b      	mov	r3, r1
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <Task2+0x370>)
 8001ca2:	601a      	str	r2, [r3, #0]
			v2 = (uint16_t)(vars[3])%10;
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <Task2+0x358>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <Task2+0x35c>)
 8001cac:	fba3 1302 	umull	r1, r3, r3, r2
 8001cb0:	08d9      	lsrs	r1, r3, #3
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <Task2+0x374>)
 8001cc2:	601a      	str	r2, [r3, #0]
			msg4[0] = v1+'0';
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <Task2+0x370>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	3330      	adds	r3, #48	; 0x30
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <Task2+0x36c>)
 8001cd0:	701a      	strb	r2, [r3, #0]
			msg4[2] = v2+'0';
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <Task2+0x374>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	3330      	adds	r3, #48	; 0x30
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <Task2+0x36c>)
 8001cde:	709a      	strb	r2, [r3, #2]

			LCD_Set_Cursor(1,0);
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f7ff f956 	bl	8000f94 <LCD_Set_Cursor>
			LCD_Put_Str(msg3);
 8001ce8:	480d      	ldr	r0, [pc, #52]	; (8001d20 <Task2+0x354>)
 8001cea:	f7ff f97e 	bl	8000fea <LCD_Put_Str>
			LCD_Set_Cursor(2,0);
 8001cee:	2100      	movs	r1, #0
 8001cf0:	2002      	movs	r0, #2
 8001cf2:	f7ff f94f 	bl	8000f94 <LCD_Set_Cursor>
			LCD_Put_Str(msg4);
 8001cf6:	4810      	ldr	r0, [pc, #64]	; (8001d38 <Task2+0x36c>)
 8001cf8:	f7ff f977 	bl	8000fea <LCD_Put_Str>
		}

		temp = osKernelSysTick() - (250 * counter++);
 8001cfc:	f001 fdad 	bl	800385a <osKernelSysTick>
 8001d00:	4601      	mov	r1, r0
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	617a      	str	r2, [r7, #20]
 8001d08:	22fa      	movs	r2, #250	; 0xfa
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	1acb      	subs	r3, r1, r3
 8001d10:	60fb      	str	r3, [r7, #12]
		osDelay(250 - temp);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f001 fdfa 	bl	8003912 <osDelay>
		if(virgin){
 8001d1e:	e65b      	b.n	80019d8 <Task2+0xc>
 8001d20:	20000074 	.word	0x20000074
 8001d24:	20000034 	.word	0x20000034
 8001d28:	cccccccd 	.word	0xcccccccd
 8001d2c:	200008a0 	.word	0x200008a0
 8001d30:	200008a4 	.word	0x200008a4
 8001d34:	200008a8 	.word	0x200008a8
 8001d38:	20000088 	.word	0x20000088
 8001d3c:	200008ac 	.word	0x200008ac
 8001d40:	200008b0 	.word	0x200008b0

08001d44 <Task3>:
	}
}

void Task3(void const * argument){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6178      	str	r0, [r7, #20]
	for(;;)
	{
		osSignalWait(1, osWaitForever);
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d52:	2101      	movs	r1, #1
 8001d54:	4618      	mov	r0, r3
 8001d56:	f001 fe65 	bl	8003a24 <osSignalWait>
		osMutexWait(mutexHandle, osWaitForever);
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <Task3+0x58>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d62:	4618      	mov	r0, r3
 8001d64:	f001 fec2 	bl	8003aec <osMutexWait>
		//printf("KILLSWITCH PRESSED!\r\n");
		GPIOA->BSRR = (1 << 1) | (1 << 9) | (1 << 15);
 8001d68:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <Task3+0x5c>)
 8001d6a:	f248 2202 	movw	r2, #33282	; 0x8202
 8001d6e:	611a      	str	r2, [r3, #16]
		ks = !ks;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <Task3+0x60>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bf14      	ite	ne
 8001d78:	2301      	movne	r3, #1
 8001d7a:	2300      	moveq	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	f083 0301 	eor.w	r3, r3, #1
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <Task3+0x60>)
 8001d8c:	701a      	strb	r2, [r3, #0]
		osMutexRelease(mutexHandle);
 8001d8e:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <Task3+0x58>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f001 fef8 	bl	8003b88 <osMutexRelease>
		osSignalWait(1, osWaitForever);
 8001d98:	e7d8      	b.n	8001d4c <Task3+0x8>
 8001d9a:	bf00      	nop
 8001d9c:	200008d8 	.word	0x200008d8
 8001da0:	40010800 	.word	0x40010800
 8001da4:	200008f4 	.word	0x200008f4

08001da8 <Task4>:
		/*temp = osKernelSysTick() - (1000 * counter++);
		osDelay(1000 - temp);*/
	}
}

void Task4(void const * argument){
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b089      	sub	sp, #36	; 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	uint32_t counter = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
	uint16_t dataADC;
	osStatus ret;
	float v;
	for(;;)
	{
		dataADC = USER_ADC_Read();
 8001db4:	f000 fb04 	bl	80023c0 <USER_ADC_Read>
 8001db8:	4603      	mov	r3, r0
 8001dba:	837b      	strh	r3, [r7, #26]
		v = (float)(dataADC*33/4095);
 8001dbc:	8b7a      	ldrh	r2, [r7, #26]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	015b      	lsls	r3, r3, #5
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <Task4+0x90>)
 8001dc6:	fb82 1203 	smull	r1, r2, r2, r3
 8001dca:	441a      	add	r2, r3
 8001dcc:	12d2      	asrs	r2, r2, #11
 8001dce:	17db      	asrs	r3, r3, #31
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fdac 	bl	8000930 <__aeabi_i2f>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	617b      	str	r3, [r7, #20]
		ret = osMessagePut(vQueueHandle, v, 0);
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <Task4+0x94>)
 8001dde:	681c      	ldr	r4, [r3, #0]
 8001de0:	6978      	ldr	r0, [r7, #20]
 8001de2:	f7fe ff49 	bl	8000c78 <__aeabi_f2uiz>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2200      	movs	r2, #0
 8001dea:	4619      	mov	r1, r3
 8001dec:	4620      	mov	r0, r4
 8001dee:	f001 ff29 	bl	8003c44 <osMessagePut>
 8001df2:	6138      	str	r0, [r7, #16]
		if(ret != osOK ){
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00b      	beq.n	8001e12 <Task4+0x6a>
			osMutexWait(mutexHandle, osWaitForever);
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <Task4+0x98>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f04f 31ff 	mov.w	r1, #4294967295
 8001e02:	4618      	mov	r0, r3
 8001e04:	f001 fe72 	bl	8003aec <osMutexWait>
			//printf("Error T4 (pressure voltage): %d\r\n", ret);
			osMutexRelease(mutexHandle);
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <Task4+0x98>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f001 febb 	bl	8003b88 <osMutexRelease>
		}

		//printf("Sending %d.%d\r\n", (uint8_t)v%10, (uint8_t)(v*10)%10);
		temp = osKernelSysTick() - (100 * counter++);
 8001e12:	f001 fd22 	bl	800385a <osKernelSysTick>
 8001e16:	4601      	mov	r1, r0
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	61fa      	str	r2, [r7, #28]
 8001e1e:	2264      	movs	r2, #100	; 0x64
 8001e20:	fb02 f303 	mul.w	r3, r2, r3
 8001e24:	1acb      	subs	r3, r1, r3
 8001e26:	60fb      	str	r3, [r7, #12]
		osDelay(100 - temp);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f001 fd6f 	bl	8003912 <osDelay>
		dataADC = USER_ADC_Read();
 8001e34:	e7be      	b.n	8001db4 <Task4+0xc>
 8001e36:	bf00      	nop
 8001e38:	80080081 	.word	0x80080081
 8001e3c:	200008e8 	.word	0x200008e8
 8001e40:	200008d8 	.word	0x200008d8

08001e44 <Task5>:
	}
}

void Task5(void const * argument){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	uint32_t temp, counter = 0, v_state;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
	osEvent valve_event;
	for(;;)
	{
		valve_event = osMessageGet(valveQueueHandle, osWaitForever);
 8001e50:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <Task5+0x8c>)
 8001e52:	6819      	ldr	r1, [r3, #0]
 8001e54:	f107 0308 	add.w	r3, r7, #8
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f001 ff31 	bl	8003cc4 <osMessageGet>
		if(valve_event.status == osEventMessage){
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b10      	cmp	r3, #16
 8001e66:	d114      	bne.n	8001e92 <Task5+0x4e>
			v_state = valve_event.value.v;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	61bb      	str	r3, [r7, #24]
			switch(v_state){
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d003      	beq.n	8001e7a <Task5+0x36>
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d004      	beq.n	8001e82 <Task5+0x3e>
 8001e78:	e007      	b.n	8001e8a <Task5+0x46>
			case 1:
				GPIOA->BSRR = (1 << 17) | (1 << 25) | (1 << 15);
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <Task5+0x90>)
 8001e7c:	4a16      	ldr	r2, [pc, #88]	; (8001ed8 <Task5+0x94>)
 8001e7e:	611a      	str	r2, [r3, #16]
				break;
 8001e80:	e008      	b.n	8001e94 <Task5+0x50>
			case 2:
				GPIOA->BSRR = (1 << 1) | (1 << 9) | (1 << 31);
 8001e82:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <Task5+0x90>)
 8001e84:	4a15      	ldr	r2, [pc, #84]	; (8001edc <Task5+0x98>)
 8001e86:	611a      	str	r2, [r3, #16]
				break;
 8001e88:	e004      	b.n	8001e94 <Task5+0x50>
			default:
				GPIOA->BSRR = (1 << 17) | (1 << 25) | (1 << 31);
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <Task5+0x90>)
 8001e8c:	4a14      	ldr	r2, [pc, #80]	; (8001ee0 <Task5+0x9c>)
 8001e8e:	611a      	str	r2, [r3, #16]
				break;
 8001e90:	e000      	b.n	8001e94 <Task5+0x50>
			}
		}
 8001e92:	bf00      	nop
		osMutexWait(mutexHandle, osWaitForever);
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <Task5+0xa0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 fe25 	bl	8003aec <osMutexWait>
		//osTimerStart(timHandle2, 1000);
		osMutexRelease(mutexHandle);
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <Task5+0xa0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f001 fe6e 	bl	8003b88 <osMutexRelease>
		temp = osKernelSysTick() - (100 * counter++);
 8001eac:	f001 fcd5 	bl	800385a <osKernelSysTick>
 8001eb0:	4601      	mov	r1, r0
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	61fa      	str	r2, [r7, #28]
 8001eb8:	2264      	movs	r2, #100	; 0x64
 8001eba:	fb02 f303 	mul.w	r3, r2, r3
 8001ebe:	1acb      	subs	r3, r1, r3
 8001ec0:	617b      	str	r3, [r7, #20]
		osDelay(100 - temp);
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f001 fd22 	bl	8003912 <osDelay>
		valve_event = osMessageGet(valveQueueHandle, osWaitForever);
 8001ece:	e7bf      	b.n	8001e50 <Task5+0xc>
 8001ed0:	200008ec 	.word	0x200008ec
 8001ed4:	40010800 	.word	0x40010800
 8001ed8:	02028000 	.word	0x02028000
 8001edc:	80000202 	.word	0x80000202
 8001ee0:	82020000 	.word	0x82020000
 8001ee4:	200008d8 	.word	0x200008d8

08001ee8 <Task6>:
	}
}

void Task6(void const * argument){
 8001ee8:	b5b0      	push	{r4, r5, r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	uint32_t temp, counter = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
	float pressed_t, flow;
	float freq;
	osStatus ret;
	for(;;)
	{
		if((TIM3->SR & TIM_SR_CC1IF)){
 8001ef4:	4b54      	ldr	r3, [pc, #336]	; (8002048 <Task6+0x160>)
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d068      	beq.n	8001fd2 <Task6+0xea>
			event_val1 = USER_TIM3_Capture_Event();//	capture the 1st event
 8001f00:	f000 fab2 	bl	8002468 <USER_TIM3_Capture_Event>
 8001f04:	4603      	mov	r3, r0
 8001f06:	83fb      	strh	r3, [r7, #30]
			TIM2->CCER ^=	TIM_CCER_CC1P;//		capture is done on different edge
 8001f08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f12:	f083 0302 	eor.w	r3, r3, #2
 8001f16:	6213      	str	r3, [r2, #32]
			event_val2 = USER_TIM3_Capture_Event();//	capture the 2nd event
 8001f18:	f000 faa6 	bl	8002468 <USER_TIM3_Capture_Event>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	83bb      	strh	r3, [r7, #28]
			TIM2->CCER ^=	TIM_CCER_CC1P;//		capture is done on different edge
 8001f20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f2a:	f083 0302 	eor.w	r3, r3, #2
 8001f2e:	6213      	str	r3, [r2, #32]
			event_diff = event_val2 - event_val1;//		2nd event - 1st event
 8001f30:	8bba      	ldrh	r2, [r7, #28]
 8001f32:	8bfb      	ldrh	r3, [r7, #30]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	837b      	strh	r3, [r7, #26]

			pressed_t = ( 1.0 / 64000000.0 ) * event_diff * (TIM3->PSC + 1);
 8001f38:	8b7b      	ldrh	r3, [r7, #26]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fb84 	bl	8000648 <__aeabi_i2d>
 8001f40:	a33b      	add	r3, pc, #236	; (adr r3, 8002030 <Task6+0x148>)
 8001f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f46:	f7fe f903 	bl	8000150 <__aeabi_dmul>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4614      	mov	r4, r2
 8001f50:	461d      	mov	r5, r3
 8001f52:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <Task6+0x160>)
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	3301      	adds	r3, #1
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe fb65 	bl	8000628 <__aeabi_ui2d>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4620      	mov	r0, r4
 8001f64:	4629      	mov	r1, r5
 8001f66:	f7fe f8f3 	bl	8000150 <__aeabi_dmul>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	f7fe fbd3 	bl	800071c <__aeabi_d2f>
 8001f76:	4603      	mov	r3, r0
 8001f78:	617b      	str	r3, [r7, #20]
			freq = (1/(pressed_t));
 8001f7a:	6979      	ldr	r1, [r7, #20]
 8001f7c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001f80:	f7fe fdde 	bl	8000b40 <__aeabi_fdiv>
 8001f84:	4603      	mov	r3, r0
 8001f86:	613b      	str	r3, [r7, #16]
			flow = 0.1212*freq + 0.061;
 8001f88:	6938      	ldr	r0, [r7, #16]
 8001f8a:	f7fe fb6f 	bl	800066c <__aeabi_f2d>
 8001f8e:	a32a      	add	r3, pc, #168	; (adr r3, 8002038 <Task6+0x150>)
 8001f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f94:	f7fe f8dc 	bl	8000150 <__aeabi_dmul>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	a327      	add	r3, pc, #156	; (adr r3, 8002040 <Task6+0x158>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	f7fe fa03 	bl	80003b0 <__adddf3>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f7fe fbb3 	bl	800071c <__aeabi_d2f>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	623b      	str	r3, [r7, #32]
			osMutexWait(mutexHandle, osWaitForever);
 8001fba:	4b24      	ldr	r3, [pc, #144]	; (800204c <Task6+0x164>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f001 fd92 	bl	8003aec <osMutexWait>
			//printf("Freq: %d\r\n", (uint16_t)freq);
			osMutexRelease(mutexHandle);
 8001fc8:	4b20      	ldr	r3, [pc, #128]	; (800204c <Task6+0x164>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f001 fddb 	bl	8003b88 <osMutexRelease>
		}
		ret = osMessagePut(fQueueHandle, (uint32_t)flow, 0);
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <Task6+0x168>)
 8001fd4:	681c      	ldr	r4, [r3, #0]
 8001fd6:	6a38      	ldr	r0, [r7, #32]
 8001fd8:	f7fe fe4e 	bl	8000c78 <__aeabi_f2uiz>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2200      	movs	r2, #0
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	f001 fe2e 	bl	8003c44 <osMessagePut>
 8001fe8:	60f8      	str	r0, [r7, #12]
		if(ret != osOK ){
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00b      	beq.n	8002008 <Task6+0x120>
		  osMutexWait(mutexHandle, osWaitForever);
 8001ff0:	4b16      	ldr	r3, [pc, #88]	; (800204c <Task6+0x164>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f001 fd77 	bl	8003aec <osMutexWait>
		  //printf("Error T6 (flow frequency): %d\r\n", ret);
		  osMutexRelease(mutexHandle);
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <Task6+0x164>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f001 fdc0 	bl	8003b88 <osMutexRelease>
		}
		temp = osKernelSysTick() - (100 * counter++);
 8002008:	f001 fc27 	bl	800385a <osKernelSysTick>
 800200c:	4601      	mov	r1, r0
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	627a      	str	r2, [r7, #36]	; 0x24
 8002014:	2264      	movs	r2, #100	; 0x64
 8002016:	fb02 f303 	mul.w	r3, r2, r3
 800201a:	1acb      	subs	r3, r1, r3
 800201c:	60bb      	str	r3, [r7, #8]
		osDelay(100 - temp);
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8002024:	4618      	mov	r0, r3
 8002026:	f001 fc74 	bl	8003912 <osDelay>
		if((TIM3->SR & TIM_SR_CC1IF)){
 800202a:	e763      	b.n	8001ef4 <Task6+0xc>
 800202c:	f3af 8000 	nop.w
 8002030:	a0b5ed8d 	.word	0xa0b5ed8d
 8002034:	3e50c6f7 	.word	0x3e50c6f7
 8002038:	94467382 	.word	0x94467382
 800203c:	3fbf06f6 	.word	0x3fbf06f6
 8002040:	5a1cac08 	.word	0x5a1cac08
 8002044:	3faf3b64 	.word	0x3faf3b64
 8002048:	40000400 	.word	0x40000400
 800204c:	200008d8 	.word	0x200008d8
 8002050:	200008f0 	.word	0x200008f0

08002054 <USER_RCC_Init>:
	}
}

void USER_RCC_Init(void){
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
	//I/O port A clock enable
	RCC->APB2ENR	|=	 RCC_APB2ENR_IOPAEN
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <USER_RCC_Init+0x38>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	4a0b      	ldr	r2, [pc, #44]	; (800208c <USER_RCC_Init+0x38>)
 800205e:	f443 7305 	orr.w	r3, r3, #532	; 0x214
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6193      	str	r3, [r2, #24]
					|	 RCC_APB2ENR_IOPCEN
  					|	 RCC_APB2ENR_ADC1EN//	ADC 1 clock enable
					|	 RCC_APB2ENR_AFIOEN;//          AFIO clock enable


	RCC->CFGR	|=	 RCC_CFGR_ADCPRE;//	ADC prescaler 1:8 for 8 MHz
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <USER_RCC_Init+0x38>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a07      	ldr	r2, [pc, #28]	; (800208c <USER_RCC_Init+0x38>)
 800206e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002072:	6053      	str	r3, [r2, #4]


	RCC->APB1ENR	|=	 RCC_APB1ENR_TIM2EN//Timer 2 clock enable
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <USER_RCC_Init+0x38>)
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	4a04      	ldr	r2, [pc, #16]	; (800208c <USER_RCC_Init+0x38>)
 800207a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207e:	f043 0303 	orr.w	r3, r3, #3
 8002082:	61d3      	str	r3, [r2, #28]
					|	 RCC_APB1ENR_TIM3EN//Timer 3 clock enable
					|	 RCC_APB1ENR_USART2EN;//  	USART2 clock enable

}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	40021000 	.word	0x40021000

08002090 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	if( EXTI->PR & EXTI_PR_PR8 ){
 8002094:	4b09      	ldr	r3, [pc, #36]	; (80020bc <EXTI9_5_IRQHandler+0x2c>)
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00b      	beq.n	80020b8 <EXTI9_5_IRQHandler+0x28>
		osSignalSet(taskHandle3, 1);
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <EXTI9_5_IRQHandler+0x30>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2101      	movs	r1, #1
 80020a6:	4618      	mov	r0, r3
 80020a8:	f001 fc7c 	bl	80039a4 <osSignalSet>
		EXTI->PR	|=	EXTI_PR_PR8;//		External Interrupt Flag cleared
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <EXTI9_5_IRQHandler+0x2c>)
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	4a02      	ldr	r2, [pc, #8]	; (80020bc <EXTI9_5_IRQHandler+0x2c>)
 80020b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b6:	6153      	str	r3, [r2, #20]
	}
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40010400 	.word	0x40010400
 80020c0:	200008c8 	.word	0x200008c8

080020c4 <USER_GPIO_Init>:

void USER_GPIO_Init(void){
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

	//PA0 (TIM2_CH1) as input floating
	GPIOA->CRL	&=	~GPIO_CRL_CNF0_1 & ~GPIO_CRL_MODE0; //Transmit timer
 80020c8:	4b7f      	ldr	r3, [pc, #508]	; (80022c8 <USER_GPIO_Init+0x204>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a7e      	ldr	r2, [pc, #504]	; (80022c8 <USER_GPIO_Init+0x204>)
 80020ce:	f023 030b 	bic.w	r3, r3, #11
 80020d2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF0_0;
 80020d4:	4b7c      	ldr	r3, [pc, #496]	; (80022c8 <USER_GPIO_Init+0x204>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a7b      	ldr	r2, [pc, #492]	; (80022c8 <USER_GPIO_Init+0x204>)
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	6013      	str	r3, [r2, #0]

	//PA8 (button) as input pull-up
	GPIOA->CRH &= ~GPIO_CRH_CNF8_0 & ~GPIO_CRH_MODE8;
 80020e0:	4b79      	ldr	r3, [pc, #484]	; (80022c8 <USER_GPIO_Init+0x204>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4a78      	ldr	r2, [pc, #480]	; (80022c8 <USER_GPIO_Init+0x204>)
 80020e6:	f023 0307 	bic.w	r3, r3, #7
 80020ea:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF8_1;
 80020ec:	4b76      	ldr	r3, [pc, #472]	; (80022c8 <USER_GPIO_Init+0x204>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4a75      	ldr	r2, [pc, #468]	; (80022c8 <USER_GPIO_Init+0x204>)
 80020f2:	f043 0308 	orr.w	r3, r3, #8
 80020f6:	6053      	str	r3, [r2, #4]

	//pin PA2 (USART2_TX) as alternate function output push-pull, max speed 10MHz
	GPIOA->CRL	&=	~GPIO_CRL_CNF2_0 & ~GPIO_CRL_MODE2_1;
 80020f8:	4b73      	ldr	r3, [pc, #460]	; (80022c8 <USER_GPIO_Init+0x204>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a72      	ldr	r2, [pc, #456]	; (80022c8 <USER_GPIO_Init+0x204>)
 80020fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002102:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF2_1 | GPIO_CRL_MODE2_0;
 8002104:	4b70      	ldr	r3, [pc, #448]	; (80022c8 <USER_GPIO_Init+0x204>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a6f      	ldr	r2, [pc, #444]	; (80022c8 <USER_GPIO_Init+0x204>)
 800210a:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
 800210e:	6013      	str	r3, [r2, #0]

	//pin PA3 (USART2_RX) as input pull-up
	GPIOA->CRL	&=	~GPIO_CRL_CNF3_0 & ~GPIO_CRL_MODE3;
 8002110:	4b6d      	ldr	r3, [pc, #436]	; (80022c8 <USER_GPIO_Init+0x204>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a6c      	ldr	r2, [pc, #432]	; (80022c8 <USER_GPIO_Init+0x204>)
 8002116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800211a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF3_1;
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <USER_GPIO_Init+0x204>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a69      	ldr	r2, [pc, #420]	; (80022c8 <USER_GPIO_Init+0x204>)
 8002122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002126:	6013      	str	r3, [r2, #0]

	//PA4 (ADC12_IN4) as analog
	GPIOA->CRL	&=	~GPIO_CRL_CNF4 & ~GPIO_CRL_MODE4; //Pressure Sensor
 8002128:	4b67      	ldr	r3, [pc, #412]	; (80022c8 <USER_GPIO_Init+0x204>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a66      	ldr	r2, [pc, #408]	; (80022c8 <USER_GPIO_Init+0x204>)
 800212e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002132:	6013      	str	r3, [r2, #0]

	//PA6 (TIM3_CH1) as input floating
	GPIOA->CRL	&=	~GPIO_CRL_CNF6_1 & ~GPIO_CRL_MODE6; //Flow Sensor
 8002134:	4b64      	ldr	r3, [pc, #400]	; (80022c8 <USER_GPIO_Init+0x204>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a63      	ldr	r2, [pc, #396]	; (80022c8 <USER_GPIO_Init+0x204>)
 800213a:	f023 6330 	bic.w	r3, r3, #184549376	; 0xb000000
 800213e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF6_0;
 8002140:	4b61      	ldr	r3, [pc, #388]	; (80022c8 <USER_GPIO_Init+0x204>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a60      	ldr	r2, [pc, #384]	; (80022c8 <USER_GPIO_Init+0x204>)
 8002146:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800214a:	6013      	str	r3, [r2, #0]

	//TECLADO MATRICIAL
	GPIOB->BSRR &= GPIO_BSRR_BR0 & GPIO_BSRR_BR1 & GPIO_BSRR_BR2 & GPIO_BSRR_BR3;
 800214c:	4b5f      	ldr	r3, [pc, #380]	; (80022cc <USER_GPIO_Init+0x208>)
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	4b5e      	ldr	r3, [pc, #376]	; (80022cc <USER_GPIO_Init+0x208>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
	//pins PB0-PB3 as output push-pull
	GPIOB->CRL &= ~GPIO_CRL_CNF0 & ~GPIO_CRL_MODE0_1;
 8002156:	4b5d      	ldr	r3, [pc, #372]	; (80022cc <USER_GPIO_Init+0x208>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a5c      	ldr	r2, [pc, #368]	; (80022cc <USER_GPIO_Init+0x208>)
 800215c:	f023 030e 	bic.w	r3, r3, #14
 8002160:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE0_0;
 8002162:	4b5a      	ldr	r3, [pc, #360]	; (80022cc <USER_GPIO_Init+0x208>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a59      	ldr	r2, [pc, #356]	; (80022cc <USER_GPIO_Init+0x208>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~GPIO_CRL_CNF1 & ~GPIO_CRL_MODE1_1;
 800216e:	4b57      	ldr	r3, [pc, #348]	; (80022cc <USER_GPIO_Init+0x208>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a56      	ldr	r2, [pc, #344]	; (80022cc <USER_GPIO_Init+0x208>)
 8002174:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002178:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE1_0;
 800217a:	4b54      	ldr	r3, [pc, #336]	; (80022cc <USER_GPIO_Init+0x208>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a53      	ldr	r2, [pc, #332]	; (80022cc <USER_GPIO_Init+0x208>)
 8002180:	f043 0310 	orr.w	r3, r3, #16
 8002184:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~GPIO_CRL_CNF2 & ~GPIO_CRL_MODE2_1;
 8002186:	4b51      	ldr	r3, [pc, #324]	; (80022cc <USER_GPIO_Init+0x208>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a50      	ldr	r2, [pc, #320]	; (80022cc <USER_GPIO_Init+0x208>)
 800218c:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8002190:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE2_0;
 8002192:	4b4e      	ldr	r3, [pc, #312]	; (80022cc <USER_GPIO_Init+0x208>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a4d      	ldr	r2, [pc, #308]	; (80022cc <USER_GPIO_Init+0x208>)
 8002198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219c:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~GPIO_CRL_CNF3 & ~GPIO_CRL_MODE3_1;
 800219e:	4b4b      	ldr	r3, [pc, #300]	; (80022cc <USER_GPIO_Init+0x208>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a4a      	ldr	r2, [pc, #296]	; (80022cc <USER_GPIO_Init+0x208>)
 80021a4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80021a8:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE3_0;
 80021aa:	4b48      	ldr	r3, [pc, #288]	; (80022cc <USER_GPIO_Init+0x208>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a47      	ldr	r2, [pc, #284]	; (80022cc <USER_GPIO_Init+0x208>)
 80021b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021b4:	6013      	str	r3, [r2, #0]

	//pins PB4-PB7 as input pull-up
	GPIOB->CRL &= ~GPIO_CRL_CNF4_0 & ~GPIO_CRL_MODE4;
 80021b6:	4b45      	ldr	r3, [pc, #276]	; (80022cc <USER_GPIO_Init+0x208>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a44      	ldr	r2, [pc, #272]	; (80022cc <USER_GPIO_Init+0x208>)
 80021bc:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80021c0:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF4_1;
 80021c2:	4b42      	ldr	r3, [pc, #264]	; (80022cc <USER_GPIO_Init+0x208>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a41      	ldr	r2, [pc, #260]	; (80022cc <USER_GPIO_Init+0x208>)
 80021c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021cc:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= GPIO_ODR_ODR4;
 80021ce:	4b3f      	ldr	r3, [pc, #252]	; (80022cc <USER_GPIO_Init+0x208>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	4a3e      	ldr	r2, [pc, #248]	; (80022cc <USER_GPIO_Init+0x208>)
 80021d4:	f043 0310 	orr.w	r3, r3, #16
 80021d8:	60d3      	str	r3, [r2, #12]
	GPIOB->CRL &= ~GPIO_CRL_CNF5_0 & ~GPIO_CRL_MODE5;
 80021da:	4b3c      	ldr	r3, [pc, #240]	; (80022cc <USER_GPIO_Init+0x208>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a3b      	ldr	r2, [pc, #236]	; (80022cc <USER_GPIO_Init+0x208>)
 80021e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80021e4:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF5_1;
 80021e6:	4b39      	ldr	r3, [pc, #228]	; (80022cc <USER_GPIO_Init+0x208>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a38      	ldr	r2, [pc, #224]	; (80022cc <USER_GPIO_Init+0x208>)
 80021ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021f0:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= GPIO_ODR_ODR5;
 80021f2:	4b36      	ldr	r3, [pc, #216]	; (80022cc <USER_GPIO_Init+0x208>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	4a35      	ldr	r2, [pc, #212]	; (80022cc <USER_GPIO_Init+0x208>)
 80021f8:	f043 0320 	orr.w	r3, r3, #32
 80021fc:	60d3      	str	r3, [r2, #12]
	GPIOB->CRL &= ~GPIO_CRL_CNF6_0 & ~GPIO_CRL_MODE6;
 80021fe:	4b33      	ldr	r3, [pc, #204]	; (80022cc <USER_GPIO_Init+0x208>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a32      	ldr	r2, [pc, #200]	; (80022cc <USER_GPIO_Init+0x208>)
 8002204:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002208:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF6_1;
 800220a:	4b30      	ldr	r3, [pc, #192]	; (80022cc <USER_GPIO_Init+0x208>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a2f      	ldr	r2, [pc, #188]	; (80022cc <USER_GPIO_Init+0x208>)
 8002210:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002214:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= GPIO_ODR_ODR6;
 8002216:	4b2d      	ldr	r3, [pc, #180]	; (80022cc <USER_GPIO_Init+0x208>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	4a2c      	ldr	r2, [pc, #176]	; (80022cc <USER_GPIO_Init+0x208>)
 800221c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002220:	60d3      	str	r3, [r2, #12]
	GPIOB->CRL &= ~GPIO_CRL_CNF7_0 & ~GPIO_CRL_MODE7;
 8002222:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <USER_GPIO_Init+0x208>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a29      	ldr	r2, [pc, #164]	; (80022cc <USER_GPIO_Init+0x208>)
 8002228:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800222c:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF7_1;
 800222e:	4b27      	ldr	r3, [pc, #156]	; (80022cc <USER_GPIO_Init+0x208>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a26      	ldr	r2, [pc, #152]	; (80022cc <USER_GPIO_Init+0x208>)
 8002234:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002238:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= GPIO_ODR_ODR7;
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <USER_GPIO_Init+0x208>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	4a23      	ldr	r2, [pc, #140]	; (80022cc <USER_GPIO_Init+0x208>)
 8002240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002244:	60d3      	str	r3, [r2, #12]

	//pin PB10 (USART3_TX) as alternate function output push-pull, max speed 10MHz
	GPIOB->CRH	&=	~GPIO_CRH_CNF10_0 & ~GPIO_CRH_MODE10_1;
 8002246:	4b21      	ldr	r3, [pc, #132]	; (80022cc <USER_GPIO_Init+0x208>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4a20      	ldr	r2, [pc, #128]	; (80022cc <USER_GPIO_Init+0x208>)
 800224c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002250:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|=	 GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10_0; //UART TX
 8002252:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <USER_GPIO_Init+0x208>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <USER_GPIO_Init+0x208>)
 8002258:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
 800225c:	6053      	str	r3, [r2, #4]

	//pin PB11 (USART3_RX) as input pull-up
	GPIOB->CRH	&=	~GPIO_CRH_CNF11_0 & ~GPIO_CRH_MODE11; //UART RX
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <USER_GPIO_Init+0x208>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	4a1a      	ldr	r2, [pc, #104]	; (80022cc <USER_GPIO_Init+0x208>)
 8002264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002268:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|=	 GPIO_CRH_CNF11_1;
 800226a:	4b18      	ldr	r3, [pc, #96]	; (80022cc <USER_GPIO_Init+0x208>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4a17      	ldr	r2, [pc, #92]	; (80022cc <USER_GPIO_Init+0x208>)
 8002270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002274:	6053      	str	r3, [r2, #4]

	//pin PA1 (Relay Pump) as output push-pull
	GPIOA->CRL &= ~GPIO_CRL_CNF1 & ~GPIO_CRL_MODE1_1;
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <USER_GPIO_Init+0x204>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a13      	ldr	r2, [pc, #76]	; (80022c8 <USER_GPIO_Init+0x204>)
 800227c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002280:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE1_0;
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <USER_GPIO_Init+0x204>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <USER_GPIO_Init+0x204>)
 8002288:	f043 0310 	orr.w	r3, r3, #16
 800228c:	6013      	str	r3, [r2, #0]

	//pin PA9 (Relay Valve In) as output push-pull
	GPIOA->CRH &= ~GPIO_CRH_CNF9 & ~GPIO_CRH_MODE9_1;
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <USER_GPIO_Init+0x204>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	4a0d      	ldr	r2, [pc, #52]	; (80022c8 <USER_GPIO_Init+0x204>)
 8002294:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002298:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_MODE9_0;
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <USER_GPIO_Init+0x204>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <USER_GPIO_Init+0x204>)
 80022a0:	f043 0310 	orr.w	r3, r3, #16
 80022a4:	6053      	str	r3, [r2, #4]

	//pin PA15 (Relay Valve Out) as output push-pull
	GPIOA->CRH &= ~GPIO_CRH_CNF15 & ~GPIO_CRH_MODE15_1;
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <USER_GPIO_Init+0x204>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <USER_GPIO_Init+0x204>)
 80022ac:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80022b0:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_MODE15_0;
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <USER_GPIO_Init+0x204>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <USER_GPIO_Init+0x204>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022bc:	6053      	str	r3, [r2, #4]
}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40010800 	.word	0x40010800
 80022cc:	40010c00 	.word	0x40010c00

080022d0 <USER_EXTI_Init>:

void USER_EXTI_Init(void){
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
	AFIO->EXTICR[3]	&=	~AFIO_EXTICR3_EXTI8;
 80022d4:	4b10      	ldr	r3, [pc, #64]	; (8002318 <USER_EXTI_Init+0x48>)
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	4a0f      	ldr	r2, [pc, #60]	; (8002318 <USER_EXTI_Init+0x48>)
 80022da:	f023 030f 	bic.w	r3, r3, #15
 80022de:	6153      	str	r3, [r2, #20]
	EXTI->PR	|=	 EXTI_PR_PR8;
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <USER_EXTI_Init+0x4c>)
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	4a0d      	ldr	r2, [pc, #52]	; (800231c <USER_EXTI_Init+0x4c>)
 80022e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ea:	6153      	str	r3, [r2, #20]
	EXTI->IMR	|=	 EXTI_IMR_MR8;
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <USER_EXTI_Init+0x4c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	; (800231c <USER_EXTI_Init+0x4c>)
 80022f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f6:	6013      	str	r3, [r2, #0]
	EXTI->FTSR	|=	 EXTI_FTSR_TR8;
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <USER_EXTI_Init+0x4c>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4a07      	ldr	r2, [pc, #28]	; (800231c <USER_EXTI_Init+0x4c>)
 80022fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002302:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(EXTI9_5_IRQn, 5);//    		The priority must be above level 5
 8002304:	2105      	movs	r1, #5
 8002306:	2017      	movs	r0, #23
 8002308:	f7fe fefe 	bl	8001108 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 800230c:	2017      	movs	r0, #23
 800230e:	f7fe fedf 	bl	80010d0 <__NVIC_EnableIRQ>
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40010000 	.word	0x40010000
 800231c:	40010400 	.word	0x40010400

08002320 <USER_ADC_Init>:

void USER_ADC_Init(void){
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	ADC1->CR1	&=	~ADC_CR1_DUALMOD;//	independent mode
 8002324:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <USER_ADC_Init+0x70>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4a19      	ldr	r2, [pc, #100]	; (8002390 <USER_ADC_Init+0x70>)
 800232a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800232e:	6053      	str	r3, [r2, #4]
	ADC1->CR2	&=	~ADC_CR2_ALIGN;//	right alignment for the result
 8002330:	4b17      	ldr	r3, [pc, #92]	; (8002390 <USER_ADC_Init+0x70>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	4a16      	ldr	r2, [pc, #88]	; (8002390 <USER_ADC_Init+0x70>)
 8002336:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800233a:	6093      	str	r3, [r2, #8]
	ADC1->CR2	|=	 ADC_CR2_CONT;//	continuous conversion mode
 800233c:	4b14      	ldr	r3, [pc, #80]	; (8002390 <USER_ADC_Init+0x70>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4a13      	ldr	r2, [pc, #76]	; (8002390 <USER_ADC_Init+0x70>)
 8002342:	f043 0302 	orr.w	r3, r3, #2
 8002346:	6093      	str	r3, [r2, #8]
	ADC1->SMPR2	&=	~ADC_SMPR2_SMP0;//	1.5 cycles channel sample time
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <USER_ADC_Init+0x70>)
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	4a10      	ldr	r2, [pc, #64]	; (8002390 <USER_ADC_Init+0x70>)
 800234e:	f023 0307 	bic.w	r3, r3, #7
 8002352:	6113      	str	r3, [r2, #16]
	ADC1->SQR1	&=	~ADC_SQR1_L;//		1 conversion on regular channels
 8002354:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <USER_ADC_Init+0x70>)
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	4a0d      	ldr	r2, [pc, #52]	; (8002390 <USER_ADC_Init+0x70>)
 800235a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800235e:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR3 	&=	~ADC_SQR3_SQ1;//	first and only conversion in Ch0
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <USER_ADC_Init+0x70>)
 8002362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002364:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <USER_ADC_Init+0x70>)
 8002366:	f023 031f 	bic.w	r3, r3, #31
 800236a:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3	|=	ADC_SQR3_SQ1_2;
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <USER_ADC_Init+0x70>)
 800236e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002370:	4a07      	ldr	r2, [pc, #28]	; (8002390 <USER_ADC_Init+0x70>)
 8002372:	f043 0304 	orr.w	r3, r3, #4
 8002376:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->CR2	|=	 ADC_CR2_ADON;//	ADC enabled
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <USER_ADC_Init+0x70>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4a04      	ldr	r2, [pc, #16]	; (8002390 <USER_ADC_Init+0x70>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6093      	str	r3, [r2, #8]
	HAL_Delay(1);//					tstab(1us) after ADC enabled, real 1ms
 8002384:	2001      	movs	r0, #1
 8002386:	f000 fabf 	bl	8002908 <HAL_Delay>
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40012400 	.word	0x40012400

08002394 <USER_ADC_Calibration>:
void USER_ADC_Calibration(void){
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
	ADC1->CR2	|=	 ADC_CR2_CAL;//		start calibration
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <USER_ADC_Calibration+0x28>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4a07      	ldr	r2, [pc, #28]	; (80023bc <USER_ADC_Calibration+0x28>)
 800239e:	f043 0304 	orr.w	r3, r3, #4
 80023a2:	6093      	str	r3, [r2, #8]
	while( ADC1->CR2 & ADC_CR2_CAL );//		wait until calibration is done
 80023a4:	bf00      	nop
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <USER_ADC_Calibration+0x28>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f9      	bne.n	80023a6 <USER_ADC_Calibration+0x12>
}
 80023b2:	bf00      	nop
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	40012400 	.word	0x40012400

080023c0 <USER_ADC_Read>:
uint16_t USER_ADC_Read( void ){
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
	while( !( ADC1->SR & ADC_SR_EOC ) );//		wait until conversion is done
 80023c4:	bf00      	nop
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <USER_ADC_Read+0x20>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f9      	beq.n	80023c6 <USER_ADC_Read+0x6>
	return (uint16_t)ADC1->DR;//			return ADC data
 80023d2:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <USER_ADC_Read+0x20>)
 80023d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d6:	b29b      	uxth	r3, r3
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	40012400 	.word	0x40012400

080023e4 <USER_TIM3_Capture_Init>:
uint16_t USER_TIM2_Capture_Event(void){
	while( !(TIM2->SR & TIM_SR_CC1IF) );//		wait until a capture occurs
	return TIM2->CCR1;//				return the captured value
}

void USER_TIM3_Capture_Init(void){
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
	TIM3->CR1	&=	~TIM_CR1_CKD_0;
 80023e8:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <USER_TIM3_Capture_Init+0x80>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <USER_TIM3_Capture_Init+0x80>)
 80023ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023f2:	6013      	str	r3, [r2, #0]
	TIM3->CR1	|=	 TIM_CR1_CKD_1;//	sampling (DTS) = TIM_CLK/4
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <USER_TIM3_Capture_Init+0x80>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1a      	ldr	r2, [pc, #104]	; (8002464 <USER_TIM3_Capture_Init+0x80>)
 80023fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023fe:	6013      	str	r3, [r2, #0]
	TIM3->CCMR1 	&=	~TIM_CCMR1_CC1S_1;
 8002400:	4b18      	ldr	r3, [pc, #96]	; (8002464 <USER_TIM3_Capture_Init+0x80>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4a17      	ldr	r2, [pc, #92]	; (8002464 <USER_TIM3_Capture_Init+0x80>)
 8002406:	f023 0302 	bic.w	r3, r3, #2
 800240a:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 	|=	 TIM_CCMR1_CC1S_0;//	CC1 channel as input, mapped on TI1
 800240c:	4b15      	ldr	r3, [pc, #84]	; (8002464 <USER_TIM3_Capture_Init+0x80>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <USER_TIM3_Capture_Init+0x80>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 	|=	 TIM_CCMR1_IC1F;//	filter -> DTS/32, N=8
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <USER_TIM3_Capture_Init+0x80>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	4a11      	ldr	r2, [pc, #68]	; (8002464 <USER_TIM3_Capture_Init+0x80>)
 800241e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002422:	6193      	str	r3, [r2, #24]
	TIM3->CCER	|=	 TIM_CCER_CC1P;//	capture is done on falling edge
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <USER_TIM3_Capture_Init+0x80>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4a0e      	ldr	r2, [pc, #56]	; (8002464 <USER_TIM3_Capture_Init+0x80>)
 800242a:	f043 0302 	orr.w	r3, r3, #2
 800242e:	6213      	str	r3, [r2, #32]
	TIM3->CCMR1 	&=	~TIM_CCMR1_IC1PSC;//	no prescaler
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <USER_TIM3_Capture_Init+0x80>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <USER_TIM3_Capture_Init+0x80>)
 8002436:	f023 030c 	bic.w	r3, r3, #12
 800243a:	6193      	str	r3, [r2, #24]
	TIM3->CCER	|=	 TIM_CCER_CC1E;//	capture enabled
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <USER_TIM3_Capture_Init+0x80>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4a08      	ldr	r2, [pc, #32]	; (8002464 <USER_TIM3_Capture_Init+0x80>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6213      	str	r3, [r2, #32]
	TIM3->PSC	 =	 97;//		maximum prescaler
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <USER_TIM3_Capture_Init+0x80>)
 800244a:	2261      	movs	r2, #97	; 0x61
 800244c:	629a      	str	r2, [r3, #40]	; 0x28

	TIM3->CR1	|=	 TIM_CR1_CEN;//		counter enabled
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <USER_TIM3_Capture_Init+0x80>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a04      	ldr	r2, [pc, #16]	; (8002464 <USER_TIM3_Capture_Init+0x80>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6013      	str	r3, [r2, #0]
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40000400 	.word	0x40000400

08002468 <USER_TIM3_Capture_Event>:

uint16_t USER_TIM3_Capture_Event(void){
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
	while( !(TIM3->SR & TIM_SR_CC1IF) );//		wait until a capture occurs
 800246c:	bf00      	nop
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <USER_TIM3_Capture_Event+0x20>)
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f9      	beq.n	800246e <USER_TIM3_Capture_Event+0x6>
	return TIM3->CCR1;//				return the captured value
 800247a:	4b03      	ldr	r3, [pc, #12]	; (8002488 <USER_TIM3_Capture_Event+0x20>)
 800247c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247e:	b29b      	uxth	r3, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	40000400 	.word	0x40000400

0800248c <USER_USART2_Init>:

void USER_USART2_Init(void){
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
	USART2->CR1	|=	 USART_CR1_UE;//		USART enabled
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <USER_USART2_Init+0x50>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a11      	ldr	r2, [pc, #68]	; (80024dc <USER_USART2_Init+0x50>)
 8002496:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800249a:	60d3      	str	r3, [r2, #12]
	USART2->CR1	&=	~USART_CR1_M//		  	1 start bit, 8 data bits
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <USER_USART2_Init+0x50>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a0e      	ldr	r2, [pc, #56]	; (80024dc <USER_USART2_Init+0x50>)
 80024a2:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 80024a6:	60d3      	str	r3, [r2, #12]
			&	~USART_CR1_PCE;//		parity control disabled
	USART2->CR2	&=	~USART_CR2_STOP;//  		1 stop bit
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <USER_USART2_Init+0x50>)
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	4a0b      	ldr	r2, [pc, #44]	; (80024dc <USER_USART2_Init+0x50>)
 80024ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024b2:	6113      	str	r3, [r2, #16]
	USART2->BRR	 =	 0xD05;//			9600 bps -> 208.33,
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <USER_USART2_Init+0x50>)
 80024b6:	f640 5205 	movw	r2, #3333	; 0xd05
 80024ba:	609a      	str	r2, [r3, #8]
	//USARTDIV = 32*10^6/(16*9600)
	//NEW USARTDIV = 32*10^6/(16*115200)=17.361
	//BRR = [17->HEX=11][.361*16->HEX=6]=116
	//`->BRR = 0x116;

	USART2->CR1	|=	 USART_CR1_TE;//		        transmitter enabled
 80024bc:	4b07      	ldr	r3, [pc, #28]	; (80024dc <USER_USART2_Init+0x50>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a06      	ldr	r2, [pc, #24]	; (80024dc <USER_USART2_Init+0x50>)
 80024c2:	f043 0308 	orr.w	r3, r3, #8
 80024c6:	60d3      	str	r3, [r2, #12]
	USART2->CR1	|=	 USART_CR1_RE;//		        receiver enabled
 80024c8:	4b04      	ldr	r3, [pc, #16]	; (80024dc <USER_USART2_Init+0x50>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a03      	ldr	r2, [pc, #12]	; (80024dc <USER_USART2_Init+0x50>)
 80024ce:	f043 0304 	orr.w	r3, r3, #4
 80024d2:	60d3      	str	r3, [r2, #12]
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	40004400 	.word	0x40004400

080024e0 <Timer_Callback1>:
uint32_t USER_USART3_Receive(void){
	while((USART3->SR & USART_SR_RXNE) == 0){}
	return USART3->DR;
}

void Timer_Callback1(void const * argument){
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	vars[0]-=1;
 80024e8:	4b04      	ldr	r3, [pc, #16]	; (80024fc <Timer_Callback1+0x1c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	4a03      	ldr	r2, [pc, #12]	; (80024fc <Timer_Callback1+0x1c>)
 80024f0:	6013      	str	r3, [r2, #0]

	//printf("T4\r\n");
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	20000034 	.word	0x20000034

08002500 <Timer_Callback2>:

void Timer_Callback2(void const * argument){
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	printf("T5\r\n");
 8002508:	4803      	ldr	r0, [pc, #12]	; (8002518 <Timer_Callback2+0x18>)
 800250a:	f005 f8a3 	bl	8007654 <puts>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	08008444 	.word	0x08008444

0800251c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a04      	ldr	r2, [pc, #16]	; (800253c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d101      	bne.n	8002532 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800252e:	f000 f9cf 	bl	80028d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40000800 	.word	0x40000800

08002540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <_write>:
 */

#include "myprintf.h"
#include "main.h"

int _write(int file, char *ptr, int len){
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	e00f      	b.n	800257e <_write+0x32>
		while( ( USART2->SR & USART_SR_TXE ) == 0 ){}
 800255e:	bf00      	nop
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <_write+0x48>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f9      	beq.n	8002560 <_write+0x14>
		USART2->DR = *ptr++;
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	60ba      	str	r2, [r7, #8]
 8002572:	781a      	ldrb	r2, [r3, #0]
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <_write+0x48>)
 8002576:	605a      	str	r2, [r3, #4]
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	3301      	adds	r3, #1
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	429a      	cmp	r2, r3
 8002584:	dbeb      	blt.n	800255e <_write+0x12>
	}
	return len;
 8002586:	687b      	ldr	r3, [r7, #4]
}
 8002588:	4618      	mov	r0, r3
 800258a:	371c      	adds	r7, #28
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40004400 	.word	0x40004400

08002598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800259e:	4b18      	ldr	r3, [pc, #96]	; (8002600 <HAL_MspInit+0x68>)
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	4a17      	ldr	r2, [pc, #92]	; (8002600 <HAL_MspInit+0x68>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6193      	str	r3, [r2, #24]
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <HAL_MspInit+0x68>)
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <HAL_MspInit+0x68>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	4a11      	ldr	r2, [pc, #68]	; (8002600 <HAL_MspInit+0x68>)
 80025bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c0:	61d3      	str	r3, [r2, #28]
 80025c2:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <HAL_MspInit+0x68>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	210f      	movs	r1, #15
 80025d2:	f06f 0001 	mvn.w	r0, #1
 80025d6:	f000 fa70 	bl	8002aba <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_MspInit+0x6c>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	4a04      	ldr	r2, [pc, #16]	; (8002604 <HAL_MspInit+0x6c>)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	40010000 	.word	0x40010000

08002608 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08e      	sub	sp, #56	; 0x38
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800261e:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <HAL_InitTick+0xe8>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4a33      	ldr	r2, [pc, #204]	; (80026f0 <HAL_InitTick+0xe8>)
 8002624:	f043 0304 	orr.w	r3, r3, #4
 8002628:	61d3      	str	r3, [r2, #28]
 800262a:	4b31      	ldr	r3, [pc, #196]	; (80026f0 <HAL_InitTick+0xe8>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002636:	f107 0210 	add.w	r2, r7, #16
 800263a:	f107 0314 	add.w	r3, r7, #20
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f000 fe43 	bl	80032cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d103      	bne.n	8002658 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002650:	f000 fe28 	bl	80032a4 <HAL_RCC_GetPCLK1Freq>
 8002654:	6378      	str	r0, [r7, #52]	; 0x34
 8002656:	e004      	b.n	8002662 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002658:	f000 fe24 	bl	80032a4 <HAL_RCC_GetPCLK1Freq>
 800265c:	4603      	mov	r3, r0
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002664:	4a23      	ldr	r2, [pc, #140]	; (80026f4 <HAL_InitTick+0xec>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0c9b      	lsrs	r3, r3, #18
 800266c:	3b01      	subs	r3, #1
 800266e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002670:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <HAL_InitTick+0xf0>)
 8002672:	4a22      	ldr	r2, [pc, #136]	; (80026fc <HAL_InitTick+0xf4>)
 8002674:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <HAL_InitTick+0xf0>)
 8002678:	f240 32e7 	movw	r2, #999	; 0x3e7
 800267c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800267e:	4a1e      	ldr	r2, [pc, #120]	; (80026f8 <HAL_InitTick+0xf0>)
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002684:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <HAL_InitTick+0xf0>)
 8002686:	2200      	movs	r2, #0
 8002688:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268a:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_InitTick+0xf0>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002690:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_InitTick+0xf0>)
 8002692:	2200      	movs	r2, #0
 8002694:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002696:	4818      	ldr	r0, [pc, #96]	; (80026f8 <HAL_InitTick+0xf0>)
 8002698:	f000 fe66 	bl	8003368 <HAL_TIM_Base_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80026a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d11b      	bne.n	80026e2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80026aa:	4813      	ldr	r0, [pc, #76]	; (80026f8 <HAL_InitTick+0xf0>)
 80026ac:	f000 feb4 	bl	8003418 <HAL_TIM_Base_Start_IT>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80026b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d111      	bne.n	80026e2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80026be:	201e      	movs	r0, #30
 80026c0:	f000 fa17 	bl	8002af2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b0f      	cmp	r3, #15
 80026c8:	d808      	bhi.n	80026dc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80026ca:	2200      	movs	r2, #0
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	201e      	movs	r0, #30
 80026d0:	f000 f9f3 	bl	8002aba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026d4:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <HAL_InitTick+0xf8>)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	e002      	b.n	80026e2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80026e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3738      	adds	r7, #56	; 0x38
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	431bde83 	.word	0x431bde83
 80026f8:	200008f8 	.word	0x200008f8
 80026fc:	40000800 	.word	0x40000800
 8002700:	200000a0 	.word	0x200000a0

08002704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002708:	e7fe      	b.n	8002708 <NMI_Handler+0x4>

0800270a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800270e:	e7fe      	b.n	800270e <HardFault_Handler+0x4>

08002710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002714:	e7fe      	b.n	8002714 <MemManage_Handler+0x4>

08002716 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800271a:	e7fe      	b.n	800271a <BusFault_Handler+0x4>

0800271c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002720:	e7fe      	b.n	8002720 <UsageFault_Handler+0x4>

08002722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
	...

08002730 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <TIM4_IRQHandler+0x10>)
 8002736:	f000 fec1 	bl	80034bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	200008f8 	.word	0x200008f8

08002744 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	e00a      	b.n	800276c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002756:	f3af 8000 	nop.w
 800275a:	4601      	mov	r1, r0
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	60ba      	str	r2, [r7, #8]
 8002762:	b2ca      	uxtb	r2, r1
 8002764:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3301      	adds	r3, #1
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	dbf0      	blt.n	8002756 <_read+0x12>
  }

  return len;
 8002774:	687b      	ldr	r3, [r7, #4]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <_close>:
  }
  return len;
}

int _close(int file)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027a4:	605a      	str	r2, [r3, #4]
  return 0;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <_isatty>:

int _isatty(int file)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027ba:	2301      	movs	r3, #1
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
	...

080027e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e8:	4a14      	ldr	r2, [pc, #80]	; (800283c <_sbrk+0x5c>)
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <_sbrk+0x60>)
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <_sbrk+0x64>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <_sbrk+0x64>)
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <_sbrk+0x68>)
 8002800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <_sbrk+0x64>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	429a      	cmp	r2, r3
 800280e:	d207      	bcs.n	8002820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002810:	f004 fccc 	bl	80071ac <__errno>
 8002814:	4603      	mov	r3, r0
 8002816:	220c      	movs	r2, #12
 8002818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
 800281e:	e009      	b.n	8002834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <_sbrk+0x64>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002826:	4b07      	ldr	r3, [pc, #28]	; (8002844 <_sbrk+0x64>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	4a05      	ldr	r2, [pc, #20]	; (8002844 <_sbrk+0x64>)
 8002830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20005000 	.word	0x20005000
 8002840:	00000400 	.word	0x00000400
 8002844:	20000940 	.word	0x20000940
 8002848:	200023e0 	.word	0x200023e0

0800284c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002858:	f7ff fff8 	bl	800284c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800285c:	480b      	ldr	r0, [pc, #44]	; (800288c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800285e:	490c      	ldr	r1, [pc, #48]	; (8002890 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002860:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002864:	e002      	b.n	800286c <LoopCopyDataInit>

08002866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800286a:	3304      	adds	r3, #4

0800286c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800286c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800286e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002870:	d3f9      	bcc.n	8002866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002872:	4a09      	ldr	r2, [pc, #36]	; (8002898 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002874:	4c09      	ldr	r4, [pc, #36]	; (800289c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002878:	e001      	b.n	800287e <LoopFillZerobss>

0800287a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800287a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800287c:	3204      	adds	r2, #4

0800287e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800287e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002880:	d3fb      	bcc.n	800287a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002882:	f004 fd8f 	bl	80073a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002886:	f7fe fc69 	bl	800115c <main>
  bx lr
 800288a:	4770      	bx	lr
  ldr r0, =_sdata
 800288c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002890:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8002894:	08008570 	.word	0x08008570
  ldr r2, =_sbss
 8002898:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 800289c:	200023e0 	.word	0x200023e0

080028a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028a0:	e7fe      	b.n	80028a0 <ADC1_2_IRQHandler>
	...

080028a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028a8:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_Init+0x28>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_Init+0x28>)
 80028ae:	f043 0310 	orr.w	r3, r3, #16
 80028b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b4:	2003      	movs	r0, #3
 80028b6:	f000 f8f5 	bl	8002aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ba:	200f      	movs	r0, #15
 80028bc:	f7ff fea4 	bl	8002608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028c0:	f7ff fe6a 	bl	8002598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40022000 	.word	0x40022000

080028d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_IncTick+0x1c>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_IncTick+0x20>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4413      	add	r3, r2
 80028e0:	4a03      	ldr	r2, [pc, #12]	; (80028f0 <HAL_IncTick+0x20>)
 80028e2:	6013      	str	r3, [r2, #0]
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	200000a4 	.word	0x200000a4
 80028f0:	20000944 	.word	0x20000944

080028f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return uwTick;
 80028f8:	4b02      	ldr	r3, [pc, #8]	; (8002904 <HAL_GetTick+0x10>)
 80028fa:	681b      	ldr	r3, [r3, #0]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	20000944 	.word	0x20000944

08002908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002910:	f7ff fff0 	bl	80028f4 <HAL_GetTick>
 8002914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d005      	beq.n	800292e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <HAL_Delay+0x44>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800292e:	bf00      	nop
 8002930:	f7ff ffe0 	bl	80028f4 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d8f7      	bhi.n	8002930 <HAL_Delay+0x28>
  {
  }
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200000a4 	.word	0x200000a4

08002950 <__NVIC_SetPriorityGrouping>:
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <__NVIC_SetPriorityGrouping+0x44>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800296c:	4013      	ands	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800297c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002982:	4a04      	ldr	r2, [pc, #16]	; (8002994 <__NVIC_SetPriorityGrouping+0x44>)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	60d3      	str	r3, [r2, #12]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <__NVIC_GetPriorityGrouping>:
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <__NVIC_GetPriorityGrouping+0x18>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	f003 0307 	and.w	r3, r3, #7
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_EnableIRQ>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	db0b      	blt.n	80029de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	f003 021f 	and.w	r2, r3, #31
 80029cc:	4906      	ldr	r1, [pc, #24]	; (80029e8 <__NVIC_EnableIRQ+0x34>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2001      	movs	r0, #1
 80029d6:	fa00 f202 	lsl.w	r2, r0, r2
 80029da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	e000e100 	.word	0xe000e100

080029ec <__NVIC_SetPriority>:
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	6039      	str	r1, [r7, #0]
 80029f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	db0a      	blt.n	8002a16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	490c      	ldr	r1, [pc, #48]	; (8002a38 <__NVIC_SetPriority+0x4c>)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	0112      	lsls	r2, r2, #4
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	440b      	add	r3, r1
 8002a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a14:	e00a      	b.n	8002a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	4908      	ldr	r1, [pc, #32]	; (8002a3c <__NVIC_SetPriority+0x50>)
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	3b04      	subs	r3, #4
 8002a24:	0112      	lsls	r2, r2, #4
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	440b      	add	r3, r1
 8002a2a:	761a      	strb	r2, [r3, #24]
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000e100 	.word	0xe000e100
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b089      	sub	sp, #36	; 0x24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f1c3 0307 	rsb	r3, r3, #7
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	bf28      	it	cs
 8002a5e:	2304      	movcs	r3, #4
 8002a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3304      	adds	r3, #4
 8002a66:	2b06      	cmp	r3, #6
 8002a68:	d902      	bls.n	8002a70 <NVIC_EncodePriority+0x30>
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3b03      	subs	r3, #3
 8002a6e:	e000      	b.n	8002a72 <NVIC_EncodePriority+0x32>
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a74:	f04f 32ff 	mov.w	r2, #4294967295
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	401a      	ands	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a88:	f04f 31ff 	mov.w	r1, #4294967295
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	43d9      	mvns	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a98:	4313      	orrs	r3, r2
         );
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3724      	adds	r7, #36	; 0x24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff4f 	bl	8002950 <__NVIC_SetPriorityGrouping>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002acc:	f7ff ff64 	bl	8002998 <__NVIC_GetPriorityGrouping>
 8002ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	6978      	ldr	r0, [r7, #20]
 8002ad8:	f7ff ffb2 	bl	8002a40 <NVIC_EncodePriority>
 8002adc:	4602      	mov	r2, r0
 8002ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff81 	bl	80029ec <__NVIC_SetPriority>
}
 8002aea:	bf00      	nop
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4603      	mov	r3, r0
 8002afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff57 	bl	80029b4 <__NVIC_EnableIRQ>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e272      	b.n	8003008 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 8087 	beq.w	8002c3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b30:	4b92      	ldr	r3, [pc, #584]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d00c      	beq.n	8002b56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b3c:	4b8f      	ldr	r3, [pc, #572]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 030c 	and.w	r3, r3, #12
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d112      	bne.n	8002b6e <HAL_RCC_OscConfig+0x5e>
 8002b48:	4b8c      	ldr	r3, [pc, #560]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b54:	d10b      	bne.n	8002b6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b56:	4b89      	ldr	r3, [pc, #548]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d06c      	beq.n	8002c3c <HAL_RCC_OscConfig+0x12c>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d168      	bne.n	8002c3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e24c      	b.n	8003008 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b76:	d106      	bne.n	8002b86 <HAL_RCC_OscConfig+0x76>
 8002b78:	4b80      	ldr	r3, [pc, #512]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a7f      	ldr	r2, [pc, #508]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b82:	6013      	str	r3, [r2, #0]
 8002b84:	e02e      	b.n	8002be4 <HAL_RCC_OscConfig+0xd4>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x98>
 8002b8e:	4b7b      	ldr	r3, [pc, #492]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a7a      	ldr	r2, [pc, #488]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	4b78      	ldr	r3, [pc, #480]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a77      	ldr	r2, [pc, #476]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e01d      	b.n	8002be4 <HAL_RCC_OscConfig+0xd4>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCC_OscConfig+0xbc>
 8002bb2:	4b72      	ldr	r3, [pc, #456]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a71      	ldr	r2, [pc, #452]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	4b6f      	ldr	r3, [pc, #444]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a6e      	ldr	r2, [pc, #440]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	e00b      	b.n	8002be4 <HAL_RCC_OscConfig+0xd4>
 8002bcc:	4b6b      	ldr	r3, [pc, #428]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a6a      	ldr	r2, [pc, #424]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	4b68      	ldr	r3, [pc, #416]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a67      	ldr	r2, [pc, #412]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d013      	beq.n	8002c14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7ff fe82 	bl	80028f4 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf4:	f7ff fe7e 	bl	80028f4 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e200      	b.n	8003008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c06:	4b5d      	ldr	r3, [pc, #372]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0xe4>
 8002c12:	e014      	b.n	8002c3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7ff fe6e 	bl	80028f4 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7ff fe6a 	bl	80028f4 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e1ec      	b.n	8003008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2e:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x10c>
 8002c3a:	e000      	b.n	8002c3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d063      	beq.n	8002d12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c4a:	4b4c      	ldr	r3, [pc, #304]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00b      	beq.n	8002c6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c56:	4b49      	ldr	r3, [pc, #292]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d11c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x18c>
 8002c62:	4b46      	ldr	r3, [pc, #280]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d116      	bne.n	8002c9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6e:	4b43      	ldr	r3, [pc, #268]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <HAL_RCC_OscConfig+0x176>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d001      	beq.n	8002c86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e1c0      	b.n	8003008 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c86:	4b3d      	ldr	r3, [pc, #244]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4939      	ldr	r1, [pc, #228]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9a:	e03a      	b.n	8002d12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d020      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca4:	4b36      	ldr	r3, [pc, #216]	; (8002d80 <HAL_RCC_OscConfig+0x270>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002caa:	f7ff fe23 	bl	80028f4 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb2:	f7ff fe1f 	bl	80028f4 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e1a1      	b.n	8003008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc4:	4b2d      	ldr	r3, [pc, #180]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd0:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4927      	ldr	r1, [pc, #156]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]
 8002ce4:	e015      	b.n	8002d12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce6:	4b26      	ldr	r3, [pc, #152]	; (8002d80 <HAL_RCC_OscConfig+0x270>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7ff fe02 	bl	80028f4 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf4:	f7ff fdfe 	bl	80028f4 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e180      	b.n	8003008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d06:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d03a      	beq.n	8002d94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d019      	beq.n	8002d5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d26:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2c:	f7ff fde2 	bl	80028f4 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d34:	f7ff fdde 	bl	80028f4 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e160      	b.n	8003008 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d46:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <HAL_RCC_OscConfig+0x26c>)
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d52:	2001      	movs	r0, #1
 8002d54:	f000 faea 	bl	800332c <RCC_Delay>
 8002d58:	e01c      	b.n	8002d94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d60:	f7ff fdc8 	bl	80028f4 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d66:	e00f      	b.n	8002d88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d68:	f7ff fdc4 	bl	80028f4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d908      	bls.n	8002d88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e146      	b.n	8003008 <HAL_RCC_OscConfig+0x4f8>
 8002d7a:	bf00      	nop
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	42420000 	.word	0x42420000
 8002d84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d88:	4b92      	ldr	r3, [pc, #584]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1e9      	bne.n	8002d68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80a6 	beq.w	8002eee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002da2:	2300      	movs	r3, #0
 8002da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002da6:	4b8b      	ldr	r3, [pc, #556]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10d      	bne.n	8002dce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db2:	4b88      	ldr	r3, [pc, #544]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	4a87      	ldr	r2, [pc, #540]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	61d3      	str	r3, [r2, #28]
 8002dbe:	4b85      	ldr	r3, [pc, #532]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dce:	4b82      	ldr	r3, [pc, #520]	; (8002fd8 <HAL_RCC_OscConfig+0x4c8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d118      	bne.n	8002e0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dda:	4b7f      	ldr	r3, [pc, #508]	; (8002fd8 <HAL_RCC_OscConfig+0x4c8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a7e      	ldr	r2, [pc, #504]	; (8002fd8 <HAL_RCC_OscConfig+0x4c8>)
 8002de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de6:	f7ff fd85 	bl	80028f4 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dee:	f7ff fd81 	bl	80028f4 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b64      	cmp	r3, #100	; 0x64
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e103      	b.n	8003008 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e00:	4b75      	ldr	r3, [pc, #468]	; (8002fd8 <HAL_RCC_OscConfig+0x4c8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d106      	bne.n	8002e22 <HAL_RCC_OscConfig+0x312>
 8002e14:	4b6f      	ldr	r3, [pc, #444]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	4a6e      	ldr	r2, [pc, #440]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	6213      	str	r3, [r2, #32]
 8002e20:	e02d      	b.n	8002e7e <HAL_RCC_OscConfig+0x36e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x334>
 8002e2a:	4b6a      	ldr	r3, [pc, #424]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	4a69      	ldr	r2, [pc, #420]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	f023 0301 	bic.w	r3, r3, #1
 8002e34:	6213      	str	r3, [r2, #32]
 8002e36:	4b67      	ldr	r3, [pc, #412]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	4a66      	ldr	r2, [pc, #408]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e3c:	f023 0304 	bic.w	r3, r3, #4
 8002e40:	6213      	str	r3, [r2, #32]
 8002e42:	e01c      	b.n	8002e7e <HAL_RCC_OscConfig+0x36e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	2b05      	cmp	r3, #5
 8002e4a:	d10c      	bne.n	8002e66 <HAL_RCC_OscConfig+0x356>
 8002e4c:	4b61      	ldr	r3, [pc, #388]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	4a60      	ldr	r2, [pc, #384]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e52:	f043 0304 	orr.w	r3, r3, #4
 8002e56:	6213      	str	r3, [r2, #32]
 8002e58:	4b5e      	ldr	r3, [pc, #376]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4a5d      	ldr	r2, [pc, #372]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6213      	str	r3, [r2, #32]
 8002e64:	e00b      	b.n	8002e7e <HAL_RCC_OscConfig+0x36e>
 8002e66:	4b5b      	ldr	r3, [pc, #364]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	4a5a      	ldr	r2, [pc, #360]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	6213      	str	r3, [r2, #32]
 8002e72:	4b58      	ldr	r3, [pc, #352]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	4a57      	ldr	r2, [pc, #348]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	f023 0304 	bic.w	r3, r3, #4
 8002e7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d015      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e86:	f7ff fd35 	bl	80028f4 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8c:	e00a      	b.n	8002ea4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8e:	f7ff fd31 	bl	80028f4 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e0b1      	b.n	8003008 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea4:	4b4b      	ldr	r3, [pc, #300]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0ee      	beq.n	8002e8e <HAL_RCC_OscConfig+0x37e>
 8002eb0:	e014      	b.n	8002edc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb2:	f7ff fd1f 	bl	80028f4 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7ff fd1b 	bl	80028f4 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e09b      	b.n	8003008 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed0:	4b40      	ldr	r3, [pc, #256]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1ee      	bne.n	8002eba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002edc:	7dfb      	ldrb	r3, [r7, #23]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d105      	bne.n	8002eee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee2:	4b3c      	ldr	r3, [pc, #240]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	4a3b      	ldr	r2, [pc, #236]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8087 	beq.w	8003006 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ef8:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d061      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d146      	bne.n	8002f9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0c:	4b33      	ldr	r3, [pc, #204]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f12:	f7ff fcef 	bl	80028f4 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1a:	f7ff fceb 	bl	80028f4 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e06d      	b.n	8003008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2c:	4b29      	ldr	r3, [pc, #164]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f0      	bne.n	8002f1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f40:	d108      	bne.n	8002f54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f42:	4b24      	ldr	r3, [pc, #144]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	4921      	ldr	r1, [pc, #132]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f54:	4b1f      	ldr	r3, [pc, #124]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a19      	ldr	r1, [r3, #32]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	430b      	orrs	r3, r1
 8002f66:	491b      	ldr	r1, [pc, #108]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f72:	f7ff fcbf 	bl	80028f4 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7ff fcbb 	bl	80028f4 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e03d      	b.n	8003008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x46a>
 8002f98:	e035      	b.n	8003006 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <HAL_RCC_OscConfig+0x4cc>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7ff fca8 	bl	80028f4 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7ff fca4 	bl	80028f4 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e026      	b.n	8003008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x498>
 8002fc6:	e01e      	b.n	8003006 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e019      	b.n	8003008 <HAL_RCC_OscConfig+0x4f8>
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40007000 	.word	0x40007000
 8002fdc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_RCC_OscConfig+0x500>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d106      	bne.n	8003002 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d001      	beq.n	8003006 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000

08003014 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0d0      	b.n	80031ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003028:	4b6a      	ldr	r3, [pc, #424]	; (80031d4 <HAL_RCC_ClockConfig+0x1c0>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d910      	bls.n	8003058 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b67      	ldr	r3, [pc, #412]	; (80031d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 0207 	bic.w	r2, r3, #7
 800303e:	4965      	ldr	r1, [pc, #404]	; (80031d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	4b63      	ldr	r3, [pc, #396]	; (80031d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0b8      	b.n	80031ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d020      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003070:	4b59      	ldr	r3, [pc, #356]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4a58      	ldr	r2, [pc, #352]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800307a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003088:	4b53      	ldr	r3, [pc, #332]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4a52      	ldr	r2, [pc, #328]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003092:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003094:	4b50      	ldr	r3, [pc, #320]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	494d      	ldr	r1, [pc, #308]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d040      	beq.n	8003134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d107      	bne.n	80030ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ba:	4b47      	ldr	r3, [pc, #284]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d115      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e07f      	b.n	80031ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d107      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d2:	4b41      	ldr	r3, [pc, #260]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e073      	b.n	80031ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e2:	4b3d      	ldr	r3, [pc, #244]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e06b      	b.n	80031ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f2:	4b39      	ldr	r3, [pc, #228]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f023 0203 	bic.w	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4936      	ldr	r1, [pc, #216]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003104:	f7ff fbf6 	bl	80028f4 <HAL_GetTick>
 8003108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310a:	e00a      	b.n	8003122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310c:	f7ff fbf2 	bl	80028f4 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	; 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e053      	b.n	80031ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	4b2d      	ldr	r3, [pc, #180]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 020c 	and.w	r2, r3, #12
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	429a      	cmp	r2, r3
 8003132:	d1eb      	bne.n	800310c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003134:	4b27      	ldr	r3, [pc, #156]	; (80031d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d210      	bcs.n	8003164 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 0207 	bic.w	r2, r3, #7
 800314a:	4922      	ldr	r1, [pc, #136]	; (80031d4 <HAL_RCC_ClockConfig+0x1c0>)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003152:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d001      	beq.n	8003164 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e032      	b.n	80031ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003170:	4b19      	ldr	r3, [pc, #100]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4916      	ldr	r1, [pc, #88]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	4313      	orrs	r3, r2
 8003180:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800318e:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	490e      	ldr	r1, [pc, #56]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031a2:	f000 f821 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 80031a6:	4602      	mov	r2, r0
 80031a8:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	490a      	ldr	r1, [pc, #40]	; (80031dc <HAL_RCC_ClockConfig+0x1c8>)
 80031b4:	5ccb      	ldrb	r3, [r1, r3]
 80031b6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ba:	4a09      	ldr	r2, [pc, #36]	; (80031e0 <HAL_RCC_ClockConfig+0x1cc>)
 80031bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <HAL_RCC_ClockConfig+0x1d0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fa20 	bl	8002608 <HAL_InitTick>

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40022000 	.word	0x40022000
 80031d8:	40021000 	.word	0x40021000
 80031dc:	080084a4 	.word	0x080084a4
 80031e0:	2000009c 	.word	0x2000009c
 80031e4:	200000a0 	.word	0x200000a0

080031e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	2300      	movs	r3, #0
 80031fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003202:	4b1e      	ldr	r3, [pc, #120]	; (800327c <HAL_RCC_GetSysClockFreq+0x94>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b04      	cmp	r3, #4
 8003210:	d002      	beq.n	8003218 <HAL_RCC_GetSysClockFreq+0x30>
 8003212:	2b08      	cmp	r3, #8
 8003214:	d003      	beq.n	800321e <HAL_RCC_GetSysClockFreq+0x36>
 8003216:	e027      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_RCC_GetSysClockFreq+0x98>)
 800321a:	613b      	str	r3, [r7, #16]
      break;
 800321c:	e027      	b.n	800326e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	0c9b      	lsrs	r3, r3, #18
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	4a17      	ldr	r2, [pc, #92]	; (8003284 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003228:	5cd3      	ldrb	r3, [r2, r3]
 800322a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d010      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003236:	4b11      	ldr	r3, [pc, #68]	; (800327c <HAL_RCC_GetSysClockFreq+0x94>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	0c5b      	lsrs	r3, r3, #17
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	4a11      	ldr	r2, [pc, #68]	; (8003288 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003242:	5cd3      	ldrb	r3, [r2, r3]
 8003244:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a0d      	ldr	r2, [pc, #52]	; (8003280 <HAL_RCC_GetSysClockFreq+0x98>)
 800324a:	fb03 f202 	mul.w	r2, r3, r2
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	fbb2 f3f3 	udiv	r3, r2, r3
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	e004      	b.n	8003262 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a0c      	ldr	r2, [pc, #48]	; (800328c <HAL_RCC_GetSysClockFreq+0xa4>)
 800325c:	fb02 f303 	mul.w	r3, r2, r3
 8003260:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	613b      	str	r3, [r7, #16]
      break;
 8003266:	e002      	b.n	800326e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_RCC_GetSysClockFreq+0x98>)
 800326a:	613b      	str	r3, [r7, #16]
      break;
 800326c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800326e:	693b      	ldr	r3, [r7, #16]
}
 8003270:	4618      	mov	r0, r3
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40021000 	.word	0x40021000
 8003280:	007a1200 	.word	0x007a1200
 8003284:	080084bc 	.word	0x080084bc
 8003288:	080084cc 	.word	0x080084cc
 800328c:	003d0900 	.word	0x003d0900

08003290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003294:	4b02      	ldr	r3, [pc, #8]	; (80032a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003296:	681b      	ldr	r3, [r3, #0]
}
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr
 80032a0:	2000009c 	.word	0x2000009c

080032a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032a8:	f7ff fff2 	bl	8003290 <HAL_RCC_GetHCLKFreq>
 80032ac:	4602      	mov	r2, r0
 80032ae:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	4903      	ldr	r1, [pc, #12]	; (80032c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ba:	5ccb      	ldrb	r3, [r1, r3]
 80032bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40021000 	.word	0x40021000
 80032c8:	080084b4 	.word	0x080084b4

080032cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	220f      	movs	r2, #15
 80032da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032dc:	4b11      	ldr	r3, [pc, #68]	; (8003324 <HAL_RCC_GetClockConfig+0x58>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0203 	and.w	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <HAL_RCC_GetClockConfig+0x58>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_RCC_GetClockConfig+0x58>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003300:	4b08      	ldr	r3, [pc, #32]	; (8003324 <HAL_RCC_GetClockConfig+0x58>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	08db      	lsrs	r3, r3, #3
 8003306:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800330e:	4b06      	ldr	r3, [pc, #24]	; (8003328 <HAL_RCC_GetClockConfig+0x5c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0207 	and.w	r2, r3, #7
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	40021000 	.word	0x40021000
 8003328:	40022000 	.word	0x40022000

0800332c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003334:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <RCC_Delay+0x34>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <RCC_Delay+0x38>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0a5b      	lsrs	r3, r3, #9
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	fb02 f303 	mul.w	r3, r2, r3
 8003346:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003348:	bf00      	nop
  }
  while (Delay --);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1e5a      	subs	r2, r3, #1
 800334e:	60fa      	str	r2, [r7, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f9      	bne.n	8003348 <RCC_Delay+0x1c>
}
 8003354:	bf00      	nop
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr
 8003360:	2000009c 	.word	0x2000009c
 8003364:	10624dd3 	.word	0x10624dd3

08003368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e041      	b.n	80033fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f839 	bl	8003406 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f000 f9b4 	bl	8003714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b01      	cmp	r3, #1
 800342a:	d001      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e03a      	b.n	80034a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a18      	ldr	r2, [pc, #96]	; (80034b0 <HAL_TIM_Base_Start_IT+0x98>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00e      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x58>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345a:	d009      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x58>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a14      	ldr	r2, [pc, #80]	; (80034b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x58>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a13      	ldr	r2, [pc, #76]	; (80034b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d111      	bne.n	8003494 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b06      	cmp	r3, #6
 8003480:	d010      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003492:	e007      	b.n	80034a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr
 80034b0:	40012c00 	.word	0x40012c00
 80034b4:	40000400 	.word	0x40000400
 80034b8:	40000800 	.word	0x40000800

080034bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d122      	bne.n	8003518 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d11b      	bne.n	8003518 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0202 	mvn.w	r2, #2
 80034e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f8ed 	bl	80036de <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f8e0 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f8ef 	bl	80036f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b04      	cmp	r3, #4
 8003524:	d122      	bne.n	800356c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b04      	cmp	r3, #4
 8003532:	d11b      	bne.n	800356c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0204 	mvn.w	r2, #4
 800353c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2202      	movs	r2, #2
 8003542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f8c3 	bl	80036de <HAL_TIM_IC_CaptureCallback>
 8003558:	e005      	b.n	8003566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8b6 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f8c5 	bl	80036f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b08      	cmp	r3, #8
 8003578:	d122      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b08      	cmp	r3, #8
 8003586:	d11b      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0208 	mvn.w	r2, #8
 8003590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2204      	movs	r2, #4
 8003596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f899 	bl	80036de <HAL_TIM_IC_CaptureCallback>
 80035ac:	e005      	b.n	80035ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f88c 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f89b 	bl	80036f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d122      	bne.n	8003614 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b10      	cmp	r3, #16
 80035da:	d11b      	bne.n	8003614 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0210 	mvn.w	r2, #16
 80035e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2208      	movs	r2, #8
 80035ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f86f 	bl	80036de <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f862 	bl	80036cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f871 	bl	80036f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d10e      	bne.n	8003640 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b01      	cmp	r3, #1
 800362e:	d107      	bne.n	8003640 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0201 	mvn.w	r2, #1
 8003638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fe ff6e 	bl	800251c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	2b80      	cmp	r3, #128	; 0x80
 800364c:	d10e      	bne.n	800366c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003658:	2b80      	cmp	r3, #128	; 0x80
 800365a:	d107      	bne.n	800366c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f8bf 	bl	80037ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003676:	2b40      	cmp	r3, #64	; 0x40
 8003678:	d10e      	bne.n	8003698 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003684:	2b40      	cmp	r3, #64	; 0x40
 8003686:	d107      	bne.n	8003698 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f835 	bl	8003702 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d10e      	bne.n	80036c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d107      	bne.n	80036c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0220 	mvn.w	r2, #32
 80036bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f88a 	bl	80037d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036c4:	bf00      	nop
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr

08003702 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a29      	ldr	r2, [pc, #164]	; (80037cc <TIM_Base_SetConfig+0xb8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00b      	beq.n	8003744 <TIM_Base_SetConfig+0x30>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003732:	d007      	beq.n	8003744 <TIM_Base_SetConfig+0x30>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a26      	ldr	r2, [pc, #152]	; (80037d0 <TIM_Base_SetConfig+0xbc>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d003      	beq.n	8003744 <TIM_Base_SetConfig+0x30>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a25      	ldr	r2, [pc, #148]	; (80037d4 <TIM_Base_SetConfig+0xc0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d108      	bne.n	8003756 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a1c      	ldr	r2, [pc, #112]	; (80037cc <TIM_Base_SetConfig+0xb8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00b      	beq.n	8003776 <TIM_Base_SetConfig+0x62>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003764:	d007      	beq.n	8003776 <TIM_Base_SetConfig+0x62>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a19      	ldr	r2, [pc, #100]	; (80037d0 <TIM_Base_SetConfig+0xbc>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d003      	beq.n	8003776 <TIM_Base_SetConfig+0x62>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <TIM_Base_SetConfig+0xc0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d108      	bne.n	8003788 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800377c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a07      	ldr	r2, [pc, #28]	; (80037cc <TIM_Base_SetConfig+0xb8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d103      	bne.n	80037bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	615a      	str	r2, [r3, #20]
}
 80037c2:	bf00      	nop
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr
 80037cc:	40012c00 	.word	0x40012c00
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40000800 	.word	0x40000800

080037d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr

080037ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800380a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800380e:	2b84      	cmp	r3, #132	; 0x84
 8003810:	d005      	beq.n	800381e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003812:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4413      	add	r3, r2
 800381a:	3303      	adds	r3, #3
 800381c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800381e:	68fb      	ldr	r3, [r7, #12]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr

0800382a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003830:	f3ef 8305 	mrs	r3, IPSR
 8003834:	607b      	str	r3, [r7, #4]
  return(result);
 8003836:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf14      	ite	ne
 800383c:	2301      	movne	r3, #1
 800383e:	2300      	moveq	r3, #0
 8003840:	b2db      	uxtb	r3, r3
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003850:	f001 fcd0 	bl	80051f4 <vTaskStartScheduler>
  
  return osOK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	bd80      	pop	{r7, pc}

0800385a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800385e:	f7ff ffe4 	bl	800382a <inHandlerMode>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003868:	f001 fdec 	bl	8005444 <xTaskGetTickCountFromISR>
 800386c:	4603      	mov	r3, r0
 800386e:	e002      	b.n	8003876 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003870:	f001 fdda 	bl	8005428 <xTaskGetTickCount>
 8003874:	4603      	mov	r3, r0
  }
}
 8003876:	4618      	mov	r0, r3
 8003878:	bd80      	pop	{r7, pc}

0800387a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800387a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800387c:	b089      	sub	sp, #36	; 0x24
 800387e:	af04      	add	r7, sp, #16
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d020      	beq.n	80038ce <osThreadCreate+0x54>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01c      	beq.n	80038ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685c      	ldr	r4, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681d      	ldr	r5, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691e      	ldr	r6, [r3, #16]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff ffa8 	bl	80037fc <makeFreeRtosPriority>
 80038ac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038b6:	9202      	str	r2, [sp, #8]
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	9100      	str	r1, [sp, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	4632      	mov	r2, r6
 80038c0:	4629      	mov	r1, r5
 80038c2:	4620      	mov	r0, r4
 80038c4:	f001 fac0 	bl	8004e48 <xTaskCreateStatic>
 80038c8:	4603      	mov	r3, r0
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	e01c      	b.n	8003908 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685c      	ldr	r4, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038da:	b29e      	uxth	r6, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff ff8a 	bl	80037fc <makeFreeRtosPriority>
 80038e8:	4602      	mov	r2, r0
 80038ea:	f107 030c 	add.w	r3, r7, #12
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	9200      	str	r2, [sp, #0]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	4632      	mov	r2, r6
 80038f6:	4629      	mov	r1, r5
 80038f8:	4620      	mov	r0, r4
 80038fa:	f001 fb01 	bl	8004f00 <xTaskCreate>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b01      	cmp	r3, #1
 8003902:	d001      	beq.n	8003908 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003904:	2300      	movs	r3, #0
 8003906:	e000      	b.n	800390a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003908:	68fb      	ldr	r3, [r7, #12]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003912 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <osDelay+0x16>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	e000      	b.n	800392a <osDelay+0x18>
 8003928:	2301      	movs	r3, #1
 800392a:	4618      	mov	r0, r3
 800392c:	f001 fc2e 	bl	800518c <vTaskDelay>
  
  return osOK;
 8003930:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	460b      	mov	r3, r1
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d013      	beq.n	800397a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8003952:	7afb      	ldrb	r3, [r7, #11]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <osTimerCreate+0x20>
 8003958:	2101      	movs	r1, #1
 800395a:	e000      	b.n	800395e <osTimerCreate+0x22>
 800395c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8003966:	9201      	str	r2, [sp, #4]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	460a      	mov	r2, r1
 800396e:	2101      	movs	r1, #1
 8003970:	480b      	ldr	r0, [pc, #44]	; (80039a0 <osTimerCreate+0x64>)
 8003972:	f002 fd34 	bl	80063de <xTimerCreateStatic>
 8003976:	4603      	mov	r3, r0
 8003978:	e00e      	b.n	8003998 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800397a:	7afb      	ldrb	r3, [r7, #11]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <osTimerCreate+0x48>
 8003980:	2201      	movs	r2, #1
 8003982:	e000      	b.n	8003986 <osTimerCreate+0x4a>
 8003984:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2101      	movs	r1, #1
 8003990:	4803      	ldr	r0, [pc, #12]	; (80039a0 <osTimerCreate+0x64>)
 8003992:	f002 fd03 	bl	800639c <xTimerCreate>
 8003996:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	08008448 	.word	0x08008448

080039a4 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80039b6:	f7ff ff38 	bl	800382a <inHandlerMode>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01c      	beq.n	80039fa <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80039c0:	6839      	ldr	r1, [r7, #0]
 80039c2:	f107 0208 	add.w	r2, r7, #8
 80039c6:	f107 030c 	add.w	r3, r7, #12
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	2201      	movs	r2, #1
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f002 fb65 	bl	80060a0 <xTaskGenericNotifyFromISR>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d002      	beq.n	80039e2 <osSignalSet+0x3e>
      return 0x80000000;
 80039dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80039e0:	e019      	b.n	8003a16 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d015      	beq.n	8003a14 <osSignalSet+0x70>
 80039e8:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <osSignalSet+0x7c>)
 80039ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	e00c      	b.n	8003a14 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80039fa:	6839      	ldr	r1, [r7, #0]
 80039fc:	f107 0308 	add.w	r3, r7, #8
 8003a00:	2201      	movs	r2, #1
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f002 faa2 	bl	8005f4c <xTaskGenericNotify>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d002      	beq.n	8003a14 <osSignalSet+0x70>
    return 0x80000000;
 8003a0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a12:	e000      	b.n	8003a16 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8003a14:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	e000ed04 	.word	0xe000ed04

08003a24 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8003a24:	b590      	push	{r4, r7, lr}
 8003a26:	b089      	sub	sp, #36	; 0x24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3e:	d103      	bne.n	8003a48 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8003a40:	f04f 33ff 	mov.w	r3, #4294967295
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	e009      	b.n	8003a5c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d006      	beq.n	8003a5c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <osSignalWait+0x38>
      ticks = 1;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8003a5c:	f7ff fee5 	bl	800382a <inHandlerMode>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8003a66:	2382      	movs	r3, #130	; 0x82
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	e01b      	b.n	8003aa4 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	f107 0310 	add.w	r3, r7, #16
 8003a72:	1d1a      	adds	r2, r3, #4
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2000      	movs	r0, #0
 8003a78:	f002 fa08 	bl	8005e8c <xTaskNotifyWait>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d008      	beq.n	8003a94 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d102      	bne.n	8003a8e <osSignalWait+0x6a>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	e00a      	b.n	8003aa4 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8003a8e:	2340      	movs	r3, #64	; 0x40
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	e007      	b.n	8003aa4 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	da02      	bge.n	8003aa0 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8003a9a:	2386      	movs	r3, #134	; 0x86
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	e001      	b.n	8003aa4 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8003aa0:	2308      	movs	r3, #8
 8003aa2:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	461c      	mov	r4, r3
 8003aa8:	f107 0310 	add.w	r3, r7, #16
 8003aac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ab0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	3724      	adds	r7, #36	; 0x24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd90      	pop	{r4, r7, pc}

08003abc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d007      	beq.n	8003adc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f000 fb88 	bl	80041e8 <xQueueCreateMutexStatic>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	e003      	b.n	8003ae4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003adc:	2001      	movs	r0, #1
 8003ade:	f000 fb6b 	bl	80041b8 <xQueueCreateMutex>
 8003ae2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003af6:	2300      	movs	r3, #0
 8003af8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <osMutexWait+0x18>
    return osErrorParameter;
 8003b00:	2380      	movs	r3, #128	; 0x80
 8003b02:	e03a      	b.n	8003b7a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0e:	d103      	bne.n	8003b18 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003b10:	f04f 33ff 	mov.w	r3, #4294967295
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	e009      	b.n	8003b2c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d006      	beq.n	8003b2c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <osMutexWait+0x40>
      ticks = 1;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003b2c:	f7ff fe7d 	bl	800382a <inHandlerMode>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d017      	beq.n	8003b66 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003b36:	f107 0308 	add.w	r3, r7, #8
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 ff7e 	bl	8004a40 <xQueueReceiveFromISR>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d001      	beq.n	8003b4e <osMutexWait+0x62>
      return osErrorOS;
 8003b4a:	23ff      	movs	r3, #255	; 0xff
 8003b4c:	e015      	b.n	8003b7a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d011      	beq.n	8003b78 <osMutexWait+0x8c>
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <osMutexWait+0x98>)
 8003b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	e008      	b.n	8003b78 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003b66:	68f9      	ldr	r1, [r7, #12]
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fe5d 	bl	8004828 <xQueueSemaphoreTake>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d001      	beq.n	8003b78 <osMutexWait+0x8c>
    return osErrorOS;
 8003b74:	23ff      	movs	r3, #255	; 0xff
 8003b76:	e000      	b.n	8003b7a <osMutexWait+0x8e>
  }
  
  return osOK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	e000ed04 	.word	0xe000ed04

08003b88 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003b98:	f7ff fe47 	bl	800382a <inHandlerMode>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d016      	beq.n	8003bd0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003ba2:	f107 0308 	add.w	r3, r7, #8
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fccf 	bl	800454c <xQueueGiveFromISR>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d001      	beq.n	8003bb8 <osMutexRelease+0x30>
      return osErrorOS;
 8003bb4:	23ff      	movs	r3, #255	; 0xff
 8003bb6:	e017      	b.n	8003be8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d013      	beq.n	8003be6 <osMutexRelease+0x5e>
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <osMutexRelease+0x68>)
 8003bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	e00a      	b.n	8003be6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fb22 	bl	8004220 <xQueueGenericSend>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d001      	beq.n	8003be6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003be2:	23ff      	movs	r3, #255	; 0xff
 8003be4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003be6:	68fb      	ldr	r3, [r7, #12]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	e000ed04 	.word	0xe000ed04

08003bf4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003bf4:	b590      	push	{r4, r7, lr}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d011      	beq.n	8003c2a <osMessageCreate+0x36>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00d      	beq.n	8003c2a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6859      	ldr	r1, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	2400      	movs	r4, #0
 8003c20:	9400      	str	r4, [sp, #0]
 8003c22:	f000 f9db 	bl	8003fdc <xQueueGenericCreateStatic>
 8003c26:	4603      	mov	r3, r0
 8003c28:	e008      	b.n	8003c3c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	4619      	mov	r1, r3
 8003c36:	f000 fa48 	bl	80040ca <xQueueGenericCreate>
 8003c3a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd90      	pop	{r4, r7, pc}

08003c44 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003c50:	2300      	movs	r3, #0
 8003c52:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <osMessagePut+0x1e>
    ticks = 1;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003c62:	f7ff fde2 	bl	800382a <inHandlerMode>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d018      	beq.n	8003c9e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003c6c:	f107 0210 	add.w	r2, r7, #16
 8003c70:	f107 0108 	add.w	r1, r7, #8
 8003c74:	2300      	movs	r3, #0
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 fbd0 	bl	800441c <xQueueGenericSendFromISR>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d001      	beq.n	8003c86 <osMessagePut+0x42>
      return osErrorOS;
 8003c82:	23ff      	movs	r3, #255	; 0xff
 8003c84:	e018      	b.n	8003cb8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d014      	beq.n	8003cb6 <osMessagePut+0x72>
 8003c8c:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <osMessagePut+0x7c>)
 8003c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	e00b      	b.n	8003cb6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003c9e:	f107 0108 	add.w	r1, r7, #8
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 faba 	bl	8004220 <xQueueGenericSend>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d001      	beq.n	8003cb6 <osMessagePut+0x72>
      return osErrorOS;
 8003cb2:	23ff      	movs	r3, #255	; 0xff
 8003cb4:	e000      	b.n	8003cb8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	e000ed04 	.word	0xe000ed04

08003cc4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003cc4:	b590      	push	{r4, r7, lr}
 8003cc6:	b08b      	sub	sp, #44	; 0x2c
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10a      	bne.n	8003cf4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003cde:	2380      	movs	r3, #128	; 0x80
 8003ce0:	617b      	str	r3, [r7, #20]
    return event;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	461c      	mov	r4, r3
 8003ce6:	f107 0314 	add.w	r3, r7, #20
 8003cea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003cee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003cf2:	e054      	b.n	8003d9e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d02:	d103      	bne.n	8003d0c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003d04:	f04f 33ff 	mov.w	r3, #4294967295
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0a:	e009      	b.n	8003d20 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d006      	beq.n	8003d20 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <osMessageGet+0x5c>
      ticks = 1;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003d20:	f7ff fd83 	bl	800382a <inHandlerMode>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d01c      	beq.n	8003d64 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003d2a:	f107 0220 	add.w	r2, r7, #32
 8003d2e:	f107 0314 	add.w	r3, r7, #20
 8003d32:	3304      	adds	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	68b8      	ldr	r0, [r7, #8]
 8003d38:	f000 fe82 	bl	8004a40 <xQueueReceiveFromISR>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d102      	bne.n	8003d48 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8003d42:	2310      	movs	r3, #16
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	e001      	b.n	8003d4c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d01d      	beq.n	8003d8e <osMessageGet+0xca>
 8003d52:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <osMessageGet+0xe4>)
 8003d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	e014      	b.n	8003d8e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003d64:	f107 0314 	add.w	r3, r7, #20
 8003d68:	3304      	adds	r3, #4
 8003d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	68b8      	ldr	r0, [r7, #8]
 8003d70:	f000 fc7a 	bl	8004668 <xQueueReceive>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d102      	bne.n	8003d80 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003d7a:	2310      	movs	r3, #16
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	e006      	b.n	8003d8e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <osMessageGet+0xc6>
 8003d86:	2300      	movs	r3, #0
 8003d88:	e000      	b.n	8003d8c <osMessageGet+0xc8>
 8003d8a:	2340      	movs	r3, #64	; 0x40
 8003d8c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	461c      	mov	r4, r3
 8003d92:	f107 0314 	add.w	r3, r7, #20
 8003d96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	372c      	adds	r7, #44	; 0x2c
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd90      	pop	{r4, r7, pc}
 8003da6:	bf00      	nop
 8003da8:	e000ed04 	.word	0xe000ed04

08003dac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f103 0208 	add.w	r2, r3, #8
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f103 0208 	add.w	r2, r3, #8
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f103 0208 	add.w	r2, r3, #8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr

08003dea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr

08003e02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e02:	b480      	push	{r7}
 8003e04:	b085      	sub	sp, #20
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	601a      	str	r2, [r3, #0]
}
 8003e3e:	bf00      	nop
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5e:	d103      	bne.n	8003e68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	e00c      	b.n	8003e82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3308      	adds	r3, #8
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	e002      	b.n	8003e76 <vListInsert+0x2e>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d2f6      	bcs.n	8003e70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	601a      	str	r2, [r3, #0]
}
 8003eae:	bf00      	nop
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6892      	ldr	r2, [r2, #8]
 8003ece:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6852      	ldr	r2, [r2, #4]
 8003ed8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d103      	bne.n	8003eec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	1e5a      	subs	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr
	...

08003f0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f36:	f002 fe61 	bl	8006bfc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f42:	68f9      	ldr	r1, [r7, #12]
 8003f44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f46:	fb01 f303 	mul.w	r3, r1, r3
 8003f4a:	441a      	add	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f66:	3b01      	subs	r3, #1
 8003f68:	68f9      	ldr	r1, [r7, #12]
 8003f6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f6c:	fb01 f303 	mul.w	r3, r1, r3
 8003f70:	441a      	add	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	22ff      	movs	r2, #255	; 0xff
 8003f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	22ff      	movs	r2, #255	; 0xff
 8003f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d114      	bne.n	8003fb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01a      	beq.n	8003fca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3310      	adds	r3, #16
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f001 fbd5 	bl	8005748 <xTaskRemoveFromEventList>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d012      	beq.n	8003fca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <xQueueGenericReset+0xcc>)
 8003fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	e009      	b.n	8003fca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3310      	adds	r3, #16
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff fef6 	bl	8003dac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	3324      	adds	r3, #36	; 0x24
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff fef1 	bl	8003dac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003fca:	f002 fe47 	bl	8006c5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003fce:	2301      	movs	r3, #1
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	e000ed04 	.word	0xe000ed04

08003fdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08e      	sub	sp, #56	; 0x38
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004002:	bf00      	nop
 8004004:	e7fe      	b.n	8004004 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800401e:	bf00      	nop
 8004020:	e7fe      	b.n	8004020 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <xQueueGenericCreateStatic+0x52>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <xQueueGenericCreateStatic+0x56>
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <xQueueGenericCreateStatic+0x58>
 8004032:	2300      	movs	r3, #0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	623b      	str	r3, [r7, #32]
}
 800404a:	bf00      	nop
 800404c:	e7fe      	b.n	800404c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <xQueueGenericCreateStatic+0x7e>
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <xQueueGenericCreateStatic+0x82>
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <xQueueGenericCreateStatic+0x84>
 800405e:	2300      	movs	r3, #0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	61fb      	str	r3, [r7, #28]
}
 8004076:	bf00      	nop
 8004078:	e7fe      	b.n	8004078 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800407a:	2348      	movs	r3, #72	; 0x48
 800407c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b48      	cmp	r3, #72	; 0x48
 8004082:	d00a      	beq.n	800409a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	61bb      	str	r3, [r7, #24]
}
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00d      	beq.n	80040c0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040ac:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80040b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 f843 	bl	8004146 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80040c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3730      	adds	r7, #48	; 0x30
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b08a      	sub	sp, #40	; 0x28
 80040ce:	af02      	add	r7, sp, #8
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	4613      	mov	r3, r2
 80040d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <xQueueGenericCreate+0x2a>
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	613b      	str	r3, [r7, #16]
}
 80040f0:	bf00      	nop
 80040f2:	e7fe      	b.n	80040f2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	e004      	b.n	800410a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	fb02 f303 	mul.w	r3, r2, r3
 8004108:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	3348      	adds	r3, #72	; 0x48
 800410e:	4618      	mov	r0, r3
 8004110:	f002 fe74 	bl	8006dfc <pvPortMalloc>
 8004114:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00f      	beq.n	800413c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	3348      	adds	r3, #72	; 0x48
 8004120:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800412a:	79fa      	ldrb	r2, [r7, #7]
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	4613      	mov	r3, r2
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 f805 	bl	8004146 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800413c:	69bb      	ldr	r3, [r7, #24]
	}
 800413e:	4618      	mov	r0, r3
 8004140:	3720      	adds	r7, #32
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d103      	bne.n	8004162 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	e002      	b.n	8004168 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004174:	2101      	movs	r1, #1
 8004176:	69b8      	ldr	r0, [r7, #24]
 8004178:	f7ff fec8 	bl	8003f0c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800417c:	bf00      	nop
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00e      	beq.n	80041b0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80041a4:	2300      	movs	r3, #0
 80041a6:	2200      	movs	r2, #0
 80041a8:	2100      	movs	r1, #0
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f838 	bl	8004220 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80041c2:	2301      	movs	r3, #1
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	2300      	movs	r3, #0
 80041c8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	461a      	mov	r2, r3
 80041ce:	6939      	ldr	r1, [r7, #16]
 80041d0:	6978      	ldr	r0, [r7, #20]
 80041d2:	f7ff ff7a 	bl	80040ca <xQueueGenericCreate>
 80041d6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7ff ffd3 	bl	8004184 <prvInitialiseMutex>

		return pxNewQueue;
 80041de:	68fb      	ldr	r3, [r7, #12]
	}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	4603      	mov	r3, r0
 80041f0:	6039      	str	r1, [r7, #0]
 80041f2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80041f4:	2301      	movs	r3, #1
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2200      	movs	r2, #0
 8004204:	6939      	ldr	r1, [r7, #16]
 8004206:	6978      	ldr	r0, [r7, #20]
 8004208:	f7ff fee8 	bl	8003fdc <xQueueGenericCreateStatic>
 800420c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f7ff ffb8 	bl	8004184 <prvInitialiseMutex>

		return pxNewQueue;
 8004214:	68fb      	ldr	r3, [r7, #12]
	}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08e      	sub	sp, #56	; 0x38
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800422e:	2300      	movs	r3, #0
 8004230:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <xQueueGenericSend+0x32>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800424e:	bf00      	nop
 8004250:	e7fe      	b.n	8004250 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d103      	bne.n	8004260 <xQueueGenericSend+0x40>
 8004258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <xQueueGenericSend+0x44>
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <xQueueGenericSend+0x46>
 8004264:	2300      	movs	r3, #0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10a      	bne.n	8004280 <xQueueGenericSend+0x60>
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800427c:	bf00      	nop
 800427e:	e7fe      	b.n	800427e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d103      	bne.n	800428e <xQueueGenericSend+0x6e>
 8004286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <xQueueGenericSend+0x72>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <xQueueGenericSend+0x74>
 8004292:	2300      	movs	r3, #0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <xQueueGenericSend+0x8e>
	__asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	623b      	str	r3, [r7, #32]
}
 80042aa:	bf00      	nop
 80042ac:	e7fe      	b.n	80042ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042ae:	f001 fc0f 	bl	8005ad0 <xTaskGetSchedulerState>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d102      	bne.n	80042be <xQueueGenericSend+0x9e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <xQueueGenericSend+0xa2>
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <xQueueGenericSend+0xa4>
 80042c2:	2300      	movs	r3, #0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10a      	bne.n	80042de <xQueueGenericSend+0xbe>
	__asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	61fb      	str	r3, [r7, #28]
}
 80042da:	bf00      	nop
 80042dc:	e7fe      	b.n	80042dc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042de:	f002 fc8d 	bl	8006bfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d302      	bcc.n	80042f4 <xQueueGenericSend+0xd4>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d129      	bne.n	8004348 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042fa:	f000 fc38 	bl	8004b6e <prvCopyDataToQueue>
 80042fe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	2b00      	cmp	r3, #0
 8004306:	d010      	beq.n	800432a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	3324      	adds	r3, #36	; 0x24
 800430c:	4618      	mov	r0, r3
 800430e:	f001 fa1b 	bl	8005748 <xTaskRemoveFromEventList>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d013      	beq.n	8004340 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004318:	4b3f      	ldr	r3, [pc, #252]	; (8004418 <xQueueGenericSend+0x1f8>)
 800431a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	e00a      	b.n	8004340 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	2b00      	cmp	r3, #0
 800432e:	d007      	beq.n	8004340 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004330:	4b39      	ldr	r3, [pc, #228]	; (8004418 <xQueueGenericSend+0x1f8>)
 8004332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004340:	f002 fc8c 	bl	8006c5c <vPortExitCritical>
				return pdPASS;
 8004344:	2301      	movs	r3, #1
 8004346:	e063      	b.n	8004410 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d103      	bne.n	8004356 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800434e:	f002 fc85 	bl	8006c5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004352:	2300      	movs	r3, #0
 8004354:	e05c      	b.n	8004410 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004358:	2b00      	cmp	r3, #0
 800435a:	d106      	bne.n	800436a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800435c:	f107 0314 	add.w	r3, r7, #20
 8004360:	4618      	mov	r0, r3
 8004362:	f001 fa53 	bl	800580c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004366:	2301      	movs	r3, #1
 8004368:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800436a:	f002 fc77 	bl	8006c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800436e:	f000 ffb1 	bl	80052d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004372:	f002 fc43 	bl	8006bfc <vPortEnterCritical>
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800437c:	b25b      	sxtb	r3, r3
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004382:	d103      	bne.n	800438c <xQueueGenericSend+0x16c>
 8004384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004392:	b25b      	sxtb	r3, r3
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d103      	bne.n	80043a2 <xQueueGenericSend+0x182>
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043a2:	f002 fc5b 	bl	8006c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043a6:	1d3a      	adds	r2, r7, #4
 80043a8:	f107 0314 	add.w	r3, r7, #20
 80043ac:	4611      	mov	r1, r2
 80043ae:	4618      	mov	r0, r3
 80043b0:	f001 fa42 	bl	8005838 <xTaskCheckForTimeOut>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d124      	bne.n	8004404 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043bc:	f000 fccf 	bl	8004d5e <prvIsQueueFull>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d018      	beq.n	80043f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	3310      	adds	r3, #16
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	4611      	mov	r1, r2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 f96a 	bl	80056a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80043d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043d6:	f000 fc5a 	bl	8004c8e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80043da:	f000 ff89 	bl	80052f0 <xTaskResumeAll>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f47f af7c 	bne.w	80042de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <xQueueGenericSend+0x1f8>)
 80043e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	e772      	b.n	80042de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80043f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043fa:	f000 fc48 	bl	8004c8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043fe:	f000 ff77 	bl	80052f0 <xTaskResumeAll>
 8004402:	e76c      	b.n	80042de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004406:	f000 fc42 	bl	8004c8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800440a:	f000 ff71 	bl	80052f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800440e:	2300      	movs	r3, #0
		}
	}
}
 8004410:	4618      	mov	r0, r3
 8004412:	3738      	adds	r7, #56	; 0x38
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08e      	sub	sp, #56	; 0x38
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10a      	bne.n	800444a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004446:	bf00      	nop
 8004448:	e7fe      	b.n	8004448 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d103      	bne.n	8004458 <xQueueGenericSendFromISR+0x3c>
 8004450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <xQueueGenericSendFromISR+0x40>
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <xQueueGenericSendFromISR+0x42>
 800445c:	2300      	movs	r3, #0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	623b      	str	r3, [r7, #32]
}
 8004474:	bf00      	nop
 8004476:	e7fe      	b.n	8004476 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d103      	bne.n	8004486 <xQueueGenericSendFromISR+0x6a>
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <xQueueGenericSendFromISR+0x6e>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <xQueueGenericSendFromISR+0x70>
 800448a:	2300      	movs	r3, #0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10a      	bne.n	80044a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	61fb      	str	r3, [r7, #28]
}
 80044a2:	bf00      	nop
 80044a4:	e7fe      	b.n	80044a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044a6:	f002 fc6b 	bl	8006d80 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044aa:	f3ef 8211 	mrs	r2, BASEPRI
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	61ba      	str	r2, [r7, #24]
 80044c0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80044c2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d302      	bcc.n	80044d8 <xQueueGenericSendFromISR+0xbc>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d12c      	bne.n	8004532 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044e8:	f000 fb41 	bl	8004b6e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044ec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80044f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f4:	d112      	bne.n	800451c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d016      	beq.n	800452c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	3324      	adds	r3, #36	; 0x24
 8004502:	4618      	mov	r0, r3
 8004504:	f001 f920 	bl	8005748 <xTaskRemoveFromEventList>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00e      	beq.n	800452c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00b      	beq.n	800452c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	e007      	b.n	800452c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800451c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004520:	3301      	adds	r3, #1
 8004522:	b2db      	uxtb	r3, r3
 8004524:	b25a      	sxtb	r2, r3
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800452c:	2301      	movs	r3, #1
 800452e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004530:	e001      	b.n	8004536 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004532:	2300      	movs	r3, #0
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
 8004536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004538:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004540:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004544:	4618      	mov	r0, r3
 8004546:	3738      	adds	r7, #56	; 0x38
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08e      	sub	sp, #56	; 0x38
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	623b      	str	r3, [r7, #32]
}
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <xQueueGiveFromISR+0x48>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	61fb      	str	r3, [r7, #28]
}
 8004590:	bf00      	nop
 8004592:	e7fe      	b.n	8004592 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d103      	bne.n	80045a4 <xQueueGiveFromISR+0x58>
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <xQueueGiveFromISR+0x5c>
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <xQueueGiveFromISR+0x5e>
 80045a8:	2300      	movs	r3, #0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10a      	bne.n	80045c4 <xQueueGiveFromISR+0x78>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	61bb      	str	r3, [r7, #24]
}
 80045c0:	bf00      	nop
 80045c2:	e7fe      	b.n	80045c2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045c4:	f002 fbdc 	bl	8006d80 <vPortValidateInterruptPriority>
	__asm volatile
 80045c8:	f3ef 8211 	mrs	r2, BASEPRI
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	617a      	str	r2, [r7, #20]
 80045de:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80045e0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d22b      	bcs.n	800464c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004606:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460e:	d112      	bne.n	8004636 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	2b00      	cmp	r3, #0
 8004616:	d016      	beq.n	8004646 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	3324      	adds	r3, #36	; 0x24
 800461c:	4618      	mov	r0, r3
 800461e:	f001 f893 	bl	8005748 <xTaskRemoveFromEventList>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00e      	beq.n	8004646 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2201      	movs	r2, #1
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	e007      	b.n	8004646 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800463a:	3301      	adds	r3, #1
 800463c:	b2db      	uxtb	r3, r3
 800463e:	b25a      	sxtb	r2, r3
 8004640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004646:	2301      	movs	r3, #1
 8004648:	637b      	str	r3, [r7, #52]	; 0x34
 800464a:	e001      	b.n	8004650 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800464c:	2300      	movs	r3, #0
 800464e:	637b      	str	r3, [r7, #52]	; 0x34
 8004650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004652:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f383 8811 	msr	BASEPRI, r3
}
 800465a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800465c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800465e:	4618      	mov	r0, r3
 8004660:	3738      	adds	r7, #56	; 0x38
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08c      	sub	sp, #48	; 0x30
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004674:	2300      	movs	r3, #0
 8004676:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800467c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10a      	bne.n	8004698 <xQueueReceive+0x30>
	__asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	623b      	str	r3, [r7, #32]
}
 8004694:	bf00      	nop
 8004696:	e7fe      	b.n	8004696 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d103      	bne.n	80046a6 <xQueueReceive+0x3e>
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <xQueueReceive+0x42>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <xQueueReceive+0x44>
 80046aa:	2300      	movs	r3, #0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <xQueueReceive+0x5e>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	61fb      	str	r3, [r7, #28]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046c6:	f001 fa03 	bl	8005ad0 <xTaskGetSchedulerState>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d102      	bne.n	80046d6 <xQueueReceive+0x6e>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <xQueueReceive+0x72>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <xQueueReceive+0x74>
 80046da:	2300      	movs	r3, #0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <xQueueReceive+0x8e>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	61bb      	str	r3, [r7, #24]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80046f6:	f002 fa81 	bl	8006bfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01f      	beq.n	8004746 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004706:	68b9      	ldr	r1, [r7, #8]
 8004708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800470a:	f000 fa9a 	bl	8004c42 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	1e5a      	subs	r2, r3, #1
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00f      	beq.n	800473e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	3310      	adds	r3, #16
 8004722:	4618      	mov	r0, r3
 8004724:	f001 f810 	bl	8005748 <xTaskRemoveFromEventList>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d007      	beq.n	800473e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800472e:	4b3d      	ldr	r3, [pc, #244]	; (8004824 <xQueueReceive+0x1bc>)
 8004730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800473e:	f002 fa8d 	bl	8006c5c <vPortExitCritical>
				return pdPASS;
 8004742:	2301      	movs	r3, #1
 8004744:	e069      	b.n	800481a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d103      	bne.n	8004754 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800474c:	f002 fa86 	bl	8006c5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004750:	2300      	movs	r3, #0
 8004752:	e062      	b.n	800481a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800475a:	f107 0310 	add.w	r3, r7, #16
 800475e:	4618      	mov	r0, r3
 8004760:	f001 f854 	bl	800580c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004764:	2301      	movs	r3, #1
 8004766:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004768:	f002 fa78 	bl	8006c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800476c:	f000 fdb2 	bl	80052d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004770:	f002 fa44 	bl	8006bfc <vPortEnterCritical>
 8004774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004776:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800477a:	b25b      	sxtb	r3, r3
 800477c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004780:	d103      	bne.n	800478a <xQueueReceive+0x122>
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004790:	b25b      	sxtb	r3, r3
 8004792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004796:	d103      	bne.n	80047a0 <xQueueReceive+0x138>
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047a0:	f002 fa5c 	bl	8006c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047a4:	1d3a      	adds	r2, r7, #4
 80047a6:	f107 0310 	add.w	r3, r7, #16
 80047aa:	4611      	mov	r1, r2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f001 f843 	bl	8005838 <xTaskCheckForTimeOut>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d123      	bne.n	8004800 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ba:	f000 faba 	bl	8004d32 <prvIsQueueEmpty>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d017      	beq.n	80047f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	3324      	adds	r3, #36	; 0x24
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	4611      	mov	r1, r2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 ff6b 	bl	80056a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047d4:	f000 fa5b 	bl	8004c8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047d8:	f000 fd8a 	bl	80052f0 <xTaskResumeAll>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d189      	bne.n	80046f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80047e2:	4b10      	ldr	r3, [pc, #64]	; (8004824 <xQueueReceive+0x1bc>)
 80047e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	e780      	b.n	80046f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047f6:	f000 fa4a 	bl	8004c8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047fa:	f000 fd79 	bl	80052f0 <xTaskResumeAll>
 80047fe:	e77a      	b.n	80046f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004802:	f000 fa44 	bl	8004c8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004806:	f000 fd73 	bl	80052f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800480a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800480c:	f000 fa91 	bl	8004d32 <prvIsQueueEmpty>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	f43f af6f 	beq.w	80046f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004818:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800481a:	4618      	mov	r0, r3
 800481c:	3730      	adds	r7, #48	; 0x30
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	e000ed04 	.word	0xe000ed04

08004828 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08e      	sub	sp, #56	; 0x38
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004832:	2300      	movs	r3, #0
 8004834:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800483a:	2300      	movs	r3, #0
 800483c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	623b      	str	r3, [r7, #32]
}
 8004856:	bf00      	nop
 8004858:	e7fe      	b.n	8004858 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800485a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	61fb      	str	r3, [r7, #28]
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004878:	f001 f92a 	bl	8005ad0 <xTaskGetSchedulerState>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d102      	bne.n	8004888 <xQueueSemaphoreTake+0x60>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <xQueueSemaphoreTake+0x64>
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <xQueueSemaphoreTake+0x66>
 800488c:	2300      	movs	r3, #0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10a      	bne.n	80048a8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	61bb      	str	r3, [r7, #24]
}
 80048a4:	bf00      	nop
 80048a6:	e7fe      	b.n	80048a6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80048a8:	f002 f9a8 	bl	8006bfc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80048ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d024      	beq.n	8004902 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	1e5a      	subs	r2, r3, #1
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d104      	bne.n	80048d2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80048c8:	f001 facc 	bl	8005e64 <pvTaskIncrementMutexHeldCount>
 80048cc:	4602      	mov	r2, r0
 80048ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00f      	beq.n	80048fa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048dc:	3310      	adds	r3, #16
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 ff32 	bl	8005748 <xTaskRemoveFromEventList>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d007      	beq.n	80048fa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048ea:	4b54      	ldr	r3, [pc, #336]	; (8004a3c <xQueueSemaphoreTake+0x214>)
 80048ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048fa:	f002 f9af 	bl	8006c5c <vPortExitCritical>
				return pdPASS;
 80048fe:	2301      	movs	r3, #1
 8004900:	e097      	b.n	8004a32 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d111      	bne.n	800492c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	617b      	str	r3, [r7, #20]
}
 8004920:	bf00      	nop
 8004922:	e7fe      	b.n	8004922 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004924:	f002 f99a 	bl	8006c5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004928:	2300      	movs	r3, #0
 800492a:	e082      	b.n	8004a32 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800492c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004932:	f107 030c 	add.w	r3, r7, #12
 8004936:	4618      	mov	r0, r3
 8004938:	f000 ff68 	bl	800580c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800493c:	2301      	movs	r3, #1
 800493e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004940:	f002 f98c 	bl	8006c5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004944:	f000 fcc6 	bl	80052d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004948:	f002 f958 	bl	8006bfc <vPortEnterCritical>
 800494c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004952:	b25b      	sxtb	r3, r3
 8004954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004958:	d103      	bne.n	8004962 <xQueueSemaphoreTake+0x13a>
 800495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004968:	b25b      	sxtb	r3, r3
 800496a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496e:	d103      	bne.n	8004978 <xQueueSemaphoreTake+0x150>
 8004970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004978:	f002 f970 	bl	8006c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800497c:	463a      	mov	r2, r7
 800497e:	f107 030c 	add.w	r3, r7, #12
 8004982:	4611      	mov	r1, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f000 ff57 	bl	8005838 <xTaskCheckForTimeOut>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d132      	bne.n	80049f6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004990:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004992:	f000 f9ce 	bl	8004d32 <prvIsQueueEmpty>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d026      	beq.n	80049ea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800499c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d109      	bne.n	80049b8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80049a4:	f002 f92a 	bl	8006bfc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80049a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f001 f8ad 	bl	8005b0c <xTaskPriorityInherit>
 80049b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80049b4:	f002 f952 	bl	8006c5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ba:	3324      	adds	r3, #36	; 0x24
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	4611      	mov	r1, r2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fe71 	bl	80056a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049c8:	f000 f961 	bl	8004c8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049cc:	f000 fc90 	bl	80052f0 <xTaskResumeAll>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f47f af68 	bne.w	80048a8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80049d8:	4b18      	ldr	r3, [pc, #96]	; (8004a3c <xQueueSemaphoreTake+0x214>)
 80049da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	e75e      	b.n	80048a8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80049ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049ec:	f000 f94f 	bl	8004c8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049f0:	f000 fc7e 	bl	80052f0 <xTaskResumeAll>
 80049f4:	e758      	b.n	80048a8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80049f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049f8:	f000 f949 	bl	8004c8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049fc:	f000 fc78 	bl	80052f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a02:	f000 f996 	bl	8004d32 <prvIsQueueEmpty>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f43f af4d 	beq.w	80048a8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00d      	beq.n	8004a30 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004a14:	f002 f8f2 	bl	8006bfc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004a18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a1a:	f000 f891 	bl	8004b40 <prvGetDisinheritPriorityAfterTimeout>
 8004a1e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a26:	4618      	mov	r0, r3
 8004a28:	f001 f97c 	bl	8005d24 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004a2c:	f002 f916 	bl	8006c5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3738      	adds	r7, #56	; 0x38
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	e000ed04 	.word	0xe000ed04

08004a40 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08e      	sub	sp, #56	; 0x38
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10a      	bne.n	8004a6c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	623b      	str	r3, [r7, #32]
}
 8004a68:	bf00      	nop
 8004a6a:	e7fe      	b.n	8004a6a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d103      	bne.n	8004a7a <xQueueReceiveFromISR+0x3a>
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <xQueueReceiveFromISR+0x3e>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <xQueueReceiveFromISR+0x40>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	61fb      	str	r3, [r7, #28]
}
 8004a96:	bf00      	nop
 8004a98:	e7fe      	b.n	8004a98 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a9a:	f002 f971 	bl	8006d80 <vPortValidateInterruptPriority>
	__asm volatile
 8004a9e:	f3ef 8211 	mrs	r2, BASEPRI
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	61ba      	str	r2, [r7, #24]
 8004ab4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004ab6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d02f      	beq.n	8004b26 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ad4:	f000 f8b5 	bl	8004c42 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	1e5a      	subs	r2, r3, #1
 8004adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ade:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004ae0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae8:	d112      	bne.n	8004b10 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d016      	beq.n	8004b20 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	3310      	adds	r3, #16
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fe26 	bl	8005748 <xTaskRemoveFromEventList>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00e      	beq.n	8004b20 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00b      	beq.n	8004b20 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	e007      	b.n	8004b20 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b14:	3301      	adds	r3, #1
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	b25a      	sxtb	r2, r3
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004b20:	2301      	movs	r3, #1
 8004b22:	637b      	str	r3, [r7, #52]	; 0x34
 8004b24:	e001      	b.n	8004b2a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004b26:	2300      	movs	r3, #0
 8004b28:	637b      	str	r3, [r7, #52]	; 0x34
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f383 8811 	msr	BASEPRI, r3
}
 8004b34:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3738      	adds	r7, #56	; 0x38
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d006      	beq.n	8004b5e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f1c3 0307 	rsb	r3, r3, #7
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	e001      	b.n	8004b62 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004b62:	68fb      	ldr	r3, [r7, #12]
	}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bc80      	pop	{r7}
 8004b6c:	4770      	bx	lr

08004b6e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b086      	sub	sp, #24
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10d      	bne.n	8004ba8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d14d      	bne.n	8004c30 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f001 f83d 	bl	8005c18 <xTaskPriorityDisinherit>
 8004b9e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	e043      	b.n	8004c30 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d119      	bne.n	8004be2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6898      	ldr	r0, [r3, #8]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	f002 fc1a 	bl	80073f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	441a      	add	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d32b      	bcc.n	8004c30 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	e026      	b.n	8004c30 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	68d8      	ldr	r0, [r3, #12]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	461a      	mov	r2, r3
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	f002 fc00 	bl	80073f2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	425b      	negs	r3, r3
 8004bfc:	441a      	add	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d207      	bcs.n	8004c1e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	425b      	negs	r3, r3
 8004c18:	441a      	add	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d105      	bne.n	8004c30 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c38:	697b      	ldr	r3, [r7, #20]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b082      	sub	sp, #8
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d018      	beq.n	8004c86 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	441a      	add	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d303      	bcc.n	8004c76 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68d9      	ldr	r1, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	461a      	mov	r2, r3
 8004c80:	6838      	ldr	r0, [r7, #0]
 8004c82:	f002 fbb6 	bl	80073f2 <memcpy>
	}
}
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c96:	f001 ffb1 	bl	8006bfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ca0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ca2:	e011      	b.n	8004cc8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d012      	beq.n	8004cd2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3324      	adds	r3, #36	; 0x24
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fd49 	bl	8005748 <xTaskRemoveFromEventList>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004cbc:	f000 fe1e 	bl	80058fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	dce9      	bgt.n	8004ca4 <prvUnlockQueue+0x16>
 8004cd0:	e000      	b.n	8004cd4 <prvUnlockQueue+0x46>
					break;
 8004cd2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	22ff      	movs	r2, #255	; 0xff
 8004cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004cdc:	f001 ffbe 	bl	8006c5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ce0:	f001 ff8c 	bl	8006bfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cec:	e011      	b.n	8004d12 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d012      	beq.n	8004d1c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3310      	adds	r3, #16
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fd24 	bl	8005748 <xTaskRemoveFromEventList>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d06:	f000 fdf9 	bl	80058fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d0a:	7bbb      	ldrb	r3, [r7, #14]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	dce9      	bgt.n	8004cee <prvUnlockQueue+0x60>
 8004d1a:	e000      	b.n	8004d1e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d1c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	22ff      	movs	r2, #255	; 0xff
 8004d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d26:	f001 ff99 	bl	8006c5c <vPortExitCritical>
}
 8004d2a:	bf00      	nop
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d3a:	f001 ff5f 	bl	8006bfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d102      	bne.n	8004d4c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d46:	2301      	movs	r3, #1
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e001      	b.n	8004d50 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d50:	f001 ff84 	bl	8006c5c <vPortExitCritical>

	return xReturn;
 8004d54:	68fb      	ldr	r3, [r7, #12]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d66:	f001 ff49 	bl	8006bfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d102      	bne.n	8004d7c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d76:	2301      	movs	r3, #1
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e001      	b.n	8004d80 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d80:	f001 ff6c 	bl	8006c5c <vPortExitCritical>

	return xReturn;
 8004d84:	68fb      	ldr	r3, [r7, #12]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	e014      	b.n	8004dca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004da0:	4a0e      	ldr	r2, [pc, #56]	; (8004ddc <vQueueAddToRegistry+0x4c>)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10b      	bne.n	8004dc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004dac:	490b      	ldr	r1, [pc, #44]	; (8004ddc <vQueueAddToRegistry+0x4c>)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004db6:	4a09      	ldr	r2, [pc, #36]	; (8004ddc <vQueueAddToRegistry+0x4c>)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004dc2:	e006      	b.n	8004dd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b07      	cmp	r3, #7
 8004dce:	d9e7      	bls.n	8004da0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004dd0:	bf00      	nop
 8004dd2:	bf00      	nop
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr
 8004ddc:	20000948 	.word	0x20000948

08004de0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004df0:	f001 ff04 	bl	8006bfc <vPortEnterCritical>
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dfa:	b25b      	sxtb	r3, r3
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e00:	d103      	bne.n	8004e0a <vQueueWaitForMessageRestricted+0x2a>
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e10:	b25b      	sxtb	r3, r3
 8004e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e16:	d103      	bne.n	8004e20 <vQueueWaitForMessageRestricted+0x40>
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e20:	f001 ff1c 	bl	8006c5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d106      	bne.n	8004e3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	3324      	adds	r3, #36	; 0x24
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 fc5b 	bl	80056f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e3a:	6978      	ldr	r0, [r7, #20]
 8004e3c:	f7ff ff27 	bl	8004c8e <prvUnlockQueue>
	}
 8004e40:	bf00      	nop
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08e      	sub	sp, #56	; 0x38
 8004e4c:	af04      	add	r7, sp, #16
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10a      	bne.n	8004e72 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	623b      	str	r3, [r7, #32]
}
 8004e6e:	bf00      	nop
 8004e70:	e7fe      	b.n	8004e70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10a      	bne.n	8004e8e <xTaskCreateStatic+0x46>
	__asm volatile
 8004e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	61fb      	str	r3, [r7, #28]
}
 8004e8a:	bf00      	nop
 8004e8c:	e7fe      	b.n	8004e8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e8e:	23b4      	movs	r3, #180	; 0xb4
 8004e90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2bb4      	cmp	r3, #180	; 0xb4
 8004e96:	d00a      	beq.n	8004eae <xTaskCreateStatic+0x66>
	__asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	61bb      	str	r3, [r7, #24]
}
 8004eaa:	bf00      	nop
 8004eac:	e7fe      	b.n	8004eac <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01e      	beq.n	8004ef2 <xTaskCreateStatic+0xaa>
 8004eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d01b      	beq.n	8004ef2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ecc:	2300      	movs	r3, #0
 8004ece:	9303      	str	r3, [sp, #12]
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	9302      	str	r3, [sp, #8]
 8004ed4:	f107 0314 	add.w	r3, r7, #20
 8004ed8:	9301      	str	r3, [sp, #4]
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f851 	bl	8004f8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004eea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eec:	f000 f8e4 	bl	80050b8 <prvAddNewTaskToReadyList>
 8004ef0:	e001      	b.n	8004ef6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ef6:	697b      	ldr	r3, [r7, #20]
	}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3728      	adds	r7, #40	; 0x28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08c      	sub	sp, #48	; 0x30
 8004f04:	af04      	add	r7, sp, #16
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f10:	88fb      	ldrh	r3, [r7, #6]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4618      	mov	r0, r3
 8004f16:	f001 ff71 	bl	8006dfc <pvPortMalloc>
 8004f1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00e      	beq.n	8004f40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004f22:	20b4      	movs	r0, #180	; 0xb4
 8004f24:	f001 ff6a 	bl	8006dfc <pvPortMalloc>
 8004f28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	631a      	str	r2, [r3, #48]	; 0x30
 8004f36:	e005      	b.n	8004f44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f38:	6978      	ldr	r0, [r7, #20]
 8004f3a:	f002 f823 	bl	8006f84 <vPortFree>
 8004f3e:	e001      	b.n	8004f44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d017      	beq.n	8004f7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f52:	88fa      	ldrh	r2, [r7, #6]
 8004f54:	2300      	movs	r3, #0
 8004f56:	9303      	str	r3, [sp, #12]
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	9302      	str	r3, [sp, #8]
 8004f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	68b9      	ldr	r1, [r7, #8]
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f80f 	bl	8004f8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f6e:	69f8      	ldr	r0, [r7, #28]
 8004f70:	f000 f8a2 	bl	80050b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f74:	2301      	movs	r3, #1
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	e002      	b.n	8004f80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f80:	69bb      	ldr	r3, [r7, #24]
	}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3720      	adds	r7, #32
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	f023 0307 	bic.w	r3, r3, #7
 8004fb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	617b      	str	r3, [r7, #20]
}
 8004fd0:	bf00      	nop
 8004fd2:	e7fe      	b.n	8004fd2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61fb      	str	r3, [r7, #28]
 8004fd8:	e012      	b.n	8005000 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	4413      	add	r3, r2
 8004fe0:	7819      	ldrb	r1, [r3, #0]
 8004fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	3334      	adds	r3, #52	; 0x34
 8004fea:	460a      	mov	r2, r1
 8004fec:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d006      	beq.n	8005008 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	61fb      	str	r3, [r7, #28]
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	2b0f      	cmp	r3, #15
 8005004:	d9e9      	bls.n	8004fda <prvInitialiseNewTask+0x4e>
 8005006:	e000      	b.n	800500a <prvInitialiseNewTask+0x7e>
		{
			break;
 8005008:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	2b06      	cmp	r3, #6
 8005016:	d901      	bls.n	800501c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005018:	2306      	movs	r3, #6
 800501a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005020:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005026:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	2200      	movs	r2, #0
 800502c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	3304      	adds	r3, #4
 8005032:	4618      	mov	r0, r3
 8005034:	f7fe fed9 	bl	8003dea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	3318      	adds	r3, #24
 800503c:	4618      	mov	r0, r3
 800503e:	f7fe fed4 	bl	8003dea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005046:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504a:	f1c3 0207 	rsb	r2, r3, #7
 800504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005050:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005056:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	2200      	movs	r2, #0
 800505c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	2200      	movs	r2, #0
 8005064:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	334c      	adds	r3, #76	; 0x4c
 800506c:	2260      	movs	r2, #96	; 0x60
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f002 f9cc 	bl	800740e <memset>
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	4a0c      	ldr	r2, [pc, #48]	; (80050ac <prvInitialiseNewTask+0x120>)
 800507a:	651a      	str	r2, [r3, #80]	; 0x50
 800507c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507e:	4a0c      	ldr	r2, [pc, #48]	; (80050b0 <prvInitialiseNewTask+0x124>)
 8005080:	655a      	str	r2, [r3, #84]	; 0x54
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	4a0b      	ldr	r2, [pc, #44]	; (80050b4 <prvInitialiseNewTask+0x128>)
 8005086:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	68f9      	ldr	r1, [r7, #12]
 800508c:	69b8      	ldr	r0, [r7, #24]
 800508e:	f001 fcc5 	bl	8006a1c <pxPortInitialiseStack>
 8005092:	4602      	mov	r2, r0
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800509e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050a4:	bf00      	nop
 80050a6:	3720      	adds	r7, #32
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	080084f0 	.word	0x080084f0
 80050b0:	08008510 	.word	0x08008510
 80050b4:	080084d0 	.word	0x080084d0

080050b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050c0:	f001 fd9c 	bl	8006bfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050c4:	4b2a      	ldr	r3, [pc, #168]	; (8005170 <prvAddNewTaskToReadyList+0xb8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3301      	adds	r3, #1
 80050ca:	4a29      	ldr	r2, [pc, #164]	; (8005170 <prvAddNewTaskToReadyList+0xb8>)
 80050cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050ce:	4b29      	ldr	r3, [pc, #164]	; (8005174 <prvAddNewTaskToReadyList+0xbc>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050d6:	4a27      	ldr	r2, [pc, #156]	; (8005174 <prvAddNewTaskToReadyList+0xbc>)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050dc:	4b24      	ldr	r3, [pc, #144]	; (8005170 <prvAddNewTaskToReadyList+0xb8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d110      	bne.n	8005106 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050e4:	f000 fc2e 	bl	8005944 <prvInitialiseTaskLists>
 80050e8:	e00d      	b.n	8005106 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050ea:	4b23      	ldr	r3, [pc, #140]	; (8005178 <prvAddNewTaskToReadyList+0xc0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d109      	bne.n	8005106 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050f2:	4b20      	ldr	r3, [pc, #128]	; (8005174 <prvAddNewTaskToReadyList+0xbc>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d802      	bhi.n	8005106 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005100:	4a1c      	ldr	r2, [pc, #112]	; (8005174 <prvAddNewTaskToReadyList+0xbc>)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005106:	4b1d      	ldr	r3, [pc, #116]	; (800517c <prvAddNewTaskToReadyList+0xc4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3301      	adds	r3, #1
 800510c:	4a1b      	ldr	r2, [pc, #108]	; (800517c <prvAddNewTaskToReadyList+0xc4>)
 800510e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	2201      	movs	r2, #1
 8005116:	409a      	lsls	r2, r3
 8005118:	4b19      	ldr	r3, [pc, #100]	; (8005180 <prvAddNewTaskToReadyList+0xc8>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4313      	orrs	r3, r2
 800511e:	4a18      	ldr	r2, [pc, #96]	; (8005180 <prvAddNewTaskToReadyList+0xc8>)
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4a15      	ldr	r2, [pc, #84]	; (8005184 <prvAddNewTaskToReadyList+0xcc>)
 8005130:	441a      	add	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3304      	adds	r3, #4
 8005136:	4619      	mov	r1, r3
 8005138:	4610      	mov	r0, r2
 800513a:	f7fe fe62 	bl	8003e02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800513e:	f001 fd8d 	bl	8006c5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005142:	4b0d      	ldr	r3, [pc, #52]	; (8005178 <prvAddNewTaskToReadyList+0xc0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00e      	beq.n	8005168 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800514a:	4b0a      	ldr	r3, [pc, #40]	; (8005174 <prvAddNewTaskToReadyList+0xbc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	429a      	cmp	r2, r3
 8005156:	d207      	bcs.n	8005168 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <prvAddNewTaskToReadyList+0xd0>)
 800515a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20000a88 	.word	0x20000a88
 8005174:	20000988 	.word	0x20000988
 8005178:	20000a94 	.word	0x20000a94
 800517c:	20000aa4 	.word	0x20000aa4
 8005180:	20000a90 	.word	0x20000a90
 8005184:	2000098c 	.word	0x2000098c
 8005188:	e000ed04 	.word	0xe000ed04

0800518c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d017      	beq.n	80051ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800519e:	4b13      	ldr	r3, [pc, #76]	; (80051ec <vTaskDelay+0x60>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <vTaskDelay+0x30>
	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	60bb      	str	r3, [r7, #8]
}
 80051b8:	bf00      	nop
 80051ba:	e7fe      	b.n	80051ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80051bc:	f000 f88a 	bl	80052d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051c0:	2100      	movs	r1, #0
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f001 f83c 	bl	8006240 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051c8:	f000 f892 	bl	80052f0 <xTaskResumeAll>
 80051cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d107      	bne.n	80051e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80051d4:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <vTaskDelay+0x64>)
 80051d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051e4:	bf00      	nop
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20000ab0 	.word	0x20000ab0
 80051f0:	e000ed04 	.word	0xe000ed04

080051f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08a      	sub	sp, #40	; 0x28
 80051f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051fa:	2300      	movs	r3, #0
 80051fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051fe:	2300      	movs	r3, #0
 8005200:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005202:	463a      	mov	r2, r7
 8005204:	1d39      	adds	r1, r7, #4
 8005206:	f107 0308 	add.w	r3, r7, #8
 800520a:	4618      	mov	r0, r3
 800520c:	f7fb fd54 	bl	8000cb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005210:	6839      	ldr	r1, [r7, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	9202      	str	r2, [sp, #8]
 8005218:	9301      	str	r3, [sp, #4]
 800521a:	2300      	movs	r3, #0
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	2300      	movs	r3, #0
 8005220:	460a      	mov	r2, r1
 8005222:	4924      	ldr	r1, [pc, #144]	; (80052b4 <vTaskStartScheduler+0xc0>)
 8005224:	4824      	ldr	r0, [pc, #144]	; (80052b8 <vTaskStartScheduler+0xc4>)
 8005226:	f7ff fe0f 	bl	8004e48 <xTaskCreateStatic>
 800522a:	4603      	mov	r3, r0
 800522c:	4a23      	ldr	r2, [pc, #140]	; (80052bc <vTaskStartScheduler+0xc8>)
 800522e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005230:	4b22      	ldr	r3, [pc, #136]	; (80052bc <vTaskStartScheduler+0xc8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005238:	2301      	movs	r3, #1
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	e001      	b.n	8005242 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d102      	bne.n	800524e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005248:	f001 f860 	bl	800630c <xTimerCreateTimerTask>
 800524c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d11b      	bne.n	800528c <vTaskStartScheduler+0x98>
	__asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	613b      	str	r3, [r7, #16]
}
 8005266:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005268:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <vTaskStartScheduler+0xcc>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	334c      	adds	r3, #76	; 0x4c
 800526e:	4a15      	ldr	r2, [pc, #84]	; (80052c4 <vTaskStartScheduler+0xd0>)
 8005270:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005272:	4b15      	ldr	r3, [pc, #84]	; (80052c8 <vTaskStartScheduler+0xd4>)
 8005274:	f04f 32ff 	mov.w	r2, #4294967295
 8005278:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800527a:	4b14      	ldr	r3, [pc, #80]	; (80052cc <vTaskStartScheduler+0xd8>)
 800527c:	2201      	movs	r2, #1
 800527e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005280:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <vTaskStartScheduler+0xdc>)
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005286:	f001 fc47 	bl	8006b18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800528a:	e00e      	b.n	80052aa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005292:	d10a      	bne.n	80052aa <vTaskStartScheduler+0xb6>
	__asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	60fb      	str	r3, [r7, #12]
}
 80052a6:	bf00      	nop
 80052a8:	e7fe      	b.n	80052a8 <vTaskStartScheduler+0xb4>
}
 80052aa:	bf00      	nop
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	0800844c 	.word	0x0800844c
 80052b8:	08005915 	.word	0x08005915
 80052bc:	20000aac 	.word	0x20000aac
 80052c0:	20000988 	.word	0x20000988
 80052c4:	200000ac 	.word	0x200000ac
 80052c8:	20000aa8 	.word	0x20000aa8
 80052cc:	20000a94 	.word	0x20000a94
 80052d0:	20000a8c 	.word	0x20000a8c

080052d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80052d8:	4b04      	ldr	r3, [pc, #16]	; (80052ec <vTaskSuspendAll+0x18>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3301      	adds	r3, #1
 80052de:	4a03      	ldr	r2, [pc, #12]	; (80052ec <vTaskSuspendAll+0x18>)
 80052e0:	6013      	str	r3, [r2, #0]
}
 80052e2:	bf00      	nop
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bc80      	pop	{r7}
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	20000ab0 	.word	0x20000ab0

080052f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052fa:	2300      	movs	r3, #0
 80052fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052fe:	4b41      	ldr	r3, [pc, #260]	; (8005404 <xTaskResumeAll+0x114>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10a      	bne.n	800531c <xTaskResumeAll+0x2c>
	__asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	603b      	str	r3, [r7, #0]
}
 8005318:	bf00      	nop
 800531a:	e7fe      	b.n	800531a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800531c:	f001 fc6e 	bl	8006bfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005320:	4b38      	ldr	r3, [pc, #224]	; (8005404 <xTaskResumeAll+0x114>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3b01      	subs	r3, #1
 8005326:	4a37      	ldr	r2, [pc, #220]	; (8005404 <xTaskResumeAll+0x114>)
 8005328:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800532a:	4b36      	ldr	r3, [pc, #216]	; (8005404 <xTaskResumeAll+0x114>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d161      	bne.n	80053f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005332:	4b35      	ldr	r3, [pc, #212]	; (8005408 <xTaskResumeAll+0x118>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d05d      	beq.n	80053f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800533a:	e02e      	b.n	800539a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800533c:	4b33      	ldr	r3, [pc, #204]	; (800540c <xTaskResumeAll+0x11c>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3318      	adds	r3, #24
 8005348:	4618      	mov	r0, r3
 800534a:	f7fe fdb5 	bl	8003eb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3304      	adds	r3, #4
 8005352:	4618      	mov	r0, r3
 8005354:	f7fe fdb0 	bl	8003eb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	2201      	movs	r2, #1
 800535e:	409a      	lsls	r2, r3
 8005360:	4b2b      	ldr	r3, [pc, #172]	; (8005410 <xTaskResumeAll+0x120>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4313      	orrs	r3, r2
 8005366:	4a2a      	ldr	r2, [pc, #168]	; (8005410 <xTaskResumeAll+0x120>)
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4a27      	ldr	r2, [pc, #156]	; (8005414 <xTaskResumeAll+0x124>)
 8005378:	441a      	add	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3304      	adds	r3, #4
 800537e:	4619      	mov	r1, r3
 8005380:	4610      	mov	r0, r2
 8005382:	f7fe fd3e 	bl	8003e02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800538a:	4b23      	ldr	r3, [pc, #140]	; (8005418 <xTaskResumeAll+0x128>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	429a      	cmp	r2, r3
 8005392:	d302      	bcc.n	800539a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005394:	4b21      	ldr	r3, [pc, #132]	; (800541c <xTaskResumeAll+0x12c>)
 8005396:	2201      	movs	r2, #1
 8005398:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800539a:	4b1c      	ldr	r3, [pc, #112]	; (800540c <xTaskResumeAll+0x11c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1cc      	bne.n	800533c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053a8:	f000 fb6e 	bl	8005a88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80053ac:	4b1c      	ldr	r3, [pc, #112]	; (8005420 <xTaskResumeAll+0x130>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d010      	beq.n	80053da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053b8:	f000 f856 	bl	8005468 <xTaskIncrementTick>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80053c2:	4b16      	ldr	r3, [pc, #88]	; (800541c <xTaskResumeAll+0x12c>)
 80053c4:	2201      	movs	r2, #1
 80053c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1f1      	bne.n	80053b8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80053d4:	4b12      	ldr	r3, [pc, #72]	; (8005420 <xTaskResumeAll+0x130>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053da:	4b10      	ldr	r3, [pc, #64]	; (800541c <xTaskResumeAll+0x12c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d009      	beq.n	80053f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053e2:	2301      	movs	r3, #1
 80053e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053e6:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <xTaskResumeAll+0x134>)
 80053e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053f6:	f001 fc31 	bl	8006c5c <vPortExitCritical>

	return xAlreadyYielded;
 80053fa:	68bb      	ldr	r3, [r7, #8]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000ab0 	.word	0x20000ab0
 8005408:	20000a88 	.word	0x20000a88
 800540c:	20000a48 	.word	0x20000a48
 8005410:	20000a90 	.word	0x20000a90
 8005414:	2000098c 	.word	0x2000098c
 8005418:	20000988 	.word	0x20000988
 800541c:	20000a9c 	.word	0x20000a9c
 8005420:	20000a98 	.word	0x20000a98
 8005424:	e000ed04 	.word	0xe000ed04

08005428 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800542e:	4b04      	ldr	r3, [pc, #16]	; (8005440 <xTaskGetTickCount+0x18>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005434:	687b      	ldr	r3, [r7, #4]
}
 8005436:	4618      	mov	r0, r3
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr
 8005440:	20000a8c 	.word	0x20000a8c

08005444 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800544a:	f001 fc99 	bl	8006d80 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800544e:	2300      	movs	r3, #0
 8005450:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005452:	4b04      	ldr	r3, [pc, #16]	; (8005464 <xTaskGetTickCountFromISR+0x20>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005458:	683b      	ldr	r3, [r7, #0]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000a8c 	.word	0x20000a8c

08005468 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005472:	4b51      	ldr	r3, [pc, #324]	; (80055b8 <xTaskIncrementTick+0x150>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	f040 808d 	bne.w	8005596 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800547c:	4b4f      	ldr	r3, [pc, #316]	; (80055bc <xTaskIncrementTick+0x154>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3301      	adds	r3, #1
 8005482:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005484:	4a4d      	ldr	r2, [pc, #308]	; (80055bc <xTaskIncrementTick+0x154>)
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d120      	bne.n	80054d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005490:	4b4b      	ldr	r3, [pc, #300]	; (80055c0 <xTaskIncrementTick+0x158>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	603b      	str	r3, [r7, #0]
}
 80054ac:	bf00      	nop
 80054ae:	e7fe      	b.n	80054ae <xTaskIncrementTick+0x46>
 80054b0:	4b43      	ldr	r3, [pc, #268]	; (80055c0 <xTaskIncrementTick+0x158>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	4b43      	ldr	r3, [pc, #268]	; (80055c4 <xTaskIncrementTick+0x15c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a41      	ldr	r2, [pc, #260]	; (80055c0 <xTaskIncrementTick+0x158>)
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	4a41      	ldr	r2, [pc, #260]	; (80055c4 <xTaskIncrementTick+0x15c>)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	4b40      	ldr	r3, [pc, #256]	; (80055c8 <xTaskIncrementTick+0x160>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3301      	adds	r3, #1
 80054ca:	4a3f      	ldr	r2, [pc, #252]	; (80055c8 <xTaskIncrementTick+0x160>)
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	f000 fadb 	bl	8005a88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054d2:	4b3e      	ldr	r3, [pc, #248]	; (80055cc <xTaskIncrementTick+0x164>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d34d      	bcc.n	8005578 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054dc:	4b38      	ldr	r3, [pc, #224]	; (80055c0 <xTaskIncrementTick+0x158>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <xTaskIncrementTick+0x82>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <xTaskIncrementTick+0x84>
 80054ea:	2300      	movs	r3, #0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d004      	beq.n	80054fa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054f0:	4b36      	ldr	r3, [pc, #216]	; (80055cc <xTaskIncrementTick+0x164>)
 80054f2:	f04f 32ff 	mov.w	r2, #4294967295
 80054f6:	601a      	str	r2, [r3, #0]
					break;
 80054f8:	e03e      	b.n	8005578 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80054fa:	4b31      	ldr	r3, [pc, #196]	; (80055c0 <xTaskIncrementTick+0x158>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	429a      	cmp	r2, r3
 8005510:	d203      	bcs.n	800551a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005512:	4a2e      	ldr	r2, [pc, #184]	; (80055cc <xTaskIncrementTick+0x164>)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6013      	str	r3, [r2, #0]
						break;
 8005518:	e02e      	b.n	8005578 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	3304      	adds	r3, #4
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe fcca 	bl	8003eb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005528:	2b00      	cmp	r3, #0
 800552a:	d004      	beq.n	8005536 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	3318      	adds	r3, #24
 8005530:	4618      	mov	r0, r3
 8005532:	f7fe fcc1 	bl	8003eb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553a:	2201      	movs	r2, #1
 800553c:	409a      	lsls	r2, r3
 800553e:	4b24      	ldr	r3, [pc, #144]	; (80055d0 <xTaskIncrementTick+0x168>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4313      	orrs	r3, r2
 8005544:	4a22      	ldr	r2, [pc, #136]	; (80055d0 <xTaskIncrementTick+0x168>)
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4a1f      	ldr	r2, [pc, #124]	; (80055d4 <xTaskIncrementTick+0x16c>)
 8005556:	441a      	add	r2, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	3304      	adds	r3, #4
 800555c:	4619      	mov	r1, r3
 800555e:	4610      	mov	r0, r2
 8005560:	f7fe fc4f 	bl	8003e02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005568:	4b1b      	ldr	r3, [pc, #108]	; (80055d8 <xTaskIncrementTick+0x170>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556e:	429a      	cmp	r2, r3
 8005570:	d3b4      	bcc.n	80054dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005572:	2301      	movs	r3, #1
 8005574:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005576:	e7b1      	b.n	80054dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005578:	4b17      	ldr	r3, [pc, #92]	; (80055d8 <xTaskIncrementTick+0x170>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557e:	4915      	ldr	r1, [pc, #84]	; (80055d4 <xTaskIncrementTick+0x16c>)
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d907      	bls.n	80055a0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005590:	2301      	movs	r3, #1
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	e004      	b.n	80055a0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005596:	4b11      	ldr	r3, [pc, #68]	; (80055dc <xTaskIncrementTick+0x174>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3301      	adds	r3, #1
 800559c:	4a0f      	ldr	r2, [pc, #60]	; (80055dc <xTaskIncrementTick+0x174>)
 800559e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80055a0:	4b0f      	ldr	r3, [pc, #60]	; (80055e0 <xTaskIncrementTick+0x178>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80055a8:	2301      	movs	r3, #1
 80055aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80055ac:	697b      	ldr	r3, [r7, #20]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000ab0 	.word	0x20000ab0
 80055bc:	20000a8c 	.word	0x20000a8c
 80055c0:	20000a40 	.word	0x20000a40
 80055c4:	20000a44 	.word	0x20000a44
 80055c8:	20000aa0 	.word	0x20000aa0
 80055cc:	20000aa8 	.word	0x20000aa8
 80055d0:	20000a90 	.word	0x20000a90
 80055d4:	2000098c 	.word	0x2000098c
 80055d8:	20000988 	.word	0x20000988
 80055dc:	20000a98 	.word	0x20000a98
 80055e0:	20000a9c 	.word	0x20000a9c

080055e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055ea:	4b29      	ldr	r3, [pc, #164]	; (8005690 <vTaskSwitchContext+0xac>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055f2:	4b28      	ldr	r3, [pc, #160]	; (8005694 <vTaskSwitchContext+0xb0>)
 80055f4:	2201      	movs	r2, #1
 80055f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055f8:	e044      	b.n	8005684 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80055fa:	4b26      	ldr	r3, [pc, #152]	; (8005694 <vTaskSwitchContext+0xb0>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005600:	4b25      	ldr	r3, [pc, #148]	; (8005698 <vTaskSwitchContext+0xb4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	fab3 f383 	clz	r3, r3
 800560c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800560e:	7afb      	ldrb	r3, [r7, #11]
 8005610:	f1c3 031f 	rsb	r3, r3, #31
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	4921      	ldr	r1, [pc, #132]	; (800569c <vTaskSwitchContext+0xb8>)
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	4613      	mov	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	440b      	add	r3, r1
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10a      	bne.n	8005640 <vTaskSwitchContext+0x5c>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	607b      	str	r3, [r7, #4]
}
 800563c:	bf00      	nop
 800563e:	e7fe      	b.n	800563e <vTaskSwitchContext+0x5a>
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	4613      	mov	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4a14      	ldr	r2, [pc, #80]	; (800569c <vTaskSwitchContext+0xb8>)
 800564c:	4413      	add	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	605a      	str	r2, [r3, #4]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	3308      	adds	r3, #8
 8005662:	429a      	cmp	r2, r3
 8005664:	d104      	bne.n	8005670 <vTaskSwitchContext+0x8c>
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	605a      	str	r2, [r3, #4]
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	4a0a      	ldr	r2, [pc, #40]	; (80056a0 <vTaskSwitchContext+0xbc>)
 8005678:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800567a:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <vTaskSwitchContext+0xbc>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	334c      	adds	r3, #76	; 0x4c
 8005680:	4a08      	ldr	r2, [pc, #32]	; (80056a4 <vTaskSwitchContext+0xc0>)
 8005682:	6013      	str	r3, [r2, #0]
}
 8005684:	bf00      	nop
 8005686:	371c      	adds	r7, #28
 8005688:	46bd      	mov	sp, r7
 800568a:	bc80      	pop	{r7}
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	20000ab0 	.word	0x20000ab0
 8005694:	20000a9c 	.word	0x20000a9c
 8005698:	20000a90 	.word	0x20000a90
 800569c:	2000098c 	.word	0x2000098c
 80056a0:	20000988 	.word	0x20000988
 80056a4:	200000ac 	.word	0x200000ac

080056a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10a      	bne.n	80056ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80056b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	60fb      	str	r3, [r7, #12]
}
 80056ca:	bf00      	nop
 80056cc:	e7fe      	b.n	80056cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056ce:	4b07      	ldr	r3, [pc, #28]	; (80056ec <vTaskPlaceOnEventList+0x44>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3318      	adds	r3, #24
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fe fbb6 	bl	8003e48 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056dc:	2101      	movs	r1, #1
 80056de:	6838      	ldr	r0, [r7, #0]
 80056e0:	f000 fdae 	bl	8006240 <prvAddCurrentTaskToDelayedList>
}
 80056e4:	bf00      	nop
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	20000988 	.word	0x20000988

080056f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10a      	bne.n	8005718 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	617b      	str	r3, [r7, #20]
}
 8005714:	bf00      	nop
 8005716:	e7fe      	b.n	8005716 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005718:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <vTaskPlaceOnEventListRestricted+0x54>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3318      	adds	r3, #24
 800571e:	4619      	mov	r1, r3
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f7fe fb6e 	bl	8003e02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800572c:	f04f 33ff 	mov.w	r3, #4294967295
 8005730:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	68b8      	ldr	r0, [r7, #8]
 8005736:	f000 fd83 	bl	8006240 <prvAddCurrentTaskToDelayedList>
	}
 800573a:	bf00      	nop
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000988 	.word	0x20000988

08005748 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	60fb      	str	r3, [r7, #12]
}
 8005770:	bf00      	nop
 8005772:	e7fe      	b.n	8005772 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	3318      	adds	r3, #24
 8005778:	4618      	mov	r0, r3
 800577a:	f7fe fb9d 	bl	8003eb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800577e:	4b1d      	ldr	r3, [pc, #116]	; (80057f4 <xTaskRemoveFromEventList+0xac>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d11c      	bne.n	80057c0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	3304      	adds	r3, #4
 800578a:	4618      	mov	r0, r3
 800578c:	f7fe fb94 	bl	8003eb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	2201      	movs	r2, #1
 8005796:	409a      	lsls	r2, r3
 8005798:	4b17      	ldr	r3, [pc, #92]	; (80057f8 <xTaskRemoveFromEventList+0xb0>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4313      	orrs	r3, r2
 800579e:	4a16      	ldr	r2, [pc, #88]	; (80057f8 <xTaskRemoveFromEventList+0xb0>)
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4a13      	ldr	r2, [pc, #76]	; (80057fc <xTaskRemoveFromEventList+0xb4>)
 80057b0:	441a      	add	r2, r3
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	3304      	adds	r3, #4
 80057b6:	4619      	mov	r1, r3
 80057b8:	4610      	mov	r0, r2
 80057ba:	f7fe fb22 	bl	8003e02 <vListInsertEnd>
 80057be:	e005      	b.n	80057cc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	3318      	adds	r3, #24
 80057c4:	4619      	mov	r1, r3
 80057c6:	480e      	ldr	r0, [pc, #56]	; (8005800 <xTaskRemoveFromEventList+0xb8>)
 80057c8:	f7fe fb1b 	bl	8003e02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d0:	4b0c      	ldr	r3, [pc, #48]	; (8005804 <xTaskRemoveFromEventList+0xbc>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d905      	bls.n	80057e6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057da:	2301      	movs	r3, #1
 80057dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057de:	4b0a      	ldr	r3, [pc, #40]	; (8005808 <xTaskRemoveFromEventList+0xc0>)
 80057e0:	2201      	movs	r2, #1
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	e001      	b.n	80057ea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80057ea:	697b      	ldr	r3, [r7, #20]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	20000ab0 	.word	0x20000ab0
 80057f8:	20000a90 	.word	0x20000a90
 80057fc:	2000098c 	.word	0x2000098c
 8005800:	20000a48 	.word	0x20000a48
 8005804:	20000988 	.word	0x20000988
 8005808:	20000a9c 	.word	0x20000a9c

0800580c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005814:	4b06      	ldr	r3, [pc, #24]	; (8005830 <vTaskInternalSetTimeOutState+0x24>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800581c:	4b05      	ldr	r3, [pc, #20]	; (8005834 <vTaskInternalSetTimeOutState+0x28>)
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	605a      	str	r2, [r3, #4]
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	bc80      	pop	{r7}
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	20000aa0 	.word	0x20000aa0
 8005834:	20000a8c 	.word	0x20000a8c

08005838 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b088      	sub	sp, #32
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10a      	bne.n	800585e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	613b      	str	r3, [r7, #16]
}
 800585a:	bf00      	nop
 800585c:	e7fe      	b.n	800585c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	60fb      	str	r3, [r7, #12]
}
 8005876:	bf00      	nop
 8005878:	e7fe      	b.n	8005878 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800587a:	f001 f9bf 	bl	8006bfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800587e:	4b1d      	ldr	r3, [pc, #116]	; (80058f4 <xTaskCheckForTimeOut+0xbc>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005896:	d102      	bne.n	800589e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005898:	2300      	movs	r3, #0
 800589a:	61fb      	str	r3, [r7, #28]
 800589c:	e023      	b.n	80058e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	4b15      	ldr	r3, [pc, #84]	; (80058f8 <xTaskCheckForTimeOut+0xc0>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d007      	beq.n	80058ba <xTaskCheckForTimeOut+0x82>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d302      	bcc.n	80058ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058b4:	2301      	movs	r3, #1
 80058b6:	61fb      	str	r3, [r7, #28]
 80058b8:	e015      	b.n	80058e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d20b      	bcs.n	80058dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	1ad2      	subs	r2, r2, r3
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7ff ff9b 	bl	800580c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058d6:	2300      	movs	r3, #0
 80058d8:	61fb      	str	r3, [r7, #28]
 80058da:	e004      	b.n	80058e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80058e2:	2301      	movs	r3, #1
 80058e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058e6:	f001 f9b9 	bl	8006c5c <vPortExitCritical>

	return xReturn;
 80058ea:	69fb      	ldr	r3, [r7, #28]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3720      	adds	r7, #32
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	20000a8c 	.word	0x20000a8c
 80058f8:	20000aa0 	.word	0x20000aa0

080058fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005900:	4b03      	ldr	r3, [pc, #12]	; (8005910 <vTaskMissedYield+0x14>)
 8005902:	2201      	movs	r2, #1
 8005904:	601a      	str	r2, [r3, #0]
}
 8005906:	bf00      	nop
 8005908:	46bd      	mov	sp, r7
 800590a:	bc80      	pop	{r7}
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	20000a9c 	.word	0x20000a9c

08005914 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800591c:	f000 f852 	bl	80059c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005920:	4b06      	ldr	r3, [pc, #24]	; (800593c <prvIdleTask+0x28>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d9f9      	bls.n	800591c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005928:	4b05      	ldr	r3, [pc, #20]	; (8005940 <prvIdleTask+0x2c>)
 800592a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005938:	e7f0      	b.n	800591c <prvIdleTask+0x8>
 800593a:	bf00      	nop
 800593c:	2000098c 	.word	0x2000098c
 8005940:	e000ed04 	.word	0xe000ed04

08005944 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800594a:	2300      	movs	r3, #0
 800594c:	607b      	str	r3, [r7, #4]
 800594e:	e00c      	b.n	800596a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	4613      	mov	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4a12      	ldr	r2, [pc, #72]	; (80059a4 <prvInitialiseTaskLists+0x60>)
 800595c:	4413      	add	r3, r2
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe fa24 	bl	8003dac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3301      	adds	r3, #1
 8005968:	607b      	str	r3, [r7, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b06      	cmp	r3, #6
 800596e:	d9ef      	bls.n	8005950 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005970:	480d      	ldr	r0, [pc, #52]	; (80059a8 <prvInitialiseTaskLists+0x64>)
 8005972:	f7fe fa1b 	bl	8003dac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005976:	480d      	ldr	r0, [pc, #52]	; (80059ac <prvInitialiseTaskLists+0x68>)
 8005978:	f7fe fa18 	bl	8003dac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800597c:	480c      	ldr	r0, [pc, #48]	; (80059b0 <prvInitialiseTaskLists+0x6c>)
 800597e:	f7fe fa15 	bl	8003dac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005982:	480c      	ldr	r0, [pc, #48]	; (80059b4 <prvInitialiseTaskLists+0x70>)
 8005984:	f7fe fa12 	bl	8003dac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005988:	480b      	ldr	r0, [pc, #44]	; (80059b8 <prvInitialiseTaskLists+0x74>)
 800598a:	f7fe fa0f 	bl	8003dac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800598e:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <prvInitialiseTaskLists+0x78>)
 8005990:	4a05      	ldr	r2, [pc, #20]	; (80059a8 <prvInitialiseTaskLists+0x64>)
 8005992:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005994:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <prvInitialiseTaskLists+0x7c>)
 8005996:	4a05      	ldr	r2, [pc, #20]	; (80059ac <prvInitialiseTaskLists+0x68>)
 8005998:	601a      	str	r2, [r3, #0]
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	2000098c 	.word	0x2000098c
 80059a8:	20000a18 	.word	0x20000a18
 80059ac:	20000a2c 	.word	0x20000a2c
 80059b0:	20000a48 	.word	0x20000a48
 80059b4:	20000a5c 	.word	0x20000a5c
 80059b8:	20000a74 	.word	0x20000a74
 80059bc:	20000a40 	.word	0x20000a40
 80059c0:	20000a44 	.word	0x20000a44

080059c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059ca:	e019      	b.n	8005a00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059cc:	f001 f916 	bl	8006bfc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80059d0:	4b10      	ldr	r3, [pc, #64]	; (8005a14 <prvCheckTasksWaitingTermination+0x50>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3304      	adds	r3, #4
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fe fa6b 	bl	8003eb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059e2:	4b0d      	ldr	r3, [pc, #52]	; (8005a18 <prvCheckTasksWaitingTermination+0x54>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	4a0b      	ldr	r2, [pc, #44]	; (8005a18 <prvCheckTasksWaitingTermination+0x54>)
 80059ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <prvCheckTasksWaitingTermination+0x58>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	4a0a      	ldr	r2, [pc, #40]	; (8005a1c <prvCheckTasksWaitingTermination+0x58>)
 80059f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059f6:	f001 f931 	bl	8006c5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f810 	bl	8005a20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a00:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <prvCheckTasksWaitingTermination+0x58>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e1      	bne.n	80059cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a08:	bf00      	nop
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20000a5c 	.word	0x20000a5c
 8005a18:	20000a88 	.word	0x20000a88
 8005a1c:	20000a70 	.word	0x20000a70

08005a20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	334c      	adds	r3, #76	; 0x4c
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f001 fe27 	bl	8007680 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d108      	bne.n	8005a4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 fa9f 	bl	8006f84 <vPortFree>
				vPortFree( pxTCB );
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f001 fa9c 	bl	8006f84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a4c:	e018      	b.n	8005a80 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d103      	bne.n	8005a60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f001 fa93 	bl	8006f84 <vPortFree>
	}
 8005a5e:	e00f      	b.n	8005a80 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d00a      	beq.n	8005a80 <prvDeleteTCB+0x60>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	60fb      	str	r3, [r7, #12]
}
 8005a7c:	bf00      	nop
 8005a7e:	e7fe      	b.n	8005a7e <prvDeleteTCB+0x5e>
	}
 8005a80:	bf00      	nop
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a8e:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <prvResetNextTaskUnblockTime+0x40>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <prvResetNextTaskUnblockTime+0x14>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <prvResetNextTaskUnblockTime+0x16>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d004      	beq.n	8005aac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005aa2:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <prvResetNextTaskUnblockTime+0x44>)
 8005aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005aaa:	e008      	b.n	8005abe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005aac:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <prvResetNextTaskUnblockTime+0x40>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	4a04      	ldr	r2, [pc, #16]	; (8005acc <prvResetNextTaskUnblockTime+0x44>)
 8005abc:	6013      	str	r3, [r2, #0]
}
 8005abe:	bf00      	nop
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bc80      	pop	{r7}
 8005ac6:	4770      	bx	lr
 8005ac8:	20000a40 	.word	0x20000a40
 8005acc:	20000aa8 	.word	0x20000aa8

08005ad0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <xTaskGetSchedulerState+0x34>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	607b      	str	r3, [r7, #4]
 8005ae2:	e008      	b.n	8005af6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ae4:	4b08      	ldr	r3, [pc, #32]	; (8005b08 <xTaskGetSchedulerState+0x38>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d102      	bne.n	8005af2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005aec:	2302      	movs	r3, #2
 8005aee:	607b      	str	r3, [r7, #4]
 8005af0:	e001      	b.n	8005af6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005af2:	2300      	movs	r3, #0
 8005af4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005af6:	687b      	ldr	r3, [r7, #4]
	}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bc80      	pop	{r7}
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	20000a94 	.word	0x20000a94
 8005b08:	20000ab0 	.word	0x20000ab0

08005b0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d06e      	beq.n	8005c00 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b26:	4b39      	ldr	r3, [pc, #228]	; (8005c0c <xTaskPriorityInherit+0x100>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d25e      	bcs.n	8005bee <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	db06      	blt.n	8005b46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b38:	4b34      	ldr	r3, [pc, #208]	; (8005c0c <xTaskPriorityInherit+0x100>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3e:	f1c3 0207 	rsb	r2, r3, #7
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6959      	ldr	r1, [r3, #20]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4a2e      	ldr	r2, [pc, #184]	; (8005c10 <xTaskPriorityInherit+0x104>)
 8005b58:	4413      	add	r3, r2
 8005b5a:	4299      	cmp	r1, r3
 8005b5c:	d101      	bne.n	8005b62 <xTaskPriorityInherit+0x56>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e000      	b.n	8005b64 <xTaskPriorityInherit+0x58>
 8005b62:	2300      	movs	r3, #0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d03a      	beq.n	8005bde <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fe f9a3 	bl	8003eb8 <uxListRemove>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d115      	bne.n	8005ba4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7c:	4924      	ldr	r1, [pc, #144]	; (8005c10 <xTaskPriorityInherit+0x104>)
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	440b      	add	r3, r1
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <xTaskPriorityInherit+0x98>
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b92:	2201      	movs	r2, #1
 8005b94:	fa02 f303 	lsl.w	r3, r2, r3
 8005b98:	43da      	mvns	r2, r3
 8005b9a:	4b1e      	ldr	r3, [pc, #120]	; (8005c14 <xTaskPriorityInherit+0x108>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	4a1c      	ldr	r2, [pc, #112]	; (8005c14 <xTaskPriorityInherit+0x108>)
 8005ba2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ba4:	4b19      	ldr	r3, [pc, #100]	; (8005c0c <xTaskPriorityInherit+0x100>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	409a      	lsls	r2, r3
 8005bb6:	4b17      	ldr	r3, [pc, #92]	; (8005c14 <xTaskPriorityInherit+0x108>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	4a15      	ldr	r2, [pc, #84]	; (8005c14 <xTaskPriorityInherit+0x108>)
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4a10      	ldr	r2, [pc, #64]	; (8005c10 <xTaskPriorityInherit+0x104>)
 8005bce:	441a      	add	r2, r3
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	f7fe f913 	bl	8003e02 <vListInsertEnd>
 8005bdc:	e004      	b.n	8005be8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005bde:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <xTaskPriorityInherit+0x100>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005be8:	2301      	movs	r3, #1
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	e008      	b.n	8005c00 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bf2:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <xTaskPriorityInherit+0x100>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d201      	bcs.n	8005c00 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c00:	68fb      	ldr	r3, [r7, #12]
	}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000988 	.word	0x20000988
 8005c10:	2000098c 	.word	0x2000098c
 8005c14:	20000a90 	.word	0x20000a90

08005c18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c24:	2300      	movs	r3, #0
 8005c26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d06e      	beq.n	8005d0c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c2e:	4b3a      	ldr	r3, [pc, #232]	; (8005d18 <xTaskPriorityDisinherit+0x100>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d00a      	beq.n	8005c4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	60fb      	str	r3, [r7, #12]
}
 8005c4a:	bf00      	nop
 8005c4c:	e7fe      	b.n	8005c4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	60bb      	str	r3, [r7, #8]
}
 8005c68:	bf00      	nop
 8005c6a:	e7fe      	b.n	8005c6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c70:	1e5a      	subs	r2, r3, #1
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d044      	beq.n	8005d0c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d140      	bne.n	8005d0c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fe f912 	bl	8003eb8 <uxListRemove>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d115      	bne.n	8005cc6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9e:	491f      	ldr	r1, [pc, #124]	; (8005d1c <xTaskPriorityDisinherit+0x104>)
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	440b      	add	r3, r1
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10a      	bne.n	8005cc6 <xTaskPriorityDisinherit+0xae>
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	43da      	mvns	r2, r3
 8005cbc:	4b18      	ldr	r3, [pc, #96]	; (8005d20 <xTaskPriorityDisinherit+0x108>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	4a17      	ldr	r2, [pc, #92]	; (8005d20 <xTaskPriorityDisinherit+0x108>)
 8005cc4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	f1c3 0207 	rsb	r2, r3, #7
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cde:	2201      	movs	r2, #1
 8005ce0:	409a      	lsls	r2, r3
 8005ce2:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <xTaskPriorityDisinherit+0x108>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	4a0d      	ldr	r2, [pc, #52]	; (8005d20 <xTaskPriorityDisinherit+0x108>)
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4a08      	ldr	r2, [pc, #32]	; (8005d1c <xTaskPriorityDisinherit+0x104>)
 8005cfa:	441a      	add	r2, r3
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	3304      	adds	r3, #4
 8005d00:	4619      	mov	r1, r3
 8005d02:	4610      	mov	r0, r2
 8005d04:	f7fe f87d 	bl	8003e02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d0c:	697b      	ldr	r3, [r7, #20]
	}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20000988 	.word	0x20000988
 8005d1c:	2000098c 	.word	0x2000098c
 8005d20:	20000a90 	.word	0x20000a90

08005d24 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b088      	sub	sp, #32
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005d32:	2301      	movs	r3, #1
 8005d34:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 8088 	beq.w	8005e4e <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10a      	bne.n	8005d5c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	60fb      	str	r3, [r7, #12]
}
 8005d58:	bf00      	nop
 8005d5a:	e7fe      	b.n	8005d5a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d902      	bls.n	8005d6c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	61fb      	str	r3, [r7, #28]
 8005d6a:	e002      	b.n	8005d72 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d70:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d068      	beq.n	8005e4e <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d163      	bne.n	8005e4e <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005d86:	4b34      	ldr	r3, [pc, #208]	; (8005e58 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d10a      	bne.n	8005da6 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8005d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	60bb      	str	r3, [r7, #8]
}
 8005da2:	bf00      	nop
 8005da4:	e7fe      	b.n	8005da4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005daa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	db04      	blt.n	8005dc4 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	f1c3 0207 	rsb	r2, r3, #7
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	6959      	ldr	r1, [r3, #20]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4a22      	ldr	r2, [pc, #136]	; (8005e5c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005dd4:	4413      	add	r3, r2
 8005dd6:	4299      	cmp	r1, r3
 8005dd8:	d101      	bne.n	8005dde <vTaskPriorityDisinheritAfterTimeout+0xba>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e000      	b.n	8005de0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8005dde:	2300      	movs	r3, #0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d034      	beq.n	8005e4e <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	3304      	adds	r3, #4
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fe f865 	bl	8003eb8 <uxListRemove>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d115      	bne.n	8005e20 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df8:	4918      	ldr	r1, [pc, #96]	; (8005e5c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	440b      	add	r3, r1
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10a      	bne.n	8005e20 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0e:	2201      	movs	r2, #1
 8005e10:	fa02 f303 	lsl.w	r3, r2, r3
 8005e14:	43da      	mvns	r2, r3
 8005e16:	4b12      	ldr	r3, [pc, #72]	; (8005e60 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	4a10      	ldr	r2, [pc, #64]	; (8005e60 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005e1e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	2201      	movs	r2, #1
 8005e26:	409a      	lsls	r2, r3
 8005e28:	4b0d      	ldr	r3, [pc, #52]	; (8005e60 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	4a0c      	ldr	r2, [pc, #48]	; (8005e60 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e36:	4613      	mov	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4a07      	ldr	r2, [pc, #28]	; (8005e5c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005e40:	441a      	add	r2, r3
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	3304      	adds	r3, #4
 8005e46:	4619      	mov	r1, r3
 8005e48:	4610      	mov	r0, r2
 8005e4a:	f7fd ffda 	bl	8003e02 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e4e:	bf00      	nop
 8005e50:	3720      	adds	r7, #32
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20000988 	.word	0x20000988
 8005e5c:	2000098c 	.word	0x2000098c
 8005e60:	20000a90 	.word	0x20000a90

08005e64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005e68:	4b07      	ldr	r3, [pc, #28]	; (8005e88 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d004      	beq.n	8005e7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005e70:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e76:	3201      	adds	r2, #1
 8005e78:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005e7a:	4b03      	ldr	r3, [pc, #12]	; (8005e88 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
	}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bc80      	pop	{r7}
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	20000988 	.word	0x20000988

08005e8c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005e9a:	f000 feaf 	bl	8006bfc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005e9e:	4b29      	ldr	r3, [pc, #164]	; (8005f44 <xTaskNotifyWait+0xb8>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d01c      	beq.n	8005ee6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005eac:	4b25      	ldr	r3, [pc, #148]	; (8005f44 <xTaskNotifyWait+0xb8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	43d2      	mvns	r2, r2
 8005eb8:	400a      	ands	r2, r1
 8005eba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005ebe:	4b21      	ldr	r3, [pc, #132]	; (8005f44 <xTaskNotifyWait+0xb8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00b      	beq.n	8005ee6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ece:	2101      	movs	r1, #1
 8005ed0:	6838      	ldr	r0, [r7, #0]
 8005ed2:	f000 f9b5 	bl	8006240 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005ed6:	4b1c      	ldr	r3, [pc, #112]	; (8005f48 <xTaskNotifyWait+0xbc>)
 8005ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005ee6:	f000 feb9 	bl	8006c5c <vPortExitCritical>

		taskENTER_CRITICAL();
 8005eea:	f000 fe87 	bl	8006bfc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d005      	beq.n	8005f00 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005ef4:	4b13      	ldr	r3, [pc, #76]	; (8005f44 <xTaskNotifyWait+0xb8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005f00:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <xTaskNotifyWait+0xb8>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d002      	beq.n	8005f14 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]
 8005f12:	e00a      	b.n	8005f2a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005f14:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <xTaskNotifyWait+0xb8>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	43d2      	mvns	r2, r2
 8005f20:	400a      	ands	r2, r1
 8005f22:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 8005f26:	2301      	movs	r3, #1
 8005f28:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f2a:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <xTaskNotifyWait+0xb8>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8005f34:	f000 fe92 	bl	8006c5c <vPortExitCritical>

		return xReturn;
 8005f38:	697b      	ldr	r3, [r7, #20]
	}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20000988 	.word	0x20000988
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08a      	sub	sp, #40	; 0x28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	603b      	str	r3, [r7, #0]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10a      	bne.n	8005f7c <xTaskGenericNotify+0x30>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	61bb      	str	r3, [r7, #24]
}
 8005f78:	bf00      	nop
 8005f7a:	e7fe      	b.n	8005f7a <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005f80:	f000 fe3c 	bl	8006bfc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d004      	beq.n	8005f94 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005f9a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8005fa4:	79fb      	ldrb	r3, [r7, #7]
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d82d      	bhi.n	8006006 <xTaskGenericNotify+0xba>
 8005faa:	a201      	add	r2, pc, #4	; (adr r2, 8005fb0 <xTaskGenericNotify+0x64>)
 8005fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb0:	08006007 	.word	0x08006007
 8005fb4:	08005fc5 	.word	0x08005fc5
 8005fb8:	08005fd7 	.word	0x08005fd7
 8005fbc:	08005fe7 	.word	0x08005fe7
 8005fc0:	08005ff1 	.word	0x08005ff1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8005fd4:	e017      	b.n	8006006 <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8005fe4:	e00f      	b.n	8006006 <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8005fee:	e00a      	b.n	8006006 <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005ff0:	7ffb      	ldrb	r3, [r7, #31]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d004      	beq.n	8006000 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005ffe:	e001      	b.n	8006004 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 8006000:	2300      	movs	r3, #0
 8006002:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8006004:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006006:	7ffb      	ldrb	r3, [r7, #31]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d139      	bne.n	8006080 <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	3304      	adds	r3, #4
 8006010:	4618      	mov	r0, r3
 8006012:	f7fd ff51 	bl	8003eb8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	2201      	movs	r2, #1
 800601c:	409a      	lsls	r2, r3
 800601e:	4b1c      	ldr	r3, [pc, #112]	; (8006090 <xTaskGenericNotify+0x144>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4313      	orrs	r3, r2
 8006024:	4a1a      	ldr	r2, [pc, #104]	; (8006090 <xTaskGenericNotify+0x144>)
 8006026:	6013      	str	r3, [r2, #0]
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4a17      	ldr	r2, [pc, #92]	; (8006094 <xTaskGenericNotify+0x148>)
 8006036:	441a      	add	r2, r3
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	3304      	adds	r3, #4
 800603c:	4619      	mov	r1, r3
 800603e:	4610      	mov	r0, r2
 8006040:	f7fd fedf 	bl	8003e02 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00a      	beq.n	8006062 <xTaskGenericNotify+0x116>
	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	617b      	str	r3, [r7, #20]
}
 800605e:	bf00      	nop
 8006060:	e7fe      	b.n	8006060 <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006066:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <xTaskGenericNotify+0x14c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	429a      	cmp	r2, r3
 800606e:	d907      	bls.n	8006080 <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006070:	4b0a      	ldr	r3, [pc, #40]	; (800609c <xTaskGenericNotify+0x150>)
 8006072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006080:	f000 fdec 	bl	8006c5c <vPortExitCritical>

		return xReturn;
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006086:	4618      	mov	r0, r3
 8006088:	3728      	adds	r7, #40	; 0x28
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20000a90 	.word	0x20000a90
 8006094:	2000098c 	.word	0x2000098c
 8006098:	20000988 	.word	0x20000988
 800609c:	e000ed04 	.word	0xe000ed04

080060a0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08e      	sub	sp, #56	; 0x38
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	603b      	str	r3, [r7, #0]
 80060ac:	4613      	mov	r3, r2
 80060ae:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80060b0:	2301      	movs	r3, #1
 80060b2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10a      	bne.n	80060d0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060cc:	bf00      	nop
 80060ce:	e7fe      	b.n	80060ce <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060d0:	f000 fe56 	bl	8006d80 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80060d8:	f3ef 8211 	mrs	r2, BASEPRI
 80060dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	623a      	str	r2, [r7, #32]
 80060ee:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80060f0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d004      	beq.n	8006104 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800610a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	2202      	movs	r2, #2
 8006112:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	2b04      	cmp	r3, #4
 800611a:	d82f      	bhi.n	800617c <xTaskGenericNotifyFromISR+0xdc>
 800611c:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <xTaskGenericNotifyFromISR+0x84>)
 800611e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006122:	bf00      	nop
 8006124:	0800617d 	.word	0x0800617d
 8006128:	08006139 	.word	0x08006139
 800612c:	0800614b 	.word	0x0800614b
 8006130:	0800615b 	.word	0x0800615b
 8006134:	08006165 	.word	0x08006165
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	431a      	orrs	r2, r3
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006148:	e018      	b.n	800617c <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006154:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006158:	e010      	b.n	800617c <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8006162:	e00b      	b.n	800617c <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006164:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006168:	2b02      	cmp	r3, #2
 800616a:	d004      	beq.n	8006176 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006174:	e001      	b.n	800617a <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 8006176:	2300      	movs	r3, #0
 8006178:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800617a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800617c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006180:	2b01      	cmp	r3, #1
 8006182:	d146      	bne.n	8006212 <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	61bb      	str	r3, [r7, #24]
}
 800619e:	bf00      	nop
 80061a0:	e7fe      	b.n	80061a0 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061a2:	4b21      	ldr	r3, [pc, #132]	; (8006228 <xTaskGenericNotifyFromISR+0x188>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d11c      	bne.n	80061e4 <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	3304      	adds	r3, #4
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fd fe82 	bl	8003eb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b8:	2201      	movs	r2, #1
 80061ba:	409a      	lsls	r2, r3
 80061bc:	4b1b      	ldr	r3, [pc, #108]	; (800622c <xTaskGenericNotifyFromISR+0x18c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	4a1a      	ldr	r2, [pc, #104]	; (800622c <xTaskGenericNotifyFromISR+0x18c>)
 80061c4:	6013      	str	r3, [r2, #0]
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ca:	4613      	mov	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4a17      	ldr	r2, [pc, #92]	; (8006230 <xTaskGenericNotifyFromISR+0x190>)
 80061d4:	441a      	add	r2, r3
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	3304      	adds	r3, #4
 80061da:	4619      	mov	r1, r3
 80061dc:	4610      	mov	r0, r2
 80061de:	f7fd fe10 	bl	8003e02 <vListInsertEnd>
 80061e2:	e005      	b.n	80061f0 <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	3318      	adds	r3, #24
 80061e8:	4619      	mov	r1, r3
 80061ea:	4812      	ldr	r0, [pc, #72]	; (8006234 <xTaskGenericNotifyFromISR+0x194>)
 80061ec:	f7fd fe09 	bl	8003e02 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f4:	4b10      	ldr	r3, [pc, #64]	; (8006238 <xTaskGenericNotifyFromISR+0x198>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d909      	bls.n	8006212 <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80061fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006200:	2b00      	cmp	r3, #0
 8006202:	d003      	beq.n	800620c <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006206:	2201      	movs	r2, #1
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	e002      	b.n	8006212 <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800620c:	4b0b      	ldr	r3, [pc, #44]	; (800623c <xTaskGenericNotifyFromISR+0x19c>)
 800620e:	2201      	movs	r2, #1
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006214:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f383 8811 	msr	BASEPRI, r3
}
 800621c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800621e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8006220:	4618      	mov	r0, r3
 8006222:	3738      	adds	r7, #56	; 0x38
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	20000ab0 	.word	0x20000ab0
 800622c:	20000a90 	.word	0x20000a90
 8006230:	2000098c 	.word	0x2000098c
 8006234:	20000a48 	.word	0x20000a48
 8006238:	20000988 	.word	0x20000988
 800623c:	20000a9c 	.word	0x20000a9c

08006240 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800624a:	4b29      	ldr	r3, [pc, #164]	; (80062f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006250:	4b28      	ldr	r3, [pc, #160]	; (80062f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3304      	adds	r3, #4
 8006256:	4618      	mov	r0, r3
 8006258:	f7fd fe2e 	bl	8003eb8 <uxListRemove>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10b      	bne.n	800627a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006262:	4b24      	ldr	r3, [pc, #144]	; (80062f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006268:	2201      	movs	r2, #1
 800626a:	fa02 f303 	lsl.w	r3, r2, r3
 800626e:	43da      	mvns	r2, r3
 8006270:	4b21      	ldr	r3, [pc, #132]	; (80062f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4013      	ands	r3, r2
 8006276:	4a20      	ldr	r2, [pc, #128]	; (80062f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006278:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006280:	d10a      	bne.n	8006298 <prvAddCurrentTaskToDelayedList+0x58>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d007      	beq.n	8006298 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006288:	4b1a      	ldr	r3, [pc, #104]	; (80062f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3304      	adds	r3, #4
 800628e:	4619      	mov	r1, r3
 8006290:	481a      	ldr	r0, [pc, #104]	; (80062fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006292:	f7fd fdb6 	bl	8003e02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006296:	e026      	b.n	80062e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4413      	add	r3, r2
 800629e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062a0:	4b14      	ldr	r3, [pc, #80]	; (80062f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d209      	bcs.n	80062c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062b0:	4b13      	ldr	r3, [pc, #76]	; (8006300 <prvAddCurrentTaskToDelayedList+0xc0>)
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	4b0f      	ldr	r3, [pc, #60]	; (80062f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3304      	adds	r3, #4
 80062ba:	4619      	mov	r1, r3
 80062bc:	4610      	mov	r0, r2
 80062be:	f7fd fdc3 	bl	8003e48 <vListInsert>
}
 80062c2:	e010      	b.n	80062e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062c4:	4b0f      	ldr	r3, [pc, #60]	; (8006304 <prvAddCurrentTaskToDelayedList+0xc4>)
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	4b0a      	ldr	r3, [pc, #40]	; (80062f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3304      	adds	r3, #4
 80062ce:	4619      	mov	r1, r3
 80062d0:	4610      	mov	r0, r2
 80062d2:	f7fd fdb9 	bl	8003e48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062d6:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <prvAddCurrentTaskToDelayedList+0xc8>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d202      	bcs.n	80062e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80062e0:	4a09      	ldr	r2, [pc, #36]	; (8006308 <prvAddCurrentTaskToDelayedList+0xc8>)
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	6013      	str	r3, [r2, #0]
}
 80062e6:	bf00      	nop
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20000a8c 	.word	0x20000a8c
 80062f4:	20000988 	.word	0x20000988
 80062f8:	20000a90 	.word	0x20000a90
 80062fc:	20000a74 	.word	0x20000a74
 8006300:	20000a44 	.word	0x20000a44
 8006304:	20000a40 	.word	0x20000a40
 8006308:	20000aa8 	.word	0x20000aa8

0800630c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08a      	sub	sp, #40	; 0x28
 8006310:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006312:	2300      	movs	r3, #0
 8006314:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006316:	f000 fb41 	bl	800699c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800631a:	4b1c      	ldr	r3, [pc, #112]	; (800638c <xTimerCreateTimerTask+0x80>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d021      	beq.n	8006366 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006322:	2300      	movs	r3, #0
 8006324:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006326:	2300      	movs	r3, #0
 8006328:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800632a:	1d3a      	adds	r2, r7, #4
 800632c:	f107 0108 	add.w	r1, r7, #8
 8006330:	f107 030c 	add.w	r3, r7, #12
 8006334:	4618      	mov	r0, r3
 8006336:	f7fa fcd7 	bl	8000ce8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	9202      	str	r2, [sp, #8]
 8006342:	9301      	str	r3, [sp, #4]
 8006344:	2302      	movs	r3, #2
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	2300      	movs	r3, #0
 800634a:	460a      	mov	r2, r1
 800634c:	4910      	ldr	r1, [pc, #64]	; (8006390 <xTimerCreateTimerTask+0x84>)
 800634e:	4811      	ldr	r0, [pc, #68]	; (8006394 <xTimerCreateTimerTask+0x88>)
 8006350:	f7fe fd7a 	bl	8004e48 <xTaskCreateStatic>
 8006354:	4603      	mov	r3, r0
 8006356:	4a10      	ldr	r2, [pc, #64]	; (8006398 <xTimerCreateTimerTask+0x8c>)
 8006358:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800635a:	4b0f      	ldr	r3, [pc, #60]	; (8006398 <xTimerCreateTimerTask+0x8c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006362:	2301      	movs	r3, #1
 8006364:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10a      	bne.n	8006382 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	613b      	str	r3, [r7, #16]
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006382:	697b      	ldr	r3, [r7, #20]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20000ae4 	.word	0x20000ae4
 8006390:	08008454 	.word	0x08008454
 8006394:	080065d9 	.word	0x080065d9
 8006398:	20000ae8 	.word	0x20000ae8

0800639c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800639c:	b580      	push	{r7, lr}
 800639e:	b088      	sub	sp, #32
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80063aa:	202c      	movs	r0, #44	; 0x2c
 80063ac:	f000 fd26 	bl	8006dfc <pvPortMalloc>
 80063b0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00d      	beq.n	80063d4 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	9301      	str	r3, [sp, #4]
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 f846 	bl	8006458 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80063d4:	697b      	ldr	r3, [r7, #20]
	}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b08a      	sub	sp, #40	; 0x28
 80063e2:	af02      	add	r7, sp, #8
 80063e4:	60f8      	str	r0, [r7, #12]
 80063e6:	60b9      	str	r1, [r7, #8]
 80063e8:	607a      	str	r2, [r7, #4]
 80063ea:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80063ec:	232c      	movs	r3, #44	; 0x2c
 80063ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	2b2c      	cmp	r3, #44	; 0x2c
 80063f4:	d00a      	beq.n	800640c <xTimerCreateStatic+0x2e>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	61bb      	str	r3, [r7, #24]
}
 8006408:	bf00      	nop
 800640a:	e7fe      	b.n	800640a <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800640c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10a      	bne.n	8006428 <xTimerCreateStatic+0x4a>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	617b      	str	r3, [r7, #20]
}
 8006424:	bf00      	nop
 8006426:	e7fe      	b.n	8006426 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642a:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00d      	beq.n	800644e <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	9301      	str	r3, [sp, #4]
 8006436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	68b9      	ldr	r1, [r7, #8]
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 f809 	bl	8006458 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800644e:	69fb      	ldr	r3, [r7, #28]
	}
 8006450:	4618      	mov	r0, r3
 8006452:	3720      	adds	r7, #32
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
 8006464:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10a      	bne.n	8006482 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	617b      	str	r3, [r7, #20]
}
 800647e:	bf00      	nop
 8006480:	e7fe      	b.n	8006480 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	2b00      	cmp	r3, #0
 8006486:	d015      	beq.n	80064b4 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006488:	f000 fa88 	bl	800699c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	6a3a      	ldr	r2, [r7, #32]
 80064a8:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	3304      	adds	r3, #4
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fd fc9b 	bl	8003dea <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80064b4:	bf00      	nop
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	; 0x28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80064ca:	2300      	movs	r3, #0
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	623b      	str	r3, [r7, #32]
}
 80064e6:	bf00      	nop
 80064e8:	e7fe      	b.n	80064e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80064ea:	4b1a      	ldr	r3, [pc, #104]	; (8006554 <xTimerGenericCommand+0x98>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d02a      	beq.n	8006548 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2b05      	cmp	r3, #5
 8006502:	dc18      	bgt.n	8006536 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006504:	f7ff fae4 	bl	8005ad0 <xTaskGetSchedulerState>
 8006508:	4603      	mov	r3, r0
 800650a:	2b02      	cmp	r3, #2
 800650c:	d109      	bne.n	8006522 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800650e:	4b11      	ldr	r3, [pc, #68]	; (8006554 <xTimerGenericCommand+0x98>)
 8006510:	6818      	ldr	r0, [r3, #0]
 8006512:	f107 0114 	add.w	r1, r7, #20
 8006516:	2300      	movs	r3, #0
 8006518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800651a:	f7fd fe81 	bl	8004220 <xQueueGenericSend>
 800651e:	6278      	str	r0, [r7, #36]	; 0x24
 8006520:	e012      	b.n	8006548 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006522:	4b0c      	ldr	r3, [pc, #48]	; (8006554 <xTimerGenericCommand+0x98>)
 8006524:	6818      	ldr	r0, [r3, #0]
 8006526:	f107 0114 	add.w	r1, r7, #20
 800652a:	2300      	movs	r3, #0
 800652c:	2200      	movs	r2, #0
 800652e:	f7fd fe77 	bl	8004220 <xQueueGenericSend>
 8006532:	6278      	str	r0, [r7, #36]	; 0x24
 8006534:	e008      	b.n	8006548 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006536:	4b07      	ldr	r3, [pc, #28]	; (8006554 <xTimerGenericCommand+0x98>)
 8006538:	6818      	ldr	r0, [r3, #0]
 800653a:	f107 0114 	add.w	r1, r7, #20
 800653e:	2300      	movs	r3, #0
 8006540:	683a      	ldr	r2, [r7, #0]
 8006542:	f7fd ff6b 	bl	800441c <xQueueGenericSendFromISR>
 8006546:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800654a:	4618      	mov	r0, r3
 800654c:	3728      	adds	r7, #40	; 0x28
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20000ae4 	.word	0x20000ae4

08006558 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af02      	add	r7, sp, #8
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006562:	4b1c      	ldr	r3, [pc, #112]	; (80065d4 <prvProcessExpiredTimer+0x7c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	3304      	adds	r3, #4
 8006570:	4618      	mov	r0, r3
 8006572:	f7fd fca1 	bl	8003eb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d122      	bne.n	80065c4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	699a      	ldr	r2, [r3, #24]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	18d1      	adds	r1, r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	6978      	ldr	r0, [r7, #20]
 800658c:	f000 f8c8 	bl	8006720 <prvInsertTimerInActiveList>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d016      	beq.n	80065c4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006596:	2300      	movs	r3, #0
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	2300      	movs	r3, #0
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	2100      	movs	r1, #0
 80065a0:	6978      	ldr	r0, [r7, #20]
 80065a2:	f7ff ff8b 	bl	80064bc <xTimerGenericCommand>
 80065a6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10a      	bne.n	80065c4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	60fb      	str	r3, [r7, #12]
}
 80065c0:	bf00      	nop
 80065c2:	e7fe      	b.n	80065c2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	6978      	ldr	r0, [r7, #20]
 80065ca:	4798      	blx	r3
}
 80065cc:	bf00      	nop
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	20000adc 	.word	0x20000adc

080065d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065e0:	f107 0308 	add.w	r3, r7, #8
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 f857 	bl	8006698 <prvGetNextExpireTime>
 80065ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	4619      	mov	r1, r3
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f803 	bl	80065fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80065f6:	f000 f8d5 	bl	80067a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065fa:	e7f1      	b.n	80065e0 <prvTimerTask+0x8>

080065fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006606:	f7fe fe65 	bl	80052d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800660a:	f107 0308 	add.w	r3, r7, #8
 800660e:	4618      	mov	r0, r3
 8006610:	f000 f866 	bl	80066e0 <prvSampleTimeNow>
 8006614:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d130      	bne.n	800667e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <prvProcessTimerOrBlockTask+0x3c>
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	429a      	cmp	r2, r3
 8006628:	d806      	bhi.n	8006638 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800662a:	f7fe fe61 	bl	80052f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800662e:	68f9      	ldr	r1, [r7, #12]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7ff ff91 	bl	8006558 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006636:	e024      	b.n	8006682 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d008      	beq.n	8006650 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800663e:	4b13      	ldr	r3, [pc, #76]	; (800668c <prvProcessTimerOrBlockTask+0x90>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	bf0c      	ite	eq
 8006648:	2301      	moveq	r3, #1
 800664a:	2300      	movne	r3, #0
 800664c:	b2db      	uxtb	r3, r3
 800664e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006650:	4b0f      	ldr	r3, [pc, #60]	; (8006690 <prvProcessTimerOrBlockTask+0x94>)
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	4619      	mov	r1, r3
 800665e:	f7fe fbbf 	bl	8004de0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006662:	f7fe fe45 	bl	80052f0 <xTaskResumeAll>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800666c:	4b09      	ldr	r3, [pc, #36]	; (8006694 <prvProcessTimerOrBlockTask+0x98>)
 800666e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	f3bf 8f6f 	isb	sy
}
 800667c:	e001      	b.n	8006682 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800667e:	f7fe fe37 	bl	80052f0 <xTaskResumeAll>
}
 8006682:	bf00      	nop
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20000ae0 	.word	0x20000ae0
 8006690:	20000ae4 	.word	0x20000ae4
 8006694:	e000ed04 	.word	0xe000ed04

08006698 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066a0:	4b0e      	ldr	r3, [pc, #56]	; (80066dc <prvGetNextExpireTime+0x44>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bf0c      	ite	eq
 80066aa:	2301      	moveq	r3, #1
 80066ac:	2300      	movne	r3, #0
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	461a      	mov	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d105      	bne.n	80066ca <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066be:	4b07      	ldr	r3, [pc, #28]	; (80066dc <prvGetNextExpireTime+0x44>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	e001      	b.n	80066ce <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80066ce:	68fb      	ldr	r3, [r7, #12]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bc80      	pop	{r7}
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	20000adc 	.word	0x20000adc

080066e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80066e8:	f7fe fe9e 	bl	8005428 <xTaskGetTickCount>
 80066ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80066ee:	4b0b      	ldr	r3, [pc, #44]	; (800671c <prvSampleTimeNow+0x3c>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d205      	bcs.n	8006704 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80066f8:	f000 f8ee 	bl	80068d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	e002      	b.n	800670a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800670a:	4a04      	ldr	r2, [pc, #16]	; (800671c <prvSampleTimeNow+0x3c>)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006710:	68fb      	ldr	r3, [r7, #12]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	20000aec 	.word	0x20000aec

08006720 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
 800672c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800672e:	2300      	movs	r3, #0
 8006730:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	429a      	cmp	r2, r3
 8006744:	d812      	bhi.n	800676c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	1ad2      	subs	r2, r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	429a      	cmp	r2, r3
 8006752:	d302      	bcc.n	800675a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006754:	2301      	movs	r3, #1
 8006756:	617b      	str	r3, [r7, #20]
 8006758:	e01b      	b.n	8006792 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800675a:	4b10      	ldr	r3, [pc, #64]	; (800679c <prvInsertTimerInActiveList+0x7c>)
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3304      	adds	r3, #4
 8006762:	4619      	mov	r1, r3
 8006764:	4610      	mov	r0, r2
 8006766:	f7fd fb6f 	bl	8003e48 <vListInsert>
 800676a:	e012      	b.n	8006792 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	429a      	cmp	r2, r3
 8006772:	d206      	bcs.n	8006782 <prvInsertTimerInActiveList+0x62>
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	429a      	cmp	r2, r3
 800677a:	d302      	bcc.n	8006782 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800677c:	2301      	movs	r3, #1
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	e007      	b.n	8006792 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006782:	4b07      	ldr	r3, [pc, #28]	; (80067a0 <prvInsertTimerInActiveList+0x80>)
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3304      	adds	r3, #4
 800678a:	4619      	mov	r1, r3
 800678c:	4610      	mov	r0, r2
 800678e:	f7fd fb5b 	bl	8003e48 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006792:	697b      	ldr	r3, [r7, #20]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20000ae0 	.word	0x20000ae0
 80067a0:	20000adc 	.word	0x20000adc

080067a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08c      	sub	sp, #48	; 0x30
 80067a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067aa:	e081      	b.n	80068b0 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	db7d      	blt.n	80068ae <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d004      	beq.n	80067c8 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	3304      	adds	r3, #4
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fd fb78 	bl	8003eb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067c8:	1d3b      	adds	r3, r7, #4
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff ff88 	bl	80066e0 <prvSampleTimeNow>
 80067d0:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b09      	cmp	r3, #9
 80067d6:	d86b      	bhi.n	80068b0 <prvProcessReceivedCommands+0x10c>
 80067d8:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <prvProcessReceivedCommands+0x3c>)
 80067da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067de:	bf00      	nop
 80067e0:	08006809 	.word	0x08006809
 80067e4:	08006809 	.word	0x08006809
 80067e8:	08006809 	.word	0x08006809
 80067ec:	080068b1 	.word	0x080068b1
 80067f0:	08006865 	.word	0x08006865
 80067f4:	0800689d 	.word	0x0800689d
 80067f8:	08006809 	.word	0x08006809
 80067fc:	08006809 	.word	0x08006809
 8006800:	080068b1 	.word	0x080068b1
 8006804:	08006865 	.word	0x08006865
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	18d1      	adds	r1, r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6a3a      	ldr	r2, [r7, #32]
 8006814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006816:	f7ff ff83 	bl	8006720 <prvInsertTimerInActiveList>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d047      	beq.n	80068b0 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006826:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d13f      	bne.n	80068b0 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	441a      	add	r2, r3
 8006838:	2300      	movs	r3, #0
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	2300      	movs	r3, #0
 800683e:	2100      	movs	r1, #0
 8006840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006842:	f7ff fe3b 	bl	80064bc <xTimerGenericCommand>
 8006846:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d130      	bne.n	80068b0 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	61bb      	str	r3, [r7, #24]
}
 8006860:	bf00      	nop
 8006862:	e7fe      	b.n	8006862 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10a      	bne.n	8006888 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	617b      	str	r3, [r7, #20]
}
 8006884:	bf00      	nop
 8006886:	e7fe      	b.n	8006886 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	699a      	ldr	r2, [r3, #24]
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	18d1      	adds	r1, r2, r3
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	6a3a      	ldr	r2, [r7, #32]
 8006894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006896:	f7ff ff43 	bl	8006720 <prvInsertTimerInActiveList>
					break;
 800689a:	e009      	b.n	80068b0 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d104      	bne.n	80068b0 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 80068a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068a8:	f000 fb6c 	bl	8006f84 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80068ac:	e000      	b.n	80068b0 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80068ae:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068b0:	4b08      	ldr	r3, [pc, #32]	; (80068d4 <prvProcessReceivedCommands+0x130>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f107 0108 	add.w	r1, r7, #8
 80068b8:	2200      	movs	r2, #0
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fd fed4 	bl	8004668 <xQueueReceive>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f47f af72 	bne.w	80067ac <prvProcessReceivedCommands+0x8>
	}
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	3728      	adds	r7, #40	; 0x28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20000ae4 	.word	0x20000ae4

080068d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b088      	sub	sp, #32
 80068dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068de:	e045      	b.n	800696c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068e0:	4b2c      	ldr	r3, [pc, #176]	; (8006994 <prvSwitchTimerLists+0xbc>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068ea:	4b2a      	ldr	r3, [pc, #168]	; (8006994 <prvSwitchTimerLists+0xbc>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	3304      	adds	r3, #4
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fd fadd 	bl	8003eb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d12e      	bne.n	800696c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4413      	add	r3, r2
 8006916:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	429a      	cmp	r2, r3
 800691e:	d90e      	bls.n	800693e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800692c:	4b19      	ldr	r3, [pc, #100]	; (8006994 <prvSwitchTimerLists+0xbc>)
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	3304      	adds	r3, #4
 8006934:	4619      	mov	r1, r3
 8006936:	4610      	mov	r0, r2
 8006938:	f7fd fa86 	bl	8003e48 <vListInsert>
 800693c:	e016      	b.n	800696c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800693e:	2300      	movs	r3, #0
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	2300      	movs	r3, #0
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	2100      	movs	r1, #0
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f7ff fdb7 	bl	80064bc <xTimerGenericCommand>
 800694e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10a      	bne.n	800696c <prvSwitchTimerLists+0x94>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	603b      	str	r3, [r7, #0]
}
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800696c:	4b09      	ldr	r3, [pc, #36]	; (8006994 <prvSwitchTimerLists+0xbc>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1b4      	bne.n	80068e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006976:	4b07      	ldr	r3, [pc, #28]	; (8006994 <prvSwitchTimerLists+0xbc>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800697c:	4b06      	ldr	r3, [pc, #24]	; (8006998 <prvSwitchTimerLists+0xc0>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a04      	ldr	r2, [pc, #16]	; (8006994 <prvSwitchTimerLists+0xbc>)
 8006982:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006984:	4a04      	ldr	r2, [pc, #16]	; (8006998 <prvSwitchTimerLists+0xc0>)
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	6013      	str	r3, [r2, #0]
}
 800698a:	bf00      	nop
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	20000adc 	.word	0x20000adc
 8006998:	20000ae0 	.word	0x20000ae0

0800699c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80069a2:	f000 f92b 	bl	8006bfc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80069a6:	4b15      	ldr	r3, [pc, #84]	; (80069fc <prvCheckForValidListAndQueue+0x60>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d120      	bne.n	80069f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80069ae:	4814      	ldr	r0, [pc, #80]	; (8006a00 <prvCheckForValidListAndQueue+0x64>)
 80069b0:	f7fd f9fc 	bl	8003dac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80069b4:	4813      	ldr	r0, [pc, #76]	; (8006a04 <prvCheckForValidListAndQueue+0x68>)
 80069b6:	f7fd f9f9 	bl	8003dac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80069ba:	4b13      	ldr	r3, [pc, #76]	; (8006a08 <prvCheckForValidListAndQueue+0x6c>)
 80069bc:	4a10      	ldr	r2, [pc, #64]	; (8006a00 <prvCheckForValidListAndQueue+0x64>)
 80069be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80069c0:	4b12      	ldr	r3, [pc, #72]	; (8006a0c <prvCheckForValidListAndQueue+0x70>)
 80069c2:	4a10      	ldr	r2, [pc, #64]	; (8006a04 <prvCheckForValidListAndQueue+0x68>)
 80069c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80069c6:	2300      	movs	r3, #0
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	4b11      	ldr	r3, [pc, #68]	; (8006a10 <prvCheckForValidListAndQueue+0x74>)
 80069cc:	4a11      	ldr	r2, [pc, #68]	; (8006a14 <prvCheckForValidListAndQueue+0x78>)
 80069ce:	210c      	movs	r1, #12
 80069d0:	200a      	movs	r0, #10
 80069d2:	f7fd fb03 	bl	8003fdc <xQueueGenericCreateStatic>
 80069d6:	4603      	mov	r3, r0
 80069d8:	4a08      	ldr	r2, [pc, #32]	; (80069fc <prvCheckForValidListAndQueue+0x60>)
 80069da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80069dc:	4b07      	ldr	r3, [pc, #28]	; (80069fc <prvCheckForValidListAndQueue+0x60>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d005      	beq.n	80069f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80069e4:	4b05      	ldr	r3, [pc, #20]	; (80069fc <prvCheckForValidListAndQueue+0x60>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	490b      	ldr	r1, [pc, #44]	; (8006a18 <prvCheckForValidListAndQueue+0x7c>)
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fe f9d0 	bl	8004d90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069f0:	f000 f934 	bl	8006c5c <vPortExitCritical>
}
 80069f4:	bf00      	nop
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	20000ae4 	.word	0x20000ae4
 8006a00:	20000ab4 	.word	0x20000ab4
 8006a04:	20000ac8 	.word	0x20000ac8
 8006a08:	20000adc 	.word	0x20000adc
 8006a0c:	20000ae0 	.word	0x20000ae0
 8006a10:	20000b68 	.word	0x20000b68
 8006a14:	20000af0 	.word	0x20000af0
 8006a18:	0800845c 	.word	0x0800845c

08006a1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3b04      	subs	r3, #4
 8006a2c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3b04      	subs	r3, #4
 8006a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f023 0201 	bic.w	r2, r3, #1
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	3b04      	subs	r3, #4
 8006a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a4c:	4a08      	ldr	r2, [pc, #32]	; (8006a70 <pxPortInitialiseStack+0x54>)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3b14      	subs	r3, #20
 8006a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3b20      	subs	r3, #32
 8006a62:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a64:	68fb      	ldr	r3, [r7, #12]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bc80      	pop	{r7}
 8006a6e:	4770      	bx	lr
 8006a70:	08006a75 	.word	0x08006a75

08006a74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a7e:	4b12      	ldr	r3, [pc, #72]	; (8006ac8 <prvTaskExitError+0x54>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a86:	d00a      	beq.n	8006a9e <prvTaskExitError+0x2a>
	__asm volatile
 8006a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	60fb      	str	r3, [r7, #12]
}
 8006a9a:	bf00      	nop
 8006a9c:	e7fe      	b.n	8006a9c <prvTaskExitError+0x28>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	60bb      	str	r3, [r7, #8]
}
 8006ab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ab2:	bf00      	nop
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d0fc      	beq.n	8006ab4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006aba:	bf00      	nop
 8006abc:	bf00      	nop
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	200000a8 	.word	0x200000a8
 8006acc:	00000000 	.word	0x00000000

08006ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ad0:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <pxCurrentTCBConst2>)
 8006ad2:	6819      	ldr	r1, [r3, #0]
 8006ad4:	6808      	ldr	r0, [r1, #0]
 8006ad6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ada:	f380 8809 	msr	PSP, r0
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f04f 0000 	mov.w	r0, #0
 8006ae6:	f380 8811 	msr	BASEPRI, r0
 8006aea:	f04e 0e0d 	orr.w	lr, lr, #13
 8006aee:	4770      	bx	lr

08006af0 <pxCurrentTCBConst2>:
 8006af0:	20000988 	.word	0x20000988
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006af4:	bf00      	nop
 8006af6:	bf00      	nop

08006af8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006af8:	4806      	ldr	r0, [pc, #24]	; (8006b14 <prvPortStartFirstTask+0x1c>)
 8006afa:	6800      	ldr	r0, [r0, #0]
 8006afc:	6800      	ldr	r0, [r0, #0]
 8006afe:	f380 8808 	msr	MSP, r0
 8006b02:	b662      	cpsie	i
 8006b04:	b661      	cpsie	f
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	df00      	svc	0
 8006b10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b12:	bf00      	nop
 8006b14:	e000ed08 	.word	0xe000ed08

08006b18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b1e:	4b32      	ldr	r3, [pc, #200]	; (8006be8 <xPortStartScheduler+0xd0>)
 8006b20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	22ff      	movs	r2, #255	; 0xff
 8006b2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	4b2a      	ldr	r3, [pc, #168]	; (8006bec <xPortStartScheduler+0xd4>)
 8006b44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b46:	4b2a      	ldr	r3, [pc, #168]	; (8006bf0 <xPortStartScheduler+0xd8>)
 8006b48:	2207      	movs	r2, #7
 8006b4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b4c:	e009      	b.n	8006b62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006b4e:	4b28      	ldr	r3, [pc, #160]	; (8006bf0 <xPortStartScheduler+0xd8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	4a26      	ldr	r2, [pc, #152]	; (8006bf0 <xPortStartScheduler+0xd8>)
 8006b56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	005b      	lsls	r3, r3, #1
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b6a:	2b80      	cmp	r3, #128	; 0x80
 8006b6c:	d0ef      	beq.n	8006b4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b6e:	4b20      	ldr	r3, [pc, #128]	; (8006bf0 <xPortStartScheduler+0xd8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f1c3 0307 	rsb	r3, r3, #7
 8006b76:	2b04      	cmp	r3, #4
 8006b78:	d00a      	beq.n	8006b90 <xPortStartScheduler+0x78>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	60bb      	str	r3, [r7, #8]
}
 8006b8c:	bf00      	nop
 8006b8e:	e7fe      	b.n	8006b8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b90:	4b17      	ldr	r3, [pc, #92]	; (8006bf0 <xPortStartScheduler+0xd8>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	021b      	lsls	r3, r3, #8
 8006b96:	4a16      	ldr	r2, [pc, #88]	; (8006bf0 <xPortStartScheduler+0xd8>)
 8006b98:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b9a:	4b15      	ldr	r3, [pc, #84]	; (8006bf0 <xPortStartScheduler+0xd8>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ba2:	4a13      	ldr	r2, [pc, #76]	; (8006bf0 <xPortStartScheduler+0xd8>)
 8006ba4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006bae:	4b11      	ldr	r3, [pc, #68]	; (8006bf4 <xPortStartScheduler+0xdc>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a10      	ldr	r2, [pc, #64]	; (8006bf4 <xPortStartScheduler+0xdc>)
 8006bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006bb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006bba:	4b0e      	ldr	r3, [pc, #56]	; (8006bf4 <xPortStartScheduler+0xdc>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a0d      	ldr	r2, [pc, #52]	; (8006bf4 <xPortStartScheduler+0xdc>)
 8006bc0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006bc4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006bc6:	f000 f8b9 	bl	8006d3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006bca:	4b0b      	ldr	r3, [pc, #44]	; (8006bf8 <xPortStartScheduler+0xe0>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006bd0:	f7ff ff92 	bl	8006af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006bd4:	f7fe fd06 	bl	80055e4 <vTaskSwitchContext>
	prvTaskExitError();
 8006bd8:	f7ff ff4c 	bl	8006a74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	e000e400 	.word	0xe000e400
 8006bec:	20000bb0 	.word	0x20000bb0
 8006bf0:	20000bb4 	.word	0x20000bb4
 8006bf4:	e000ed20 	.word	0xe000ed20
 8006bf8:	200000a8 	.word	0x200000a8

08006bfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	607b      	str	r3, [r7, #4]
}
 8006c14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c16:	4b0f      	ldr	r3, [pc, #60]	; (8006c54 <vPortEnterCritical+0x58>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	4a0d      	ldr	r2, [pc, #52]	; (8006c54 <vPortEnterCritical+0x58>)
 8006c1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c20:	4b0c      	ldr	r3, [pc, #48]	; (8006c54 <vPortEnterCritical+0x58>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d10f      	bne.n	8006c48 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c28:	4b0b      	ldr	r3, [pc, #44]	; (8006c58 <vPortEnterCritical+0x5c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <vPortEnterCritical+0x4c>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	603b      	str	r3, [r7, #0]
}
 8006c44:	bf00      	nop
 8006c46:	e7fe      	b.n	8006c46 <vPortEnterCritical+0x4a>
	}
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bc80      	pop	{r7}
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	200000a8 	.word	0x200000a8
 8006c58:	e000ed04 	.word	0xe000ed04

08006c5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c62:	4b11      	ldr	r3, [pc, #68]	; (8006ca8 <vPortExitCritical+0x4c>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10a      	bne.n	8006c80 <vPortExitCritical+0x24>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	607b      	str	r3, [r7, #4]
}
 8006c7c:	bf00      	nop
 8006c7e:	e7fe      	b.n	8006c7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c80:	4b09      	ldr	r3, [pc, #36]	; (8006ca8 <vPortExitCritical+0x4c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	4a08      	ldr	r2, [pc, #32]	; (8006ca8 <vPortExitCritical+0x4c>)
 8006c88:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c8a:	4b07      	ldr	r3, [pc, #28]	; (8006ca8 <vPortExitCritical+0x4c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d105      	bne.n	8006c9e <vPortExitCritical+0x42>
 8006c92:	2300      	movs	r3, #0
 8006c94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	f383 8811 	msr	BASEPRI, r3
}
 8006c9c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c9e:	bf00      	nop
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bc80      	pop	{r7}
 8006ca6:	4770      	bx	lr
 8006ca8:	200000a8 	.word	0x200000a8
 8006cac:	00000000 	.word	0x00000000

08006cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006cb0:	f3ef 8009 	mrs	r0, PSP
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	4b0d      	ldr	r3, [pc, #52]	; (8006cf0 <pxCurrentTCBConst>)
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006cc0:	6010      	str	r0, [r2, #0]
 8006cc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006cc6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006cca:	f380 8811 	msr	BASEPRI, r0
 8006cce:	f7fe fc89 	bl	80055e4 <vTaskSwitchContext>
 8006cd2:	f04f 0000 	mov.w	r0, #0
 8006cd6:	f380 8811 	msr	BASEPRI, r0
 8006cda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006cde:	6819      	ldr	r1, [r3, #0]
 8006ce0:	6808      	ldr	r0, [r1, #0]
 8006ce2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ce6:	f380 8809 	msr	PSP, r0
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	4770      	bx	lr

08006cf0 <pxCurrentTCBConst>:
 8006cf0:	20000988 	.word	0x20000988
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop

08006cf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	607b      	str	r3, [r7, #4]
}
 8006d10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d12:	f7fe fba9 	bl	8005468 <xTaskIncrementTick>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d1c:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <SysTick_Handler+0x40>)
 8006d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	2300      	movs	r3, #0
 8006d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	f383 8811 	msr	BASEPRI, r3
}
 8006d2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	e000ed04 	.word	0xe000ed04

08006d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d40:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <vPortSetupTimerInterrupt+0x30>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d46:	4b0a      	ldr	r3, [pc, #40]	; (8006d70 <vPortSetupTimerInterrupt+0x34>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d4c:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <vPortSetupTimerInterrupt+0x38>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a09      	ldr	r2, [pc, #36]	; (8006d78 <vPortSetupTimerInterrupt+0x3c>)
 8006d52:	fba2 2303 	umull	r2, r3, r2, r3
 8006d56:	099b      	lsrs	r3, r3, #6
 8006d58:	4a08      	ldr	r2, [pc, #32]	; (8006d7c <vPortSetupTimerInterrupt+0x40>)
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d5e:	4b03      	ldr	r3, [pc, #12]	; (8006d6c <vPortSetupTimerInterrupt+0x30>)
 8006d60:	2207      	movs	r2, #7
 8006d62:	601a      	str	r2, [r3, #0]
}
 8006d64:	bf00      	nop
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bc80      	pop	{r7}
 8006d6a:	4770      	bx	lr
 8006d6c:	e000e010 	.word	0xe000e010
 8006d70:	e000e018 	.word	0xe000e018
 8006d74:	2000009c 	.word	0x2000009c
 8006d78:	10624dd3 	.word	0x10624dd3
 8006d7c:	e000e014 	.word	0xe000e014

08006d80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d86:	f3ef 8305 	mrs	r3, IPSR
 8006d8a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b0f      	cmp	r3, #15
 8006d90:	d914      	bls.n	8006dbc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d92:	4a16      	ldr	r2, [pc, #88]	; (8006dec <vPortValidateInterruptPriority+0x6c>)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4413      	add	r3, r2
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d9c:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <vPortValidateInterruptPriority+0x70>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	7afa      	ldrb	r2, [r7, #11]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d20a      	bcs.n	8006dbc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	607b      	str	r3, [r7, #4]
}
 8006db8:	bf00      	nop
 8006dba:	e7fe      	b.n	8006dba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006dbc:	4b0d      	ldr	r3, [pc, #52]	; (8006df4 <vPortValidateInterruptPriority+0x74>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006dc4:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <vPortValidateInterruptPriority+0x78>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d90a      	bls.n	8006de2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	603b      	str	r3, [r7, #0]
}
 8006dde:	bf00      	nop
 8006de0:	e7fe      	b.n	8006de0 <vPortValidateInterruptPriority+0x60>
	}
 8006de2:	bf00      	nop
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr
 8006dec:	e000e3f0 	.word	0xe000e3f0
 8006df0:	20000bb0 	.word	0x20000bb0
 8006df4:	e000ed0c 	.word	0xe000ed0c
 8006df8:	20000bb4 	.word	0x20000bb4

08006dfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b08a      	sub	sp, #40	; 0x28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e04:	2300      	movs	r3, #0
 8006e06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e08:	f7fe fa64 	bl	80052d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e0c:	4b58      	ldr	r3, [pc, #352]	; (8006f70 <pvPortMalloc+0x174>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e14:	f000 f910 	bl	8007038 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e18:	4b56      	ldr	r3, [pc, #344]	; (8006f74 <pvPortMalloc+0x178>)
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4013      	ands	r3, r2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f040 808e 	bne.w	8006f42 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d01d      	beq.n	8006e68 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e2c:	2208      	movs	r2, #8
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4413      	add	r3, r2
 8006e32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d014      	beq.n	8006e68 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f023 0307 	bic.w	r3, r3, #7
 8006e44:	3308      	adds	r3, #8
 8006e46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f003 0307 	and.w	r3, r3, #7
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <pvPortMalloc+0x6c>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	617b      	str	r3, [r7, #20]
}
 8006e64:	bf00      	nop
 8006e66:	e7fe      	b.n	8006e66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d069      	beq.n	8006f42 <pvPortMalloc+0x146>
 8006e6e:	4b42      	ldr	r3, [pc, #264]	; (8006f78 <pvPortMalloc+0x17c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d864      	bhi.n	8006f42 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e78:	4b40      	ldr	r3, [pc, #256]	; (8006f7c <pvPortMalloc+0x180>)
 8006e7a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e7c:	4b3f      	ldr	r3, [pc, #252]	; (8006f7c <pvPortMalloc+0x180>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e82:	e004      	b.n	8006e8e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d903      	bls.n	8006ea0 <pvPortMalloc+0xa4>
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1f1      	bne.n	8006e84 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ea0:	4b33      	ldr	r3, [pc, #204]	; (8006f70 <pvPortMalloc+0x174>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d04b      	beq.n	8006f42 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2208      	movs	r2, #8
 8006eb0:	4413      	add	r3, r2
 8006eb2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	1ad2      	subs	r2, r2, r3
 8006ec4:	2308      	movs	r3, #8
 8006ec6:	005b      	lsls	r3, r3, #1
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d91f      	bls.n	8006f0c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <pvPortMalloc+0xf8>
	__asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	613b      	str	r3, [r7, #16]
}
 8006ef0:	bf00      	nop
 8006ef2:	e7fe      	b.n	8006ef2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	1ad2      	subs	r2, r2, r3
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f06:	69b8      	ldr	r0, [r7, #24]
 8006f08:	f000 f8f8 	bl	80070fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f0c:	4b1a      	ldr	r3, [pc, #104]	; (8006f78 <pvPortMalloc+0x17c>)
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	4a18      	ldr	r2, [pc, #96]	; (8006f78 <pvPortMalloc+0x17c>)
 8006f18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f1a:	4b17      	ldr	r3, [pc, #92]	; (8006f78 <pvPortMalloc+0x17c>)
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	4b18      	ldr	r3, [pc, #96]	; (8006f80 <pvPortMalloc+0x184>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d203      	bcs.n	8006f2e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f26:	4b14      	ldr	r3, [pc, #80]	; (8006f78 <pvPortMalloc+0x17c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a15      	ldr	r2, [pc, #84]	; (8006f80 <pvPortMalloc+0x184>)
 8006f2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	4b10      	ldr	r3, [pc, #64]	; (8006f74 <pvPortMalloc+0x178>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	431a      	orrs	r2, r3
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f42:	f7fe f9d5 	bl	80052f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	f003 0307 	and.w	r3, r3, #7
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00a      	beq.n	8006f66 <pvPortMalloc+0x16a>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	60fb      	str	r3, [r7, #12]
}
 8006f62:	bf00      	nop
 8006f64:	e7fe      	b.n	8006f64 <pvPortMalloc+0x168>
	return pvReturn;
 8006f66:	69fb      	ldr	r3, [r7, #28]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3728      	adds	r7, #40	; 0x28
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	200023c0 	.word	0x200023c0
 8006f74:	200023cc 	.word	0x200023cc
 8006f78:	200023c4 	.word	0x200023c4
 8006f7c:	200023b8 	.word	0x200023b8
 8006f80:	200023c8 	.word	0x200023c8

08006f84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d048      	beq.n	8007028 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f96:	2308      	movs	r3, #8
 8006f98:	425b      	negs	r3, r3
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	4b21      	ldr	r3, [pc, #132]	; (8007030 <vPortFree+0xac>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4013      	ands	r3, r2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10a      	bne.n	8006fc8 <vPortFree+0x44>
	__asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	60fb      	str	r3, [r7, #12]
}
 8006fc4:	bf00      	nop
 8006fc6:	e7fe      	b.n	8006fc6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00a      	beq.n	8006fe6 <vPortFree+0x62>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	60bb      	str	r3, [r7, #8]
}
 8006fe2:	bf00      	nop
 8006fe4:	e7fe      	b.n	8006fe4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	4b11      	ldr	r3, [pc, #68]	; (8007030 <vPortFree+0xac>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4013      	ands	r3, r2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d019      	beq.n	8007028 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d115      	bne.n	8007028 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	685a      	ldr	r2, [r3, #4]
 8007000:	4b0b      	ldr	r3, [pc, #44]	; (8007030 <vPortFree+0xac>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	43db      	mvns	r3, r3
 8007006:	401a      	ands	r2, r3
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800700c:	f7fe f962 	bl	80052d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	4b07      	ldr	r3, [pc, #28]	; (8007034 <vPortFree+0xb0>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4413      	add	r3, r2
 800701a:	4a06      	ldr	r2, [pc, #24]	; (8007034 <vPortFree+0xb0>)
 800701c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800701e:	6938      	ldr	r0, [r7, #16]
 8007020:	f000 f86c 	bl	80070fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007024:	f7fe f964 	bl	80052f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007028:	bf00      	nop
 800702a:	3718      	adds	r7, #24
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	200023cc 	.word	0x200023cc
 8007034:	200023c4 	.word	0x200023c4

08007038 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800703e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007042:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007044:	4b27      	ldr	r3, [pc, #156]	; (80070e4 <prvHeapInit+0xac>)
 8007046:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f003 0307 	and.w	r3, r3, #7
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00c      	beq.n	800706c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3307      	adds	r3, #7
 8007056:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f023 0307 	bic.w	r3, r3, #7
 800705e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	4a1f      	ldr	r2, [pc, #124]	; (80070e4 <prvHeapInit+0xac>)
 8007068:	4413      	add	r3, r2
 800706a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007070:	4a1d      	ldr	r2, [pc, #116]	; (80070e8 <prvHeapInit+0xb0>)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007076:	4b1c      	ldr	r3, [pc, #112]	; (80070e8 <prvHeapInit+0xb0>)
 8007078:	2200      	movs	r2, #0
 800707a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	4413      	add	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007084:	2208      	movs	r2, #8
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	1a9b      	subs	r3, r3, r2
 800708a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0307 	bic.w	r3, r3, #7
 8007092:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4a15      	ldr	r2, [pc, #84]	; (80070ec <prvHeapInit+0xb4>)
 8007098:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800709a:	4b14      	ldr	r3, [pc, #80]	; (80070ec <prvHeapInit+0xb4>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2200      	movs	r2, #0
 80070a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070a2:	4b12      	ldr	r3, [pc, #72]	; (80070ec <prvHeapInit+0xb4>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2200      	movs	r2, #0
 80070a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	1ad2      	subs	r2, r2, r3
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070b8:	4b0c      	ldr	r3, [pc, #48]	; (80070ec <prvHeapInit+0xb4>)
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	4a0a      	ldr	r2, [pc, #40]	; (80070f0 <prvHeapInit+0xb8>)
 80070c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	4a09      	ldr	r2, [pc, #36]	; (80070f4 <prvHeapInit+0xbc>)
 80070ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070d0:	4b09      	ldr	r3, [pc, #36]	; (80070f8 <prvHeapInit+0xc0>)
 80070d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80070d6:	601a      	str	r2, [r3, #0]
}
 80070d8:	bf00      	nop
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	bc80      	pop	{r7}
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	20000bb8 	.word	0x20000bb8
 80070e8:	200023b8 	.word	0x200023b8
 80070ec:	200023c0 	.word	0x200023c0
 80070f0:	200023c8 	.word	0x200023c8
 80070f4:	200023c4 	.word	0x200023c4
 80070f8:	200023cc 	.word	0x200023cc

080070fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007104:	4b27      	ldr	r3, [pc, #156]	; (80071a4 <prvInsertBlockIntoFreeList+0xa8>)
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	e002      	b.n	8007110 <prvInsertBlockIntoFreeList+0x14>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	429a      	cmp	r2, r3
 8007118:	d8f7      	bhi.n	800710a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	4413      	add	r3, r2
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	429a      	cmp	r2, r3
 800712a:	d108      	bne.n	800713e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	441a      	add	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	441a      	add	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	429a      	cmp	r2, r3
 8007150:	d118      	bne.n	8007184 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	4b14      	ldr	r3, [pc, #80]	; (80071a8 <prvInsertBlockIntoFreeList+0xac>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	429a      	cmp	r2, r3
 800715c:	d00d      	beq.n	800717a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	441a      	add	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	e008      	b.n	800718c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800717a:	4b0b      	ldr	r3, [pc, #44]	; (80071a8 <prvInsertBlockIntoFreeList+0xac>)
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	e003      	b.n	800718c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	429a      	cmp	r2, r3
 8007192:	d002      	beq.n	800719a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800719a:	bf00      	nop
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	bc80      	pop	{r7}
 80071a2:	4770      	bx	lr
 80071a4:	200023b8 	.word	0x200023b8
 80071a8:	200023c0 	.word	0x200023c0

080071ac <__errno>:
 80071ac:	4b01      	ldr	r3, [pc, #4]	; (80071b4 <__errno+0x8>)
 80071ae:	6818      	ldr	r0, [r3, #0]
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	200000ac 	.word	0x200000ac

080071b8 <std>:
 80071b8:	2300      	movs	r3, #0
 80071ba:	b510      	push	{r4, lr}
 80071bc:	4604      	mov	r4, r0
 80071be:	e9c0 3300 	strd	r3, r3, [r0]
 80071c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071c6:	6083      	str	r3, [r0, #8]
 80071c8:	8181      	strh	r1, [r0, #12]
 80071ca:	6643      	str	r3, [r0, #100]	; 0x64
 80071cc:	81c2      	strh	r2, [r0, #14]
 80071ce:	6183      	str	r3, [r0, #24]
 80071d0:	4619      	mov	r1, r3
 80071d2:	2208      	movs	r2, #8
 80071d4:	305c      	adds	r0, #92	; 0x5c
 80071d6:	f000 f91a 	bl	800740e <memset>
 80071da:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <std+0x38>)
 80071dc:	6224      	str	r4, [r4, #32]
 80071de:	6263      	str	r3, [r4, #36]	; 0x24
 80071e0:	4b04      	ldr	r3, [pc, #16]	; (80071f4 <std+0x3c>)
 80071e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80071e4:	4b04      	ldr	r3, [pc, #16]	; (80071f8 <std+0x40>)
 80071e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071e8:	4b04      	ldr	r3, [pc, #16]	; (80071fc <std+0x44>)
 80071ea:	6323      	str	r3, [r4, #48]	; 0x30
 80071ec:	bd10      	pop	{r4, pc}
 80071ee:	bf00      	nop
 80071f0:	08007759 	.word	0x08007759
 80071f4:	0800777b 	.word	0x0800777b
 80071f8:	080077b3 	.word	0x080077b3
 80071fc:	080077d7 	.word	0x080077d7

08007200 <_cleanup_r>:
 8007200:	4901      	ldr	r1, [pc, #4]	; (8007208 <_cleanup_r+0x8>)
 8007202:	f000 b8af 	b.w	8007364 <_fwalk_reent>
 8007206:	bf00      	nop
 8007208:	08007aa9 	.word	0x08007aa9

0800720c <__sfmoreglue>:
 800720c:	2268      	movs	r2, #104	; 0x68
 800720e:	b570      	push	{r4, r5, r6, lr}
 8007210:	1e4d      	subs	r5, r1, #1
 8007212:	4355      	muls	r5, r2
 8007214:	460e      	mov	r6, r1
 8007216:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800721a:	f000 f921 	bl	8007460 <_malloc_r>
 800721e:	4604      	mov	r4, r0
 8007220:	b140      	cbz	r0, 8007234 <__sfmoreglue+0x28>
 8007222:	2100      	movs	r1, #0
 8007224:	e9c0 1600 	strd	r1, r6, [r0]
 8007228:	300c      	adds	r0, #12
 800722a:	60a0      	str	r0, [r4, #8]
 800722c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007230:	f000 f8ed 	bl	800740e <memset>
 8007234:	4620      	mov	r0, r4
 8007236:	bd70      	pop	{r4, r5, r6, pc}

08007238 <__sfp_lock_acquire>:
 8007238:	4801      	ldr	r0, [pc, #4]	; (8007240 <__sfp_lock_acquire+0x8>)
 800723a:	f000 b8d8 	b.w	80073ee <__retarget_lock_acquire_recursive>
 800723e:	bf00      	nop
 8007240:	200023d1 	.word	0x200023d1

08007244 <__sfp_lock_release>:
 8007244:	4801      	ldr	r0, [pc, #4]	; (800724c <__sfp_lock_release+0x8>)
 8007246:	f000 b8d3 	b.w	80073f0 <__retarget_lock_release_recursive>
 800724a:	bf00      	nop
 800724c:	200023d1 	.word	0x200023d1

08007250 <__sinit_lock_acquire>:
 8007250:	4801      	ldr	r0, [pc, #4]	; (8007258 <__sinit_lock_acquire+0x8>)
 8007252:	f000 b8cc 	b.w	80073ee <__retarget_lock_acquire_recursive>
 8007256:	bf00      	nop
 8007258:	200023d2 	.word	0x200023d2

0800725c <__sinit_lock_release>:
 800725c:	4801      	ldr	r0, [pc, #4]	; (8007264 <__sinit_lock_release+0x8>)
 800725e:	f000 b8c7 	b.w	80073f0 <__retarget_lock_release_recursive>
 8007262:	bf00      	nop
 8007264:	200023d2 	.word	0x200023d2

08007268 <__sinit>:
 8007268:	b510      	push	{r4, lr}
 800726a:	4604      	mov	r4, r0
 800726c:	f7ff fff0 	bl	8007250 <__sinit_lock_acquire>
 8007270:	69a3      	ldr	r3, [r4, #24]
 8007272:	b11b      	cbz	r3, 800727c <__sinit+0x14>
 8007274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007278:	f7ff bff0 	b.w	800725c <__sinit_lock_release>
 800727c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007280:	6523      	str	r3, [r4, #80]	; 0x50
 8007282:	4b13      	ldr	r3, [pc, #76]	; (80072d0 <__sinit+0x68>)
 8007284:	4a13      	ldr	r2, [pc, #76]	; (80072d4 <__sinit+0x6c>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	62a2      	str	r2, [r4, #40]	; 0x28
 800728a:	42a3      	cmp	r3, r4
 800728c:	bf08      	it	eq
 800728e:	2301      	moveq	r3, #1
 8007290:	4620      	mov	r0, r4
 8007292:	bf08      	it	eq
 8007294:	61a3      	streq	r3, [r4, #24]
 8007296:	f000 f81f 	bl	80072d8 <__sfp>
 800729a:	6060      	str	r0, [r4, #4]
 800729c:	4620      	mov	r0, r4
 800729e:	f000 f81b 	bl	80072d8 <__sfp>
 80072a2:	60a0      	str	r0, [r4, #8]
 80072a4:	4620      	mov	r0, r4
 80072a6:	f000 f817 	bl	80072d8 <__sfp>
 80072aa:	2200      	movs	r2, #0
 80072ac:	2104      	movs	r1, #4
 80072ae:	60e0      	str	r0, [r4, #12]
 80072b0:	6860      	ldr	r0, [r4, #4]
 80072b2:	f7ff ff81 	bl	80071b8 <std>
 80072b6:	2201      	movs	r2, #1
 80072b8:	2109      	movs	r1, #9
 80072ba:	68a0      	ldr	r0, [r4, #8]
 80072bc:	f7ff ff7c 	bl	80071b8 <std>
 80072c0:	2202      	movs	r2, #2
 80072c2:	2112      	movs	r1, #18
 80072c4:	68e0      	ldr	r0, [r4, #12]
 80072c6:	f7ff ff77 	bl	80071b8 <std>
 80072ca:	2301      	movs	r3, #1
 80072cc:	61a3      	str	r3, [r4, #24]
 80072ce:	e7d1      	b.n	8007274 <__sinit+0xc>
 80072d0:	08008530 	.word	0x08008530
 80072d4:	08007201 	.word	0x08007201

080072d8 <__sfp>:
 80072d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072da:	4607      	mov	r7, r0
 80072dc:	f7ff ffac 	bl	8007238 <__sfp_lock_acquire>
 80072e0:	4b1e      	ldr	r3, [pc, #120]	; (800735c <__sfp+0x84>)
 80072e2:	681e      	ldr	r6, [r3, #0]
 80072e4:	69b3      	ldr	r3, [r6, #24]
 80072e6:	b913      	cbnz	r3, 80072ee <__sfp+0x16>
 80072e8:	4630      	mov	r0, r6
 80072ea:	f7ff ffbd 	bl	8007268 <__sinit>
 80072ee:	3648      	adds	r6, #72	; 0x48
 80072f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	d503      	bpl.n	8007300 <__sfp+0x28>
 80072f8:	6833      	ldr	r3, [r6, #0]
 80072fa:	b30b      	cbz	r3, 8007340 <__sfp+0x68>
 80072fc:	6836      	ldr	r6, [r6, #0]
 80072fe:	e7f7      	b.n	80072f0 <__sfp+0x18>
 8007300:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007304:	b9d5      	cbnz	r5, 800733c <__sfp+0x64>
 8007306:	4b16      	ldr	r3, [pc, #88]	; (8007360 <__sfp+0x88>)
 8007308:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800730c:	60e3      	str	r3, [r4, #12]
 800730e:	6665      	str	r5, [r4, #100]	; 0x64
 8007310:	f000 f86c 	bl	80073ec <__retarget_lock_init_recursive>
 8007314:	f7ff ff96 	bl	8007244 <__sfp_lock_release>
 8007318:	2208      	movs	r2, #8
 800731a:	4629      	mov	r1, r5
 800731c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007320:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007324:	6025      	str	r5, [r4, #0]
 8007326:	61a5      	str	r5, [r4, #24]
 8007328:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800732c:	f000 f86f 	bl	800740e <memset>
 8007330:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007334:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007338:	4620      	mov	r0, r4
 800733a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800733c:	3468      	adds	r4, #104	; 0x68
 800733e:	e7d9      	b.n	80072f4 <__sfp+0x1c>
 8007340:	2104      	movs	r1, #4
 8007342:	4638      	mov	r0, r7
 8007344:	f7ff ff62 	bl	800720c <__sfmoreglue>
 8007348:	4604      	mov	r4, r0
 800734a:	6030      	str	r0, [r6, #0]
 800734c:	2800      	cmp	r0, #0
 800734e:	d1d5      	bne.n	80072fc <__sfp+0x24>
 8007350:	f7ff ff78 	bl	8007244 <__sfp_lock_release>
 8007354:	230c      	movs	r3, #12
 8007356:	603b      	str	r3, [r7, #0]
 8007358:	e7ee      	b.n	8007338 <__sfp+0x60>
 800735a:	bf00      	nop
 800735c:	08008530 	.word	0x08008530
 8007360:	ffff0001 	.word	0xffff0001

08007364 <_fwalk_reent>:
 8007364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007368:	4606      	mov	r6, r0
 800736a:	4688      	mov	r8, r1
 800736c:	2700      	movs	r7, #0
 800736e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007372:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007376:	f1b9 0901 	subs.w	r9, r9, #1
 800737a:	d505      	bpl.n	8007388 <_fwalk_reent+0x24>
 800737c:	6824      	ldr	r4, [r4, #0]
 800737e:	2c00      	cmp	r4, #0
 8007380:	d1f7      	bne.n	8007372 <_fwalk_reent+0xe>
 8007382:	4638      	mov	r0, r7
 8007384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007388:	89ab      	ldrh	r3, [r5, #12]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d907      	bls.n	800739e <_fwalk_reent+0x3a>
 800738e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007392:	3301      	adds	r3, #1
 8007394:	d003      	beq.n	800739e <_fwalk_reent+0x3a>
 8007396:	4629      	mov	r1, r5
 8007398:	4630      	mov	r0, r6
 800739a:	47c0      	blx	r8
 800739c:	4307      	orrs	r7, r0
 800739e:	3568      	adds	r5, #104	; 0x68
 80073a0:	e7e9      	b.n	8007376 <_fwalk_reent+0x12>
	...

080073a4 <__libc_init_array>:
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	2600      	movs	r6, #0
 80073a8:	4d0c      	ldr	r5, [pc, #48]	; (80073dc <__libc_init_array+0x38>)
 80073aa:	4c0d      	ldr	r4, [pc, #52]	; (80073e0 <__libc_init_array+0x3c>)
 80073ac:	1b64      	subs	r4, r4, r5
 80073ae:	10a4      	asrs	r4, r4, #2
 80073b0:	42a6      	cmp	r6, r4
 80073b2:	d109      	bne.n	80073c8 <__libc_init_array+0x24>
 80073b4:	f000 ffb0 	bl	8008318 <_init>
 80073b8:	2600      	movs	r6, #0
 80073ba:	4d0a      	ldr	r5, [pc, #40]	; (80073e4 <__libc_init_array+0x40>)
 80073bc:	4c0a      	ldr	r4, [pc, #40]	; (80073e8 <__libc_init_array+0x44>)
 80073be:	1b64      	subs	r4, r4, r5
 80073c0:	10a4      	asrs	r4, r4, #2
 80073c2:	42a6      	cmp	r6, r4
 80073c4:	d105      	bne.n	80073d2 <__libc_init_array+0x2e>
 80073c6:	bd70      	pop	{r4, r5, r6, pc}
 80073c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073cc:	4798      	blx	r3
 80073ce:	3601      	adds	r6, #1
 80073d0:	e7ee      	b.n	80073b0 <__libc_init_array+0xc>
 80073d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d6:	4798      	blx	r3
 80073d8:	3601      	adds	r6, #1
 80073da:	e7f2      	b.n	80073c2 <__libc_init_array+0x1e>
 80073dc:	08008568 	.word	0x08008568
 80073e0:	08008568 	.word	0x08008568
 80073e4:	08008568 	.word	0x08008568
 80073e8:	0800856c 	.word	0x0800856c

080073ec <__retarget_lock_init_recursive>:
 80073ec:	4770      	bx	lr

080073ee <__retarget_lock_acquire_recursive>:
 80073ee:	4770      	bx	lr

080073f0 <__retarget_lock_release_recursive>:
 80073f0:	4770      	bx	lr

080073f2 <memcpy>:
 80073f2:	440a      	add	r2, r1
 80073f4:	4291      	cmp	r1, r2
 80073f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80073fa:	d100      	bne.n	80073fe <memcpy+0xc>
 80073fc:	4770      	bx	lr
 80073fe:	b510      	push	{r4, lr}
 8007400:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007404:	4291      	cmp	r1, r2
 8007406:	f803 4f01 	strb.w	r4, [r3, #1]!
 800740a:	d1f9      	bne.n	8007400 <memcpy+0xe>
 800740c:	bd10      	pop	{r4, pc}

0800740e <memset>:
 800740e:	4603      	mov	r3, r0
 8007410:	4402      	add	r2, r0
 8007412:	4293      	cmp	r3, r2
 8007414:	d100      	bne.n	8007418 <memset+0xa>
 8007416:	4770      	bx	lr
 8007418:	f803 1b01 	strb.w	r1, [r3], #1
 800741c:	e7f9      	b.n	8007412 <memset+0x4>
	...

08007420 <sbrk_aligned>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	4e0e      	ldr	r6, [pc, #56]	; (800745c <sbrk_aligned+0x3c>)
 8007424:	460c      	mov	r4, r1
 8007426:	6831      	ldr	r1, [r6, #0]
 8007428:	4605      	mov	r5, r0
 800742a:	b911      	cbnz	r1, 8007432 <sbrk_aligned+0x12>
 800742c:	f000 f984 	bl	8007738 <_sbrk_r>
 8007430:	6030      	str	r0, [r6, #0]
 8007432:	4621      	mov	r1, r4
 8007434:	4628      	mov	r0, r5
 8007436:	f000 f97f 	bl	8007738 <_sbrk_r>
 800743a:	1c43      	adds	r3, r0, #1
 800743c:	d00a      	beq.n	8007454 <sbrk_aligned+0x34>
 800743e:	1cc4      	adds	r4, r0, #3
 8007440:	f024 0403 	bic.w	r4, r4, #3
 8007444:	42a0      	cmp	r0, r4
 8007446:	d007      	beq.n	8007458 <sbrk_aligned+0x38>
 8007448:	1a21      	subs	r1, r4, r0
 800744a:	4628      	mov	r0, r5
 800744c:	f000 f974 	bl	8007738 <_sbrk_r>
 8007450:	3001      	adds	r0, #1
 8007452:	d101      	bne.n	8007458 <sbrk_aligned+0x38>
 8007454:	f04f 34ff 	mov.w	r4, #4294967295
 8007458:	4620      	mov	r0, r4
 800745a:	bd70      	pop	{r4, r5, r6, pc}
 800745c:	200023d8 	.word	0x200023d8

08007460 <_malloc_r>:
 8007460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007464:	1ccd      	adds	r5, r1, #3
 8007466:	f025 0503 	bic.w	r5, r5, #3
 800746a:	3508      	adds	r5, #8
 800746c:	2d0c      	cmp	r5, #12
 800746e:	bf38      	it	cc
 8007470:	250c      	movcc	r5, #12
 8007472:	2d00      	cmp	r5, #0
 8007474:	4607      	mov	r7, r0
 8007476:	db01      	blt.n	800747c <_malloc_r+0x1c>
 8007478:	42a9      	cmp	r1, r5
 800747a:	d905      	bls.n	8007488 <_malloc_r+0x28>
 800747c:	230c      	movs	r3, #12
 800747e:	2600      	movs	r6, #0
 8007480:	603b      	str	r3, [r7, #0]
 8007482:	4630      	mov	r0, r6
 8007484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007488:	4e2e      	ldr	r6, [pc, #184]	; (8007544 <_malloc_r+0xe4>)
 800748a:	f000 fbc1 	bl	8007c10 <__malloc_lock>
 800748e:	6833      	ldr	r3, [r6, #0]
 8007490:	461c      	mov	r4, r3
 8007492:	bb34      	cbnz	r4, 80074e2 <_malloc_r+0x82>
 8007494:	4629      	mov	r1, r5
 8007496:	4638      	mov	r0, r7
 8007498:	f7ff ffc2 	bl	8007420 <sbrk_aligned>
 800749c:	1c43      	adds	r3, r0, #1
 800749e:	4604      	mov	r4, r0
 80074a0:	d14d      	bne.n	800753e <_malloc_r+0xde>
 80074a2:	6834      	ldr	r4, [r6, #0]
 80074a4:	4626      	mov	r6, r4
 80074a6:	2e00      	cmp	r6, #0
 80074a8:	d140      	bne.n	800752c <_malloc_r+0xcc>
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	4631      	mov	r1, r6
 80074ae:	4638      	mov	r0, r7
 80074b0:	eb04 0803 	add.w	r8, r4, r3
 80074b4:	f000 f940 	bl	8007738 <_sbrk_r>
 80074b8:	4580      	cmp	r8, r0
 80074ba:	d13a      	bne.n	8007532 <_malloc_r+0xd2>
 80074bc:	6821      	ldr	r1, [r4, #0]
 80074be:	3503      	adds	r5, #3
 80074c0:	1a6d      	subs	r5, r5, r1
 80074c2:	f025 0503 	bic.w	r5, r5, #3
 80074c6:	3508      	adds	r5, #8
 80074c8:	2d0c      	cmp	r5, #12
 80074ca:	bf38      	it	cc
 80074cc:	250c      	movcc	r5, #12
 80074ce:	4638      	mov	r0, r7
 80074d0:	4629      	mov	r1, r5
 80074d2:	f7ff ffa5 	bl	8007420 <sbrk_aligned>
 80074d6:	3001      	adds	r0, #1
 80074d8:	d02b      	beq.n	8007532 <_malloc_r+0xd2>
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	442b      	add	r3, r5
 80074de:	6023      	str	r3, [r4, #0]
 80074e0:	e00e      	b.n	8007500 <_malloc_r+0xa0>
 80074e2:	6822      	ldr	r2, [r4, #0]
 80074e4:	1b52      	subs	r2, r2, r5
 80074e6:	d41e      	bmi.n	8007526 <_malloc_r+0xc6>
 80074e8:	2a0b      	cmp	r2, #11
 80074ea:	d916      	bls.n	800751a <_malloc_r+0xba>
 80074ec:	1961      	adds	r1, r4, r5
 80074ee:	42a3      	cmp	r3, r4
 80074f0:	6025      	str	r5, [r4, #0]
 80074f2:	bf18      	it	ne
 80074f4:	6059      	strne	r1, [r3, #4]
 80074f6:	6863      	ldr	r3, [r4, #4]
 80074f8:	bf08      	it	eq
 80074fa:	6031      	streq	r1, [r6, #0]
 80074fc:	5162      	str	r2, [r4, r5]
 80074fe:	604b      	str	r3, [r1, #4]
 8007500:	4638      	mov	r0, r7
 8007502:	f104 060b 	add.w	r6, r4, #11
 8007506:	f000 fb89 	bl	8007c1c <__malloc_unlock>
 800750a:	f026 0607 	bic.w	r6, r6, #7
 800750e:	1d23      	adds	r3, r4, #4
 8007510:	1af2      	subs	r2, r6, r3
 8007512:	d0b6      	beq.n	8007482 <_malloc_r+0x22>
 8007514:	1b9b      	subs	r3, r3, r6
 8007516:	50a3      	str	r3, [r4, r2]
 8007518:	e7b3      	b.n	8007482 <_malloc_r+0x22>
 800751a:	6862      	ldr	r2, [r4, #4]
 800751c:	42a3      	cmp	r3, r4
 800751e:	bf0c      	ite	eq
 8007520:	6032      	streq	r2, [r6, #0]
 8007522:	605a      	strne	r2, [r3, #4]
 8007524:	e7ec      	b.n	8007500 <_malloc_r+0xa0>
 8007526:	4623      	mov	r3, r4
 8007528:	6864      	ldr	r4, [r4, #4]
 800752a:	e7b2      	b.n	8007492 <_malloc_r+0x32>
 800752c:	4634      	mov	r4, r6
 800752e:	6876      	ldr	r6, [r6, #4]
 8007530:	e7b9      	b.n	80074a6 <_malloc_r+0x46>
 8007532:	230c      	movs	r3, #12
 8007534:	4638      	mov	r0, r7
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	f000 fb70 	bl	8007c1c <__malloc_unlock>
 800753c:	e7a1      	b.n	8007482 <_malloc_r+0x22>
 800753e:	6025      	str	r5, [r4, #0]
 8007540:	e7de      	b.n	8007500 <_malloc_r+0xa0>
 8007542:	bf00      	nop
 8007544:	200023d4 	.word	0x200023d4

08007548 <iprintf>:
 8007548:	b40f      	push	{r0, r1, r2, r3}
 800754a:	4b0a      	ldr	r3, [pc, #40]	; (8007574 <iprintf+0x2c>)
 800754c:	b513      	push	{r0, r1, r4, lr}
 800754e:	681c      	ldr	r4, [r3, #0]
 8007550:	b124      	cbz	r4, 800755c <iprintf+0x14>
 8007552:	69a3      	ldr	r3, [r4, #24]
 8007554:	b913      	cbnz	r3, 800755c <iprintf+0x14>
 8007556:	4620      	mov	r0, r4
 8007558:	f7ff fe86 	bl	8007268 <__sinit>
 800755c:	ab05      	add	r3, sp, #20
 800755e:	4620      	mov	r0, r4
 8007560:	9a04      	ldr	r2, [sp, #16]
 8007562:	68a1      	ldr	r1, [r4, #8]
 8007564:	9301      	str	r3, [sp, #4]
 8007566:	f000 fbcf 	bl	8007d08 <_vfiprintf_r>
 800756a:	b002      	add	sp, #8
 800756c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007570:	b004      	add	sp, #16
 8007572:	4770      	bx	lr
 8007574:	200000ac 	.word	0x200000ac

08007578 <_puts_r>:
 8007578:	b570      	push	{r4, r5, r6, lr}
 800757a:	460e      	mov	r6, r1
 800757c:	4605      	mov	r5, r0
 800757e:	b118      	cbz	r0, 8007588 <_puts_r+0x10>
 8007580:	6983      	ldr	r3, [r0, #24]
 8007582:	b90b      	cbnz	r3, 8007588 <_puts_r+0x10>
 8007584:	f7ff fe70 	bl	8007268 <__sinit>
 8007588:	69ab      	ldr	r3, [r5, #24]
 800758a:	68ac      	ldr	r4, [r5, #8]
 800758c:	b913      	cbnz	r3, 8007594 <_puts_r+0x1c>
 800758e:	4628      	mov	r0, r5
 8007590:	f7ff fe6a 	bl	8007268 <__sinit>
 8007594:	4b2c      	ldr	r3, [pc, #176]	; (8007648 <_puts_r+0xd0>)
 8007596:	429c      	cmp	r4, r3
 8007598:	d120      	bne.n	80075dc <_puts_r+0x64>
 800759a:	686c      	ldr	r4, [r5, #4]
 800759c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800759e:	07db      	lsls	r3, r3, #31
 80075a0:	d405      	bmi.n	80075ae <_puts_r+0x36>
 80075a2:	89a3      	ldrh	r3, [r4, #12]
 80075a4:	0598      	lsls	r0, r3, #22
 80075a6:	d402      	bmi.n	80075ae <_puts_r+0x36>
 80075a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075aa:	f7ff ff20 	bl	80073ee <__retarget_lock_acquire_recursive>
 80075ae:	89a3      	ldrh	r3, [r4, #12]
 80075b0:	0719      	lsls	r1, r3, #28
 80075b2:	d51d      	bpl.n	80075f0 <_puts_r+0x78>
 80075b4:	6923      	ldr	r3, [r4, #16]
 80075b6:	b1db      	cbz	r3, 80075f0 <_puts_r+0x78>
 80075b8:	3e01      	subs	r6, #1
 80075ba:	68a3      	ldr	r3, [r4, #8]
 80075bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80075c0:	3b01      	subs	r3, #1
 80075c2:	60a3      	str	r3, [r4, #8]
 80075c4:	bb39      	cbnz	r1, 8007616 <_puts_r+0x9e>
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	da38      	bge.n	800763c <_puts_r+0xc4>
 80075ca:	4622      	mov	r2, r4
 80075cc:	210a      	movs	r1, #10
 80075ce:	4628      	mov	r0, r5
 80075d0:	f000 f906 	bl	80077e0 <__swbuf_r>
 80075d4:	3001      	adds	r0, #1
 80075d6:	d011      	beq.n	80075fc <_puts_r+0x84>
 80075d8:	250a      	movs	r5, #10
 80075da:	e011      	b.n	8007600 <_puts_r+0x88>
 80075dc:	4b1b      	ldr	r3, [pc, #108]	; (800764c <_puts_r+0xd4>)
 80075de:	429c      	cmp	r4, r3
 80075e0:	d101      	bne.n	80075e6 <_puts_r+0x6e>
 80075e2:	68ac      	ldr	r4, [r5, #8]
 80075e4:	e7da      	b.n	800759c <_puts_r+0x24>
 80075e6:	4b1a      	ldr	r3, [pc, #104]	; (8007650 <_puts_r+0xd8>)
 80075e8:	429c      	cmp	r4, r3
 80075ea:	bf08      	it	eq
 80075ec:	68ec      	ldreq	r4, [r5, #12]
 80075ee:	e7d5      	b.n	800759c <_puts_r+0x24>
 80075f0:	4621      	mov	r1, r4
 80075f2:	4628      	mov	r0, r5
 80075f4:	f000 f958 	bl	80078a8 <__swsetup_r>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d0dd      	beq.n	80075b8 <_puts_r+0x40>
 80075fc:	f04f 35ff 	mov.w	r5, #4294967295
 8007600:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007602:	07da      	lsls	r2, r3, #31
 8007604:	d405      	bmi.n	8007612 <_puts_r+0x9a>
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	059b      	lsls	r3, r3, #22
 800760a:	d402      	bmi.n	8007612 <_puts_r+0x9a>
 800760c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800760e:	f7ff feef 	bl	80073f0 <__retarget_lock_release_recursive>
 8007612:	4628      	mov	r0, r5
 8007614:	bd70      	pop	{r4, r5, r6, pc}
 8007616:	2b00      	cmp	r3, #0
 8007618:	da04      	bge.n	8007624 <_puts_r+0xac>
 800761a:	69a2      	ldr	r2, [r4, #24]
 800761c:	429a      	cmp	r2, r3
 800761e:	dc06      	bgt.n	800762e <_puts_r+0xb6>
 8007620:	290a      	cmp	r1, #10
 8007622:	d004      	beq.n	800762e <_puts_r+0xb6>
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	1c5a      	adds	r2, r3, #1
 8007628:	6022      	str	r2, [r4, #0]
 800762a:	7019      	strb	r1, [r3, #0]
 800762c:	e7c5      	b.n	80075ba <_puts_r+0x42>
 800762e:	4622      	mov	r2, r4
 8007630:	4628      	mov	r0, r5
 8007632:	f000 f8d5 	bl	80077e0 <__swbuf_r>
 8007636:	3001      	adds	r0, #1
 8007638:	d1bf      	bne.n	80075ba <_puts_r+0x42>
 800763a:	e7df      	b.n	80075fc <_puts_r+0x84>
 800763c:	250a      	movs	r5, #10
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	1c5a      	adds	r2, r3, #1
 8007642:	6022      	str	r2, [r4, #0]
 8007644:	701d      	strb	r5, [r3, #0]
 8007646:	e7db      	b.n	8007600 <_puts_r+0x88>
 8007648:	080084f0 	.word	0x080084f0
 800764c:	08008510 	.word	0x08008510
 8007650:	080084d0 	.word	0x080084d0

08007654 <puts>:
 8007654:	4b02      	ldr	r3, [pc, #8]	; (8007660 <puts+0xc>)
 8007656:	4601      	mov	r1, r0
 8007658:	6818      	ldr	r0, [r3, #0]
 800765a:	f7ff bf8d 	b.w	8007578 <_puts_r>
 800765e:	bf00      	nop
 8007660:	200000ac 	.word	0x200000ac

08007664 <cleanup_glue>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	460c      	mov	r4, r1
 8007668:	6809      	ldr	r1, [r1, #0]
 800766a:	4605      	mov	r5, r0
 800766c:	b109      	cbz	r1, 8007672 <cleanup_glue+0xe>
 800766e:	f7ff fff9 	bl	8007664 <cleanup_glue>
 8007672:	4621      	mov	r1, r4
 8007674:	4628      	mov	r0, r5
 8007676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800767a:	f000 bad5 	b.w	8007c28 <_free_r>
	...

08007680 <_reclaim_reent>:
 8007680:	4b2c      	ldr	r3, [pc, #176]	; (8007734 <_reclaim_reent+0xb4>)
 8007682:	b570      	push	{r4, r5, r6, lr}
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4604      	mov	r4, r0
 8007688:	4283      	cmp	r3, r0
 800768a:	d051      	beq.n	8007730 <_reclaim_reent+0xb0>
 800768c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800768e:	b143      	cbz	r3, 80076a2 <_reclaim_reent+0x22>
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d14a      	bne.n	800772c <_reclaim_reent+0xac>
 8007696:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007698:	6819      	ldr	r1, [r3, #0]
 800769a:	b111      	cbz	r1, 80076a2 <_reclaim_reent+0x22>
 800769c:	4620      	mov	r0, r4
 800769e:	f000 fac3 	bl	8007c28 <_free_r>
 80076a2:	6961      	ldr	r1, [r4, #20]
 80076a4:	b111      	cbz	r1, 80076ac <_reclaim_reent+0x2c>
 80076a6:	4620      	mov	r0, r4
 80076a8:	f000 fabe 	bl	8007c28 <_free_r>
 80076ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80076ae:	b111      	cbz	r1, 80076b6 <_reclaim_reent+0x36>
 80076b0:	4620      	mov	r0, r4
 80076b2:	f000 fab9 	bl	8007c28 <_free_r>
 80076b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80076b8:	b111      	cbz	r1, 80076c0 <_reclaim_reent+0x40>
 80076ba:	4620      	mov	r0, r4
 80076bc:	f000 fab4 	bl	8007c28 <_free_r>
 80076c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80076c2:	b111      	cbz	r1, 80076ca <_reclaim_reent+0x4a>
 80076c4:	4620      	mov	r0, r4
 80076c6:	f000 faaf 	bl	8007c28 <_free_r>
 80076ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80076cc:	b111      	cbz	r1, 80076d4 <_reclaim_reent+0x54>
 80076ce:	4620      	mov	r0, r4
 80076d0:	f000 faaa 	bl	8007c28 <_free_r>
 80076d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80076d6:	b111      	cbz	r1, 80076de <_reclaim_reent+0x5e>
 80076d8:	4620      	mov	r0, r4
 80076da:	f000 faa5 	bl	8007c28 <_free_r>
 80076de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80076e0:	b111      	cbz	r1, 80076e8 <_reclaim_reent+0x68>
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 faa0 	bl	8007c28 <_free_r>
 80076e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076ea:	b111      	cbz	r1, 80076f2 <_reclaim_reent+0x72>
 80076ec:	4620      	mov	r0, r4
 80076ee:	f000 fa9b 	bl	8007c28 <_free_r>
 80076f2:	69a3      	ldr	r3, [r4, #24]
 80076f4:	b1e3      	cbz	r3, 8007730 <_reclaim_reent+0xb0>
 80076f6:	4620      	mov	r0, r4
 80076f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076fa:	4798      	blx	r3
 80076fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80076fe:	b1b9      	cbz	r1, 8007730 <_reclaim_reent+0xb0>
 8007700:	4620      	mov	r0, r4
 8007702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007706:	f7ff bfad 	b.w	8007664 <cleanup_glue>
 800770a:	5949      	ldr	r1, [r1, r5]
 800770c:	b941      	cbnz	r1, 8007720 <_reclaim_reent+0xa0>
 800770e:	3504      	adds	r5, #4
 8007710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007712:	2d80      	cmp	r5, #128	; 0x80
 8007714:	68d9      	ldr	r1, [r3, #12]
 8007716:	d1f8      	bne.n	800770a <_reclaim_reent+0x8a>
 8007718:	4620      	mov	r0, r4
 800771a:	f000 fa85 	bl	8007c28 <_free_r>
 800771e:	e7ba      	b.n	8007696 <_reclaim_reent+0x16>
 8007720:	680e      	ldr	r6, [r1, #0]
 8007722:	4620      	mov	r0, r4
 8007724:	f000 fa80 	bl	8007c28 <_free_r>
 8007728:	4631      	mov	r1, r6
 800772a:	e7ef      	b.n	800770c <_reclaim_reent+0x8c>
 800772c:	2500      	movs	r5, #0
 800772e:	e7ef      	b.n	8007710 <_reclaim_reent+0x90>
 8007730:	bd70      	pop	{r4, r5, r6, pc}
 8007732:	bf00      	nop
 8007734:	200000ac 	.word	0x200000ac

08007738 <_sbrk_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	2300      	movs	r3, #0
 800773c:	4d05      	ldr	r5, [pc, #20]	; (8007754 <_sbrk_r+0x1c>)
 800773e:	4604      	mov	r4, r0
 8007740:	4608      	mov	r0, r1
 8007742:	602b      	str	r3, [r5, #0]
 8007744:	f7fb f84c 	bl	80027e0 <_sbrk>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d102      	bne.n	8007752 <_sbrk_r+0x1a>
 800774c:	682b      	ldr	r3, [r5, #0]
 800774e:	b103      	cbz	r3, 8007752 <_sbrk_r+0x1a>
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	bd38      	pop	{r3, r4, r5, pc}
 8007754:	200023dc 	.word	0x200023dc

08007758 <__sread>:
 8007758:	b510      	push	{r4, lr}
 800775a:	460c      	mov	r4, r1
 800775c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007760:	f000 fd98 	bl	8008294 <_read_r>
 8007764:	2800      	cmp	r0, #0
 8007766:	bfab      	itete	ge
 8007768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800776a:	89a3      	ldrhlt	r3, [r4, #12]
 800776c:	181b      	addge	r3, r3, r0
 800776e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007772:	bfac      	ite	ge
 8007774:	6563      	strge	r3, [r4, #84]	; 0x54
 8007776:	81a3      	strhlt	r3, [r4, #12]
 8007778:	bd10      	pop	{r4, pc}

0800777a <__swrite>:
 800777a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800777e:	461f      	mov	r7, r3
 8007780:	898b      	ldrh	r3, [r1, #12]
 8007782:	4605      	mov	r5, r0
 8007784:	05db      	lsls	r3, r3, #23
 8007786:	460c      	mov	r4, r1
 8007788:	4616      	mov	r6, r2
 800778a:	d505      	bpl.n	8007798 <__swrite+0x1e>
 800778c:	2302      	movs	r3, #2
 800778e:	2200      	movs	r2, #0
 8007790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007794:	f000 f9c4 	bl	8007b20 <_lseek_r>
 8007798:	89a3      	ldrh	r3, [r4, #12]
 800779a:	4632      	mov	r2, r6
 800779c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077a0:	81a3      	strh	r3, [r4, #12]
 80077a2:	4628      	mov	r0, r5
 80077a4:	463b      	mov	r3, r7
 80077a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077ae:	f000 b869 	b.w	8007884 <_write_r>

080077b2 <__sseek>:
 80077b2:	b510      	push	{r4, lr}
 80077b4:	460c      	mov	r4, r1
 80077b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ba:	f000 f9b1 	bl	8007b20 <_lseek_r>
 80077be:	1c43      	adds	r3, r0, #1
 80077c0:	89a3      	ldrh	r3, [r4, #12]
 80077c2:	bf15      	itete	ne
 80077c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80077c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077ce:	81a3      	strheq	r3, [r4, #12]
 80077d0:	bf18      	it	ne
 80077d2:	81a3      	strhne	r3, [r4, #12]
 80077d4:	bd10      	pop	{r4, pc}

080077d6 <__sclose>:
 80077d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077da:	f000 b8d3 	b.w	8007984 <_close_r>
	...

080077e0 <__swbuf_r>:
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	460e      	mov	r6, r1
 80077e4:	4614      	mov	r4, r2
 80077e6:	4605      	mov	r5, r0
 80077e8:	b118      	cbz	r0, 80077f2 <__swbuf_r+0x12>
 80077ea:	6983      	ldr	r3, [r0, #24]
 80077ec:	b90b      	cbnz	r3, 80077f2 <__swbuf_r+0x12>
 80077ee:	f7ff fd3b 	bl	8007268 <__sinit>
 80077f2:	4b21      	ldr	r3, [pc, #132]	; (8007878 <__swbuf_r+0x98>)
 80077f4:	429c      	cmp	r4, r3
 80077f6:	d12b      	bne.n	8007850 <__swbuf_r+0x70>
 80077f8:	686c      	ldr	r4, [r5, #4]
 80077fa:	69a3      	ldr	r3, [r4, #24]
 80077fc:	60a3      	str	r3, [r4, #8]
 80077fe:	89a3      	ldrh	r3, [r4, #12]
 8007800:	071a      	lsls	r2, r3, #28
 8007802:	d52f      	bpl.n	8007864 <__swbuf_r+0x84>
 8007804:	6923      	ldr	r3, [r4, #16]
 8007806:	b36b      	cbz	r3, 8007864 <__swbuf_r+0x84>
 8007808:	6923      	ldr	r3, [r4, #16]
 800780a:	6820      	ldr	r0, [r4, #0]
 800780c:	b2f6      	uxtb	r6, r6
 800780e:	1ac0      	subs	r0, r0, r3
 8007810:	6963      	ldr	r3, [r4, #20]
 8007812:	4637      	mov	r7, r6
 8007814:	4283      	cmp	r3, r0
 8007816:	dc04      	bgt.n	8007822 <__swbuf_r+0x42>
 8007818:	4621      	mov	r1, r4
 800781a:	4628      	mov	r0, r5
 800781c:	f000 f944 	bl	8007aa8 <_fflush_r>
 8007820:	bb30      	cbnz	r0, 8007870 <__swbuf_r+0x90>
 8007822:	68a3      	ldr	r3, [r4, #8]
 8007824:	3001      	adds	r0, #1
 8007826:	3b01      	subs	r3, #1
 8007828:	60a3      	str	r3, [r4, #8]
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	1c5a      	adds	r2, r3, #1
 800782e:	6022      	str	r2, [r4, #0]
 8007830:	701e      	strb	r6, [r3, #0]
 8007832:	6963      	ldr	r3, [r4, #20]
 8007834:	4283      	cmp	r3, r0
 8007836:	d004      	beq.n	8007842 <__swbuf_r+0x62>
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	07db      	lsls	r3, r3, #31
 800783c:	d506      	bpl.n	800784c <__swbuf_r+0x6c>
 800783e:	2e0a      	cmp	r6, #10
 8007840:	d104      	bne.n	800784c <__swbuf_r+0x6c>
 8007842:	4621      	mov	r1, r4
 8007844:	4628      	mov	r0, r5
 8007846:	f000 f92f 	bl	8007aa8 <_fflush_r>
 800784a:	b988      	cbnz	r0, 8007870 <__swbuf_r+0x90>
 800784c:	4638      	mov	r0, r7
 800784e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007850:	4b0a      	ldr	r3, [pc, #40]	; (800787c <__swbuf_r+0x9c>)
 8007852:	429c      	cmp	r4, r3
 8007854:	d101      	bne.n	800785a <__swbuf_r+0x7a>
 8007856:	68ac      	ldr	r4, [r5, #8]
 8007858:	e7cf      	b.n	80077fa <__swbuf_r+0x1a>
 800785a:	4b09      	ldr	r3, [pc, #36]	; (8007880 <__swbuf_r+0xa0>)
 800785c:	429c      	cmp	r4, r3
 800785e:	bf08      	it	eq
 8007860:	68ec      	ldreq	r4, [r5, #12]
 8007862:	e7ca      	b.n	80077fa <__swbuf_r+0x1a>
 8007864:	4621      	mov	r1, r4
 8007866:	4628      	mov	r0, r5
 8007868:	f000 f81e 	bl	80078a8 <__swsetup_r>
 800786c:	2800      	cmp	r0, #0
 800786e:	d0cb      	beq.n	8007808 <__swbuf_r+0x28>
 8007870:	f04f 37ff 	mov.w	r7, #4294967295
 8007874:	e7ea      	b.n	800784c <__swbuf_r+0x6c>
 8007876:	bf00      	nop
 8007878:	080084f0 	.word	0x080084f0
 800787c:	08008510 	.word	0x08008510
 8007880:	080084d0 	.word	0x080084d0

08007884 <_write_r>:
 8007884:	b538      	push	{r3, r4, r5, lr}
 8007886:	4604      	mov	r4, r0
 8007888:	4608      	mov	r0, r1
 800788a:	4611      	mov	r1, r2
 800788c:	2200      	movs	r2, #0
 800788e:	4d05      	ldr	r5, [pc, #20]	; (80078a4 <_write_r+0x20>)
 8007890:	602a      	str	r2, [r5, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	f7fa fe5a 	bl	800254c <_write>
 8007898:	1c43      	adds	r3, r0, #1
 800789a:	d102      	bne.n	80078a2 <_write_r+0x1e>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	b103      	cbz	r3, 80078a2 <_write_r+0x1e>
 80078a0:	6023      	str	r3, [r4, #0]
 80078a2:	bd38      	pop	{r3, r4, r5, pc}
 80078a4:	200023dc 	.word	0x200023dc

080078a8 <__swsetup_r>:
 80078a8:	4b32      	ldr	r3, [pc, #200]	; (8007974 <__swsetup_r+0xcc>)
 80078aa:	b570      	push	{r4, r5, r6, lr}
 80078ac:	681d      	ldr	r5, [r3, #0]
 80078ae:	4606      	mov	r6, r0
 80078b0:	460c      	mov	r4, r1
 80078b2:	b125      	cbz	r5, 80078be <__swsetup_r+0x16>
 80078b4:	69ab      	ldr	r3, [r5, #24]
 80078b6:	b913      	cbnz	r3, 80078be <__swsetup_r+0x16>
 80078b8:	4628      	mov	r0, r5
 80078ba:	f7ff fcd5 	bl	8007268 <__sinit>
 80078be:	4b2e      	ldr	r3, [pc, #184]	; (8007978 <__swsetup_r+0xd0>)
 80078c0:	429c      	cmp	r4, r3
 80078c2:	d10f      	bne.n	80078e4 <__swsetup_r+0x3c>
 80078c4:	686c      	ldr	r4, [r5, #4]
 80078c6:	89a3      	ldrh	r3, [r4, #12]
 80078c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078cc:	0719      	lsls	r1, r3, #28
 80078ce:	d42c      	bmi.n	800792a <__swsetup_r+0x82>
 80078d0:	06dd      	lsls	r5, r3, #27
 80078d2:	d411      	bmi.n	80078f8 <__swsetup_r+0x50>
 80078d4:	2309      	movs	r3, #9
 80078d6:	6033      	str	r3, [r6, #0]
 80078d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078dc:	f04f 30ff 	mov.w	r0, #4294967295
 80078e0:	81a3      	strh	r3, [r4, #12]
 80078e2:	e03e      	b.n	8007962 <__swsetup_r+0xba>
 80078e4:	4b25      	ldr	r3, [pc, #148]	; (800797c <__swsetup_r+0xd4>)
 80078e6:	429c      	cmp	r4, r3
 80078e8:	d101      	bne.n	80078ee <__swsetup_r+0x46>
 80078ea:	68ac      	ldr	r4, [r5, #8]
 80078ec:	e7eb      	b.n	80078c6 <__swsetup_r+0x1e>
 80078ee:	4b24      	ldr	r3, [pc, #144]	; (8007980 <__swsetup_r+0xd8>)
 80078f0:	429c      	cmp	r4, r3
 80078f2:	bf08      	it	eq
 80078f4:	68ec      	ldreq	r4, [r5, #12]
 80078f6:	e7e6      	b.n	80078c6 <__swsetup_r+0x1e>
 80078f8:	0758      	lsls	r0, r3, #29
 80078fa:	d512      	bpl.n	8007922 <__swsetup_r+0x7a>
 80078fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078fe:	b141      	cbz	r1, 8007912 <__swsetup_r+0x6a>
 8007900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007904:	4299      	cmp	r1, r3
 8007906:	d002      	beq.n	800790e <__swsetup_r+0x66>
 8007908:	4630      	mov	r0, r6
 800790a:	f000 f98d 	bl	8007c28 <_free_r>
 800790e:	2300      	movs	r3, #0
 8007910:	6363      	str	r3, [r4, #52]	; 0x34
 8007912:	89a3      	ldrh	r3, [r4, #12]
 8007914:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007918:	81a3      	strh	r3, [r4, #12]
 800791a:	2300      	movs	r3, #0
 800791c:	6063      	str	r3, [r4, #4]
 800791e:	6923      	ldr	r3, [r4, #16]
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	89a3      	ldrh	r3, [r4, #12]
 8007924:	f043 0308 	orr.w	r3, r3, #8
 8007928:	81a3      	strh	r3, [r4, #12]
 800792a:	6923      	ldr	r3, [r4, #16]
 800792c:	b94b      	cbnz	r3, 8007942 <__swsetup_r+0x9a>
 800792e:	89a3      	ldrh	r3, [r4, #12]
 8007930:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007938:	d003      	beq.n	8007942 <__swsetup_r+0x9a>
 800793a:	4621      	mov	r1, r4
 800793c:	4630      	mov	r0, r6
 800793e:	f000 f927 	bl	8007b90 <__smakebuf_r>
 8007942:	89a0      	ldrh	r0, [r4, #12]
 8007944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007948:	f010 0301 	ands.w	r3, r0, #1
 800794c:	d00a      	beq.n	8007964 <__swsetup_r+0xbc>
 800794e:	2300      	movs	r3, #0
 8007950:	60a3      	str	r3, [r4, #8]
 8007952:	6963      	ldr	r3, [r4, #20]
 8007954:	425b      	negs	r3, r3
 8007956:	61a3      	str	r3, [r4, #24]
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	b943      	cbnz	r3, 800796e <__swsetup_r+0xc6>
 800795c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007960:	d1ba      	bne.n	80078d8 <__swsetup_r+0x30>
 8007962:	bd70      	pop	{r4, r5, r6, pc}
 8007964:	0781      	lsls	r1, r0, #30
 8007966:	bf58      	it	pl
 8007968:	6963      	ldrpl	r3, [r4, #20]
 800796a:	60a3      	str	r3, [r4, #8]
 800796c:	e7f4      	b.n	8007958 <__swsetup_r+0xb0>
 800796e:	2000      	movs	r0, #0
 8007970:	e7f7      	b.n	8007962 <__swsetup_r+0xba>
 8007972:	bf00      	nop
 8007974:	200000ac 	.word	0x200000ac
 8007978:	080084f0 	.word	0x080084f0
 800797c:	08008510 	.word	0x08008510
 8007980:	080084d0 	.word	0x080084d0

08007984 <_close_r>:
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	2300      	movs	r3, #0
 8007988:	4d05      	ldr	r5, [pc, #20]	; (80079a0 <_close_r+0x1c>)
 800798a:	4604      	mov	r4, r0
 800798c:	4608      	mov	r0, r1
 800798e:	602b      	str	r3, [r5, #0]
 8007990:	f7fa fef5 	bl	800277e <_close>
 8007994:	1c43      	adds	r3, r0, #1
 8007996:	d102      	bne.n	800799e <_close_r+0x1a>
 8007998:	682b      	ldr	r3, [r5, #0]
 800799a:	b103      	cbz	r3, 800799e <_close_r+0x1a>
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	bd38      	pop	{r3, r4, r5, pc}
 80079a0:	200023dc 	.word	0x200023dc

080079a4 <__sflush_r>:
 80079a4:	898a      	ldrh	r2, [r1, #12]
 80079a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a8:	4605      	mov	r5, r0
 80079aa:	0710      	lsls	r0, r2, #28
 80079ac:	460c      	mov	r4, r1
 80079ae:	d457      	bmi.n	8007a60 <__sflush_r+0xbc>
 80079b0:	684b      	ldr	r3, [r1, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	dc04      	bgt.n	80079c0 <__sflush_r+0x1c>
 80079b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	dc01      	bgt.n	80079c0 <__sflush_r+0x1c>
 80079bc:	2000      	movs	r0, #0
 80079be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079c2:	2e00      	cmp	r6, #0
 80079c4:	d0fa      	beq.n	80079bc <__sflush_r+0x18>
 80079c6:	2300      	movs	r3, #0
 80079c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079cc:	682f      	ldr	r7, [r5, #0]
 80079ce:	602b      	str	r3, [r5, #0]
 80079d0:	d032      	beq.n	8007a38 <__sflush_r+0x94>
 80079d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	075a      	lsls	r2, r3, #29
 80079d8:	d505      	bpl.n	80079e6 <__sflush_r+0x42>
 80079da:	6863      	ldr	r3, [r4, #4]
 80079dc:	1ac0      	subs	r0, r0, r3
 80079de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079e0:	b10b      	cbz	r3, 80079e6 <__sflush_r+0x42>
 80079e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079e4:	1ac0      	subs	r0, r0, r3
 80079e6:	2300      	movs	r3, #0
 80079e8:	4602      	mov	r2, r0
 80079ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079ec:	4628      	mov	r0, r5
 80079ee:	6a21      	ldr	r1, [r4, #32]
 80079f0:	47b0      	blx	r6
 80079f2:	1c43      	adds	r3, r0, #1
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	d106      	bne.n	8007a06 <__sflush_r+0x62>
 80079f8:	6829      	ldr	r1, [r5, #0]
 80079fa:	291d      	cmp	r1, #29
 80079fc:	d82c      	bhi.n	8007a58 <__sflush_r+0xb4>
 80079fe:	4a29      	ldr	r2, [pc, #164]	; (8007aa4 <__sflush_r+0x100>)
 8007a00:	40ca      	lsrs	r2, r1
 8007a02:	07d6      	lsls	r6, r2, #31
 8007a04:	d528      	bpl.n	8007a58 <__sflush_r+0xb4>
 8007a06:	2200      	movs	r2, #0
 8007a08:	6062      	str	r2, [r4, #4]
 8007a0a:	6922      	ldr	r2, [r4, #16]
 8007a0c:	04d9      	lsls	r1, r3, #19
 8007a0e:	6022      	str	r2, [r4, #0]
 8007a10:	d504      	bpl.n	8007a1c <__sflush_r+0x78>
 8007a12:	1c42      	adds	r2, r0, #1
 8007a14:	d101      	bne.n	8007a1a <__sflush_r+0x76>
 8007a16:	682b      	ldr	r3, [r5, #0]
 8007a18:	b903      	cbnz	r3, 8007a1c <__sflush_r+0x78>
 8007a1a:	6560      	str	r0, [r4, #84]	; 0x54
 8007a1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a1e:	602f      	str	r7, [r5, #0]
 8007a20:	2900      	cmp	r1, #0
 8007a22:	d0cb      	beq.n	80079bc <__sflush_r+0x18>
 8007a24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a28:	4299      	cmp	r1, r3
 8007a2a:	d002      	beq.n	8007a32 <__sflush_r+0x8e>
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f000 f8fb 	bl	8007c28 <_free_r>
 8007a32:	2000      	movs	r0, #0
 8007a34:	6360      	str	r0, [r4, #52]	; 0x34
 8007a36:	e7c2      	b.n	80079be <__sflush_r+0x1a>
 8007a38:	6a21      	ldr	r1, [r4, #32]
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	47b0      	blx	r6
 8007a40:	1c41      	adds	r1, r0, #1
 8007a42:	d1c7      	bne.n	80079d4 <__sflush_r+0x30>
 8007a44:	682b      	ldr	r3, [r5, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d0c4      	beq.n	80079d4 <__sflush_r+0x30>
 8007a4a:	2b1d      	cmp	r3, #29
 8007a4c:	d001      	beq.n	8007a52 <__sflush_r+0xae>
 8007a4e:	2b16      	cmp	r3, #22
 8007a50:	d101      	bne.n	8007a56 <__sflush_r+0xb2>
 8007a52:	602f      	str	r7, [r5, #0]
 8007a54:	e7b2      	b.n	80079bc <__sflush_r+0x18>
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a5c:	81a3      	strh	r3, [r4, #12]
 8007a5e:	e7ae      	b.n	80079be <__sflush_r+0x1a>
 8007a60:	690f      	ldr	r7, [r1, #16]
 8007a62:	2f00      	cmp	r7, #0
 8007a64:	d0aa      	beq.n	80079bc <__sflush_r+0x18>
 8007a66:	0793      	lsls	r3, r2, #30
 8007a68:	bf18      	it	ne
 8007a6a:	2300      	movne	r3, #0
 8007a6c:	680e      	ldr	r6, [r1, #0]
 8007a6e:	bf08      	it	eq
 8007a70:	694b      	ldreq	r3, [r1, #20]
 8007a72:	1bf6      	subs	r6, r6, r7
 8007a74:	600f      	str	r7, [r1, #0]
 8007a76:	608b      	str	r3, [r1, #8]
 8007a78:	2e00      	cmp	r6, #0
 8007a7a:	dd9f      	ble.n	80079bc <__sflush_r+0x18>
 8007a7c:	4633      	mov	r3, r6
 8007a7e:	463a      	mov	r2, r7
 8007a80:	4628      	mov	r0, r5
 8007a82:	6a21      	ldr	r1, [r4, #32]
 8007a84:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007a88:	47e0      	blx	ip
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	dc06      	bgt.n	8007a9c <__sflush_r+0xf8>
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	f04f 30ff 	mov.w	r0, #4294967295
 8007a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a98:	81a3      	strh	r3, [r4, #12]
 8007a9a:	e790      	b.n	80079be <__sflush_r+0x1a>
 8007a9c:	4407      	add	r7, r0
 8007a9e:	1a36      	subs	r6, r6, r0
 8007aa0:	e7ea      	b.n	8007a78 <__sflush_r+0xd4>
 8007aa2:	bf00      	nop
 8007aa4:	20400001 	.word	0x20400001

08007aa8 <_fflush_r>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	690b      	ldr	r3, [r1, #16]
 8007aac:	4605      	mov	r5, r0
 8007aae:	460c      	mov	r4, r1
 8007ab0:	b913      	cbnz	r3, 8007ab8 <_fflush_r+0x10>
 8007ab2:	2500      	movs	r5, #0
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	bd38      	pop	{r3, r4, r5, pc}
 8007ab8:	b118      	cbz	r0, 8007ac2 <_fflush_r+0x1a>
 8007aba:	6983      	ldr	r3, [r0, #24]
 8007abc:	b90b      	cbnz	r3, 8007ac2 <_fflush_r+0x1a>
 8007abe:	f7ff fbd3 	bl	8007268 <__sinit>
 8007ac2:	4b14      	ldr	r3, [pc, #80]	; (8007b14 <_fflush_r+0x6c>)
 8007ac4:	429c      	cmp	r4, r3
 8007ac6:	d11b      	bne.n	8007b00 <_fflush_r+0x58>
 8007ac8:	686c      	ldr	r4, [r5, #4]
 8007aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d0ef      	beq.n	8007ab2 <_fflush_r+0xa>
 8007ad2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ad4:	07d0      	lsls	r0, r2, #31
 8007ad6:	d404      	bmi.n	8007ae2 <_fflush_r+0x3a>
 8007ad8:	0599      	lsls	r1, r3, #22
 8007ada:	d402      	bmi.n	8007ae2 <_fflush_r+0x3a>
 8007adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ade:	f7ff fc86 	bl	80073ee <__retarget_lock_acquire_recursive>
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	f7ff ff5d 	bl	80079a4 <__sflush_r>
 8007aea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007aec:	4605      	mov	r5, r0
 8007aee:	07da      	lsls	r2, r3, #31
 8007af0:	d4e0      	bmi.n	8007ab4 <_fflush_r+0xc>
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	059b      	lsls	r3, r3, #22
 8007af6:	d4dd      	bmi.n	8007ab4 <_fflush_r+0xc>
 8007af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007afa:	f7ff fc79 	bl	80073f0 <__retarget_lock_release_recursive>
 8007afe:	e7d9      	b.n	8007ab4 <_fflush_r+0xc>
 8007b00:	4b05      	ldr	r3, [pc, #20]	; (8007b18 <_fflush_r+0x70>)
 8007b02:	429c      	cmp	r4, r3
 8007b04:	d101      	bne.n	8007b0a <_fflush_r+0x62>
 8007b06:	68ac      	ldr	r4, [r5, #8]
 8007b08:	e7df      	b.n	8007aca <_fflush_r+0x22>
 8007b0a:	4b04      	ldr	r3, [pc, #16]	; (8007b1c <_fflush_r+0x74>)
 8007b0c:	429c      	cmp	r4, r3
 8007b0e:	bf08      	it	eq
 8007b10:	68ec      	ldreq	r4, [r5, #12]
 8007b12:	e7da      	b.n	8007aca <_fflush_r+0x22>
 8007b14:	080084f0 	.word	0x080084f0
 8007b18:	08008510 	.word	0x08008510
 8007b1c:	080084d0 	.word	0x080084d0

08007b20 <_lseek_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4604      	mov	r4, r0
 8007b24:	4608      	mov	r0, r1
 8007b26:	4611      	mov	r1, r2
 8007b28:	2200      	movs	r2, #0
 8007b2a:	4d05      	ldr	r5, [pc, #20]	; (8007b40 <_lseek_r+0x20>)
 8007b2c:	602a      	str	r2, [r5, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	f7fa fe49 	bl	80027c6 <_lseek>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d102      	bne.n	8007b3e <_lseek_r+0x1e>
 8007b38:	682b      	ldr	r3, [r5, #0]
 8007b3a:	b103      	cbz	r3, 8007b3e <_lseek_r+0x1e>
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	200023dc 	.word	0x200023dc

08007b44 <__swhatbuf_r>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	460e      	mov	r6, r1
 8007b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4c:	4614      	mov	r4, r2
 8007b4e:	2900      	cmp	r1, #0
 8007b50:	461d      	mov	r5, r3
 8007b52:	b096      	sub	sp, #88	; 0x58
 8007b54:	da08      	bge.n	8007b68 <__swhatbuf_r+0x24>
 8007b56:	2200      	movs	r2, #0
 8007b58:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007b5c:	602a      	str	r2, [r5, #0]
 8007b5e:	061a      	lsls	r2, r3, #24
 8007b60:	d410      	bmi.n	8007b84 <__swhatbuf_r+0x40>
 8007b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b66:	e00e      	b.n	8007b86 <__swhatbuf_r+0x42>
 8007b68:	466a      	mov	r2, sp
 8007b6a:	f000 fba5 	bl	80082b8 <_fstat_r>
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	dbf1      	blt.n	8007b56 <__swhatbuf_r+0x12>
 8007b72:	9a01      	ldr	r2, [sp, #4]
 8007b74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b7c:	425a      	negs	r2, r3
 8007b7e:	415a      	adcs	r2, r3
 8007b80:	602a      	str	r2, [r5, #0]
 8007b82:	e7ee      	b.n	8007b62 <__swhatbuf_r+0x1e>
 8007b84:	2340      	movs	r3, #64	; 0x40
 8007b86:	2000      	movs	r0, #0
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	b016      	add	sp, #88	; 0x58
 8007b8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007b90 <__smakebuf_r>:
 8007b90:	898b      	ldrh	r3, [r1, #12]
 8007b92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b94:	079d      	lsls	r5, r3, #30
 8007b96:	4606      	mov	r6, r0
 8007b98:	460c      	mov	r4, r1
 8007b9a:	d507      	bpl.n	8007bac <__smakebuf_r+0x1c>
 8007b9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ba0:	6023      	str	r3, [r4, #0]
 8007ba2:	6123      	str	r3, [r4, #16]
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	6163      	str	r3, [r4, #20]
 8007ba8:	b002      	add	sp, #8
 8007baa:	bd70      	pop	{r4, r5, r6, pc}
 8007bac:	466a      	mov	r2, sp
 8007bae:	ab01      	add	r3, sp, #4
 8007bb0:	f7ff ffc8 	bl	8007b44 <__swhatbuf_r>
 8007bb4:	9900      	ldr	r1, [sp, #0]
 8007bb6:	4605      	mov	r5, r0
 8007bb8:	4630      	mov	r0, r6
 8007bba:	f7ff fc51 	bl	8007460 <_malloc_r>
 8007bbe:	b948      	cbnz	r0, 8007bd4 <__smakebuf_r+0x44>
 8007bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bc4:	059a      	lsls	r2, r3, #22
 8007bc6:	d4ef      	bmi.n	8007ba8 <__smakebuf_r+0x18>
 8007bc8:	f023 0303 	bic.w	r3, r3, #3
 8007bcc:	f043 0302 	orr.w	r3, r3, #2
 8007bd0:	81a3      	strh	r3, [r4, #12]
 8007bd2:	e7e3      	b.n	8007b9c <__smakebuf_r+0xc>
 8007bd4:	4b0d      	ldr	r3, [pc, #52]	; (8007c0c <__smakebuf_r+0x7c>)
 8007bd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	6020      	str	r0, [r4, #0]
 8007bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be0:	81a3      	strh	r3, [r4, #12]
 8007be2:	9b00      	ldr	r3, [sp, #0]
 8007be4:	6120      	str	r0, [r4, #16]
 8007be6:	6163      	str	r3, [r4, #20]
 8007be8:	9b01      	ldr	r3, [sp, #4]
 8007bea:	b15b      	cbz	r3, 8007c04 <__smakebuf_r+0x74>
 8007bec:	4630      	mov	r0, r6
 8007bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bf2:	f000 fb73 	bl	80082dc <_isatty_r>
 8007bf6:	b128      	cbz	r0, 8007c04 <__smakebuf_r+0x74>
 8007bf8:	89a3      	ldrh	r3, [r4, #12]
 8007bfa:	f023 0303 	bic.w	r3, r3, #3
 8007bfe:	f043 0301 	orr.w	r3, r3, #1
 8007c02:	81a3      	strh	r3, [r4, #12]
 8007c04:	89a0      	ldrh	r0, [r4, #12]
 8007c06:	4305      	orrs	r5, r0
 8007c08:	81a5      	strh	r5, [r4, #12]
 8007c0a:	e7cd      	b.n	8007ba8 <__smakebuf_r+0x18>
 8007c0c:	08007201 	.word	0x08007201

08007c10 <__malloc_lock>:
 8007c10:	4801      	ldr	r0, [pc, #4]	; (8007c18 <__malloc_lock+0x8>)
 8007c12:	f7ff bbec 	b.w	80073ee <__retarget_lock_acquire_recursive>
 8007c16:	bf00      	nop
 8007c18:	200023d0 	.word	0x200023d0

08007c1c <__malloc_unlock>:
 8007c1c:	4801      	ldr	r0, [pc, #4]	; (8007c24 <__malloc_unlock+0x8>)
 8007c1e:	f7ff bbe7 	b.w	80073f0 <__retarget_lock_release_recursive>
 8007c22:	bf00      	nop
 8007c24:	200023d0 	.word	0x200023d0

08007c28 <_free_r>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	2900      	cmp	r1, #0
 8007c2e:	d040      	beq.n	8007cb2 <_free_r+0x8a>
 8007c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c34:	1f0c      	subs	r4, r1, #4
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	bfb8      	it	lt
 8007c3a:	18e4      	addlt	r4, r4, r3
 8007c3c:	f7ff ffe8 	bl	8007c10 <__malloc_lock>
 8007c40:	4a1c      	ldr	r2, [pc, #112]	; (8007cb4 <_free_r+0x8c>)
 8007c42:	6813      	ldr	r3, [r2, #0]
 8007c44:	b933      	cbnz	r3, 8007c54 <_free_r+0x2c>
 8007c46:	6063      	str	r3, [r4, #4]
 8007c48:	6014      	str	r4, [r2, #0]
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c50:	f7ff bfe4 	b.w	8007c1c <__malloc_unlock>
 8007c54:	42a3      	cmp	r3, r4
 8007c56:	d908      	bls.n	8007c6a <_free_r+0x42>
 8007c58:	6820      	ldr	r0, [r4, #0]
 8007c5a:	1821      	adds	r1, r4, r0
 8007c5c:	428b      	cmp	r3, r1
 8007c5e:	bf01      	itttt	eq
 8007c60:	6819      	ldreq	r1, [r3, #0]
 8007c62:	685b      	ldreq	r3, [r3, #4]
 8007c64:	1809      	addeq	r1, r1, r0
 8007c66:	6021      	streq	r1, [r4, #0]
 8007c68:	e7ed      	b.n	8007c46 <_free_r+0x1e>
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	b10b      	cbz	r3, 8007c74 <_free_r+0x4c>
 8007c70:	42a3      	cmp	r3, r4
 8007c72:	d9fa      	bls.n	8007c6a <_free_r+0x42>
 8007c74:	6811      	ldr	r1, [r2, #0]
 8007c76:	1850      	adds	r0, r2, r1
 8007c78:	42a0      	cmp	r0, r4
 8007c7a:	d10b      	bne.n	8007c94 <_free_r+0x6c>
 8007c7c:	6820      	ldr	r0, [r4, #0]
 8007c7e:	4401      	add	r1, r0
 8007c80:	1850      	adds	r0, r2, r1
 8007c82:	4283      	cmp	r3, r0
 8007c84:	6011      	str	r1, [r2, #0]
 8007c86:	d1e0      	bne.n	8007c4a <_free_r+0x22>
 8007c88:	6818      	ldr	r0, [r3, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	4401      	add	r1, r0
 8007c8e:	6011      	str	r1, [r2, #0]
 8007c90:	6053      	str	r3, [r2, #4]
 8007c92:	e7da      	b.n	8007c4a <_free_r+0x22>
 8007c94:	d902      	bls.n	8007c9c <_free_r+0x74>
 8007c96:	230c      	movs	r3, #12
 8007c98:	602b      	str	r3, [r5, #0]
 8007c9a:	e7d6      	b.n	8007c4a <_free_r+0x22>
 8007c9c:	6820      	ldr	r0, [r4, #0]
 8007c9e:	1821      	adds	r1, r4, r0
 8007ca0:	428b      	cmp	r3, r1
 8007ca2:	bf01      	itttt	eq
 8007ca4:	6819      	ldreq	r1, [r3, #0]
 8007ca6:	685b      	ldreq	r3, [r3, #4]
 8007ca8:	1809      	addeq	r1, r1, r0
 8007caa:	6021      	streq	r1, [r4, #0]
 8007cac:	6063      	str	r3, [r4, #4]
 8007cae:	6054      	str	r4, [r2, #4]
 8007cb0:	e7cb      	b.n	8007c4a <_free_r+0x22>
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	200023d4 	.word	0x200023d4

08007cb8 <__sfputc_r>:
 8007cb8:	6893      	ldr	r3, [r2, #8]
 8007cba:	b410      	push	{r4}
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	6093      	str	r3, [r2, #8]
 8007cc2:	da07      	bge.n	8007cd4 <__sfputc_r+0x1c>
 8007cc4:	6994      	ldr	r4, [r2, #24]
 8007cc6:	42a3      	cmp	r3, r4
 8007cc8:	db01      	blt.n	8007cce <__sfputc_r+0x16>
 8007cca:	290a      	cmp	r1, #10
 8007ccc:	d102      	bne.n	8007cd4 <__sfputc_r+0x1c>
 8007cce:	bc10      	pop	{r4}
 8007cd0:	f7ff bd86 	b.w	80077e0 <__swbuf_r>
 8007cd4:	6813      	ldr	r3, [r2, #0]
 8007cd6:	1c58      	adds	r0, r3, #1
 8007cd8:	6010      	str	r0, [r2, #0]
 8007cda:	7019      	strb	r1, [r3, #0]
 8007cdc:	4608      	mov	r0, r1
 8007cde:	bc10      	pop	{r4}
 8007ce0:	4770      	bx	lr

08007ce2 <__sfputs_r>:
 8007ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce4:	4606      	mov	r6, r0
 8007ce6:	460f      	mov	r7, r1
 8007ce8:	4614      	mov	r4, r2
 8007cea:	18d5      	adds	r5, r2, r3
 8007cec:	42ac      	cmp	r4, r5
 8007cee:	d101      	bne.n	8007cf4 <__sfputs_r+0x12>
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	e007      	b.n	8007d04 <__sfputs_r+0x22>
 8007cf4:	463a      	mov	r2, r7
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cfc:	f7ff ffdc 	bl	8007cb8 <__sfputc_r>
 8007d00:	1c43      	adds	r3, r0, #1
 8007d02:	d1f3      	bne.n	8007cec <__sfputs_r+0xa>
 8007d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d08 <_vfiprintf_r>:
 8007d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	460d      	mov	r5, r1
 8007d0e:	4614      	mov	r4, r2
 8007d10:	4698      	mov	r8, r3
 8007d12:	4606      	mov	r6, r0
 8007d14:	b09d      	sub	sp, #116	; 0x74
 8007d16:	b118      	cbz	r0, 8007d20 <_vfiprintf_r+0x18>
 8007d18:	6983      	ldr	r3, [r0, #24]
 8007d1a:	b90b      	cbnz	r3, 8007d20 <_vfiprintf_r+0x18>
 8007d1c:	f7ff faa4 	bl	8007268 <__sinit>
 8007d20:	4b89      	ldr	r3, [pc, #548]	; (8007f48 <_vfiprintf_r+0x240>)
 8007d22:	429d      	cmp	r5, r3
 8007d24:	d11b      	bne.n	8007d5e <_vfiprintf_r+0x56>
 8007d26:	6875      	ldr	r5, [r6, #4]
 8007d28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d2a:	07d9      	lsls	r1, r3, #31
 8007d2c:	d405      	bmi.n	8007d3a <_vfiprintf_r+0x32>
 8007d2e:	89ab      	ldrh	r3, [r5, #12]
 8007d30:	059a      	lsls	r2, r3, #22
 8007d32:	d402      	bmi.n	8007d3a <_vfiprintf_r+0x32>
 8007d34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d36:	f7ff fb5a 	bl	80073ee <__retarget_lock_acquire_recursive>
 8007d3a:	89ab      	ldrh	r3, [r5, #12]
 8007d3c:	071b      	lsls	r3, r3, #28
 8007d3e:	d501      	bpl.n	8007d44 <_vfiprintf_r+0x3c>
 8007d40:	692b      	ldr	r3, [r5, #16]
 8007d42:	b9eb      	cbnz	r3, 8007d80 <_vfiprintf_r+0x78>
 8007d44:	4629      	mov	r1, r5
 8007d46:	4630      	mov	r0, r6
 8007d48:	f7ff fdae 	bl	80078a8 <__swsetup_r>
 8007d4c:	b1c0      	cbz	r0, 8007d80 <_vfiprintf_r+0x78>
 8007d4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d50:	07dc      	lsls	r4, r3, #31
 8007d52:	d50e      	bpl.n	8007d72 <_vfiprintf_r+0x6a>
 8007d54:	f04f 30ff 	mov.w	r0, #4294967295
 8007d58:	b01d      	add	sp, #116	; 0x74
 8007d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5e:	4b7b      	ldr	r3, [pc, #492]	; (8007f4c <_vfiprintf_r+0x244>)
 8007d60:	429d      	cmp	r5, r3
 8007d62:	d101      	bne.n	8007d68 <_vfiprintf_r+0x60>
 8007d64:	68b5      	ldr	r5, [r6, #8]
 8007d66:	e7df      	b.n	8007d28 <_vfiprintf_r+0x20>
 8007d68:	4b79      	ldr	r3, [pc, #484]	; (8007f50 <_vfiprintf_r+0x248>)
 8007d6a:	429d      	cmp	r5, r3
 8007d6c:	bf08      	it	eq
 8007d6e:	68f5      	ldreq	r5, [r6, #12]
 8007d70:	e7da      	b.n	8007d28 <_vfiprintf_r+0x20>
 8007d72:	89ab      	ldrh	r3, [r5, #12]
 8007d74:	0598      	lsls	r0, r3, #22
 8007d76:	d4ed      	bmi.n	8007d54 <_vfiprintf_r+0x4c>
 8007d78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d7a:	f7ff fb39 	bl	80073f0 <__retarget_lock_release_recursive>
 8007d7e:	e7e9      	b.n	8007d54 <_vfiprintf_r+0x4c>
 8007d80:	2300      	movs	r3, #0
 8007d82:	9309      	str	r3, [sp, #36]	; 0x24
 8007d84:	2320      	movs	r3, #32
 8007d86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d8a:	2330      	movs	r3, #48	; 0x30
 8007d8c:	f04f 0901 	mov.w	r9, #1
 8007d90:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d94:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007f54 <_vfiprintf_r+0x24c>
 8007d98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d9c:	4623      	mov	r3, r4
 8007d9e:	469a      	mov	sl, r3
 8007da0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007da4:	b10a      	cbz	r2, 8007daa <_vfiprintf_r+0xa2>
 8007da6:	2a25      	cmp	r2, #37	; 0x25
 8007da8:	d1f9      	bne.n	8007d9e <_vfiprintf_r+0x96>
 8007daa:	ebba 0b04 	subs.w	fp, sl, r4
 8007dae:	d00b      	beq.n	8007dc8 <_vfiprintf_r+0xc0>
 8007db0:	465b      	mov	r3, fp
 8007db2:	4622      	mov	r2, r4
 8007db4:	4629      	mov	r1, r5
 8007db6:	4630      	mov	r0, r6
 8007db8:	f7ff ff93 	bl	8007ce2 <__sfputs_r>
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	f000 80aa 	beq.w	8007f16 <_vfiprintf_r+0x20e>
 8007dc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dc4:	445a      	add	r2, fp
 8007dc6:	9209      	str	r2, [sp, #36]	; 0x24
 8007dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 80a2 	beq.w	8007f16 <_vfiprintf_r+0x20e>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ddc:	f10a 0a01 	add.w	sl, sl, #1
 8007de0:	9304      	str	r3, [sp, #16]
 8007de2:	9307      	str	r3, [sp, #28]
 8007de4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007de8:	931a      	str	r3, [sp, #104]	; 0x68
 8007dea:	4654      	mov	r4, sl
 8007dec:	2205      	movs	r2, #5
 8007dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df2:	4858      	ldr	r0, [pc, #352]	; (8007f54 <_vfiprintf_r+0x24c>)
 8007df4:	f000 fa82 	bl	80082fc <memchr>
 8007df8:	9a04      	ldr	r2, [sp, #16]
 8007dfa:	b9d8      	cbnz	r0, 8007e34 <_vfiprintf_r+0x12c>
 8007dfc:	06d1      	lsls	r1, r2, #27
 8007dfe:	bf44      	itt	mi
 8007e00:	2320      	movmi	r3, #32
 8007e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e06:	0713      	lsls	r3, r2, #28
 8007e08:	bf44      	itt	mi
 8007e0a:	232b      	movmi	r3, #43	; 0x2b
 8007e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e10:	f89a 3000 	ldrb.w	r3, [sl]
 8007e14:	2b2a      	cmp	r3, #42	; 0x2a
 8007e16:	d015      	beq.n	8007e44 <_vfiprintf_r+0x13c>
 8007e18:	4654      	mov	r4, sl
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	f04f 0c0a 	mov.w	ip, #10
 8007e20:	9a07      	ldr	r2, [sp, #28]
 8007e22:	4621      	mov	r1, r4
 8007e24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e28:	3b30      	subs	r3, #48	; 0x30
 8007e2a:	2b09      	cmp	r3, #9
 8007e2c:	d94e      	bls.n	8007ecc <_vfiprintf_r+0x1c4>
 8007e2e:	b1b0      	cbz	r0, 8007e5e <_vfiprintf_r+0x156>
 8007e30:	9207      	str	r2, [sp, #28]
 8007e32:	e014      	b.n	8007e5e <_vfiprintf_r+0x156>
 8007e34:	eba0 0308 	sub.w	r3, r0, r8
 8007e38:	fa09 f303 	lsl.w	r3, r9, r3
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	46a2      	mov	sl, r4
 8007e40:	9304      	str	r3, [sp, #16]
 8007e42:	e7d2      	b.n	8007dea <_vfiprintf_r+0xe2>
 8007e44:	9b03      	ldr	r3, [sp, #12]
 8007e46:	1d19      	adds	r1, r3, #4
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	9103      	str	r1, [sp, #12]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	bfbb      	ittet	lt
 8007e50:	425b      	neglt	r3, r3
 8007e52:	f042 0202 	orrlt.w	r2, r2, #2
 8007e56:	9307      	strge	r3, [sp, #28]
 8007e58:	9307      	strlt	r3, [sp, #28]
 8007e5a:	bfb8      	it	lt
 8007e5c:	9204      	strlt	r2, [sp, #16]
 8007e5e:	7823      	ldrb	r3, [r4, #0]
 8007e60:	2b2e      	cmp	r3, #46	; 0x2e
 8007e62:	d10c      	bne.n	8007e7e <_vfiprintf_r+0x176>
 8007e64:	7863      	ldrb	r3, [r4, #1]
 8007e66:	2b2a      	cmp	r3, #42	; 0x2a
 8007e68:	d135      	bne.n	8007ed6 <_vfiprintf_r+0x1ce>
 8007e6a:	9b03      	ldr	r3, [sp, #12]
 8007e6c:	3402      	adds	r4, #2
 8007e6e:	1d1a      	adds	r2, r3, #4
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	9203      	str	r2, [sp, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	bfb8      	it	lt
 8007e78:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e7c:	9305      	str	r3, [sp, #20]
 8007e7e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007f58 <_vfiprintf_r+0x250>
 8007e82:	2203      	movs	r2, #3
 8007e84:	4650      	mov	r0, sl
 8007e86:	7821      	ldrb	r1, [r4, #0]
 8007e88:	f000 fa38 	bl	80082fc <memchr>
 8007e8c:	b140      	cbz	r0, 8007ea0 <_vfiprintf_r+0x198>
 8007e8e:	2340      	movs	r3, #64	; 0x40
 8007e90:	eba0 000a 	sub.w	r0, r0, sl
 8007e94:	fa03 f000 	lsl.w	r0, r3, r0
 8007e98:	9b04      	ldr	r3, [sp, #16]
 8007e9a:	3401      	adds	r4, #1
 8007e9c:	4303      	orrs	r3, r0
 8007e9e:	9304      	str	r3, [sp, #16]
 8007ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea4:	2206      	movs	r2, #6
 8007ea6:	482d      	ldr	r0, [pc, #180]	; (8007f5c <_vfiprintf_r+0x254>)
 8007ea8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eac:	f000 fa26 	bl	80082fc <memchr>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d03f      	beq.n	8007f34 <_vfiprintf_r+0x22c>
 8007eb4:	4b2a      	ldr	r3, [pc, #168]	; (8007f60 <_vfiprintf_r+0x258>)
 8007eb6:	bb1b      	cbnz	r3, 8007f00 <_vfiprintf_r+0x1f8>
 8007eb8:	9b03      	ldr	r3, [sp, #12]
 8007eba:	3307      	adds	r3, #7
 8007ebc:	f023 0307 	bic.w	r3, r3, #7
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	9303      	str	r3, [sp, #12]
 8007ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec6:	443b      	add	r3, r7
 8007ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8007eca:	e767      	b.n	8007d9c <_vfiprintf_r+0x94>
 8007ecc:	460c      	mov	r4, r1
 8007ece:	2001      	movs	r0, #1
 8007ed0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ed4:	e7a5      	b.n	8007e22 <_vfiprintf_r+0x11a>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	f04f 0c0a 	mov.w	ip, #10
 8007edc:	4619      	mov	r1, r3
 8007ede:	3401      	adds	r4, #1
 8007ee0:	9305      	str	r3, [sp, #20]
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ee8:	3a30      	subs	r2, #48	; 0x30
 8007eea:	2a09      	cmp	r2, #9
 8007eec:	d903      	bls.n	8007ef6 <_vfiprintf_r+0x1ee>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0c5      	beq.n	8007e7e <_vfiprintf_r+0x176>
 8007ef2:	9105      	str	r1, [sp, #20]
 8007ef4:	e7c3      	b.n	8007e7e <_vfiprintf_r+0x176>
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	2301      	movs	r3, #1
 8007efa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007efe:	e7f0      	b.n	8007ee2 <_vfiprintf_r+0x1da>
 8007f00:	ab03      	add	r3, sp, #12
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	462a      	mov	r2, r5
 8007f06:	4630      	mov	r0, r6
 8007f08:	4b16      	ldr	r3, [pc, #88]	; (8007f64 <_vfiprintf_r+0x25c>)
 8007f0a:	a904      	add	r1, sp, #16
 8007f0c:	f3af 8000 	nop.w
 8007f10:	4607      	mov	r7, r0
 8007f12:	1c78      	adds	r0, r7, #1
 8007f14:	d1d6      	bne.n	8007ec4 <_vfiprintf_r+0x1bc>
 8007f16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f18:	07d9      	lsls	r1, r3, #31
 8007f1a:	d405      	bmi.n	8007f28 <_vfiprintf_r+0x220>
 8007f1c:	89ab      	ldrh	r3, [r5, #12]
 8007f1e:	059a      	lsls	r2, r3, #22
 8007f20:	d402      	bmi.n	8007f28 <_vfiprintf_r+0x220>
 8007f22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f24:	f7ff fa64 	bl	80073f0 <__retarget_lock_release_recursive>
 8007f28:	89ab      	ldrh	r3, [r5, #12]
 8007f2a:	065b      	lsls	r3, r3, #25
 8007f2c:	f53f af12 	bmi.w	8007d54 <_vfiprintf_r+0x4c>
 8007f30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f32:	e711      	b.n	8007d58 <_vfiprintf_r+0x50>
 8007f34:	ab03      	add	r3, sp, #12
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	462a      	mov	r2, r5
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	4b09      	ldr	r3, [pc, #36]	; (8007f64 <_vfiprintf_r+0x25c>)
 8007f3e:	a904      	add	r1, sp, #16
 8007f40:	f000 f882 	bl	8008048 <_printf_i>
 8007f44:	e7e4      	b.n	8007f10 <_vfiprintf_r+0x208>
 8007f46:	bf00      	nop
 8007f48:	080084f0 	.word	0x080084f0
 8007f4c:	08008510 	.word	0x08008510
 8007f50:	080084d0 	.word	0x080084d0
 8007f54:	08008534 	.word	0x08008534
 8007f58:	0800853a 	.word	0x0800853a
 8007f5c:	0800853e 	.word	0x0800853e
 8007f60:	00000000 	.word	0x00000000
 8007f64:	08007ce3 	.word	0x08007ce3

08007f68 <_printf_common>:
 8007f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f6c:	4616      	mov	r6, r2
 8007f6e:	4699      	mov	r9, r3
 8007f70:	688a      	ldr	r2, [r1, #8]
 8007f72:	690b      	ldr	r3, [r1, #16]
 8007f74:	4607      	mov	r7, r0
 8007f76:	4293      	cmp	r3, r2
 8007f78:	bfb8      	it	lt
 8007f7a:	4613      	movlt	r3, r2
 8007f7c:	6033      	str	r3, [r6, #0]
 8007f7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f82:	460c      	mov	r4, r1
 8007f84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f88:	b10a      	cbz	r2, 8007f8e <_printf_common+0x26>
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	6033      	str	r3, [r6, #0]
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	0699      	lsls	r1, r3, #26
 8007f92:	bf42      	ittt	mi
 8007f94:	6833      	ldrmi	r3, [r6, #0]
 8007f96:	3302      	addmi	r3, #2
 8007f98:	6033      	strmi	r3, [r6, #0]
 8007f9a:	6825      	ldr	r5, [r4, #0]
 8007f9c:	f015 0506 	ands.w	r5, r5, #6
 8007fa0:	d106      	bne.n	8007fb0 <_printf_common+0x48>
 8007fa2:	f104 0a19 	add.w	sl, r4, #25
 8007fa6:	68e3      	ldr	r3, [r4, #12]
 8007fa8:	6832      	ldr	r2, [r6, #0]
 8007faa:	1a9b      	subs	r3, r3, r2
 8007fac:	42ab      	cmp	r3, r5
 8007fae:	dc28      	bgt.n	8008002 <_printf_common+0x9a>
 8007fb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fb4:	1e13      	subs	r3, r2, #0
 8007fb6:	6822      	ldr	r2, [r4, #0]
 8007fb8:	bf18      	it	ne
 8007fba:	2301      	movne	r3, #1
 8007fbc:	0692      	lsls	r2, r2, #26
 8007fbe:	d42d      	bmi.n	800801c <_printf_common+0xb4>
 8007fc0:	4649      	mov	r1, r9
 8007fc2:	4638      	mov	r0, r7
 8007fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fc8:	47c0      	blx	r8
 8007fca:	3001      	adds	r0, #1
 8007fcc:	d020      	beq.n	8008010 <_printf_common+0xa8>
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	68e5      	ldr	r5, [r4, #12]
 8007fd2:	f003 0306 	and.w	r3, r3, #6
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	bf18      	it	ne
 8007fda:	2500      	movne	r5, #0
 8007fdc:	6832      	ldr	r2, [r6, #0]
 8007fde:	f04f 0600 	mov.w	r6, #0
 8007fe2:	68a3      	ldr	r3, [r4, #8]
 8007fe4:	bf08      	it	eq
 8007fe6:	1aad      	subeq	r5, r5, r2
 8007fe8:	6922      	ldr	r2, [r4, #16]
 8007fea:	bf08      	it	eq
 8007fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	bfc4      	itt	gt
 8007ff4:	1a9b      	subgt	r3, r3, r2
 8007ff6:	18ed      	addgt	r5, r5, r3
 8007ff8:	341a      	adds	r4, #26
 8007ffa:	42b5      	cmp	r5, r6
 8007ffc:	d11a      	bne.n	8008034 <_printf_common+0xcc>
 8007ffe:	2000      	movs	r0, #0
 8008000:	e008      	b.n	8008014 <_printf_common+0xac>
 8008002:	2301      	movs	r3, #1
 8008004:	4652      	mov	r2, sl
 8008006:	4649      	mov	r1, r9
 8008008:	4638      	mov	r0, r7
 800800a:	47c0      	blx	r8
 800800c:	3001      	adds	r0, #1
 800800e:	d103      	bne.n	8008018 <_printf_common+0xb0>
 8008010:	f04f 30ff 	mov.w	r0, #4294967295
 8008014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008018:	3501      	adds	r5, #1
 800801a:	e7c4      	b.n	8007fa6 <_printf_common+0x3e>
 800801c:	2030      	movs	r0, #48	; 0x30
 800801e:	18e1      	adds	r1, r4, r3
 8008020:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008024:	1c5a      	adds	r2, r3, #1
 8008026:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800802a:	4422      	add	r2, r4
 800802c:	3302      	adds	r3, #2
 800802e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008032:	e7c5      	b.n	8007fc0 <_printf_common+0x58>
 8008034:	2301      	movs	r3, #1
 8008036:	4622      	mov	r2, r4
 8008038:	4649      	mov	r1, r9
 800803a:	4638      	mov	r0, r7
 800803c:	47c0      	blx	r8
 800803e:	3001      	adds	r0, #1
 8008040:	d0e6      	beq.n	8008010 <_printf_common+0xa8>
 8008042:	3601      	adds	r6, #1
 8008044:	e7d9      	b.n	8007ffa <_printf_common+0x92>
	...

08008048 <_printf_i>:
 8008048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800804c:	7e0f      	ldrb	r7, [r1, #24]
 800804e:	4691      	mov	r9, r2
 8008050:	2f78      	cmp	r7, #120	; 0x78
 8008052:	4680      	mov	r8, r0
 8008054:	460c      	mov	r4, r1
 8008056:	469a      	mov	sl, r3
 8008058:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800805a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800805e:	d807      	bhi.n	8008070 <_printf_i+0x28>
 8008060:	2f62      	cmp	r7, #98	; 0x62
 8008062:	d80a      	bhi.n	800807a <_printf_i+0x32>
 8008064:	2f00      	cmp	r7, #0
 8008066:	f000 80d9 	beq.w	800821c <_printf_i+0x1d4>
 800806a:	2f58      	cmp	r7, #88	; 0x58
 800806c:	f000 80a4 	beq.w	80081b8 <_printf_i+0x170>
 8008070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008078:	e03a      	b.n	80080f0 <_printf_i+0xa8>
 800807a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800807e:	2b15      	cmp	r3, #21
 8008080:	d8f6      	bhi.n	8008070 <_printf_i+0x28>
 8008082:	a101      	add	r1, pc, #4	; (adr r1, 8008088 <_printf_i+0x40>)
 8008084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008088:	080080e1 	.word	0x080080e1
 800808c:	080080f5 	.word	0x080080f5
 8008090:	08008071 	.word	0x08008071
 8008094:	08008071 	.word	0x08008071
 8008098:	08008071 	.word	0x08008071
 800809c:	08008071 	.word	0x08008071
 80080a0:	080080f5 	.word	0x080080f5
 80080a4:	08008071 	.word	0x08008071
 80080a8:	08008071 	.word	0x08008071
 80080ac:	08008071 	.word	0x08008071
 80080b0:	08008071 	.word	0x08008071
 80080b4:	08008203 	.word	0x08008203
 80080b8:	08008125 	.word	0x08008125
 80080bc:	080081e5 	.word	0x080081e5
 80080c0:	08008071 	.word	0x08008071
 80080c4:	08008071 	.word	0x08008071
 80080c8:	08008225 	.word	0x08008225
 80080cc:	08008071 	.word	0x08008071
 80080d0:	08008125 	.word	0x08008125
 80080d4:	08008071 	.word	0x08008071
 80080d8:	08008071 	.word	0x08008071
 80080dc:	080081ed 	.word	0x080081ed
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	1d1a      	adds	r2, r3, #4
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	602a      	str	r2, [r5, #0]
 80080e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080f0:	2301      	movs	r3, #1
 80080f2:	e0a4      	b.n	800823e <_printf_i+0x1f6>
 80080f4:	6820      	ldr	r0, [r4, #0]
 80080f6:	6829      	ldr	r1, [r5, #0]
 80080f8:	0606      	lsls	r6, r0, #24
 80080fa:	f101 0304 	add.w	r3, r1, #4
 80080fe:	d50a      	bpl.n	8008116 <_printf_i+0xce>
 8008100:	680e      	ldr	r6, [r1, #0]
 8008102:	602b      	str	r3, [r5, #0]
 8008104:	2e00      	cmp	r6, #0
 8008106:	da03      	bge.n	8008110 <_printf_i+0xc8>
 8008108:	232d      	movs	r3, #45	; 0x2d
 800810a:	4276      	negs	r6, r6
 800810c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008110:	230a      	movs	r3, #10
 8008112:	485e      	ldr	r0, [pc, #376]	; (800828c <_printf_i+0x244>)
 8008114:	e019      	b.n	800814a <_printf_i+0x102>
 8008116:	680e      	ldr	r6, [r1, #0]
 8008118:	f010 0f40 	tst.w	r0, #64	; 0x40
 800811c:	602b      	str	r3, [r5, #0]
 800811e:	bf18      	it	ne
 8008120:	b236      	sxthne	r6, r6
 8008122:	e7ef      	b.n	8008104 <_printf_i+0xbc>
 8008124:	682b      	ldr	r3, [r5, #0]
 8008126:	6820      	ldr	r0, [r4, #0]
 8008128:	1d19      	adds	r1, r3, #4
 800812a:	6029      	str	r1, [r5, #0]
 800812c:	0601      	lsls	r1, r0, #24
 800812e:	d501      	bpl.n	8008134 <_printf_i+0xec>
 8008130:	681e      	ldr	r6, [r3, #0]
 8008132:	e002      	b.n	800813a <_printf_i+0xf2>
 8008134:	0646      	lsls	r6, r0, #25
 8008136:	d5fb      	bpl.n	8008130 <_printf_i+0xe8>
 8008138:	881e      	ldrh	r6, [r3, #0]
 800813a:	2f6f      	cmp	r7, #111	; 0x6f
 800813c:	bf0c      	ite	eq
 800813e:	2308      	moveq	r3, #8
 8008140:	230a      	movne	r3, #10
 8008142:	4852      	ldr	r0, [pc, #328]	; (800828c <_printf_i+0x244>)
 8008144:	2100      	movs	r1, #0
 8008146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800814a:	6865      	ldr	r5, [r4, #4]
 800814c:	2d00      	cmp	r5, #0
 800814e:	bfa8      	it	ge
 8008150:	6821      	ldrge	r1, [r4, #0]
 8008152:	60a5      	str	r5, [r4, #8]
 8008154:	bfa4      	itt	ge
 8008156:	f021 0104 	bicge.w	r1, r1, #4
 800815a:	6021      	strge	r1, [r4, #0]
 800815c:	b90e      	cbnz	r6, 8008162 <_printf_i+0x11a>
 800815e:	2d00      	cmp	r5, #0
 8008160:	d04d      	beq.n	80081fe <_printf_i+0x1b6>
 8008162:	4615      	mov	r5, r2
 8008164:	fbb6 f1f3 	udiv	r1, r6, r3
 8008168:	fb03 6711 	mls	r7, r3, r1, r6
 800816c:	5dc7      	ldrb	r7, [r0, r7]
 800816e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008172:	4637      	mov	r7, r6
 8008174:	42bb      	cmp	r3, r7
 8008176:	460e      	mov	r6, r1
 8008178:	d9f4      	bls.n	8008164 <_printf_i+0x11c>
 800817a:	2b08      	cmp	r3, #8
 800817c:	d10b      	bne.n	8008196 <_printf_i+0x14e>
 800817e:	6823      	ldr	r3, [r4, #0]
 8008180:	07de      	lsls	r6, r3, #31
 8008182:	d508      	bpl.n	8008196 <_printf_i+0x14e>
 8008184:	6923      	ldr	r3, [r4, #16]
 8008186:	6861      	ldr	r1, [r4, #4]
 8008188:	4299      	cmp	r1, r3
 800818a:	bfde      	ittt	le
 800818c:	2330      	movle	r3, #48	; 0x30
 800818e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008192:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008196:	1b52      	subs	r2, r2, r5
 8008198:	6122      	str	r2, [r4, #16]
 800819a:	464b      	mov	r3, r9
 800819c:	4621      	mov	r1, r4
 800819e:	4640      	mov	r0, r8
 80081a0:	f8cd a000 	str.w	sl, [sp]
 80081a4:	aa03      	add	r2, sp, #12
 80081a6:	f7ff fedf 	bl	8007f68 <_printf_common>
 80081aa:	3001      	adds	r0, #1
 80081ac:	d14c      	bne.n	8008248 <_printf_i+0x200>
 80081ae:	f04f 30ff 	mov.w	r0, #4294967295
 80081b2:	b004      	add	sp, #16
 80081b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b8:	4834      	ldr	r0, [pc, #208]	; (800828c <_printf_i+0x244>)
 80081ba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80081be:	6829      	ldr	r1, [r5, #0]
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	f851 6b04 	ldr.w	r6, [r1], #4
 80081c6:	6029      	str	r1, [r5, #0]
 80081c8:	061d      	lsls	r5, r3, #24
 80081ca:	d514      	bpl.n	80081f6 <_printf_i+0x1ae>
 80081cc:	07df      	lsls	r7, r3, #31
 80081ce:	bf44      	itt	mi
 80081d0:	f043 0320 	orrmi.w	r3, r3, #32
 80081d4:	6023      	strmi	r3, [r4, #0]
 80081d6:	b91e      	cbnz	r6, 80081e0 <_printf_i+0x198>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	f023 0320 	bic.w	r3, r3, #32
 80081de:	6023      	str	r3, [r4, #0]
 80081e0:	2310      	movs	r3, #16
 80081e2:	e7af      	b.n	8008144 <_printf_i+0xfc>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	f043 0320 	orr.w	r3, r3, #32
 80081ea:	6023      	str	r3, [r4, #0]
 80081ec:	2378      	movs	r3, #120	; 0x78
 80081ee:	4828      	ldr	r0, [pc, #160]	; (8008290 <_printf_i+0x248>)
 80081f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081f4:	e7e3      	b.n	80081be <_printf_i+0x176>
 80081f6:	0659      	lsls	r1, r3, #25
 80081f8:	bf48      	it	mi
 80081fa:	b2b6      	uxthmi	r6, r6
 80081fc:	e7e6      	b.n	80081cc <_printf_i+0x184>
 80081fe:	4615      	mov	r5, r2
 8008200:	e7bb      	b.n	800817a <_printf_i+0x132>
 8008202:	682b      	ldr	r3, [r5, #0]
 8008204:	6826      	ldr	r6, [r4, #0]
 8008206:	1d18      	adds	r0, r3, #4
 8008208:	6961      	ldr	r1, [r4, #20]
 800820a:	6028      	str	r0, [r5, #0]
 800820c:	0635      	lsls	r5, r6, #24
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	d501      	bpl.n	8008216 <_printf_i+0x1ce>
 8008212:	6019      	str	r1, [r3, #0]
 8008214:	e002      	b.n	800821c <_printf_i+0x1d4>
 8008216:	0670      	lsls	r0, r6, #25
 8008218:	d5fb      	bpl.n	8008212 <_printf_i+0x1ca>
 800821a:	8019      	strh	r1, [r3, #0]
 800821c:	2300      	movs	r3, #0
 800821e:	4615      	mov	r5, r2
 8008220:	6123      	str	r3, [r4, #16]
 8008222:	e7ba      	b.n	800819a <_printf_i+0x152>
 8008224:	682b      	ldr	r3, [r5, #0]
 8008226:	2100      	movs	r1, #0
 8008228:	1d1a      	adds	r2, r3, #4
 800822a:	602a      	str	r2, [r5, #0]
 800822c:	681d      	ldr	r5, [r3, #0]
 800822e:	6862      	ldr	r2, [r4, #4]
 8008230:	4628      	mov	r0, r5
 8008232:	f000 f863 	bl	80082fc <memchr>
 8008236:	b108      	cbz	r0, 800823c <_printf_i+0x1f4>
 8008238:	1b40      	subs	r0, r0, r5
 800823a:	6060      	str	r0, [r4, #4]
 800823c:	6863      	ldr	r3, [r4, #4]
 800823e:	6123      	str	r3, [r4, #16]
 8008240:	2300      	movs	r3, #0
 8008242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008246:	e7a8      	b.n	800819a <_printf_i+0x152>
 8008248:	462a      	mov	r2, r5
 800824a:	4649      	mov	r1, r9
 800824c:	4640      	mov	r0, r8
 800824e:	6923      	ldr	r3, [r4, #16]
 8008250:	47d0      	blx	sl
 8008252:	3001      	adds	r0, #1
 8008254:	d0ab      	beq.n	80081ae <_printf_i+0x166>
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	079b      	lsls	r3, r3, #30
 800825a:	d413      	bmi.n	8008284 <_printf_i+0x23c>
 800825c:	68e0      	ldr	r0, [r4, #12]
 800825e:	9b03      	ldr	r3, [sp, #12]
 8008260:	4298      	cmp	r0, r3
 8008262:	bfb8      	it	lt
 8008264:	4618      	movlt	r0, r3
 8008266:	e7a4      	b.n	80081b2 <_printf_i+0x16a>
 8008268:	2301      	movs	r3, #1
 800826a:	4632      	mov	r2, r6
 800826c:	4649      	mov	r1, r9
 800826e:	4640      	mov	r0, r8
 8008270:	47d0      	blx	sl
 8008272:	3001      	adds	r0, #1
 8008274:	d09b      	beq.n	80081ae <_printf_i+0x166>
 8008276:	3501      	adds	r5, #1
 8008278:	68e3      	ldr	r3, [r4, #12]
 800827a:	9903      	ldr	r1, [sp, #12]
 800827c:	1a5b      	subs	r3, r3, r1
 800827e:	42ab      	cmp	r3, r5
 8008280:	dcf2      	bgt.n	8008268 <_printf_i+0x220>
 8008282:	e7eb      	b.n	800825c <_printf_i+0x214>
 8008284:	2500      	movs	r5, #0
 8008286:	f104 0619 	add.w	r6, r4, #25
 800828a:	e7f5      	b.n	8008278 <_printf_i+0x230>
 800828c:	08008545 	.word	0x08008545
 8008290:	08008556 	.word	0x08008556

08008294 <_read_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	4604      	mov	r4, r0
 8008298:	4608      	mov	r0, r1
 800829a:	4611      	mov	r1, r2
 800829c:	2200      	movs	r2, #0
 800829e:	4d05      	ldr	r5, [pc, #20]	; (80082b4 <_read_r+0x20>)
 80082a0:	602a      	str	r2, [r5, #0]
 80082a2:	461a      	mov	r2, r3
 80082a4:	f7fa fa4e 	bl	8002744 <_read>
 80082a8:	1c43      	adds	r3, r0, #1
 80082aa:	d102      	bne.n	80082b2 <_read_r+0x1e>
 80082ac:	682b      	ldr	r3, [r5, #0]
 80082ae:	b103      	cbz	r3, 80082b2 <_read_r+0x1e>
 80082b0:	6023      	str	r3, [r4, #0]
 80082b2:	bd38      	pop	{r3, r4, r5, pc}
 80082b4:	200023dc 	.word	0x200023dc

080082b8 <_fstat_r>:
 80082b8:	b538      	push	{r3, r4, r5, lr}
 80082ba:	2300      	movs	r3, #0
 80082bc:	4d06      	ldr	r5, [pc, #24]	; (80082d8 <_fstat_r+0x20>)
 80082be:	4604      	mov	r4, r0
 80082c0:	4608      	mov	r0, r1
 80082c2:	4611      	mov	r1, r2
 80082c4:	602b      	str	r3, [r5, #0]
 80082c6:	f7fa fa65 	bl	8002794 <_fstat>
 80082ca:	1c43      	adds	r3, r0, #1
 80082cc:	d102      	bne.n	80082d4 <_fstat_r+0x1c>
 80082ce:	682b      	ldr	r3, [r5, #0]
 80082d0:	b103      	cbz	r3, 80082d4 <_fstat_r+0x1c>
 80082d2:	6023      	str	r3, [r4, #0]
 80082d4:	bd38      	pop	{r3, r4, r5, pc}
 80082d6:	bf00      	nop
 80082d8:	200023dc 	.word	0x200023dc

080082dc <_isatty_r>:
 80082dc:	b538      	push	{r3, r4, r5, lr}
 80082de:	2300      	movs	r3, #0
 80082e0:	4d05      	ldr	r5, [pc, #20]	; (80082f8 <_isatty_r+0x1c>)
 80082e2:	4604      	mov	r4, r0
 80082e4:	4608      	mov	r0, r1
 80082e6:	602b      	str	r3, [r5, #0]
 80082e8:	f7fa fa63 	bl	80027b2 <_isatty>
 80082ec:	1c43      	adds	r3, r0, #1
 80082ee:	d102      	bne.n	80082f6 <_isatty_r+0x1a>
 80082f0:	682b      	ldr	r3, [r5, #0]
 80082f2:	b103      	cbz	r3, 80082f6 <_isatty_r+0x1a>
 80082f4:	6023      	str	r3, [r4, #0]
 80082f6:	bd38      	pop	{r3, r4, r5, pc}
 80082f8:	200023dc 	.word	0x200023dc

080082fc <memchr>:
 80082fc:	4603      	mov	r3, r0
 80082fe:	b510      	push	{r4, lr}
 8008300:	b2c9      	uxtb	r1, r1
 8008302:	4402      	add	r2, r0
 8008304:	4293      	cmp	r3, r2
 8008306:	4618      	mov	r0, r3
 8008308:	d101      	bne.n	800830e <memchr+0x12>
 800830a:	2000      	movs	r0, #0
 800830c:	e003      	b.n	8008316 <memchr+0x1a>
 800830e:	7804      	ldrb	r4, [r0, #0]
 8008310:	3301      	adds	r3, #1
 8008312:	428c      	cmp	r4, r1
 8008314:	d1f6      	bne.n	8008304 <memchr+0x8>
 8008316:	bd10      	pop	{r4, pc}

08008318 <_init>:
 8008318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831a:	bf00      	nop
 800831c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800831e:	bc08      	pop	{r3}
 8008320:	469e      	mov	lr, r3
 8008322:	4770      	bx	lr

08008324 <_fini>:
 8008324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008326:	bf00      	nop
 8008328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832a:	bc08      	pop	{r3}
 800832c:	469e      	mov	lr, r3
 800832e:	4770      	bx	lr
