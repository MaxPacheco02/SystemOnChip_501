
SensorsData_Reto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c28  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08003d38  08003d38  00013d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eb0  08003eb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003eb0  08003eb0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eb0  08003eb0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eb4  08003eb4  00013eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08003f28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08003f28  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000396b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001204  00000000  00000000  00023a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000538  00000000  00000000  00024c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000480  00000000  00000000  00025140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177e2  00000000  00000000  000255c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006131  00000000  00000000  0003cda2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008117a  00000000  00000000  00042ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c404d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c0c  00000000  00000000  000c40a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08003d20 	.word	0x08003d20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08003d20 	.word	0x08003d20

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__aeabi_f2uiz>:
 8000e48:	0042      	lsls	r2, r0, #1
 8000e4a:	d20e      	bcs.n	8000e6a <__aeabi_f2uiz+0x22>
 8000e4c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e50:	d30b      	bcc.n	8000e6a <__aeabi_f2uiz+0x22>
 8000e52:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e56:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e5a:	d409      	bmi.n	8000e70 <__aeabi_f2uiz+0x28>
 8000e5c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e64:	fa23 f002 	lsr.w	r0, r3, r2
 8000e68:	4770      	bx	lr
 8000e6a:	f04f 0000 	mov.w	r0, #0
 8000e6e:	4770      	bx	lr
 8000e70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e74:	d101      	bne.n	8000e7a <__aeabi_f2uiz+0x32>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	d102      	bne.n	8000e80 <__aeabi_f2uiz+0x38>
 8000e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7e:	4770      	bx	lr
 8000e80:	f04f 0000 	mov.w	r0, #0
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  /* ****************************************************** */
  /* Configurar los pines del Puerto B para las lineas:
   * RW, RS, EN, D4-D7 del LCD
   * como general purpose output push-pull and 50 MHz speed */
	// 0,1,2,5,6,8,9
	GPIOC->CRL &= ~GPIO_CRL_CNF0;
 8000e8e:	4b53      	ldr	r3, [pc, #332]	; (8000fdc <LCD_Init+0x154>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a52      	ldr	r2, [pc, #328]	; (8000fdc <LCD_Init+0x154>)
 8000e94:	f023 030c 	bic.w	r3, r3, #12
 8000e98:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE0;
 8000e9a:	4b50      	ldr	r3, [pc, #320]	; (8000fdc <LCD_Init+0x154>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a4f      	ldr	r2, [pc, #316]	; (8000fdc <LCD_Init+0x154>)
 8000ea0:	f043 0303 	orr.w	r3, r3, #3
 8000ea4:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~GPIO_CRL_CNF1;
 8000ea6:	4b4d      	ldr	r3, [pc, #308]	; (8000fdc <LCD_Init+0x154>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a4c      	ldr	r2, [pc, #304]	; (8000fdc <LCD_Init+0x154>)
 8000eac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000eb0:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE1;
 8000eb2:	4b4a      	ldr	r3, [pc, #296]	; (8000fdc <LCD_Init+0x154>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a49      	ldr	r2, [pc, #292]	; (8000fdc <LCD_Init+0x154>)
 8000eb8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000ebc:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~GPIO_CRL_CNF2;
 8000ebe:	4b47      	ldr	r3, [pc, #284]	; (8000fdc <LCD_Init+0x154>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a46      	ldr	r2, [pc, #280]	; (8000fdc <LCD_Init+0x154>)
 8000ec4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000ec8:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE2;
 8000eca:	4b44      	ldr	r3, [pc, #272]	; (8000fdc <LCD_Init+0x154>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a43      	ldr	r2, [pc, #268]	; (8000fdc <LCD_Init+0x154>)
 8000ed0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000ed4:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~GPIO_CRL_CNF5;
 8000ed6:	4b41      	ldr	r3, [pc, #260]	; (8000fdc <LCD_Init+0x154>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a40      	ldr	r2, [pc, #256]	; (8000fdc <LCD_Init+0x154>)
 8000edc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000ee0:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE5;
 8000ee2:	4b3e      	ldr	r3, [pc, #248]	; (8000fdc <LCD_Init+0x154>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a3d      	ldr	r2, [pc, #244]	; (8000fdc <LCD_Init+0x154>)
 8000ee8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000eec:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~GPIO_CRL_CNF6;
 8000eee:	4b3b      	ldr	r3, [pc, #236]	; (8000fdc <LCD_Init+0x154>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a3a      	ldr	r2, [pc, #232]	; (8000fdc <LCD_Init+0x154>)
 8000ef4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000ef8:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE6;
 8000efa:	4b38      	ldr	r3, [pc, #224]	; (8000fdc <LCD_Init+0x154>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a37      	ldr	r2, [pc, #220]	; (8000fdc <LCD_Init+0x154>)
 8000f00:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000f04:	6013      	str	r3, [r2, #0]
	GPIOC->CRH &= ~GPIO_CRH_CNF8;
 8000f06:	4b35      	ldr	r3, [pc, #212]	; (8000fdc <LCD_Init+0x154>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	4a34      	ldr	r2, [pc, #208]	; (8000fdc <LCD_Init+0x154>)
 8000f0c:	f023 030c 	bic.w	r3, r3, #12
 8000f10:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE8;
 8000f12:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <LCD_Init+0x154>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	4a31      	ldr	r2, [pc, #196]	; (8000fdc <LCD_Init+0x154>)
 8000f18:	f043 0303 	orr.w	r3, r3, #3
 8000f1c:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF9;
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <LCD_Init+0x154>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	4a2e      	ldr	r2, [pc, #184]	; (8000fdc <LCD_Init+0x154>)
 8000f24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000f28:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE9;
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <LCD_Init+0x154>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	4a2b      	ldr	r2, [pc, #172]	; (8000fdc <LCD_Init+0x154>)
 8000f30:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000f34:	6053      	str	r3, [r2, #4]


  /* ****************************************************** */

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000f36:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <LCD_Init+0x154>)
 8000f38:	4a29      	ldr	r2, [pc, #164]	; (8000fe0 <LCD_Init+0x158>)
 8000f3a:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	HAL_Delay(15);
 8000f3c:	200f      	movs	r0, #15
 8000f3e:	f001 fa39 	bl	80023b4 <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <LCD_Init+0x154>)
 8000f44:	4a26      	ldr	r2, [pc, #152]	; (8000fe0 <LCD_Init+0x158>)
 8000f46:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000f48:	f000 f968 	bl	800121c <LCD_Pulse_EN>
	HAL_Delay(5);//					deberia ser un delay de 4.1ms
 8000f4c:	2005      	movs	r0, #5
 8000f4e:	f001 fa31 	bl	80023b4 <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000f52:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <LCD_Init+0x154>)
 8000f54:	4a22      	ldr	r2, [pc, #136]	; (8000fe0 <LCD_Init+0x158>)
 8000f56:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000f58:	f000 f960 	bl	800121c <LCD_Pulse_EN>
	HAL_Delay(1);//					deberia ser un delay de 100us
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f001 fa29 	bl	80023b4 <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <LCD_Init+0x154>)
 8000f64:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <LCD_Init+0x158>)
 8000f66:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000f68:	f000 f958 	bl	800121c <LCD_Pulse_EN>

	while( LCD_Busy( ) );//				espera a que el LCD este operativo
 8000f6c:	bf00      	nop
 8000f6e:	f000 f911 	bl	8001194 <LCD_Busy>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1fa      	bne.n	8000f6e <LCD_Init+0xe6>
	GPIOC->BSRR	 =	1U << LCD_D4_PIN_LOW
 8000f78:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <LCD_Init+0x154>)
 8000f7a:	4a1a      	ldr	r2, [pc, #104]	; (8000fe4 <LCD_Init+0x15c>)
 8000f7c:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000f7e:	f000 f94d 	bl	800121c <LCD_Pulse_EN>

	while( LCD_Busy( ) );//				espera a que se complete
 8000f82:	bf00      	nop
 8000f84:	f000 f906 	bl	8001194 <LCD_Busy>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1fa      	bne.n	8000f84 <LCD_Init+0xfc>
	LCD_Write_Cmd( 0x28U );//			establecemos LCD como: datos 4-bit, #lineas=2, font=5x7 dots
 8000f8e:	2028      	movs	r0, #40	; 0x28
 8000f90:	f000 f890 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x0CU );//			enciende el LCD sin cursor
 8000f94:	200c      	movs	r0, #12
 8000f96:	f000 f88d 	bl	80010b4 <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x06U );//			inicializa cursor
 8000f9a:	2006      	movs	r0, #6
 8000f9c:	f000 f88a 	bl	80010b4 <LCD_Write_Cmd>

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );//			establece la direccion CGRAM desde 0
 8000fa0:	2040      	movs	r0, #64	; 0x40
 8000fa2:	f000 f887 	bl	80010b4 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <LCD_Init+0x160>)
 8000fa8:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	e00a      	b.n	8000fc6 <LCD_Init+0x13e>
		LCD_Put_Char( *p );
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 f891 	bl	80010dc <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	2b3f      	cmp	r3, #63	; 0x3f
 8000fca:	d9f1      	bls.n	8000fb0 <LCD_Init+0x128>

	LCD_Write_Cmd( 0x80 );
 8000fcc:	2080      	movs	r0, #128	; 0x80
 8000fce:	f000 f871 	bl	80010b4 <LCD_Write_Cmd>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40011000 	.word	0x40011000
 8000fe0:	03000060 	.word	0x03000060
 8000fe4:	03200040 	.word	0x03200040
 8000fe8:	08003dc8 	.word	0x08003dc8

08000fec <LCD_Out_Data4>:

//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(unsigned char val){
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )//			Bit[0]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <LCD_Out_Data4+0x1c>
		GPIOC->BSRR	=	1U << LCD_D4_PIN_HIGH;
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <LCD_Out_Data4+0x80>)
 8001002:	2220      	movs	r2, #32
 8001004:	611a      	str	r2, [r3, #16]
 8001006:	e003      	b.n	8001010 <LCD_Out_Data4+0x24>
	else
		GPIOC->BSRR	=	1U << LCD_D4_PIN_LOW;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <LCD_Out_Data4+0x80>)
 800100a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800100e:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )//			Bit[1]
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <LCD_Out_Data4+0x36>
		GPIOC->BSRR	=	1U << LCD_D5_PIN_HIGH;
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <LCD_Out_Data4+0x80>)
 800101c:	2240      	movs	r2, #64	; 0x40
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	e003      	b.n	800102a <LCD_Out_Data4+0x3e>
	else
		GPIOC->BSRR	=	1U << LCD_D5_PIN_LOW;
 8001022:	4b12      	ldr	r3, [pc, #72]	; (800106c <LCD_Out_Data4+0x80>)
 8001024:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001028:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )//			Bit[2]
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	2b00      	cmp	r3, #0
 8001032:	d004      	beq.n	800103e <LCD_Out_Data4+0x52>
		GPIOC->BSRR	=	1U << LCD_D6_PIN_HIGH;
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <LCD_Out_Data4+0x80>)
 8001036:	f44f 7280 	mov.w	r2, #256	; 0x100
 800103a:	611a      	str	r2, [r3, #16]
 800103c:	e003      	b.n	8001046 <LCD_Out_Data4+0x5a>
	else
		GPIOC->BSRR	=	1U << LCD_D6_PIN_LOW;
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <LCD_Out_Data4+0x80>)
 8001040:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001044:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )//			Bit[3]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	f003 0308 	and.w	r3, r3, #8
 800104c:	2b00      	cmp	r3, #0
 800104e:	d004      	beq.n	800105a <LCD_Out_Data4+0x6e>
		GPIOC->BSRR	=	1U << LCD_D7_PIN_HIGH;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <LCD_Out_Data4+0x80>)
 8001052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001056:	611a      	str	r2, [r3, #16]
	else
		GPIOC->BSRR	=	1U << LCD_D7_PIN_LOW;
}
 8001058:	e003      	b.n	8001062 <LCD_Out_Data4+0x76>
		GPIOC->BSRR	=	1U << LCD_D7_PIN_LOW;
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <LCD_Out_Data4+0x80>)
 800105c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001060:	611a      	str	r2, [r3, #16]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	40011000 	.word	0x40011000

08001070 <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(unsigned char val){
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	091b      	lsrs	r3, r3, #4
 800107e:	b2db      	uxtb	r3, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ffb3 	bl	8000fec <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8001086:	f000 f8c9 	bl	800121c <LCD_Pulse_EN>

	LCD_Out_Data4( val & 0x0FU );
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	f003 030f 	and.w	r3, r3, #15
 8001090:	b2db      	uxtb	r3, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ffaa 	bl	8000fec <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8001098:	f000 f8c0 	bl	800121c <LCD_Pulse_EN>

	while( LCD_Busy( ) );
 800109c:	bf00      	nop
 800109e:	f000 f879 	bl	8001194 <LCD_Busy>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1fa      	bne.n	800109e <LCD_Write_Byte+0x2e>
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(unsigned char val){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	1U << LCD_RS_PIN_LOW;//		RS=0 (seleccion de comando)
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <LCD_Write_Cmd+0x24>)
 80010c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010c4:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ffd1 	bl	8001070 <LCD_Write_Byte>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40011000 	.word	0x40011000

080010dc <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(unsigned char c){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	1U << LCD_RS_PIN_HIGH;//	RS=1 (seleccion de caracteres)
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <LCD_Put_Char+0x20>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( c );
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ffbe 	bl	8001070 <LCD_Write_Byte>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40011000 	.word	0x40011000

08001100 <LCD_Set_Cursor>:

//Funcion que establece el cursor en una posicion de la pantalla del LCD
void LCD_Set_Cursor(unsigned char line, unsigned char column){
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	460a      	mov	r2, r1
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]
	unsigned char address;
	if( column != 0 )
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d002      	beq.n	800111c <LCD_Set_Cursor+0x1c>
		column--;
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	3b01      	subs	r3, #1
 800111a:	71bb      	strb	r3, [r7, #6]
	if( line != 0 )
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d002      	beq.n	8001128 <LCD_Set_Cursor+0x28>
		line--;
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	3b01      	subs	r3, #1
 8001126:	71fb      	strb	r3, [r7, #7]
	address = ( line * 40 ) + column;
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	461a      	mov	r2, r3
 800112c:	0092      	lsls	r2, r2, #2
 800112e:	4413      	add	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	b2da      	uxtb	r2, r3
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	4413      	add	r3, r2
 8001138:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001140:	b2db      	uxtb	r3, r3
 8001142:	3b80      	subs	r3, #128	; 0x80
 8001144:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ffb3 	bl	80010b4 <LCD_Write_Cmd>
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <LCD_Put_Str>:

//Funcion que envia una cadena de caracteres ASCII al LCD
void LCD_Put_Str(char* str){
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
	for( int i = 0; i < 16 && str[ i ] != 0; i++ )
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	e009      	b.n	8001178 <LCD_Put_Str+0x22>
		LCD_Put_Char( str[ i ] );//			envia 1 byte al LCD
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ffb5 	bl	80010dc <LCD_Put_Char>
	for( int i = 0; i < 16 && str[ i ] != 0; i++ )
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3301      	adds	r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b0f      	cmp	r3, #15
 800117c:	dc05      	bgt.n	800118a <LCD_Put_Str+0x34>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1ec      	bne.n	8001164 <LCD_Put_Str+0xe>
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <LCD_Busy>:
			LCD_Put_Char( ch[ i ] );
	}
}

//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* ***************************************************** */
  /* Configurar la linea D7 del LCD como:
   * floating input                                        */
	GPIOC->CRH &= ~GPIO_CRH_CNF9_1 & ~GPIO_CRH_MODE9;
 8001198:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <LCD_Busy+0x80>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <LCD_Busy+0x80>)
 800119e:	f023 03b0 	bic.w	r3, r3, #176	; 0xb0
 80011a2:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_CNF9_0;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <LCD_Busy+0x80>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4a1a      	ldr	r2, [pc, #104]	; (8001214 <LCD_Busy+0x80>)
 80011aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ae:	6053      	str	r3, [r2, #4]

  /* ***************************************************** */

	GPIOC->BSRR	 =	1U << LCD_RS_PIN_LOW
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <LCD_Busy+0x80>)
 80011b2:	4a19      	ldr	r2, [pc, #100]	; (8001218 <LCD_Busy+0x84>)
 80011b4:	611a      	str	r2, [r3, #16]
			|	1U << LCD_RW_PIN_HIGH
			|	1U << LCD_EN_PIN_HIGH;
	HAL_Delay(1);//					          deberia de ser un delay of 100us
 80011b6:	2001      	movs	r0, #1
 80011b8:	f001 f8fc 	bl	80023b4 <HAL_Delay>

  /* ***************************************************** */
  if(GPIOC->IDR & 1U << LCD_D7_PIN_HIGH){//					                  if D7 is set, then
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <LCD_Busy+0x80>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d011      	beq.n	80011ec <LCD_Busy+0x58>
  /* ***************************************************** */
		GPIOC->BSRR	 =	1U << LCD_RW_PIN_LOW
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <LCD_Busy+0x80>)
 80011ca:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80011ce:	611a      	str	r2, [r3, #16]
				|	1U << LCD_EN_PIN_LOW;

    /* ***************************************************** */
    /* Configurar la linea D7 del LCD como:
     * general purpose output and 50 MHz speed               */
		GPIOC->CRH &= ~GPIO_CRH_CNF9;
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <LCD_Busy+0x80>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <LCD_Busy+0x80>)
 80011d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80011da:	6053      	str	r3, [r2, #4]
		GPIOC->CRH |= GPIO_CRH_MODE9;
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <LCD_Busy+0x80>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <LCD_Busy+0x80>)
 80011e2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80011e6:	6053      	str	r3, [r2, #4]

    /* ***************************************************** */
		return 1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e010      	b.n	800120e <LCD_Busy+0x7a>
	} else {
		GPIOC->BSRR	 =	1U << LCD_RW_PIN_LOW
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <LCD_Busy+0x80>)
 80011ee:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80011f2:	611a      	str	r2, [r3, #16]
				|	1U << LCD_EN_PIN_LOW;

    /* ***************************************************** */
    /* Configurar la linea D7 del LCD como:
     * general purpose output and 50 MHz speed               */
		GPIOC->CRH &= ~GPIO_CRH_CNF9;
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <LCD_Busy+0x80>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <LCD_Busy+0x80>)
 80011fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80011fe:	6053      	str	r3, [r2, #4]
		GPIOC->CRH |= GPIO_CRH_MODE9;
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <LCD_Busy+0x80>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	4a03      	ldr	r2, [pc, #12]	; (8001214 <LCD_Busy+0x80>)
 8001206:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800120a:	6053      	str	r3, [r2, #4]

    /* ***************************************************** */
		return 0;
 800120c:	2300      	movs	r3, #0
	}
}
 800120e:	4618      	mov	r0, r3
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40011000 	.word	0x40011000
 8001218:	00010006 	.word	0x00010006

0800121c <LCD_Pulse_EN>:

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	GPIOC->BSRR	=	1U << LCD_EN_PIN_HIGH;//		habilita pin EN ON
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <LCD_Pulse_EN+0x1c>)
 8001222:	2202      	movs	r2, #2
 8001224:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);//							deberia de ser un delay de 50us
 8001226:	2001      	movs	r0, #1
 8001228:	f001 f8c4 	bl	80023b4 <HAL_Delay>
	GPIOC->BSRR	=	1U << LCD_EN_PIN_LOW;//			habilita pin EN OFF
 800122c:	4b02      	ldr	r3, [pc, #8]	; (8001238 <LCD_Pulse_EN+0x1c>)
 800122e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001232:	611a      	str	r2, [r3, #16]
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40011000 	.word	0x40011000
 800123c:	00000000 	.word	0x00000000

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b5b0      	push	{r4, r5, r7, lr}
 8001242:	b0b0      	sub	sp, #192	; 0xc0
 8001244:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  uint16_t event_val1, event_val2, event_diff;
  uint32_t a=0, a1=0, a2=0, b=0, c=0, d=0, t_a=0, t_b=0;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800125e:	2300      	movs	r3, #0
 8001260:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  float pressed_t, freq, max_freq = 0, t=0;
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800127e:	f04f 0300 	mov.w	r3, #0
 8001282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  bool send = false;
 8001286:	2300      	movs	r3, #0
 8001288:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint16_t dataADC;
  float v;

  uint16_t count = 0, row = 1, tecla, found, changed = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8001292:	2301      	movs	r3, #1
 8001294:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8001298:	2300      	movs	r3, #0
 800129a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
  char msg1[] = "Inicio monitoreo";
 800129e:	4bae      	ldr	r3, [pc, #696]	; (8001558 <main+0x318>)
 80012a0:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80012a4:	461d      	mov	r5, r3
 80012a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012aa:	682b      	ldr	r3, [r5, #0]
 80012ac:	7023      	strb	r3, [r4, #0]
  char msg2[] = "Fin monitoreo";
 80012ae:	4bab      	ldr	r3, [pc, #684]	; (800155c <main+0x31c>)
 80012b0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80012b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012b6:	c407      	stmia	r4!, {r0, r1, r2}
 80012b8:	8023      	strh	r3, [r4, #0]
  char msg3[] = "F:  .  P: . ";
 80012ba:	4ba9      	ldr	r3, [pc, #676]	; (8001560 <main+0x320>)
 80012bc:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80012c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c2:	c407      	stmia	r4!, {r0, r1, r2}
 80012c4:	7023      	strb	r3, [r4, #0]
  char msg4[] = "Flow sensor";
 80012c6:	4aa7      	ldr	r2, [pc, #668]	; (8001564 <main+0x324>)
 80012c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80012ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  char msg5[] = "  .  HZ";
 80012d2:	4aa5      	ldr	r2, [pc, #660]	; (8001568 <main+0x328>)
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012dc:	e883 0003 	stmia.w	r3, {r0, r1}
  char msg6[] = "Pressure sensor";
 80012e0:	4ba2      	ldr	r3, [pc, #648]	; (800156c <main+0x32c>)
 80012e2:	f107 040c 	add.w	r4, r7, #12
 80012e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  char msg7[] = " .  V";
 80012ec:	4aa0      	ldr	r2, [pc, #640]	; (8001570 <main+0x330>)
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f4:	6018      	str	r0, [r3, #0]
 80012f6:	3304      	adds	r3, #4
 80012f8:	8019      	strh	r1, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fa:	f000 fff9 	bl	80022f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fe:	f000 fc0d 	bl	8001b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001302:	f000 fc4d 	bl	8001ba0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init();
 8001306:	f000 fc85 	bl	8001c14 <USER_RCC_Init>
  USER_GPIO_Init();
 800130a:	f000 fc9f 	bl	8001c4c <USER_GPIO_Init>
  USER_TIM2_Capture_Init();
 800130e:	f000 fd73 	bl	8001df8 <USER_TIM2_Capture_Init>
  USER_TIM3_Capture_Init();
 8001312:	f000 fdd9 	bl	8001ec8 <USER_TIM3_Capture_Init>
  USER_USART3_Init();
 8001316:	f000 fe2b 	bl	8001f70 <USER_USART3_Init>
  USER_ADC_Init();
 800131a:	f000 fe53 	bl	8001fc4 <USER_ADC_Init>
  USER_ADC_Calibration();
 800131e:	f000 fe8b 	bl	8002038 <USER_ADC_Calibration>
  LCD_Init( );//				inicializamos la libreria del LCD
 8001322:	f7ff fdb1 	bl	8000e88 <LCD_Init>
  LCD_Cursor_OFF( );//			cursor visible activo
 8001326:	200c      	movs	r0, #12
 8001328:	f7ff fec4 	bl	80010b4 <LCD_Write_Cmd>
  LCD_Clear( );//			borra la pantalla
 800132c:	2001      	movs	r0, #1
 800132e:	f7ff fec1 	bl	80010b4 <LCD_Write_Cmd>
  LCD_Set_Cursor( 1, 0 );//		posiciona cursor en la fila 1 columna 0
 8001332:	2100      	movs	r1, #0
 8001334:	2001      	movs	r0, #1
 8001336:	f7ff fee3 	bl	8001100 <LCD_Set_Cursor>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ADC1->CR2	|=	 ADC_CR2_ADON;//	starts the conversion
 800133a:	4b8e      	ldr	r3, [pc, #568]	; (8001574 <main+0x334>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	4a8d      	ldr	r2, [pc, #564]	; (8001574 <main+0x334>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6093      	str	r3, [r2, #8]
  TIM2->CNT = 230;	//A
 8001346:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800134a:	22e6      	movs	r2, #230	; 0xe6
 800134c:	625a      	str	r2, [r3, #36]	; 0x24
  while (1)
  {
	  GPIOB->BSRR = (1 << 16) | (1 << 1) | (1 << 2) | (1 << 3);
 800134e:	4b8a      	ldr	r3, [pc, #552]	; (8001578 <main+0x338>)
 8001350:	4a8a      	ldr	r2, [pc, #552]	; (800157c <main+0x33c>)
 8001352:	611a      	str	r2, [r3, #16]
	  found = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	  if(!(GPIOB->IDR & GPIO_IDR_IDR4 ) & !found){
 800135a:	4b87      	ldr	r3, [pc, #540]	; (8001578 <main+0x338>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	2b00      	cmp	r3, #0
 8001364:	bf0c      	ite	eq
 8001366:	2301      	moveq	r3, #1
 8001368:	2300      	movne	r3, #0
 800136a:	b2da      	uxtb	r2, r3
 800136c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001370:	2b00      	cmp	r3, #0
 8001372:	bf0c      	ite	eq
 8001374:	2301      	moveq	r3, #1
 8001376:	2300      	movne	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	4013      	ands	r3, r2
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <main+0x14e>
		 tecla = 0x1;
 8001382:	2301      	movs	r3, #1
 8001384:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		 found = 1;
 8001388:	2301      	movs	r3, #1
 800138a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR5 ) & !found){
 800138e:	4b7a      	ldr	r3, [pc, #488]	; (8001578 <main+0x338>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 0320 	and.w	r3, r3, #32
 8001396:	2b00      	cmp	r3, #0
 8001398:	bf0c      	ite	eq
 800139a:	2301      	moveq	r3, #1
 800139c:	2300      	movne	r3, #0
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	bf0c      	ite	eq
 80013a8:	2301      	moveq	r3, #1
 80013aa:	2300      	movne	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	4013      	ands	r3, r2
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d005      	beq.n	80013c2 <main+0x182>
		  tecla = 0x2;
 80013b6:	2302      	movs	r3, #2
 80013b8:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		  found = 1;
 80013bc:	2301      	movs	r3, #1
 80013be:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR6 ) & !found){
 80013c2:	4b6d      	ldr	r3, [pc, #436]	; (8001578 <main+0x338>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	bf0c      	ite	eq
 80013ce:	2301      	moveq	r3, #1
 80013d0:	2300      	movne	r3, #0
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80013d8:	2b00      	cmp	r3, #0
 80013da:	bf0c      	ite	eq
 80013dc:	2301      	moveq	r3, #1
 80013de:	2300      	movne	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	4013      	ands	r3, r2
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <main+0x1b6>
		  tecla = 0x3;
 80013ea:	2303      	movs	r3, #3
 80013ec:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		  found = 1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR7 ) & !found){
 80013f6:	4b60      	ldr	r3, [pc, #384]	; (8001578 <main+0x338>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fe:	2b00      	cmp	r3, #0
 8001400:	bf0c      	ite	eq
 8001402:	2301      	moveq	r3, #1
 8001404:	2300      	movne	r3, #0
 8001406:	b2da      	uxtb	r2, r3
 8001408:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800140c:	2b00      	cmp	r3, #0
 800140e:	bf0c      	ite	eq
 8001410:	2301      	moveq	r3, #1
 8001412:	2300      	movne	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4013      	ands	r3, r2
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <main+0x1ea>
		  tecla = 0xA;
 800141e:	230a      	movs	r3, #10
 8001420:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		  found = 1;
 8001424:	2301      	movs	r3, #1
 8001426:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	  }

	  GPIOB->BSRR = (1 << 0) | (1 << 17) | (1 << 2) | (1 << 3);
 800142a:	4b53      	ldr	r3, [pc, #332]	; (8001578 <main+0x338>)
 800142c:	4a54      	ldr	r2, [pc, #336]	; (8001580 <main+0x340>)
 800142e:	611a      	str	r2, [r3, #16]
	  if(!(GPIOB->IDR & GPIO_IDR_IDR4 ) & !found){
 8001430:	4b51      	ldr	r3, [pc, #324]	; (8001578 <main+0x338>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	2b00      	cmp	r3, #0
 800143a:	bf0c      	ite	eq
 800143c:	2301      	moveq	r3, #1
 800143e:	2300      	movne	r3, #0
 8001440:	b2da      	uxtb	r2, r3
 8001442:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001446:	2b00      	cmp	r3, #0
 8001448:	bf0c      	ite	eq
 800144a:	2301      	moveq	r3, #1
 800144c:	2300      	movne	r3, #0
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4013      	ands	r3, r2
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <main+0x224>
		  tecla = 0x4;
 8001458:	2304      	movs	r3, #4
 800145a:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		  found = 1;
 800145e:	2301      	movs	r3, #1
 8001460:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR5 ) & !found){
 8001464:	4b44      	ldr	r3, [pc, #272]	; (8001578 <main+0x338>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 0320 	and.w	r3, r3, #32
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf0c      	ite	eq
 8001470:	2301      	moveq	r3, #1
 8001472:	2300      	movne	r3, #0
 8001474:	b2da      	uxtb	r2, r3
 8001476:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800147a:	2b00      	cmp	r3, #0
 800147c:	bf0c      	ite	eq
 800147e:	2301      	moveq	r3, #1
 8001480:	2300      	movne	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	4013      	ands	r3, r2
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <main+0x258>
		  tecla = 0x5;
 800148c:	2305      	movs	r3, #5
 800148e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		  found = 1;
 8001492:	2301      	movs	r3, #1
 8001494:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR6 ) & !found){
 8001498:	4b37      	ldr	r3, [pc, #220]	; (8001578 <main+0x338>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf0c      	ite	eq
 80014a4:	2301      	moveq	r3, #1
 80014a6:	2300      	movne	r3, #0
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	bf0c      	ite	eq
 80014b2:	2301      	moveq	r3, #1
 80014b4:	2300      	movne	r3, #0
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	4013      	ands	r3, r2
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <main+0x28c>
		  tecla = 0x6;
 80014c0:	2306      	movs	r3, #6
 80014c2:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		  found = 1;
 80014c6:	2301      	movs	r3, #1
 80014c8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR7 ) & !found){
 80014cc:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <main+0x338>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	bf0c      	ite	eq
 80014d8:	2301      	moveq	r3, #1
 80014da:	2300      	movne	r3, #0
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	bf0c      	ite	eq
 80014e6:	2301      	moveq	r3, #1
 80014e8:	2300      	movne	r3, #0
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	4013      	ands	r3, r2
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <main+0x2c0>
		  tecla = 0xB;
 80014f4:	230b      	movs	r3, #11
 80014f6:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		  found = 1;
 80014fa:	2301      	movs	r3, #1
 80014fc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	  }

	  GPIOB->BSRR = (1 << 0) | (1 << 1) | (1 << 18) | (1 << 3);
 8001500:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <main+0x338>)
 8001502:	4a20      	ldr	r2, [pc, #128]	; (8001584 <main+0x344>)
 8001504:	611a      	str	r2, [r3, #16]
	  if(!(GPIOB->IDR & GPIO_IDR_IDR4 ) & !found){
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <main+0x338>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	2b00      	cmp	r3, #0
 8001510:	bf0c      	ite	eq
 8001512:	2301      	moveq	r3, #1
 8001514:	2300      	movne	r3, #0
 8001516:	b2da      	uxtb	r2, r3
 8001518:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800151c:	2b00      	cmp	r3, #0
 800151e:	bf0c      	ite	eq
 8001520:	2301      	moveq	r3, #1
 8001522:	2300      	movne	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	4013      	ands	r3, r2
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <main+0x2fa>
		  tecla = 0x7;
 800152e:	2307      	movs	r3, #7
 8001530:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		  found = 1;
 8001534:	2301      	movs	r3, #1
 8001536:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR5 ) & !found){
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <main+0x338>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 0320 	and.w	r3, r3, #32
 8001542:	2b00      	cmp	r3, #0
 8001544:	bf0c      	ite	eq
 8001546:	2301      	moveq	r3, #1
 8001548:	2300      	movne	r3, #0
 800154a:	b2da      	uxtb	r2, r3
 800154c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf08      	it	eq
 8001554:	2301      	moveq	r3, #1
 8001556:	e017      	b.n	8001588 <main+0x348>
 8001558:	08003d58 	.word	0x08003d58
 800155c:	08003d6c 	.word	0x08003d6c
 8001560:	08003d7c 	.word	0x08003d7c
 8001564:	08003d8c 	.word	0x08003d8c
 8001568:	08003d98 	.word	0x08003d98
 800156c:	08003da0 	.word	0x08003da0
 8001570:	08003db0 	.word	0x08003db0
 8001574:	40012400 	.word	0x40012400
 8001578:	40010c00 	.word	0x40010c00
 800157c:	0001000e 	.word	0x0001000e
 8001580:	0002000d 	.word	0x0002000d
 8001584:	0004000b 	.word	0x0004000b
 8001588:	bf18      	it	ne
 800158a:	2300      	movne	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	4013      	ands	r3, r2
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <main+0x362>
		  tecla = 0x8;
 8001596:	2308      	movs	r3, #8
 8001598:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		  found = 1;
 800159c:	2301      	movs	r3, #1
 800159e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR6 ) & !found){
 80015a2:	4bbb      	ldr	r3, [pc, #748]	; (8001890 <main+0x650>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	bf0c      	ite	eq
 80015ae:	2301      	moveq	r3, #1
 80015b0:	2300      	movne	r3, #0
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf0c      	ite	eq
 80015bc:	2301      	moveq	r3, #1
 80015be:	2300      	movne	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	4013      	ands	r3, r2
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <main+0x396>
		  tecla = 0x9;
 80015ca:	2309      	movs	r3, #9
 80015cc:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		  found = 1;
 80015d0:	2301      	movs	r3, #1
 80015d2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR7 ) & !found){
 80015d6:	4bae      	ldr	r3, [pc, #696]	; (8001890 <main+0x650>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015de:	2b00      	cmp	r3, #0
 80015e0:	bf0c      	ite	eq
 80015e2:	2301      	moveq	r3, #1
 80015e4:	2300      	movne	r3, #0
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	bf0c      	ite	eq
 80015f0:	2301      	moveq	r3, #1
 80015f2:	2300      	movne	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	4013      	ands	r3, r2
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d005      	beq.n	800160a <main+0x3ca>
		  tecla = 0xC;
 80015fe:	230c      	movs	r3, #12
 8001600:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		  found = 1;
 8001604:	2301      	movs	r3, #1
 8001606:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	  }

	  GPIOB->BSRR = (1 << 0) | (1 << 1) | (1 << 2) | (1 << 19);
 800160a:	4ba1      	ldr	r3, [pc, #644]	; (8001890 <main+0x650>)
 800160c:	4aa1      	ldr	r2, [pc, #644]	; (8001894 <main+0x654>)
 800160e:	611a      	str	r2, [r3, #16]
	  if(!(GPIOB->IDR & GPIO_IDR_IDR4 ) & !found){
 8001610:	4b9f      	ldr	r3, [pc, #636]	; (8001890 <main+0x650>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf0c      	ite	eq
 800161c:	2301      	moveq	r3, #1
 800161e:	2300      	movne	r3, #0
 8001620:	b2da      	uxtb	r2, r3
 8001622:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001626:	2b00      	cmp	r3, #0
 8001628:	bf0c      	ite	eq
 800162a:	2301      	moveq	r3, #1
 800162c:	2300      	movne	r3, #0
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4013      	ands	r3, r2
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <main+0x404>
		  tecla = 0xE;
 8001638:	230e      	movs	r3, #14
 800163a:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		  found = 1;
 800163e:	2301      	movs	r3, #1
 8001640:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR5 ) & !found){
 8001644:	4b92      	ldr	r3, [pc, #584]	; (8001890 <main+0x650>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 0320 	and.w	r3, r3, #32
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf0c      	ite	eq
 8001650:	2301      	moveq	r3, #1
 8001652:	2300      	movne	r3, #0
 8001654:	b2da      	uxtb	r2, r3
 8001656:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800165a:	2b00      	cmp	r3, #0
 800165c:	bf0c      	ite	eq
 800165e:	2301      	moveq	r3, #1
 8001660:	2300      	movne	r3, #0
 8001662:	b2db      	uxtb	r3, r3
 8001664:	4013      	ands	r3, r2
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <main+0x438>
		  tecla = 0x0;
 800166c:	2300      	movs	r3, #0
 800166e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		  found = 1;
 8001672:	2301      	movs	r3, #1
 8001674:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR6 ) & !found){
 8001678:	4b85      	ldr	r3, [pc, #532]	; (8001890 <main+0x650>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf0c      	ite	eq
 8001684:	2301      	moveq	r3, #1
 8001686:	2300      	movne	r3, #0
 8001688:	b2da      	uxtb	r2, r3
 800168a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800168e:	2b00      	cmp	r3, #0
 8001690:	bf0c      	ite	eq
 8001692:	2301      	moveq	r3, #1
 8001694:	2300      	movne	r3, #0
 8001696:	b2db      	uxtb	r3, r3
 8001698:	4013      	ands	r3, r2
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <main+0x46c>
		  tecla = 0xF;
 80016a0:	230f      	movs	r3, #15
 80016a2:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		  found = 1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR7 ) & !found){
 80016ac:	4b78      	ldr	r3, [pc, #480]	; (8001890 <main+0x650>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf0c      	ite	eq
 80016b8:	2301      	moveq	r3, #1
 80016ba:	2300      	movne	r3, #0
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	bf0c      	ite	eq
 80016c6:	2301      	moveq	r3, #1
 80016c8:	2300      	movne	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	4013      	ands	r3, r2
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <main+0x4a0>
		  tecla = 0xD;
 80016d4:	230d      	movs	r3, #13
 80016d6:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		  found = 1;
 80016da:	2301      	movs	r3, #1
 80016dc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	  }

	  //READING CIRCUIT FLOW
	  if(TIM3->SR & TIM_SR_CC1IF){
 80016e0:	4b6d      	ldr	r3, [pc, #436]	; (8001898 <main+0x658>)
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80b5 	beq.w	8001858 <main+0x618>
		  event_val1 = USER_TIM3_Capture_Event();//	capture the 1st event
 80016ee:	f000 fc2d 	bl	8001f4c <USER_TIM3_Capture_Event>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
		  TIM3->CCER ^=	TIM_CCER_CC1P;//		capture is done on different edge
 80016f8:	4b67      	ldr	r3, [pc, #412]	; (8001898 <main+0x658>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4a66      	ldr	r2, [pc, #408]	; (8001898 <main+0x658>)
 80016fe:	f083 0302 	eor.w	r3, r3, #2
 8001702:	6213      	str	r3, [r2, #32]

		  event_val2 = USER_TIM3_Capture_Event();//	capture the 2nd event
 8001704:	f000 fc22 	bl	8001f4c <USER_TIM3_Capture_Event>
 8001708:	4603      	mov	r3, r0
 800170a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		  TIM3->CCER ^=	TIM_CCER_CC1P;//		capture is done on different edge
 800170e:	4b62      	ldr	r3, [pc, #392]	; (8001898 <main+0x658>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4a61      	ldr	r2, [pc, #388]	; (8001898 <main+0x658>)
 8001714:	f083 0302 	eor.w	r3, r3, #2
 8001718:	6213      	str	r3, [r2, #32]

		  event_diff = event_val2 - event_val1;//		2nd event - 1st event
 800171a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800171e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		  //Calculating time according to the timer ticks difference
		  pressed_t = ( 1.0 / 64000000.0 ) * event_diff * (TIM3->PSC + 1);
 8001728:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fe61 	bl	80003f4 <__aeabi_i2d>
 8001732:	a353      	add	r3, pc, #332	; (adr r3, 8001880 <main+0x640>)
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	f7fe fec6 	bl	80004c8 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4614      	mov	r4, r2
 8001742:	461d      	mov	r5, r3
 8001744:	4b54      	ldr	r3, [pc, #336]	; (8001898 <main+0x658>)
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	3301      	adds	r3, #1
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fe42 	bl	80003d4 <__aeabi_ui2d>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4620      	mov	r0, r4
 8001756:	4629      	mov	r1, r5
 8001758:	f7fe feb6 	bl	80004c8 <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	f7ff f8c2 	bl	80008ec <__aeabi_d2f>
 8001768:	4603      	mov	r3, r0
 800176a:	673b      	str	r3, [r7, #112]	; 0x70
		  freq = (1/(pressed_t * 2))*3;
 800176c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800176e:	4619      	mov	r1, r3
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff f911 	bl	8000998 <__addsf3>
 8001776:	4603      	mov	r3, r0
 8001778:	4619      	mov	r1, r3
 800177a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800177e:	f7ff fac7 	bl	8000d10 <__aeabi_fdiv>
 8001782:	4603      	mov	r3, r0
 8001784:	4945      	ldr	r1, [pc, #276]	; (800189c <main+0x65c>)
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fa0e 	bl	8000ba8 <__aeabi_fmul>
 800178c:	4603      	mov	r3, r0
 800178e:	66fb      	str	r3, [r7, #108]	; 0x6c
		  a = (uint16_t) freq;
 8001790:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001792:	f7ff fb59 	bl	8000e48 <__aeabi_f2uiz>
 8001796:	4603      	mov	r3, r0
 8001798:	b29b      	uxth	r3, r3
 800179a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		  b = ((uint16_t) (freq * 10)) % 10;
 800179e:	4940      	ldr	r1, [pc, #256]	; (80018a0 <main+0x660>)
 80017a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80017a2:	f7ff fa01 	bl	8000ba8 <__aeabi_fmul>
 80017a6:	4603      	mov	r3, r0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fb4d 	bl	8000e48 <__aeabi_f2uiz>
 80017ae:	4603      	mov	r3, r0
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4b3c      	ldr	r3, [pc, #240]	; (80018a4 <main+0x664>)
 80017b4:	fba3 1302 	umull	r1, r3, r3, r2
 80017b8:	08d9      	lsrs	r1, r3, #3
 80017ba:	460b      	mov	r3, r1
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		  a1 = (uint16_t) (a % 10);
 80017ca:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80017ce:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <main+0x664>)
 80017d0:	fba3 2301 	umull	r2, r3, r3, r1
 80017d4:	08da      	lsrs	r2, r3, #3
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	1aca      	subs	r2, r1, r3
 80017e0:	b293      	uxth	r3, r2
 80017e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		  a2 = (uint16_t) ((a/10) % 10);
 80017e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017ea:	4a2e      	ldr	r2, [pc, #184]	; (80018a4 <main+0x664>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	08d9      	lsrs	r1, r3, #3
 80017f2:	4b2c      	ldr	r3, [pc, #176]	; (80018a4 <main+0x664>)
 80017f4:	fba3 2301 	umull	r2, r3, r3, r1
 80017f8:	08da      	lsrs	r2, r3, #3
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	1aca      	subs	r2, r1, r3
 8001804:	b293      	uxth	r3, r2
 8001806:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		  msg3[2]=a2+'0';
 800180a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800180e:	b2db      	uxtb	r3, r3
 8001810:	3330      	adds	r3, #48	; 0x30
 8001812:	b2db      	uxtb	r3, r3
 8001814:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		  msg3[3]=a1+'0';
 8001818:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800181c:	b2db      	uxtb	r3, r3
 800181e:	3330      	adds	r3, #48	; 0x30
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  msg3[5]=b+'0';
 8001826:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800182a:	b2db      	uxtb	r3, r3
 800182c:	3330      	adds	r3, #48	; 0x30
 800182e:	b2db      	uxtb	r3, r3
 8001830:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

		  msg5[0]=a2+'0';
 8001834:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001838:	b2db      	uxtb	r3, r3
 800183a:	3330      	adds	r3, #48	; 0x30
 800183c:	b2db      	uxtb	r3, r3
 800183e:	773b      	strb	r3, [r7, #28]
		  msg5[1]=a1+'0';
 8001840:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001844:	b2db      	uxtb	r3, r3
 8001846:	3330      	adds	r3, #48	; 0x30
 8001848:	b2db      	uxtb	r3, r3
 800184a:	777b      	strb	r3, [r7, #29]
		  msg5[3]=b+'0';
 800184c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001850:	b2db      	uxtb	r3, r3
 8001852:	3330      	adds	r3, #48	; 0x30
 8001854:	b2db      	uxtb	r3, r3
 8001856:	77fb      	strb	r3, [r7, #31]
	  }


	  //READING Pressure
	  dataADC = USER_ADC_Read( );
 8001858:	f000 fc04 	bl	8002064 <USER_ADC_Read>
 800185c:	4603      	mov	r3, r0
 800185e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	  v = (float)(dataADC*3.3/4095);
 8001862:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fdc4 	bl	80003f4 <__aeabi_i2d>
 800186c:	a306      	add	r3, pc, #24	; (adr r3, 8001888 <main+0x648>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f7fe fe29 	bl	80004c8 <__aeabi_dmul>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	e015      	b.n	80018a8 <main+0x668>
 800187c:	f3af 8000 	nop.w
 8001880:	a0b5ed8d 	.word	0xa0b5ed8d
 8001884:	3e50c6f7 	.word	0x3e50c6f7
 8001888:	66666666 	.word	0x66666666
 800188c:	400a6666 	.word	0x400a6666
 8001890:	40010c00 	.word	0x40010c00
 8001894:	00080007 	.word	0x00080007
 8001898:	40000400 	.word	0x40000400
 800189c:	40400000 	.word	0x40400000
 80018a0:	41200000 	.word	0x41200000
 80018a4:	cccccccd 	.word	0xcccccccd
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	a394      	add	r3, pc, #592	; (adr r3, 8001b00 <main+0x8c0>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	f7fe ff33 	bl	800071c <__aeabi_ddiv>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f7ff f815 	bl	80008ec <__aeabi_d2f>
 80018c2:	4603      	mov	r3, r0
 80018c4:	667b      	str	r3, [r7, #100]	; 0x64
	  c = v;
 80018c6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80018c8:	f7ff fabe 	bl	8000e48 <__aeabi_f2uiz>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  d = ((uint16_t)(v*10))%10;
 80018d2:	498f      	ldr	r1, [pc, #572]	; (8001b10 <main+0x8d0>)
 80018d4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80018d6:	f7ff f967 	bl	8000ba8 <__aeabi_fmul>
 80018da:	4603      	mov	r3, r0
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fab3 	bl	8000e48 <__aeabi_f2uiz>
 80018e2:	4603      	mov	r3, r0
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	4b8b      	ldr	r3, [pc, #556]	; (8001b14 <main+0x8d4>)
 80018e8:	fba3 1302 	umull	r1, r3, r3, r2
 80018ec:	08d9      	lsrs	r1, r3, #3
 80018ee:	460b      	mov	r3, r1
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	  msg3[9]=c+'0';
 80018fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001902:	b2db      	uxtb	r3, r3
 8001904:	3330      	adds	r3, #48	; 0x30
 8001906:	b2db      	uxtb	r3, r3
 8001908:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	  msg3[11]=d+'0';
 800190c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001910:	b2db      	uxtb	r3, r3
 8001912:	3330      	adds	r3, #48	; 0x30
 8001914:	b2db      	uxtb	r3, r3
 8001916:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	  msg7[0]=c+'0';
 800191a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800191e:	b2db      	uxtb	r3, r3
 8001920:	3330      	adds	r3, #48	; 0x30
 8001922:	b2db      	uxtb	r3, r3
 8001924:	713b      	strb	r3, [r7, #4]
	  msg7[2]=d+'0';
 8001926:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800192a:	b2db      	uxtb	r3, r3
 800192c:	3330      	adds	r3, #48	; 0x30
 800192e:	b2db      	uxtb	r3, r3
 8001930:	71bb      	strb	r3, [r7, #6]


	  if(TIM2->SR & TIM_SR_UIF){
 8001932:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d05a      	beq.n	80019f6 <main+0x7b6>
		  TIM2->SR	&=	!TIM_SR_UIF;
 8001940:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
		  TIM2->CR1	&=	 !TIM_CR1_CEN;//		counter disabled
 800194e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
		  t+=0.1;
 800195c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001960:	f7fe fd5a 	bl	8000418 <__aeabi_f2d>
 8001964:	a368      	add	r3, pc, #416	; (adr r3, 8001b08 <main+0x8c8>)
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	f7fe fbf7 	bl	800015c <__adddf3>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7fe ffb9 	bl	80008ec <__aeabi_d2f>
 800197a:	4603      	mov	r3, r0
 800197c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		  t_a = t;
 8001980:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001984:	f7ff fa60 	bl	8000e48 <__aeabi_f2uiz>
 8001988:	4603      	mov	r3, r0
 800198a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  t_b = (t_a*10) % 10;
 800198e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	461a      	mov	r2, r3
 800199c:	4b5d      	ldr	r3, [pc, #372]	; (8001b14 <main+0x8d4>)
 800199e:	fba3 1302 	umull	r1, r3, r3, r2
 80019a2:	08d9      	lsrs	r1, r3, #3
 80019a4:	460b      	mov	r3, r1
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  if(send)
 80019b2:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d011      	beq.n	80019de <main+0x79e>
			  printf("%d.%d) F: %d.%d || P: %d.%d\n",t_a, t_b,a,b,c,d);
 80019ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019be:	9302      	str	r3, [sp, #8]
 80019c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019c4:	9301      	str	r3, [sp, #4]
 80019c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80019d4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80019d8:	484f      	ldr	r0, [pc, #316]	; (8001b18 <main+0x8d8>)
 80019da:	f001 fa0d 	bl	8002df8 <iprintf>
	      //printf("Flow Frequency: %d.%d || Pressure: %d.%d\r\n",a,b,c,d);
	      //USER_USART3_Transmit( msg1, sizeof( msg1 ) );
		  TIM2->CNT = 230;
 80019de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019e2:	22e6      	movs	r2, #230	; 0xe6
 80019e4:	625a      	str	r2, [r3, #36]	; 0x24
		  TIM2->CR1	|=	 TIM_CR1_CEN;//		counter enabled
 80019e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6013      	str	r3, [r2, #0]
	  }

	  if(found){
 80019f6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d048      	beq.n	8001a90 <main+0x850>
		  if(tecla == 0xA){
 80019fe:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8001a02:	2b0a      	cmp	r3, #10
 8001a04:	d10f      	bne.n	8001a26 <main+0x7e6>
			  LCD_Clear();
 8001a06:	2001      	movs	r0, #1
 8001a08:	f7ff fb54 	bl	80010b4 <LCD_Write_Cmd>
			  LCD_Set_Cursor(1,0);
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f7ff fb76 	bl	8001100 <LCD_Set_Cursor>
			  LCD_Put_Str(msg1);
 8001a14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fb9c 	bl	8001156 <LCD_Put_Str>
			  send = true;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8001a24:	e034      	b.n	8001a90 <main+0x850>
		  } else if(tecla == 0xB){
 8001a26:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8001a2a:	2b0b      	cmp	r3, #11
 8001a2c:	d10f      	bne.n	8001a4e <main+0x80e>
			  LCD_Clear();
 8001a2e:	2001      	movs	r0, #1
 8001a30:	f7ff fb40 	bl	80010b4 <LCD_Write_Cmd>
			  LCD_Set_Cursor(1,0);
 8001a34:	2100      	movs	r1, #0
 8001a36:	2001      	movs	r0, #1
 8001a38:	f7ff fb62 	bl	8001100 <LCD_Set_Cursor>
			  LCD_Put_Str(msg2);
 8001a3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fb88 	bl	8001156 <LCD_Put_Str>
			  send = false;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8001a4c:	e020      	b.n	8001a90 <main+0x850>
		  } else if(tecla == 0xC){
 8001a4e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	d10c      	bne.n	8001a70 <main+0x830>
			  LCD_Clear();
 8001a56:	2001      	movs	r0, #1
 8001a58:	f7ff fb2c 	bl	80010b4 <LCD_Write_Cmd>
			  LCD_Set_Cursor(1,0);
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7ff fb4e 	bl	8001100 <LCD_Set_Cursor>
			  LCD_Put_Str(msg4);
 8001a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fb74 	bl	8001156 <LCD_Put_Str>
 8001a6e:	e00f      	b.n	8001a90 <main+0x850>
		  } else if(tecla == 0xD){
 8001a70:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8001a74:	2b0d      	cmp	r3, #13
 8001a76:	d10b      	bne.n	8001a90 <main+0x850>
			  LCD_Clear();
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f7ff fb1b 	bl	80010b4 <LCD_Write_Cmd>
			  LCD_Set_Cursor(1,0);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7ff fb3d 	bl	8001100 <LCD_Set_Cursor>
			  LCD_Put_Str(msg6);
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fb63 	bl	8001156 <LCD_Put_Str>
		  }
	  }

	  if(tecla == 0xA){
 8001a90:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8001a94:	2b0a      	cmp	r3, #10
 8001a96:	d109      	bne.n	8001aac <main+0x86c>
		  LCD_Set_Cursor(2,0);
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2002      	movs	r0, #2
 8001a9c:	f7ff fb30 	bl	8001100 <LCD_Set_Cursor>
		  LCD_Put_Str(msg3);
 8001aa0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fb56 	bl	8001156 <LCD_Put_Str>
 8001aaa:	e450      	b.n	800134e <main+0x10e>
	  } else if(tecla == 0xB){
 8001aac:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8001ab0:	2b0b      	cmp	r3, #11
 8001ab2:	d109      	bne.n	8001ac8 <main+0x888>
		  LCD_Set_Cursor(2,0);
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2002      	movs	r0, #2
 8001ab8:	f7ff fb22 	bl	8001100 <LCD_Set_Cursor>
		  LCD_Put_Str(msg3);
 8001abc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fb48 	bl	8001156 <LCD_Put_Str>
 8001ac6:	e442      	b.n	800134e <main+0x10e>
	  } else if(tecla == 0xC){
 8001ac8:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8001acc:	2b0c      	cmp	r3, #12
 8001ace:	d109      	bne.n	8001ae4 <main+0x8a4>
		  LCD_Set_Cursor(2,0);
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2002      	movs	r0, #2
 8001ad4:	f7ff fb14 	bl	8001100 <LCD_Set_Cursor>
		  LCD_Put_Str(msg5);
 8001ad8:	f107 031c 	add.w	r3, r7, #28
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fb3a 	bl	8001156 <LCD_Put_Str>
 8001ae2:	e434      	b.n	800134e <main+0x10e>
	  } else if(tecla == 0xD){
 8001ae4:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8001ae8:	2b0d      	cmp	r3, #13
 8001aea:	f47f ac30 	bne.w	800134e <main+0x10e>
		  LCD_Set_Cursor(2,0);
 8001aee:	2100      	movs	r1, #0
 8001af0:	2002      	movs	r0, #2
 8001af2:	f7ff fb05 	bl	8001100 <LCD_Set_Cursor>
		  LCD_Put_Str(msg7);
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fb2c 	bl	8001156 <LCD_Put_Str>
	  GPIOB->BSRR = (1 << 16) | (1 << 1) | (1 << 2) | (1 << 3);
 8001afe:	e426      	b.n	800134e <main+0x10e>
 8001b00:	00000000 	.word	0x00000000
 8001b04:	40affe00 	.word	0x40affe00
 8001b08:	9999999a 	.word	0x9999999a
 8001b0c:	3fb99999 	.word	0x3fb99999
 8001b10:	41200000 	.word	0x41200000
 8001b14:	cccccccd 	.word	0xcccccccd
 8001b18:	08003d38 	.word	0x08003d38

08001b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b090      	sub	sp, #64	; 0x40
 8001b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b22:	f107 0318 	add.w	r3, r7, #24
 8001b26:	2228      	movs	r2, #40	; 0x28
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f001 f95c 	bl	8002de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b42:	2301      	movs	r3, #1
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b46:	2310      	movs	r3, #16
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001b52:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b58:	f107 0318 	add.w	r3, r7, #24
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fd31 	bl	80025c4 <HAL_RCC_OscConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001b68:	f000 fa8e 	bl	8002088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b70:	2302      	movs	r3, #2
 8001b72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	2102      	movs	r1, #2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 ff9e 	bl	8002ac8 <HAL_RCC_ClockConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0x7a>
  {
	Error_Handler();
 8001b92:	f000 fa79 	bl	8002088 <Error_Handler>
  }
}
 8001b96:	bf00      	nop
 8001b98:	3740      	adds	r7, #64	; 0x40
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <MX_GPIO_Init+0x70>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	4a19      	ldr	r2, [pc, #100]	; (8001c10 <MX_GPIO_Init+0x70>)
 8001bac:	f043 0310 	orr.w	r3, r3, #16
 8001bb0:	6193      	str	r3, [r2, #24]
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <MX_GPIO_Init+0x70>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <MX_GPIO_Init+0x70>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	4a13      	ldr	r2, [pc, #76]	; (8001c10 <MX_GPIO_Init+0x70>)
 8001bc4:	f043 0320 	orr.w	r3, r3, #32
 8001bc8:	6193      	str	r3, [r2, #24]
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_GPIO_Init+0x70>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f003 0320 	and.w	r3, r3, #32
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_GPIO_Init+0x70>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	4a0d      	ldr	r2, [pc, #52]	; (8001c10 <MX_GPIO_Init+0x70>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	6193      	str	r3, [r2, #24]
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <MX_GPIO_Init+0x70>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <MX_GPIO_Init+0x70>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <MX_GPIO_Init+0x70>)
 8001bf4:	f043 0308 	orr.w	r3, r3, #8
 8001bf8:	6193      	str	r3, [r2, #24]
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <MX_GPIO_Init+0x70>)
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]

}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	40021000 	.word	0x40021000

08001c14 <USER_RCC_Init>:

/* USER CODE BEGIN 4 */
void USER_RCC_Init(void){
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
	//I/O port A clock enable
	RCC->APB2ENR	|=	 RCC_APB2ENR_IOPAEN
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <USER_RCC_Init+0x34>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <USER_RCC_Init+0x34>)
 8001c1e:	f443 7301 	orr.w	r3, r3, #516	; 0x204
 8001c22:	6193      	str	r3, [r2, #24]
  					|	 RCC_APB2ENR_ADC1EN;//	ADC 1 clock enable

	RCC->CFGR	|=	 RCC_CFGR_ADCPRE;//	ADC prescaler 1:8 for 8 MHz
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <USER_RCC_Init+0x34>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4a07      	ldr	r2, [pc, #28]	; (8001c48 <USER_RCC_Init+0x34>)
 8001c2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c2e:	6053      	str	r3, [r2, #4]


	RCC->APB1ENR	|=	 RCC_APB1ENR_TIM2EN//Timer 2 clock enable
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <USER_RCC_Init+0x34>)
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <USER_RCC_Init+0x34>)
 8001c36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c3a:	f043 0303 	orr.w	r3, r3, #3
 8001c3e:	61d3      	str	r3, [r2, #28]
					|	 RCC_APB1ENR_TIM3EN//Timer 3 clock enable
					|	 RCC_APB1ENR_USART3EN;//  	USART3 clock enable

}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	40021000 	.word	0x40021000

08001c4c <USER_GPIO_Init>:
void USER_GPIO_Init(void){
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
	//PA0 (TIM2_CH1) as input floating
	GPIOA->CRL	&=	~GPIO_CRL_CNF0_1 & ~GPIO_CRL_MODE0; //Transmit timer
 8001c50:	4b67      	ldr	r3, [pc, #412]	; (8001df0 <USER_GPIO_Init+0x1a4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a66      	ldr	r2, [pc, #408]	; (8001df0 <USER_GPIO_Init+0x1a4>)
 8001c56:	f023 030b 	bic.w	r3, r3, #11
 8001c5a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF0_0;
 8001c5c:	4b64      	ldr	r3, [pc, #400]	; (8001df0 <USER_GPIO_Init+0x1a4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a63      	ldr	r2, [pc, #396]	; (8001df0 <USER_GPIO_Init+0x1a4>)
 8001c62:	f043 0304 	orr.w	r3, r3, #4
 8001c66:	6013      	str	r3, [r2, #0]

	//PA1 (button) as input pull-up
	GPIOA->CRL &= ~GPIO_CRL_CNF1_0 & ~GPIO_CRL_MODE1;
 8001c68:	4b61      	ldr	r3, [pc, #388]	; (8001df0 <USER_GPIO_Init+0x1a4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a60      	ldr	r2, [pc, #384]	; (8001df0 <USER_GPIO_Init+0x1a4>)
 8001c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c72:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF1_1;
 8001c74:	4b5e      	ldr	r3, [pc, #376]	; (8001df0 <USER_GPIO_Init+0x1a4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a5d      	ldr	r2, [pc, #372]	; (8001df0 <USER_GPIO_Init+0x1a4>)
 8001c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c7e:	6013      	str	r3, [r2, #0]


	//PA4 (ADC12_IN4) as analog
	GPIOA->CRL	&=	~GPIO_CRL_CNF4 & ~GPIO_CRL_MODE4; //Pressure Sensor
 8001c80:	4b5b      	ldr	r3, [pc, #364]	; (8001df0 <USER_GPIO_Init+0x1a4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a5a      	ldr	r2, [pc, #360]	; (8001df0 <USER_GPIO_Init+0x1a4>)
 8001c86:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001c8a:	6013      	str	r3, [r2, #0]

	//pin PA5 (LED) as output push-pull
	GPIOA->CRL &= ~GPIO_CRL_CNF5 & ~GPIO_CRL_MODE5_1;
 8001c8c:	4b58      	ldr	r3, [pc, #352]	; (8001df0 <USER_GPIO_Init+0x1a4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a57      	ldr	r2, [pc, #348]	; (8001df0 <USER_GPIO_Init+0x1a4>)
 8001c92:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8001c96:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE5_0;
 8001c98:	4b55      	ldr	r3, [pc, #340]	; (8001df0 <USER_GPIO_Init+0x1a4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a54      	ldr	r2, [pc, #336]	; (8001df0 <USER_GPIO_Init+0x1a4>)
 8001c9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ca2:	6013      	str	r3, [r2, #0]

	//PA6 (TIM3_CH1) as input floating
	GPIOA->CRL	&=	~GPIO_CRL_CNF6_1 & ~GPIO_CRL_MODE6; //Flow Sensor
 8001ca4:	4b52      	ldr	r3, [pc, #328]	; (8001df0 <USER_GPIO_Init+0x1a4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a51      	ldr	r2, [pc, #324]	; (8001df0 <USER_GPIO_Init+0x1a4>)
 8001caa:	f023 6330 	bic.w	r3, r3, #184549376	; 0xb000000
 8001cae:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF6_0;
 8001cb0:	4b4f      	ldr	r3, [pc, #316]	; (8001df0 <USER_GPIO_Init+0x1a4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a4e      	ldr	r2, [pc, #312]	; (8001df0 <USER_GPIO_Init+0x1a4>)
 8001cb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cba:	6013      	str	r3, [r2, #0]

	//TECLADO MATRICIAL
	GPIOB->BSRR &= GPIO_BSRR_BR0 & GPIO_BSRR_BR1 & GPIO_BSRR_BR2 & GPIO_BSRR_BR3;
 8001cbc:	4b4d      	ldr	r3, [pc, #308]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	4b4c      	ldr	r3, [pc, #304]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
		//pins PB0-PB3 as output push-pull
		GPIOB->CRL &= ~GPIO_CRL_CNF0 & ~GPIO_CRL_MODE0_1;
 8001cc6:	4b4b      	ldr	r3, [pc, #300]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a4a      	ldr	r2, [pc, #296]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001ccc:	f023 030e 	bic.w	r3, r3, #14
 8001cd0:	6013      	str	r3, [r2, #0]
		GPIOB->CRL |= GPIO_CRL_MODE0_0;
 8001cd2:	4b48      	ldr	r3, [pc, #288]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a47      	ldr	r2, [pc, #284]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6013      	str	r3, [r2, #0]
		GPIOB->CRL &= ~GPIO_CRL_CNF1 & ~GPIO_CRL_MODE1_1;
 8001cde:	4b45      	ldr	r3, [pc, #276]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a44      	ldr	r2, [pc, #272]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001ce4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8001ce8:	6013      	str	r3, [r2, #0]
		GPIOB->CRL |= GPIO_CRL_MODE1_0;
 8001cea:	4b42      	ldr	r3, [pc, #264]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a41      	ldr	r2, [pc, #260]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001cf0:	f043 0310 	orr.w	r3, r3, #16
 8001cf4:	6013      	str	r3, [r2, #0]
		GPIOB->CRL &= ~GPIO_CRL_CNF2 & ~GPIO_CRL_MODE2_1;
 8001cf6:	4b3f      	ldr	r3, [pc, #252]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a3e      	ldr	r2, [pc, #248]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001cfc:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8001d00:	6013      	str	r3, [r2, #0]
		GPIOB->CRL |= GPIO_CRL_MODE2_0;
 8001d02:	4b3c      	ldr	r3, [pc, #240]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a3b      	ldr	r2, [pc, #236]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0c:	6013      	str	r3, [r2, #0]
		GPIOB->CRL &= ~GPIO_CRL_CNF3 & ~GPIO_CRL_MODE3_1;
 8001d0e:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a38      	ldr	r2, [pc, #224]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d14:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d18:	6013      	str	r3, [r2, #0]
		GPIOB->CRL |= GPIO_CRL_MODE3_0;
 8001d1a:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a35      	ldr	r2, [pc, #212]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d24:	6013      	str	r3, [r2, #0]

		//pins PB4-PB7 as input pull-up
		GPIOB->CRL &= ~GPIO_CRL_CNF4_0 & ~GPIO_CRL_MODE4;
 8001d26:	4b33      	ldr	r3, [pc, #204]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a32      	ldr	r2, [pc, #200]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d2c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001d30:	6013      	str	r3, [r2, #0]
		GPIOB->CRL |= GPIO_CRL_CNF4_1;
 8001d32:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a2f      	ldr	r2, [pc, #188]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d3c:	6013      	str	r3, [r2, #0]
		GPIOB->ODR |= GPIO_ODR_ODR4;
 8001d3e:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	4a2c      	ldr	r2, [pc, #176]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d44:	f043 0310 	orr.w	r3, r3, #16
 8001d48:	60d3      	str	r3, [r2, #12]
		GPIOB->CRL &= ~GPIO_CRL_CNF5_0 & ~GPIO_CRL_MODE5;
 8001d4a:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a29      	ldr	r2, [pc, #164]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d50:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001d54:	6013      	str	r3, [r2, #0]
		GPIOB->CRL |= GPIO_CRL_CNF5_1;
 8001d56:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a26      	ldr	r2, [pc, #152]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d60:	6013      	str	r3, [r2, #0]
		GPIOB->ODR |= GPIO_ODR_ODR5;
 8001d62:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d68:	f043 0320 	orr.w	r3, r3, #32
 8001d6c:	60d3      	str	r3, [r2, #12]
		GPIOB->CRL &= ~GPIO_CRL_CNF6_0 & ~GPIO_CRL_MODE6;
 8001d6e:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a20      	ldr	r2, [pc, #128]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d74:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d78:	6013      	str	r3, [r2, #0]
		GPIOB->CRL |= GPIO_CRL_CNF6_1;
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1d      	ldr	r2, [pc, #116]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d84:	6013      	str	r3, [r2, #0]
		GPIOB->ODR |= GPIO_ODR_ODR6;
 8001d86:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	4a1a      	ldr	r2, [pc, #104]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d90:	60d3      	str	r3, [r2, #12]
		GPIOB->CRL &= ~GPIO_CRL_CNF7_0 & ~GPIO_CRL_MODE7;
 8001d92:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a17      	ldr	r2, [pc, #92]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001d98:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8001d9c:	6013      	str	r3, [r2, #0]
		GPIOB->CRL |= GPIO_CRL_CNF7_1;
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a14      	ldr	r2, [pc, #80]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001da4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001da8:	6013      	str	r3, [r2, #0]
		GPIOB->ODR |= GPIO_ODR_ODR7;
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	4a11      	ldr	r2, [pc, #68]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db4:	60d3      	str	r3, [r2, #12]

	//pin PB10 (USART3_TX) as alternate function output push-pull, max speed 10MHz
	GPIOB->CRH	&=	~GPIO_CRH_CNF10_0 & ~GPIO_CRH_MODE10_1;
 8001db6:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001dbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dc0:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|=	 GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10_0; //UART TX
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001dc8:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
 8001dcc:	6053      	str	r3, [r2, #4]

	//pin PB11 (USART3_RX) as input pull-up
	GPIOB->CRH	&=	~GPIO_CRH_CNF11_0 & ~GPIO_CRH_MODE11; //UART RX
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dd8:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|=	 GPIO_CRH_CNF11_1;
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <USER_GPIO_Init+0x1a8>)
 8001de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001de4:	6053      	str	r3, [r2, #4]

}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40010800 	.word	0x40010800
 8001df4:	40010c00 	.word	0x40010c00

08001df8 <USER_TIM2_Capture_Init>:

void USER_TIM2_Capture_Init(void){
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
	TIM2->CR1	&=	~TIM_CR1_CKD_0;
 8001dfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e0a:	6013      	str	r3, [r2, #0]
	TIM2->CR1	|=	 TIM_CR1_CKD_1;//	sampling (DTS) = TIM_CLK/4
 8001e0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e1a:	6013      	str	r3, [r2, #0]
	TIM2->CCMR1 	&=	~TIM_CCMR1_CC1S_1;
 8001e1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e26:	f023 0302 	bic.w	r3, r3, #2
 8001e2a:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 	|=	 TIM_CCMR1_CC1S_0;//	CC1 channel as input, mapped on TI1
 8001e2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 	|=	 TIM_CCMR1_IC1F;//	filter -> DTS/32, N=8
 8001e3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e46:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001e4a:	6193      	str	r3, [r2, #24]
	TIM2->CCER	|=	 TIM_CCER_CC1P;//	capture is done on falling edge
 8001e4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e56:	f043 0302 	orr.w	r3, r3, #2
 8001e5a:	6213      	str	r3, [r2, #32]
	TIM2->CCMR1 	&=	~TIM_CCMR1_IC1PSC;//	no prescaler
 8001e5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e66:	f023 030c 	bic.w	r3, r3, #12
 8001e6a:	6193      	str	r3, [r2, #24]
	TIM2->CCER	|=	 TIM_CCER_CC1E;//	capture enabled
 8001e6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6213      	str	r3, [r2, #32]
	TIM2->PSC	 =	 97;//		maximum prescaler
 8001e7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e80:	2261      	movs	r2, #97	; 0x61
 8001e82:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->SMCR	&=	!TIM_SMCR_SMS;
 8001e84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
	TIM2->CR1	&=	!TIM_CR1_CMS & !TIM_CR1_DIR & !TIM_CR1_UDIS;
 8001e92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
	TIM2->SR	&=	!TIM_SR_UIF;
 8001ea0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
	TIM2->CR1	|=	 TIM_CR1_CEN;//		counter enabled
 8001eae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6013      	str	r3, [r2, #0]
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
	...

08001ec8 <USER_TIM3_Capture_Init>:
uint16_t USER_TIM2_Capture_Event(void){
	while( !(TIM2->SR & TIM_SR_CC1IF) );//		wait until a capture occurs
	return TIM2->CCR1;//				return the captured value
}

void USER_TIM3_Capture_Init(void){
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
	TIM3->CR1	&=	~TIM_CR1_CKD_0;
 8001ecc:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <USER_TIM3_Capture_Init+0x80>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1d      	ldr	r2, [pc, #116]	; (8001f48 <USER_TIM3_Capture_Init+0x80>)
 8001ed2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ed6:	6013      	str	r3, [r2, #0]
	TIM3->CR1	|=	 TIM_CR1_CKD_1;//	sampling (DTS) = TIM_CLK/4
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <USER_TIM3_Capture_Init+0x80>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1a      	ldr	r2, [pc, #104]	; (8001f48 <USER_TIM3_Capture_Init+0x80>)
 8001ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee2:	6013      	str	r3, [r2, #0]
	TIM3->CCMR1 	&=	~TIM_CCMR1_CC1S_1;
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <USER_TIM3_Capture_Init+0x80>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	4a17      	ldr	r2, [pc, #92]	; (8001f48 <USER_TIM3_Capture_Init+0x80>)
 8001eea:	f023 0302 	bic.w	r3, r3, #2
 8001eee:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 	|=	 TIM_CCMR1_CC1S_0;//	CC1 channel as input, mapped on TI1
 8001ef0:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <USER_TIM3_Capture_Init+0x80>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	4a14      	ldr	r2, [pc, #80]	; (8001f48 <USER_TIM3_Capture_Init+0x80>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 	|=	 TIM_CCMR1_IC1F;//	filter -> DTS/32, N=8
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <USER_TIM3_Capture_Init+0x80>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	4a11      	ldr	r2, [pc, #68]	; (8001f48 <USER_TIM3_Capture_Init+0x80>)
 8001f02:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001f06:	6193      	str	r3, [r2, #24]
	TIM3->CCER	|=	 TIM_CCER_CC1P;//	capture is done on falling edge
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <USER_TIM3_Capture_Init+0x80>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <USER_TIM3_Capture_Init+0x80>)
 8001f0e:	f043 0302 	orr.w	r3, r3, #2
 8001f12:	6213      	str	r3, [r2, #32]
	TIM3->CCMR1 	&=	~TIM_CCMR1_IC1PSC;//	no prescaler
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <USER_TIM3_Capture_Init+0x80>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a0b      	ldr	r2, [pc, #44]	; (8001f48 <USER_TIM3_Capture_Init+0x80>)
 8001f1a:	f023 030c 	bic.w	r3, r3, #12
 8001f1e:	6193      	str	r3, [r2, #24]
	TIM3->CCER	|=	 TIM_CCER_CC1E;//	capture enabled
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <USER_TIM3_Capture_Init+0x80>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <USER_TIM3_Capture_Init+0x80>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6213      	str	r3, [r2, #32]
	TIM3->PSC	 =	 97;//		maximum prescaler
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <USER_TIM3_Capture_Init+0x80>)
 8001f2e:	2261      	movs	r2, #97	; 0x61
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28

	TIM3->CR1	|=	 TIM_CR1_CEN;//		counter enabled
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <USER_TIM3_Capture_Init+0x80>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <USER_TIM3_Capture_Init+0x80>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6013      	str	r3, [r2, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40000400 	.word	0x40000400

08001f4c <USER_TIM3_Capture_Event>:

uint16_t USER_TIM3_Capture_Event(void){
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
	while( !(TIM3->SR & TIM_SR_CC1IF) );//		wait until a capture occurs
 8001f50:	bf00      	nop
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <USER_TIM3_Capture_Event+0x20>)
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f9      	beq.n	8001f52 <USER_TIM3_Capture_Event+0x6>
	return TIM3->CCR1;//				return the captured value
 8001f5e:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <USER_TIM3_Capture_Event+0x20>)
 8001f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f62:	b29b      	uxth	r3, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	40000400 	.word	0x40000400

08001f70 <USER_USART3_Init>:

void USER_USART3_Init(void){
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
	USART3->CR1	|=	 USART_CR1_UE;//		USART enabled
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <USER_USART3_Init+0x50>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4a11      	ldr	r2, [pc, #68]	; (8001fc0 <USER_USART3_Init+0x50>)
 8001f7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f7e:	60d3      	str	r3, [r2, #12]
	USART3->CR1	&=	~USART_CR1_M//		  	1 start bit, 8 data bits
 8001f80:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <USER_USART3_Init+0x50>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4a0e      	ldr	r2, [pc, #56]	; (8001fc0 <USER_USART3_Init+0x50>)
 8001f86:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 8001f8a:	60d3      	str	r3, [r2, #12]
			&	~USART_CR1_PCE;//		parity control disabled
	USART3->CR2	&=	~USART_CR2_STOP;//  		1 stop bit
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <USER_USART3_Init+0x50>)
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	4a0b      	ldr	r2, [pc, #44]	; (8001fc0 <USER_USART3_Init+0x50>)
 8001f92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f96:	6113      	str	r3, [r2, #16]
	USART3->BRR	 =	 0xD05;//			9600 bps -> 208.33,
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <USER_USART3_Init+0x50>)
 8001f9a:	f640 5205 	movw	r2, #3333	; 0xd05
 8001f9e:	609a      	str	r2, [r3, #8]
	//USARTDIV = 32*10^6/(16*9600)
	//NEW USARTDIV = 32*10^6/(16*115200)=17.361
	//BRR = [17->HEX=11][.361*16->HEX=6]=116
	//`->BRR = 0x116;

	USART3->CR1	|=	 USART_CR1_TE;//		        transmitter enabled
 8001fa0:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <USER_USART3_Init+0x50>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a06      	ldr	r2, [pc, #24]	; (8001fc0 <USER_USART3_Init+0x50>)
 8001fa6:	f043 0308 	orr.w	r3, r3, #8
 8001faa:	60d3      	str	r3, [r2, #12]
	USART3->CR1	|=	 USART_CR1_RE;//		        receiver enabled
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <USER_USART3_Init+0x50>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a03      	ldr	r2, [pc, #12]	; (8001fc0 <USER_USART3_Init+0x50>)
 8001fb2:	f043 0304 	orr.w	r3, r3, #4
 8001fb6:	60d3      	str	r3, [r2, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	40004800 	.word	0x40004800

08001fc4 <USER_ADC_Init>:
uint32_t USER_USART3_Receive(void){
	while((USART3->SR & USART_SR_RXNE) == 0){}
	return USART3->DR;
}

void USER_ADC_Init(void){
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
	ADC1->CR1	&=	~ADC_CR1_DUALMOD;//	independent mode
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <USER_ADC_Init+0x70>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4a19      	ldr	r2, [pc, #100]	; (8002034 <USER_ADC_Init+0x70>)
 8001fce:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001fd2:	6053      	str	r3, [r2, #4]
	ADC1->CR2	&=	~ADC_CR2_ALIGN;//	right alignment for the result
 8001fd4:	4b17      	ldr	r3, [pc, #92]	; (8002034 <USER_ADC_Init+0x70>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4a16      	ldr	r2, [pc, #88]	; (8002034 <USER_ADC_Init+0x70>)
 8001fda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fde:	6093      	str	r3, [r2, #8]
	ADC1->CR2	|=	 ADC_CR2_CONT;//	continuous conversion mode
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <USER_ADC_Init+0x70>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	4a13      	ldr	r2, [pc, #76]	; (8002034 <USER_ADC_Init+0x70>)
 8001fe6:	f043 0302 	orr.w	r3, r3, #2
 8001fea:	6093      	str	r3, [r2, #8]
	ADC1->SMPR2	&=	~ADC_SMPR2_SMP0;//	1.5 cycles channel sample time
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <USER_ADC_Init+0x70>)
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	4a10      	ldr	r2, [pc, #64]	; (8002034 <USER_ADC_Init+0x70>)
 8001ff2:	f023 0307 	bic.w	r3, r3, #7
 8001ff6:	6113      	str	r3, [r2, #16]
	ADC1->SQR1	&=	~ADC_SQR1_L;//		1 conversion on regular channels
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <USER_ADC_Init+0x70>)
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	4a0d      	ldr	r2, [pc, #52]	; (8002034 <USER_ADC_Init+0x70>)
 8001ffe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002002:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR3 	&=	~ADC_SQR3_SQ1;//	first and only conversion in Ch0
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <USER_ADC_Init+0x70>)
 8002006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <USER_ADC_Init+0x70>)
 800200a:	f023 031f 	bic.w	r3, r3, #31
 800200e:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3	|=	ADC_SQR3_SQ1_2;
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <USER_ADC_Init+0x70>)
 8002012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002014:	4a07      	ldr	r2, [pc, #28]	; (8002034 <USER_ADC_Init+0x70>)
 8002016:	f043 0304 	orr.w	r3, r3, #4
 800201a:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->CR2	|=	 ADC_CR2_ADON;//	ADC enabled
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <USER_ADC_Init+0x70>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4a04      	ldr	r2, [pc, #16]	; (8002034 <USER_ADC_Init+0x70>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6093      	str	r3, [r2, #8]
	HAL_Delay(1);//					tstab(1us) after ADC enabled, real 1ms
 8002028:	2001      	movs	r0, #1
 800202a:	f000 f9c3 	bl	80023b4 <HAL_Delay>
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40012400 	.word	0x40012400

08002038 <USER_ADC_Calibration>:
void USER_ADC_Calibration(void){
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
	ADC1->CR2	|=	 ADC_CR2_CAL;//		start calibration
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <USER_ADC_Calibration+0x28>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4a07      	ldr	r2, [pc, #28]	; (8002060 <USER_ADC_Calibration+0x28>)
 8002042:	f043 0304 	orr.w	r3, r3, #4
 8002046:	6093      	str	r3, [r2, #8]
	while( ADC1->CR2 & ADC_CR2_CAL );//		wait until calibration is done
 8002048:	bf00      	nop
 800204a:	4b05      	ldr	r3, [pc, #20]	; (8002060 <USER_ADC_Calibration+0x28>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f9      	bne.n	800204a <USER_ADC_Calibration+0x12>
}
 8002056:	bf00      	nop
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	40012400 	.word	0x40012400

08002064 <USER_ADC_Read>:
uint16_t USER_ADC_Read( void ){
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
	while( !( ADC1->SR & ADC_SR_EOC ) );//		wait until conversion is done
 8002068:	bf00      	nop
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <USER_ADC_Read+0x20>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f9      	beq.n	800206a <USER_ADC_Read+0x6>
	return (uint16_t)ADC1->DR;//			return ADC data
 8002076:	4b03      	ldr	r3, [pc, #12]	; (8002084 <USER_ADC_Read+0x20>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	b29b      	uxth	r3, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	40012400 	.word	0x40012400

08002088 <Error_Handler>:
/**
  * @brief  This function is executed in case of erropr occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800208c:	b672      	cpsid	i
}
 800208e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002090:	e7fe      	b.n	8002090 <Error_Handler+0x8>
	...

08002094 <_write>:
 */

#include "myprintf.h"
#include "main.h"

int _write(int file, char *ptr, int len){
 8002094:	b480      	push	{r7}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++){
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	e00f      	b.n	80020c6 <_write+0x32>
		while( ( USART3->SR & USART_SR_TXE ) == 0 ){}
 80020a6:	bf00      	nop
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <_write+0x48>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f9      	beq.n	80020a8 <_write+0x14>
		USART3->DR = *ptr++;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	60ba      	str	r2, [r7, #8]
 80020ba:	781a      	ldrb	r2, [r3, #0]
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <_write+0x48>)
 80020be:	605a      	str	r2, [r3, #4]
	for(DataIdx=0; DataIdx<len; DataIdx++){
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3301      	adds	r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	dbeb      	blt.n	80020a6 <_write+0x12>
	}
	return len;
 80020ce:	687b      	ldr	r3, [r7, #4]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	371c      	adds	r7, #28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40004800 	.word	0x40004800

080020e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_MspInit+0x5c>)
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	4a14      	ldr	r2, [pc, #80]	; (800213c <HAL_MspInit+0x5c>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6193      	str	r3, [r2, #24]
 80020f2:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_MspInit+0x5c>)
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	4b0f      	ldr	r3, [pc, #60]	; (800213c <HAL_MspInit+0x5c>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	4a0e      	ldr	r2, [pc, #56]	; (800213c <HAL_MspInit+0x5c>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002108:	61d3      	str	r3, [r2, #28]
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <HAL_MspInit+0x5c>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_MspInit+0x60>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	4a04      	ldr	r2, [pc, #16]	; (8002140 <HAL_MspInit+0x60>)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	40021000 	.word	0x40021000
 8002140:	40010000 	.word	0x40010000

08002144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <NMI_Handler+0x4>

0800214a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800214e:	e7fe      	b.n	800214e <HardFault_Handler+0x4>

08002150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <MemManage_Handler+0x4>

08002156 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800215a:	e7fe      	b.n	800215a <BusFault_Handler+0x4>

0800215c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <UsageFault_Handler+0x4>

08002162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr

0800216e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr

0800217a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800218a:	f000 f8f7 	bl	800237c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}

08002192 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	e00a      	b.n	80021ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021a4:	f3af 8000 	nop.w
 80021a8:	4601      	mov	r1, r0
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	60ba      	str	r2, [r7, #8]
 80021b0:	b2ca      	uxtb	r2, r1
 80021b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	3301      	adds	r3, #1
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	429a      	cmp	r2, r3
 80021c0:	dbf0      	blt.n	80021a4 <_read+0x12>
  }

  return len;
 80021c2:	687b      	ldr	r3, [r7, #4]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_close>:
  }
  return len;
}

int _close(int file)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr

080021e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021f2:	605a      	str	r2, [r3, #4]
  return 0;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <_isatty>:

int _isatty(int file)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002208:	2301      	movs	r3, #1
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002234:	4a14      	ldr	r2, [pc, #80]	; (8002288 <_sbrk+0x5c>)
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <_sbrk+0x60>)
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <_sbrk+0x64>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d102      	bne.n	800224e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <_sbrk+0x64>)
 800224a:	4a12      	ldr	r2, [pc, #72]	; (8002294 <_sbrk+0x68>)
 800224c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800224e:	4b10      	ldr	r3, [pc, #64]	; (8002290 <_sbrk+0x64>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	429a      	cmp	r2, r3
 800225a:	d207      	bcs.n	800226c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800225c:	f000 fd9a 	bl	8002d94 <__errno>
 8002260:	4603      	mov	r3, r0
 8002262:	220c      	movs	r2, #12
 8002264:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
 800226a:	e009      	b.n	8002280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <_sbrk+0x64>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <_sbrk+0x64>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	4a05      	ldr	r2, [pc, #20]	; (8002290 <_sbrk+0x64>)
 800227c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800227e:	68fb      	ldr	r3, [r7, #12]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20005000 	.word	0x20005000
 800228c:	00000400 	.word	0x00000400
 8002290:	2000008c 	.word	0x2000008c
 8002294:	200000a8 	.word	0x200000a8

08002298 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022a4:	480c      	ldr	r0, [pc, #48]	; (80022d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022a6:	490d      	ldr	r1, [pc, #52]	; (80022dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022a8:	4a0d      	ldr	r2, [pc, #52]	; (80022e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ac:	e002      	b.n	80022b4 <LoopCopyDataInit>

080022ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b2:	3304      	adds	r3, #4

080022b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b8:	d3f9      	bcc.n	80022ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ba:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022bc:	4c0a      	ldr	r4, [pc, #40]	; (80022e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c0:	e001      	b.n	80022c6 <LoopFillZerobss>

080022c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c4:	3204      	adds	r2, #4

080022c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c8:	d3fb      	bcc.n	80022c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022ca:	f7ff ffe5 	bl	8002298 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ce:	f000 fd67 	bl	8002da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022d2:	f7fe ffb5 	bl	8001240 <main>
  bx lr
 80022d6:	4770      	bx	lr
  ldr r0, =_sdata
 80022d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80022e0:	08003eb8 	.word	0x08003eb8
  ldr r2, =_sbss
 80022e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80022e8:	200000a4 	.word	0x200000a4

080022ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022ec:	e7fe      	b.n	80022ec <ADC1_2_IRQHandler>
	...

080022f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <HAL_Init+0x28>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a07      	ldr	r2, [pc, #28]	; (8002318 <HAL_Init+0x28>)
 80022fa:	f043 0310 	orr.w	r3, r3, #16
 80022fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002300:	2003      	movs	r0, #3
 8002302:	f000 f92b 	bl	800255c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002306:	2000      	movs	r0, #0
 8002308:	f000 f808 	bl	800231c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800230c:	f7ff fee8 	bl	80020e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40022000 	.word	0x40022000

0800231c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_InitTick+0x54>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_InitTick+0x58>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4619      	mov	r1, r3
 800232e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002332:	fbb3 f3f1 	udiv	r3, r3, r1
 8002336:	fbb2 f3f3 	udiv	r3, r2, r3
 800233a:	4618      	mov	r0, r3
 800233c:	f000 f935 	bl	80025aa <HAL_SYSTICK_Config>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e00e      	b.n	8002368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b0f      	cmp	r3, #15
 800234e:	d80a      	bhi.n	8002366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002350:	2200      	movs	r2, #0
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	f04f 30ff 	mov.w	r0, #4294967295
 8002358:	f000 f90b 	bl	8002572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800235c:	4a06      	ldr	r2, [pc, #24]	; (8002378 <HAL_InitTick+0x5c>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	e000      	b.n	8002368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000000 	.word	0x20000000
 8002374:	20000008 	.word	0x20000008
 8002378:	20000004 	.word	0x20000004

0800237c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_IncTick+0x1c>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_IncTick+0x20>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4413      	add	r3, r2
 800238c:	4a03      	ldr	r2, [pc, #12]	; (800239c <HAL_IncTick+0x20>)
 800238e:	6013      	str	r3, [r2, #0]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	20000008 	.word	0x20000008
 800239c:	20000090 	.word	0x20000090

080023a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return uwTick;
 80023a4:	4b02      	ldr	r3, [pc, #8]	; (80023b0 <HAL_GetTick+0x10>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr
 80023b0:	20000090 	.word	0x20000090

080023b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023bc:	f7ff fff0 	bl	80023a0 <HAL_GetTick>
 80023c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d005      	beq.n	80023da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_Delay+0x44>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4413      	add	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023da:	bf00      	nop
 80023dc:	f7ff ffe0 	bl	80023a0 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d8f7      	bhi.n	80023dc <HAL_Delay+0x28>
  {
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000008 	.word	0x20000008

080023fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002418:	4013      	ands	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242e:	4a04      	ldr	r2, [pc, #16]	; (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	60d3      	str	r3, [r2, #12]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <__NVIC_GetPriorityGrouping+0x18>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	f003 0307 	and.w	r3, r3, #7
}
 8002452:	4618      	mov	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	2b00      	cmp	r3, #0
 8002472:	db0a      	blt.n	800248a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	490c      	ldr	r1, [pc, #48]	; (80024ac <__NVIC_SetPriority+0x4c>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	0112      	lsls	r2, r2, #4
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	440b      	add	r3, r1
 8002484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002488:	e00a      	b.n	80024a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4908      	ldr	r1, [pc, #32]	; (80024b0 <__NVIC_SetPriority+0x50>)
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	3b04      	subs	r3, #4
 8002498:	0112      	lsls	r2, r2, #4
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	440b      	add	r3, r1
 800249e:	761a      	strb	r2, [r3, #24]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000e100 	.word	0xe000e100
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f1c3 0307 	rsb	r3, r3, #7
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	bf28      	it	cs
 80024d2:	2304      	movcs	r3, #4
 80024d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3304      	adds	r3, #4
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d902      	bls.n	80024e4 <NVIC_EncodePriority+0x30>
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3b03      	subs	r3, #3
 80024e2:	e000      	b.n	80024e6 <NVIC_EncodePriority+0x32>
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	401a      	ands	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	43d9      	mvns	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	4313      	orrs	r3, r2
         );
}
 800250e:	4618      	mov	r0, r3
 8002510:	3724      	adds	r7, #36	; 0x24
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002528:	d301      	bcc.n	800252e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252a:	2301      	movs	r3, #1
 800252c:	e00f      	b.n	800254e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252e:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <SysTick_Config+0x40>)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002536:	210f      	movs	r1, #15
 8002538:	f04f 30ff 	mov.w	r0, #4294967295
 800253c:	f7ff ff90 	bl	8002460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <SysTick_Config+0x40>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002546:	4b04      	ldr	r3, [pc, #16]	; (8002558 <SysTick_Config+0x40>)
 8002548:	2207      	movs	r2, #7
 800254a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	e000e010 	.word	0xe000e010

0800255c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ff49 	bl	80023fc <__NVIC_SetPriorityGrouping>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	4603      	mov	r3, r0
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002584:	f7ff ff5e 	bl	8002444 <__NVIC_GetPriorityGrouping>
 8002588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	6978      	ldr	r0, [r7, #20]
 8002590:	f7ff ff90 	bl	80024b4 <NVIC_EncodePriority>
 8002594:	4602      	mov	r2, r0
 8002596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff5f 	bl	8002460 <__NVIC_SetPriority>
}
 80025a2:	bf00      	nop
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ffb0 	bl	8002518 <SysTick_Config>
 80025b8:	4603      	mov	r3, r0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e272      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 8087 	beq.w	80026f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e4:	4b92      	ldr	r3, [pc, #584]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d00c      	beq.n	800260a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025f0:	4b8f      	ldr	r3, [pc, #572]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 030c 	and.w	r3, r3, #12
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d112      	bne.n	8002622 <HAL_RCC_OscConfig+0x5e>
 80025fc:	4b8c      	ldr	r3, [pc, #560]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002608:	d10b      	bne.n	8002622 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260a:	4b89      	ldr	r3, [pc, #548]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d06c      	beq.n	80026f0 <HAL_RCC_OscConfig+0x12c>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d168      	bne.n	80026f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e24c      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262a:	d106      	bne.n	800263a <HAL_RCC_OscConfig+0x76>
 800262c:	4b80      	ldr	r3, [pc, #512]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a7f      	ldr	r2, [pc, #508]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002636:	6013      	str	r3, [r2, #0]
 8002638:	e02e      	b.n	8002698 <HAL_RCC_OscConfig+0xd4>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0x98>
 8002642:	4b7b      	ldr	r3, [pc, #492]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a7a      	ldr	r2, [pc, #488]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b78      	ldr	r3, [pc, #480]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a77      	ldr	r2, [pc, #476]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e01d      	b.n	8002698 <HAL_RCC_OscConfig+0xd4>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0xbc>
 8002666:	4b72      	ldr	r3, [pc, #456]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a71      	ldr	r2, [pc, #452]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 800266c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b6f      	ldr	r3, [pc, #444]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a6e      	ldr	r2, [pc, #440]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0xd4>
 8002680:	4b6b      	ldr	r3, [pc, #428]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a6a      	ldr	r2, [pc, #424]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b68      	ldr	r3, [pc, #416]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a67      	ldr	r2, [pc, #412]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002696:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d013      	beq.n	80026c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7ff fe7e 	bl	80023a0 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a8:	f7ff fe7a 	bl	80023a0 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	; 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e200      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4b5d      	ldr	r3, [pc, #372]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0xe4>
 80026c6:	e014      	b.n	80026f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7ff fe6a 	bl	80023a0 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d0:	f7ff fe66 	bl	80023a0 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	; 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e1ec      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e2:	4b53      	ldr	r3, [pc, #332]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x10c>
 80026ee:	e000      	b.n	80026f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d063      	beq.n	80027c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026fe:	4b4c      	ldr	r3, [pc, #304]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00b      	beq.n	8002722 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800270a:	4b49      	ldr	r3, [pc, #292]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b08      	cmp	r3, #8
 8002714:	d11c      	bne.n	8002750 <HAL_RCC_OscConfig+0x18c>
 8002716:	4b46      	ldr	r3, [pc, #280]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d116      	bne.n	8002750 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002722:	4b43      	ldr	r3, [pc, #268]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <HAL_RCC_OscConfig+0x176>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d001      	beq.n	800273a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e1c0      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273a:	4b3d      	ldr	r3, [pc, #244]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4939      	ldr	r1, [pc, #228]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274e:	e03a      	b.n	80027c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002758:	4b36      	ldr	r3, [pc, #216]	; (8002834 <HAL_RCC_OscConfig+0x270>)
 800275a:	2201      	movs	r2, #1
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275e:	f7ff fe1f 	bl	80023a0 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002766:	f7ff fe1b 	bl	80023a0 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e1a1      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002778:	4b2d      	ldr	r3, [pc, #180]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002784:	4b2a      	ldr	r3, [pc, #168]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4927      	ldr	r1, [pc, #156]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]
 8002798:	e015      	b.n	80027c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279a:	4b26      	ldr	r3, [pc, #152]	; (8002834 <HAL_RCC_OscConfig+0x270>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7ff fdfe 	bl	80023a0 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a8:	f7ff fdfa 	bl	80023a0 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e180      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ba:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d03a      	beq.n	8002848 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d019      	beq.n	800280e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027da:	4b17      	ldr	r3, [pc, #92]	; (8002838 <HAL_RCC_OscConfig+0x274>)
 80027dc:	2201      	movs	r2, #1
 80027de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e0:	f7ff fdde 	bl	80023a0 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e8:	f7ff fdda 	bl	80023a0 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e160      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002806:	2001      	movs	r0, #1
 8002808:	f000 faa6 	bl	8002d58 <RCC_Delay>
 800280c:	e01c      	b.n	8002848 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280e:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <HAL_RCC_OscConfig+0x274>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002814:	f7ff fdc4 	bl	80023a0 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281a:	e00f      	b.n	800283c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800281c:	f7ff fdc0 	bl	80023a0 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d908      	bls.n	800283c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e146      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000
 8002834:	42420000 	.word	0x42420000
 8002838:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283c:	4b92      	ldr	r3, [pc, #584]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1e9      	bne.n	800281c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80a6 	beq.w	80029a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800285a:	4b8b      	ldr	r3, [pc, #556]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10d      	bne.n	8002882 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	4b88      	ldr	r3, [pc, #544]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	4a87      	ldr	r2, [pc, #540]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002870:	61d3      	str	r3, [r2, #28]
 8002872:	4b85      	ldr	r3, [pc, #532]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287e:	2301      	movs	r3, #1
 8002880:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002882:	4b82      	ldr	r3, [pc, #520]	; (8002a8c <HAL_RCC_OscConfig+0x4c8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d118      	bne.n	80028c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288e:	4b7f      	ldr	r3, [pc, #508]	; (8002a8c <HAL_RCC_OscConfig+0x4c8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a7e      	ldr	r2, [pc, #504]	; (8002a8c <HAL_RCC_OscConfig+0x4c8>)
 8002894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289a:	f7ff fd81 	bl	80023a0 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a2:	f7ff fd7d 	bl	80023a0 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b64      	cmp	r3, #100	; 0x64
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e103      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b4:	4b75      	ldr	r3, [pc, #468]	; (8002a8c <HAL_RCC_OscConfig+0x4c8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0f0      	beq.n	80028a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d106      	bne.n	80028d6 <HAL_RCC_OscConfig+0x312>
 80028c8:	4b6f      	ldr	r3, [pc, #444]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4a6e      	ldr	r2, [pc, #440]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6213      	str	r3, [r2, #32]
 80028d4:	e02d      	b.n	8002932 <HAL_RCC_OscConfig+0x36e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCC_OscConfig+0x334>
 80028de:	4b6a      	ldr	r3, [pc, #424]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	4a69      	ldr	r2, [pc, #420]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	f023 0301 	bic.w	r3, r3, #1
 80028e8:	6213      	str	r3, [r2, #32]
 80028ea:	4b67      	ldr	r3, [pc, #412]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	4a66      	ldr	r2, [pc, #408]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	f023 0304 	bic.w	r3, r3, #4
 80028f4:	6213      	str	r3, [r2, #32]
 80028f6:	e01c      	b.n	8002932 <HAL_RCC_OscConfig+0x36e>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	2b05      	cmp	r3, #5
 80028fe:	d10c      	bne.n	800291a <HAL_RCC_OscConfig+0x356>
 8002900:	4b61      	ldr	r3, [pc, #388]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	4a60      	ldr	r2, [pc, #384]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002906:	f043 0304 	orr.w	r3, r3, #4
 800290a:	6213      	str	r3, [r2, #32]
 800290c:	4b5e      	ldr	r3, [pc, #376]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4a5d      	ldr	r2, [pc, #372]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6213      	str	r3, [r2, #32]
 8002918:	e00b      	b.n	8002932 <HAL_RCC_OscConfig+0x36e>
 800291a:	4b5b      	ldr	r3, [pc, #364]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	4a5a      	ldr	r2, [pc, #360]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	f023 0301 	bic.w	r3, r3, #1
 8002924:	6213      	str	r3, [r2, #32]
 8002926:	4b58      	ldr	r3, [pc, #352]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	4a57      	ldr	r2, [pc, #348]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	f023 0304 	bic.w	r3, r3, #4
 8002930:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d015      	beq.n	8002966 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293a:	f7ff fd31 	bl	80023a0 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002940:	e00a      	b.n	8002958 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002942:	f7ff fd2d 	bl	80023a0 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002950:	4293      	cmp	r3, r2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e0b1      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002958:	4b4b      	ldr	r3, [pc, #300]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0ee      	beq.n	8002942 <HAL_RCC_OscConfig+0x37e>
 8002964:	e014      	b.n	8002990 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002966:	f7ff fd1b 	bl	80023a0 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296c:	e00a      	b.n	8002984 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296e:	f7ff fd17 	bl	80023a0 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	f241 3288 	movw	r2, #5000	; 0x1388
 800297c:	4293      	cmp	r3, r2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e09b      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002984:	4b40      	ldr	r3, [pc, #256]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1ee      	bne.n	800296e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002990:	7dfb      	ldrb	r3, [r7, #23]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d105      	bne.n	80029a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002996:	4b3c      	ldr	r3, [pc, #240]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	4a3b      	ldr	r2, [pc, #236]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 8087 	beq.w	8002aba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ac:	4b36      	ldr	r3, [pc, #216]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 030c 	and.w	r3, r3, #12
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d061      	beq.n	8002a7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d146      	bne.n	8002a4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c0:	4b33      	ldr	r3, [pc, #204]	; (8002a90 <HAL_RCC_OscConfig+0x4cc>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c6:	f7ff fceb 	bl	80023a0 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ce:	f7ff fce7 	bl	80023a0 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e06d      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e0:	4b29      	ldr	r3, [pc, #164]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f0      	bne.n	80029ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f4:	d108      	bne.n	8002a08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	4921      	ldr	r1, [pc, #132]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a08:	4b1f      	ldr	r3, [pc, #124]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a19      	ldr	r1, [r3, #32]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	491b      	ldr	r1, [pc, #108]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a20:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <HAL_RCC_OscConfig+0x4cc>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a26:	f7ff fcbb 	bl	80023a0 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2e:	f7ff fcb7 	bl	80023a0 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e03d      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x46a>
 8002a4c:	e035      	b.n	8002aba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <HAL_RCC_OscConfig+0x4cc>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7ff fca4 	bl	80023a0 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7ff fca0 	bl	80023a0 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e026      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6e:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x498>
 8002a7a:	e01e      	b.n	8002aba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e019      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_OscConfig+0x500>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d106      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d001      	beq.n	8002aba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000

08002ac8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0d0      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002adc:	4b6a      	ldr	r3, [pc, #424]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d910      	bls.n	8002b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b67      	ldr	r3, [pc, #412]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 0207 	bic.w	r2, r3, #7
 8002af2:	4965      	ldr	r1, [pc, #404]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b63      	ldr	r3, [pc, #396]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0b8      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b24:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a58      	ldr	r2, [pc, #352]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b3c:	4b53      	ldr	r3, [pc, #332]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4a52      	ldr	r2, [pc, #328]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b48:	4b50      	ldr	r3, [pc, #320]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	494d      	ldr	r1, [pc, #308]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d040      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d115      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e07f      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b86:	4b41      	ldr	r3, [pc, #260]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e073      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b96:	4b3d      	ldr	r3, [pc, #244]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e06b      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba6:	4b39      	ldr	r3, [pc, #228]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f023 0203 	bic.w	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4936      	ldr	r1, [pc, #216]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb8:	f7ff fbf2 	bl	80023a0 <HAL_GetTick>
 8002bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc0:	f7ff fbee 	bl	80023a0 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e053      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	4b2d      	ldr	r3, [pc, #180]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 020c 	and.w	r2, r3, #12
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d1eb      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002be8:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d210      	bcs.n	8002c18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b24      	ldr	r3, [pc, #144]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 0207 	bic.w	r2, r3, #7
 8002bfe:	4922      	ldr	r1, [pc, #136]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e032      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4916      	ldr	r1, [pc, #88]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c42:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	490e      	ldr	r1, [pc, #56]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c56:	f000 f821 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	490a      	ldr	r1, [pc, #40]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002c68:	5ccb      	ldrb	r3, [r1, r3]
 8002c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6e:	4a09      	ldr	r2, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x1cc>)
 8002c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_ClockConfig+0x1d0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fb50 	bl	800231c <HAL_InitTick>

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40022000 	.word	0x40022000
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	08003e08 	.word	0x08003e08
 8002c94:	20000000 	.word	0x20000000
 8002c98:	20000004 	.word	0x20000004

08002c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c9c:	b490      	push	{r4, r7}
 8002c9e:	b08a      	sub	sp, #40	; 0x28
 8002ca0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ca2:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xac>)
 8002ca4:	1d3c      	adds	r4, r7, #4
 8002ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cac:	f240 2301 	movw	r3, #513	; 0x201
 8002cb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cc6:	4b21      	ldr	r3, [pc, #132]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d002      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x40>
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x46>
 8002cda:	e02b      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cdc:	4b1c      	ldr	r3, [pc, #112]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cde:	623b      	str	r3, [r7, #32]
      break;
 8002ce0:	e02b      	b.n	8002d3a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	0c9b      	lsrs	r3, r3, #18
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	3328      	adds	r3, #40	; 0x28
 8002cec:	443b      	add	r3, r7
 8002cee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cf2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d012      	beq.n	8002d24 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cfe:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	0c5b      	lsrs	r3, r3, #17
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	3328      	adds	r3, #40	; 0x28
 8002d0a:	443b      	add	r3, r7
 8002d0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d16:	fb03 f202 	mul.w	r2, r3, r2
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
 8002d22:	e004      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	4a0b      	ldr	r2, [pc, #44]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d28:	fb02 f303 	mul.w	r3, r2, r3
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	623b      	str	r3, [r7, #32]
      break;
 8002d32:	e002      	b.n	8002d3a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d36:	623b      	str	r3, [r7, #32]
      break;
 8002d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3728      	adds	r7, #40	; 0x28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc90      	pop	{r4, r7}
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	08003db8 	.word	0x08003db8
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	007a1200 	.word	0x007a1200
 8002d54:	003d0900 	.word	0x003d0900

08002d58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d60:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <RCC_Delay+0x34>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <RCC_Delay+0x38>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	0a5b      	lsrs	r3, r3, #9
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	fb02 f303 	mul.w	r3, r2, r3
 8002d72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d74:	bf00      	nop
  }
  while (Delay --);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1e5a      	subs	r2, r3, #1
 8002d7a:	60fa      	str	r2, [r7, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f9      	bne.n	8002d74 <RCC_Delay+0x1c>
}
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	20000000 	.word	0x20000000
 8002d90:	10624dd3 	.word	0x10624dd3

08002d94 <__errno>:
 8002d94:	4b01      	ldr	r3, [pc, #4]	; (8002d9c <__errno+0x8>)
 8002d96:	6818      	ldr	r0, [r3, #0]
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	2000000c 	.word	0x2000000c

08002da0 <__libc_init_array>:
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	2600      	movs	r6, #0
 8002da4:	4d0c      	ldr	r5, [pc, #48]	; (8002dd8 <__libc_init_array+0x38>)
 8002da6:	4c0d      	ldr	r4, [pc, #52]	; (8002ddc <__libc_init_array+0x3c>)
 8002da8:	1b64      	subs	r4, r4, r5
 8002daa:	10a4      	asrs	r4, r4, #2
 8002dac:	42a6      	cmp	r6, r4
 8002dae:	d109      	bne.n	8002dc4 <__libc_init_array+0x24>
 8002db0:	f000 ffb6 	bl	8003d20 <_init>
 8002db4:	2600      	movs	r6, #0
 8002db6:	4d0a      	ldr	r5, [pc, #40]	; (8002de0 <__libc_init_array+0x40>)
 8002db8:	4c0a      	ldr	r4, [pc, #40]	; (8002de4 <__libc_init_array+0x44>)
 8002dba:	1b64      	subs	r4, r4, r5
 8002dbc:	10a4      	asrs	r4, r4, #2
 8002dbe:	42a6      	cmp	r6, r4
 8002dc0:	d105      	bne.n	8002dce <__libc_init_array+0x2e>
 8002dc2:	bd70      	pop	{r4, r5, r6, pc}
 8002dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc8:	4798      	blx	r3
 8002dca:	3601      	adds	r6, #1
 8002dcc:	e7ee      	b.n	8002dac <__libc_init_array+0xc>
 8002dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dd2:	4798      	blx	r3
 8002dd4:	3601      	adds	r6, #1
 8002dd6:	e7f2      	b.n	8002dbe <__libc_init_array+0x1e>
 8002dd8:	08003eb0 	.word	0x08003eb0
 8002ddc:	08003eb0 	.word	0x08003eb0
 8002de0:	08003eb0 	.word	0x08003eb0
 8002de4:	08003eb4 	.word	0x08003eb4

08002de8 <memset>:
 8002de8:	4603      	mov	r3, r0
 8002dea:	4402      	add	r2, r0
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d100      	bne.n	8002df2 <memset+0xa>
 8002df0:	4770      	bx	lr
 8002df2:	f803 1b01 	strb.w	r1, [r3], #1
 8002df6:	e7f9      	b.n	8002dec <memset+0x4>

08002df8 <iprintf>:
 8002df8:	b40f      	push	{r0, r1, r2, r3}
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <iprintf+0x2c>)
 8002dfc:	b513      	push	{r0, r1, r4, lr}
 8002dfe:	681c      	ldr	r4, [r3, #0]
 8002e00:	b124      	cbz	r4, 8002e0c <iprintf+0x14>
 8002e02:	69a3      	ldr	r3, [r4, #24]
 8002e04:	b913      	cbnz	r3, 8002e0c <iprintf+0x14>
 8002e06:	4620      	mov	r0, r4
 8002e08:	f000 f866 	bl	8002ed8 <__sinit>
 8002e0c:	ab05      	add	r3, sp, #20
 8002e0e:	4620      	mov	r0, r4
 8002e10:	9a04      	ldr	r2, [sp, #16]
 8002e12:	68a1      	ldr	r1, [r4, #8]
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	f000 f9bb 	bl	8003190 <_vfiprintf_r>
 8002e1a:	b002      	add	sp, #8
 8002e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e20:	b004      	add	sp, #16
 8002e22:	4770      	bx	lr
 8002e24:	2000000c 	.word	0x2000000c

08002e28 <std>:
 8002e28:	2300      	movs	r3, #0
 8002e2a:	b510      	push	{r4, lr}
 8002e2c:	4604      	mov	r4, r0
 8002e2e:	e9c0 3300 	strd	r3, r3, [r0]
 8002e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e36:	6083      	str	r3, [r0, #8]
 8002e38:	8181      	strh	r1, [r0, #12]
 8002e3a:	6643      	str	r3, [r0, #100]	; 0x64
 8002e3c:	81c2      	strh	r2, [r0, #14]
 8002e3e:	6183      	str	r3, [r0, #24]
 8002e40:	4619      	mov	r1, r3
 8002e42:	2208      	movs	r2, #8
 8002e44:	305c      	adds	r0, #92	; 0x5c
 8002e46:	f7ff ffcf 	bl	8002de8 <memset>
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <std+0x38>)
 8002e4c:	6224      	str	r4, [r4, #32]
 8002e4e:	6263      	str	r3, [r4, #36]	; 0x24
 8002e50:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <std+0x3c>)
 8002e52:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e54:	4b04      	ldr	r3, [pc, #16]	; (8002e68 <std+0x40>)
 8002e56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e58:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <std+0x44>)
 8002e5a:	6323      	str	r3, [r4, #48]	; 0x30
 8002e5c:	bd10      	pop	{r4, pc}
 8002e5e:	bf00      	nop
 8002e60:	0800373d 	.word	0x0800373d
 8002e64:	0800375f 	.word	0x0800375f
 8002e68:	08003797 	.word	0x08003797
 8002e6c:	080037bb 	.word	0x080037bb

08002e70 <_cleanup_r>:
 8002e70:	4901      	ldr	r1, [pc, #4]	; (8002e78 <_cleanup_r+0x8>)
 8002e72:	f000 b8af 	b.w	8002fd4 <_fwalk_reent>
 8002e76:	bf00      	nop
 8002e78:	08003a8d 	.word	0x08003a8d

08002e7c <__sfmoreglue>:
 8002e7c:	2268      	movs	r2, #104	; 0x68
 8002e7e:	b570      	push	{r4, r5, r6, lr}
 8002e80:	1e4d      	subs	r5, r1, #1
 8002e82:	4355      	muls	r5, r2
 8002e84:	460e      	mov	r6, r1
 8002e86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002e8a:	f000 f8e5 	bl	8003058 <_malloc_r>
 8002e8e:	4604      	mov	r4, r0
 8002e90:	b140      	cbz	r0, 8002ea4 <__sfmoreglue+0x28>
 8002e92:	2100      	movs	r1, #0
 8002e94:	e9c0 1600 	strd	r1, r6, [r0]
 8002e98:	300c      	adds	r0, #12
 8002e9a:	60a0      	str	r0, [r4, #8]
 8002e9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ea0:	f7ff ffa2 	bl	8002de8 <memset>
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	bd70      	pop	{r4, r5, r6, pc}

08002ea8 <__sfp_lock_acquire>:
 8002ea8:	4801      	ldr	r0, [pc, #4]	; (8002eb0 <__sfp_lock_acquire+0x8>)
 8002eaa:	f000 b8b3 	b.w	8003014 <__retarget_lock_acquire_recursive>
 8002eae:	bf00      	nop
 8002eb0:	20000095 	.word	0x20000095

08002eb4 <__sfp_lock_release>:
 8002eb4:	4801      	ldr	r0, [pc, #4]	; (8002ebc <__sfp_lock_release+0x8>)
 8002eb6:	f000 b8ae 	b.w	8003016 <__retarget_lock_release_recursive>
 8002eba:	bf00      	nop
 8002ebc:	20000095 	.word	0x20000095

08002ec0 <__sinit_lock_acquire>:
 8002ec0:	4801      	ldr	r0, [pc, #4]	; (8002ec8 <__sinit_lock_acquire+0x8>)
 8002ec2:	f000 b8a7 	b.w	8003014 <__retarget_lock_acquire_recursive>
 8002ec6:	bf00      	nop
 8002ec8:	20000096 	.word	0x20000096

08002ecc <__sinit_lock_release>:
 8002ecc:	4801      	ldr	r0, [pc, #4]	; (8002ed4 <__sinit_lock_release+0x8>)
 8002ece:	f000 b8a2 	b.w	8003016 <__retarget_lock_release_recursive>
 8002ed2:	bf00      	nop
 8002ed4:	20000096 	.word	0x20000096

08002ed8 <__sinit>:
 8002ed8:	b510      	push	{r4, lr}
 8002eda:	4604      	mov	r4, r0
 8002edc:	f7ff fff0 	bl	8002ec0 <__sinit_lock_acquire>
 8002ee0:	69a3      	ldr	r3, [r4, #24]
 8002ee2:	b11b      	cbz	r3, 8002eec <__sinit+0x14>
 8002ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ee8:	f7ff bff0 	b.w	8002ecc <__sinit_lock_release>
 8002eec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002ef0:	6523      	str	r3, [r4, #80]	; 0x50
 8002ef2:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <__sinit+0x68>)
 8002ef4:	4a13      	ldr	r2, [pc, #76]	; (8002f44 <__sinit+0x6c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	62a2      	str	r2, [r4, #40]	; 0x28
 8002efa:	42a3      	cmp	r3, r4
 8002efc:	bf08      	it	eq
 8002efe:	2301      	moveq	r3, #1
 8002f00:	4620      	mov	r0, r4
 8002f02:	bf08      	it	eq
 8002f04:	61a3      	streq	r3, [r4, #24]
 8002f06:	f000 f81f 	bl	8002f48 <__sfp>
 8002f0a:	6060      	str	r0, [r4, #4]
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	f000 f81b 	bl	8002f48 <__sfp>
 8002f12:	60a0      	str	r0, [r4, #8]
 8002f14:	4620      	mov	r0, r4
 8002f16:	f000 f817 	bl	8002f48 <__sfp>
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2104      	movs	r1, #4
 8002f1e:	60e0      	str	r0, [r4, #12]
 8002f20:	6860      	ldr	r0, [r4, #4]
 8002f22:	f7ff ff81 	bl	8002e28 <std>
 8002f26:	2201      	movs	r2, #1
 8002f28:	2109      	movs	r1, #9
 8002f2a:	68a0      	ldr	r0, [r4, #8]
 8002f2c:	f7ff ff7c 	bl	8002e28 <std>
 8002f30:	2202      	movs	r2, #2
 8002f32:	2112      	movs	r1, #18
 8002f34:	68e0      	ldr	r0, [r4, #12]
 8002f36:	f7ff ff77 	bl	8002e28 <std>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	61a3      	str	r3, [r4, #24]
 8002f3e:	e7d1      	b.n	8002ee4 <__sinit+0xc>
 8002f40:	08003e18 	.word	0x08003e18
 8002f44:	08002e71 	.word	0x08002e71

08002f48 <__sfp>:
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4a:	4607      	mov	r7, r0
 8002f4c:	f7ff ffac 	bl	8002ea8 <__sfp_lock_acquire>
 8002f50:	4b1e      	ldr	r3, [pc, #120]	; (8002fcc <__sfp+0x84>)
 8002f52:	681e      	ldr	r6, [r3, #0]
 8002f54:	69b3      	ldr	r3, [r6, #24]
 8002f56:	b913      	cbnz	r3, 8002f5e <__sfp+0x16>
 8002f58:	4630      	mov	r0, r6
 8002f5a:	f7ff ffbd 	bl	8002ed8 <__sinit>
 8002f5e:	3648      	adds	r6, #72	; 0x48
 8002f60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	d503      	bpl.n	8002f70 <__sfp+0x28>
 8002f68:	6833      	ldr	r3, [r6, #0]
 8002f6a:	b30b      	cbz	r3, 8002fb0 <__sfp+0x68>
 8002f6c:	6836      	ldr	r6, [r6, #0]
 8002f6e:	e7f7      	b.n	8002f60 <__sfp+0x18>
 8002f70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f74:	b9d5      	cbnz	r5, 8002fac <__sfp+0x64>
 8002f76:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <__sfp+0x88>)
 8002f78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f7c:	60e3      	str	r3, [r4, #12]
 8002f7e:	6665      	str	r5, [r4, #100]	; 0x64
 8002f80:	f000 f847 	bl	8003012 <__retarget_lock_init_recursive>
 8002f84:	f7ff ff96 	bl	8002eb4 <__sfp_lock_release>
 8002f88:	2208      	movs	r2, #8
 8002f8a:	4629      	mov	r1, r5
 8002f8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002f90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002f94:	6025      	str	r5, [r4, #0]
 8002f96:	61a5      	str	r5, [r4, #24]
 8002f98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002f9c:	f7ff ff24 	bl	8002de8 <memset>
 8002fa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002fa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002fa8:	4620      	mov	r0, r4
 8002faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fac:	3468      	adds	r4, #104	; 0x68
 8002fae:	e7d9      	b.n	8002f64 <__sfp+0x1c>
 8002fb0:	2104      	movs	r1, #4
 8002fb2:	4638      	mov	r0, r7
 8002fb4:	f7ff ff62 	bl	8002e7c <__sfmoreglue>
 8002fb8:	4604      	mov	r4, r0
 8002fba:	6030      	str	r0, [r6, #0]
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d1d5      	bne.n	8002f6c <__sfp+0x24>
 8002fc0:	f7ff ff78 	bl	8002eb4 <__sfp_lock_release>
 8002fc4:	230c      	movs	r3, #12
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	e7ee      	b.n	8002fa8 <__sfp+0x60>
 8002fca:	bf00      	nop
 8002fcc:	08003e18 	.word	0x08003e18
 8002fd0:	ffff0001 	.word	0xffff0001

08002fd4 <_fwalk_reent>:
 8002fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fd8:	4606      	mov	r6, r0
 8002fda:	4688      	mov	r8, r1
 8002fdc:	2700      	movs	r7, #0
 8002fde:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002fe2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002fe6:	f1b9 0901 	subs.w	r9, r9, #1
 8002fea:	d505      	bpl.n	8002ff8 <_fwalk_reent+0x24>
 8002fec:	6824      	ldr	r4, [r4, #0]
 8002fee:	2c00      	cmp	r4, #0
 8002ff0:	d1f7      	bne.n	8002fe2 <_fwalk_reent+0xe>
 8002ff2:	4638      	mov	r0, r7
 8002ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ff8:	89ab      	ldrh	r3, [r5, #12]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d907      	bls.n	800300e <_fwalk_reent+0x3a>
 8002ffe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003002:	3301      	adds	r3, #1
 8003004:	d003      	beq.n	800300e <_fwalk_reent+0x3a>
 8003006:	4629      	mov	r1, r5
 8003008:	4630      	mov	r0, r6
 800300a:	47c0      	blx	r8
 800300c:	4307      	orrs	r7, r0
 800300e:	3568      	adds	r5, #104	; 0x68
 8003010:	e7e9      	b.n	8002fe6 <_fwalk_reent+0x12>

08003012 <__retarget_lock_init_recursive>:
 8003012:	4770      	bx	lr

08003014 <__retarget_lock_acquire_recursive>:
 8003014:	4770      	bx	lr

08003016 <__retarget_lock_release_recursive>:
 8003016:	4770      	bx	lr

08003018 <sbrk_aligned>:
 8003018:	b570      	push	{r4, r5, r6, lr}
 800301a:	4e0e      	ldr	r6, [pc, #56]	; (8003054 <sbrk_aligned+0x3c>)
 800301c:	460c      	mov	r4, r1
 800301e:	6831      	ldr	r1, [r6, #0]
 8003020:	4605      	mov	r5, r0
 8003022:	b911      	cbnz	r1, 800302a <sbrk_aligned+0x12>
 8003024:	f000 fb7a 	bl	800371c <_sbrk_r>
 8003028:	6030      	str	r0, [r6, #0]
 800302a:	4621      	mov	r1, r4
 800302c:	4628      	mov	r0, r5
 800302e:	f000 fb75 	bl	800371c <_sbrk_r>
 8003032:	1c43      	adds	r3, r0, #1
 8003034:	d00a      	beq.n	800304c <sbrk_aligned+0x34>
 8003036:	1cc4      	adds	r4, r0, #3
 8003038:	f024 0403 	bic.w	r4, r4, #3
 800303c:	42a0      	cmp	r0, r4
 800303e:	d007      	beq.n	8003050 <sbrk_aligned+0x38>
 8003040:	1a21      	subs	r1, r4, r0
 8003042:	4628      	mov	r0, r5
 8003044:	f000 fb6a 	bl	800371c <_sbrk_r>
 8003048:	3001      	adds	r0, #1
 800304a:	d101      	bne.n	8003050 <sbrk_aligned+0x38>
 800304c:	f04f 34ff 	mov.w	r4, #4294967295
 8003050:	4620      	mov	r0, r4
 8003052:	bd70      	pop	{r4, r5, r6, pc}
 8003054:	2000009c 	.word	0x2000009c

08003058 <_malloc_r>:
 8003058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800305c:	1ccd      	adds	r5, r1, #3
 800305e:	f025 0503 	bic.w	r5, r5, #3
 8003062:	3508      	adds	r5, #8
 8003064:	2d0c      	cmp	r5, #12
 8003066:	bf38      	it	cc
 8003068:	250c      	movcc	r5, #12
 800306a:	2d00      	cmp	r5, #0
 800306c:	4607      	mov	r7, r0
 800306e:	db01      	blt.n	8003074 <_malloc_r+0x1c>
 8003070:	42a9      	cmp	r1, r5
 8003072:	d905      	bls.n	8003080 <_malloc_r+0x28>
 8003074:	230c      	movs	r3, #12
 8003076:	2600      	movs	r6, #0
 8003078:	603b      	str	r3, [r7, #0]
 800307a:	4630      	mov	r0, r6
 800307c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003080:	4e2e      	ldr	r6, [pc, #184]	; (800313c <_malloc_r+0xe4>)
 8003082:	f000 fdc5 	bl	8003c10 <__malloc_lock>
 8003086:	6833      	ldr	r3, [r6, #0]
 8003088:	461c      	mov	r4, r3
 800308a:	bb34      	cbnz	r4, 80030da <_malloc_r+0x82>
 800308c:	4629      	mov	r1, r5
 800308e:	4638      	mov	r0, r7
 8003090:	f7ff ffc2 	bl	8003018 <sbrk_aligned>
 8003094:	1c43      	adds	r3, r0, #1
 8003096:	4604      	mov	r4, r0
 8003098:	d14d      	bne.n	8003136 <_malloc_r+0xde>
 800309a:	6834      	ldr	r4, [r6, #0]
 800309c:	4626      	mov	r6, r4
 800309e:	2e00      	cmp	r6, #0
 80030a0:	d140      	bne.n	8003124 <_malloc_r+0xcc>
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	4631      	mov	r1, r6
 80030a6:	4638      	mov	r0, r7
 80030a8:	eb04 0803 	add.w	r8, r4, r3
 80030ac:	f000 fb36 	bl	800371c <_sbrk_r>
 80030b0:	4580      	cmp	r8, r0
 80030b2:	d13a      	bne.n	800312a <_malloc_r+0xd2>
 80030b4:	6821      	ldr	r1, [r4, #0]
 80030b6:	3503      	adds	r5, #3
 80030b8:	1a6d      	subs	r5, r5, r1
 80030ba:	f025 0503 	bic.w	r5, r5, #3
 80030be:	3508      	adds	r5, #8
 80030c0:	2d0c      	cmp	r5, #12
 80030c2:	bf38      	it	cc
 80030c4:	250c      	movcc	r5, #12
 80030c6:	4638      	mov	r0, r7
 80030c8:	4629      	mov	r1, r5
 80030ca:	f7ff ffa5 	bl	8003018 <sbrk_aligned>
 80030ce:	3001      	adds	r0, #1
 80030d0:	d02b      	beq.n	800312a <_malloc_r+0xd2>
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	442b      	add	r3, r5
 80030d6:	6023      	str	r3, [r4, #0]
 80030d8:	e00e      	b.n	80030f8 <_malloc_r+0xa0>
 80030da:	6822      	ldr	r2, [r4, #0]
 80030dc:	1b52      	subs	r2, r2, r5
 80030de:	d41e      	bmi.n	800311e <_malloc_r+0xc6>
 80030e0:	2a0b      	cmp	r2, #11
 80030e2:	d916      	bls.n	8003112 <_malloc_r+0xba>
 80030e4:	1961      	adds	r1, r4, r5
 80030e6:	42a3      	cmp	r3, r4
 80030e8:	6025      	str	r5, [r4, #0]
 80030ea:	bf18      	it	ne
 80030ec:	6059      	strne	r1, [r3, #4]
 80030ee:	6863      	ldr	r3, [r4, #4]
 80030f0:	bf08      	it	eq
 80030f2:	6031      	streq	r1, [r6, #0]
 80030f4:	5162      	str	r2, [r4, r5]
 80030f6:	604b      	str	r3, [r1, #4]
 80030f8:	4638      	mov	r0, r7
 80030fa:	f104 060b 	add.w	r6, r4, #11
 80030fe:	f000 fd8d 	bl	8003c1c <__malloc_unlock>
 8003102:	f026 0607 	bic.w	r6, r6, #7
 8003106:	1d23      	adds	r3, r4, #4
 8003108:	1af2      	subs	r2, r6, r3
 800310a:	d0b6      	beq.n	800307a <_malloc_r+0x22>
 800310c:	1b9b      	subs	r3, r3, r6
 800310e:	50a3      	str	r3, [r4, r2]
 8003110:	e7b3      	b.n	800307a <_malloc_r+0x22>
 8003112:	6862      	ldr	r2, [r4, #4]
 8003114:	42a3      	cmp	r3, r4
 8003116:	bf0c      	ite	eq
 8003118:	6032      	streq	r2, [r6, #0]
 800311a:	605a      	strne	r2, [r3, #4]
 800311c:	e7ec      	b.n	80030f8 <_malloc_r+0xa0>
 800311e:	4623      	mov	r3, r4
 8003120:	6864      	ldr	r4, [r4, #4]
 8003122:	e7b2      	b.n	800308a <_malloc_r+0x32>
 8003124:	4634      	mov	r4, r6
 8003126:	6876      	ldr	r6, [r6, #4]
 8003128:	e7b9      	b.n	800309e <_malloc_r+0x46>
 800312a:	230c      	movs	r3, #12
 800312c:	4638      	mov	r0, r7
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	f000 fd74 	bl	8003c1c <__malloc_unlock>
 8003134:	e7a1      	b.n	800307a <_malloc_r+0x22>
 8003136:	6025      	str	r5, [r4, #0]
 8003138:	e7de      	b.n	80030f8 <_malloc_r+0xa0>
 800313a:	bf00      	nop
 800313c:	20000098 	.word	0x20000098

08003140 <__sfputc_r>:
 8003140:	6893      	ldr	r3, [r2, #8]
 8003142:	b410      	push	{r4}
 8003144:	3b01      	subs	r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	6093      	str	r3, [r2, #8]
 800314a:	da07      	bge.n	800315c <__sfputc_r+0x1c>
 800314c:	6994      	ldr	r4, [r2, #24]
 800314e:	42a3      	cmp	r3, r4
 8003150:	db01      	blt.n	8003156 <__sfputc_r+0x16>
 8003152:	290a      	cmp	r1, #10
 8003154:	d102      	bne.n	800315c <__sfputc_r+0x1c>
 8003156:	bc10      	pop	{r4}
 8003158:	f000 bb34 	b.w	80037c4 <__swbuf_r>
 800315c:	6813      	ldr	r3, [r2, #0]
 800315e:	1c58      	adds	r0, r3, #1
 8003160:	6010      	str	r0, [r2, #0]
 8003162:	7019      	strb	r1, [r3, #0]
 8003164:	4608      	mov	r0, r1
 8003166:	bc10      	pop	{r4}
 8003168:	4770      	bx	lr

0800316a <__sfputs_r>:
 800316a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316c:	4606      	mov	r6, r0
 800316e:	460f      	mov	r7, r1
 8003170:	4614      	mov	r4, r2
 8003172:	18d5      	adds	r5, r2, r3
 8003174:	42ac      	cmp	r4, r5
 8003176:	d101      	bne.n	800317c <__sfputs_r+0x12>
 8003178:	2000      	movs	r0, #0
 800317a:	e007      	b.n	800318c <__sfputs_r+0x22>
 800317c:	463a      	mov	r2, r7
 800317e:	4630      	mov	r0, r6
 8003180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003184:	f7ff ffdc 	bl	8003140 <__sfputc_r>
 8003188:	1c43      	adds	r3, r0, #1
 800318a:	d1f3      	bne.n	8003174 <__sfputs_r+0xa>
 800318c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003190 <_vfiprintf_r>:
 8003190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003194:	460d      	mov	r5, r1
 8003196:	4614      	mov	r4, r2
 8003198:	4698      	mov	r8, r3
 800319a:	4606      	mov	r6, r0
 800319c:	b09d      	sub	sp, #116	; 0x74
 800319e:	b118      	cbz	r0, 80031a8 <_vfiprintf_r+0x18>
 80031a0:	6983      	ldr	r3, [r0, #24]
 80031a2:	b90b      	cbnz	r3, 80031a8 <_vfiprintf_r+0x18>
 80031a4:	f7ff fe98 	bl	8002ed8 <__sinit>
 80031a8:	4b89      	ldr	r3, [pc, #548]	; (80033d0 <_vfiprintf_r+0x240>)
 80031aa:	429d      	cmp	r5, r3
 80031ac:	d11b      	bne.n	80031e6 <_vfiprintf_r+0x56>
 80031ae:	6875      	ldr	r5, [r6, #4]
 80031b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031b2:	07d9      	lsls	r1, r3, #31
 80031b4:	d405      	bmi.n	80031c2 <_vfiprintf_r+0x32>
 80031b6:	89ab      	ldrh	r3, [r5, #12]
 80031b8:	059a      	lsls	r2, r3, #22
 80031ba:	d402      	bmi.n	80031c2 <_vfiprintf_r+0x32>
 80031bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031be:	f7ff ff29 	bl	8003014 <__retarget_lock_acquire_recursive>
 80031c2:	89ab      	ldrh	r3, [r5, #12]
 80031c4:	071b      	lsls	r3, r3, #28
 80031c6:	d501      	bpl.n	80031cc <_vfiprintf_r+0x3c>
 80031c8:	692b      	ldr	r3, [r5, #16]
 80031ca:	b9eb      	cbnz	r3, 8003208 <_vfiprintf_r+0x78>
 80031cc:	4629      	mov	r1, r5
 80031ce:	4630      	mov	r0, r6
 80031d0:	f000 fb5c 	bl	800388c <__swsetup_r>
 80031d4:	b1c0      	cbz	r0, 8003208 <_vfiprintf_r+0x78>
 80031d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031d8:	07dc      	lsls	r4, r3, #31
 80031da:	d50e      	bpl.n	80031fa <_vfiprintf_r+0x6a>
 80031dc:	f04f 30ff 	mov.w	r0, #4294967295
 80031e0:	b01d      	add	sp, #116	; 0x74
 80031e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031e6:	4b7b      	ldr	r3, [pc, #492]	; (80033d4 <_vfiprintf_r+0x244>)
 80031e8:	429d      	cmp	r5, r3
 80031ea:	d101      	bne.n	80031f0 <_vfiprintf_r+0x60>
 80031ec:	68b5      	ldr	r5, [r6, #8]
 80031ee:	e7df      	b.n	80031b0 <_vfiprintf_r+0x20>
 80031f0:	4b79      	ldr	r3, [pc, #484]	; (80033d8 <_vfiprintf_r+0x248>)
 80031f2:	429d      	cmp	r5, r3
 80031f4:	bf08      	it	eq
 80031f6:	68f5      	ldreq	r5, [r6, #12]
 80031f8:	e7da      	b.n	80031b0 <_vfiprintf_r+0x20>
 80031fa:	89ab      	ldrh	r3, [r5, #12]
 80031fc:	0598      	lsls	r0, r3, #22
 80031fe:	d4ed      	bmi.n	80031dc <_vfiprintf_r+0x4c>
 8003200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003202:	f7ff ff08 	bl	8003016 <__retarget_lock_release_recursive>
 8003206:	e7e9      	b.n	80031dc <_vfiprintf_r+0x4c>
 8003208:	2300      	movs	r3, #0
 800320a:	9309      	str	r3, [sp, #36]	; 0x24
 800320c:	2320      	movs	r3, #32
 800320e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003212:	2330      	movs	r3, #48	; 0x30
 8003214:	f04f 0901 	mov.w	r9, #1
 8003218:	f8cd 800c 	str.w	r8, [sp, #12]
 800321c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80033dc <_vfiprintf_r+0x24c>
 8003220:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003224:	4623      	mov	r3, r4
 8003226:	469a      	mov	sl, r3
 8003228:	f813 2b01 	ldrb.w	r2, [r3], #1
 800322c:	b10a      	cbz	r2, 8003232 <_vfiprintf_r+0xa2>
 800322e:	2a25      	cmp	r2, #37	; 0x25
 8003230:	d1f9      	bne.n	8003226 <_vfiprintf_r+0x96>
 8003232:	ebba 0b04 	subs.w	fp, sl, r4
 8003236:	d00b      	beq.n	8003250 <_vfiprintf_r+0xc0>
 8003238:	465b      	mov	r3, fp
 800323a:	4622      	mov	r2, r4
 800323c:	4629      	mov	r1, r5
 800323e:	4630      	mov	r0, r6
 8003240:	f7ff ff93 	bl	800316a <__sfputs_r>
 8003244:	3001      	adds	r0, #1
 8003246:	f000 80aa 	beq.w	800339e <_vfiprintf_r+0x20e>
 800324a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800324c:	445a      	add	r2, fp
 800324e:	9209      	str	r2, [sp, #36]	; 0x24
 8003250:	f89a 3000 	ldrb.w	r3, [sl]
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 80a2 	beq.w	800339e <_vfiprintf_r+0x20e>
 800325a:	2300      	movs	r3, #0
 800325c:	f04f 32ff 	mov.w	r2, #4294967295
 8003260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003264:	f10a 0a01 	add.w	sl, sl, #1
 8003268:	9304      	str	r3, [sp, #16]
 800326a:	9307      	str	r3, [sp, #28]
 800326c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003270:	931a      	str	r3, [sp, #104]	; 0x68
 8003272:	4654      	mov	r4, sl
 8003274:	2205      	movs	r2, #5
 8003276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800327a:	4858      	ldr	r0, [pc, #352]	; (80033dc <_vfiprintf_r+0x24c>)
 800327c:	f000 fcba 	bl	8003bf4 <memchr>
 8003280:	9a04      	ldr	r2, [sp, #16]
 8003282:	b9d8      	cbnz	r0, 80032bc <_vfiprintf_r+0x12c>
 8003284:	06d1      	lsls	r1, r2, #27
 8003286:	bf44      	itt	mi
 8003288:	2320      	movmi	r3, #32
 800328a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800328e:	0713      	lsls	r3, r2, #28
 8003290:	bf44      	itt	mi
 8003292:	232b      	movmi	r3, #43	; 0x2b
 8003294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003298:	f89a 3000 	ldrb.w	r3, [sl]
 800329c:	2b2a      	cmp	r3, #42	; 0x2a
 800329e:	d015      	beq.n	80032cc <_vfiprintf_r+0x13c>
 80032a0:	4654      	mov	r4, sl
 80032a2:	2000      	movs	r0, #0
 80032a4:	f04f 0c0a 	mov.w	ip, #10
 80032a8:	9a07      	ldr	r2, [sp, #28]
 80032aa:	4621      	mov	r1, r4
 80032ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032b0:	3b30      	subs	r3, #48	; 0x30
 80032b2:	2b09      	cmp	r3, #9
 80032b4:	d94e      	bls.n	8003354 <_vfiprintf_r+0x1c4>
 80032b6:	b1b0      	cbz	r0, 80032e6 <_vfiprintf_r+0x156>
 80032b8:	9207      	str	r2, [sp, #28]
 80032ba:	e014      	b.n	80032e6 <_vfiprintf_r+0x156>
 80032bc:	eba0 0308 	sub.w	r3, r0, r8
 80032c0:	fa09 f303 	lsl.w	r3, r9, r3
 80032c4:	4313      	orrs	r3, r2
 80032c6:	46a2      	mov	sl, r4
 80032c8:	9304      	str	r3, [sp, #16]
 80032ca:	e7d2      	b.n	8003272 <_vfiprintf_r+0xe2>
 80032cc:	9b03      	ldr	r3, [sp, #12]
 80032ce:	1d19      	adds	r1, r3, #4
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	9103      	str	r1, [sp, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	bfbb      	ittet	lt
 80032d8:	425b      	neglt	r3, r3
 80032da:	f042 0202 	orrlt.w	r2, r2, #2
 80032de:	9307      	strge	r3, [sp, #28]
 80032e0:	9307      	strlt	r3, [sp, #28]
 80032e2:	bfb8      	it	lt
 80032e4:	9204      	strlt	r2, [sp, #16]
 80032e6:	7823      	ldrb	r3, [r4, #0]
 80032e8:	2b2e      	cmp	r3, #46	; 0x2e
 80032ea:	d10c      	bne.n	8003306 <_vfiprintf_r+0x176>
 80032ec:	7863      	ldrb	r3, [r4, #1]
 80032ee:	2b2a      	cmp	r3, #42	; 0x2a
 80032f0:	d135      	bne.n	800335e <_vfiprintf_r+0x1ce>
 80032f2:	9b03      	ldr	r3, [sp, #12]
 80032f4:	3402      	adds	r4, #2
 80032f6:	1d1a      	adds	r2, r3, #4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	9203      	str	r2, [sp, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	bfb8      	it	lt
 8003300:	f04f 33ff 	movlt.w	r3, #4294967295
 8003304:	9305      	str	r3, [sp, #20]
 8003306:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80033e0 <_vfiprintf_r+0x250>
 800330a:	2203      	movs	r2, #3
 800330c:	4650      	mov	r0, sl
 800330e:	7821      	ldrb	r1, [r4, #0]
 8003310:	f000 fc70 	bl	8003bf4 <memchr>
 8003314:	b140      	cbz	r0, 8003328 <_vfiprintf_r+0x198>
 8003316:	2340      	movs	r3, #64	; 0x40
 8003318:	eba0 000a 	sub.w	r0, r0, sl
 800331c:	fa03 f000 	lsl.w	r0, r3, r0
 8003320:	9b04      	ldr	r3, [sp, #16]
 8003322:	3401      	adds	r4, #1
 8003324:	4303      	orrs	r3, r0
 8003326:	9304      	str	r3, [sp, #16]
 8003328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800332c:	2206      	movs	r2, #6
 800332e:	482d      	ldr	r0, [pc, #180]	; (80033e4 <_vfiprintf_r+0x254>)
 8003330:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003334:	f000 fc5e 	bl	8003bf4 <memchr>
 8003338:	2800      	cmp	r0, #0
 800333a:	d03f      	beq.n	80033bc <_vfiprintf_r+0x22c>
 800333c:	4b2a      	ldr	r3, [pc, #168]	; (80033e8 <_vfiprintf_r+0x258>)
 800333e:	bb1b      	cbnz	r3, 8003388 <_vfiprintf_r+0x1f8>
 8003340:	9b03      	ldr	r3, [sp, #12]
 8003342:	3307      	adds	r3, #7
 8003344:	f023 0307 	bic.w	r3, r3, #7
 8003348:	3308      	adds	r3, #8
 800334a:	9303      	str	r3, [sp, #12]
 800334c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800334e:	443b      	add	r3, r7
 8003350:	9309      	str	r3, [sp, #36]	; 0x24
 8003352:	e767      	b.n	8003224 <_vfiprintf_r+0x94>
 8003354:	460c      	mov	r4, r1
 8003356:	2001      	movs	r0, #1
 8003358:	fb0c 3202 	mla	r2, ip, r2, r3
 800335c:	e7a5      	b.n	80032aa <_vfiprintf_r+0x11a>
 800335e:	2300      	movs	r3, #0
 8003360:	f04f 0c0a 	mov.w	ip, #10
 8003364:	4619      	mov	r1, r3
 8003366:	3401      	adds	r4, #1
 8003368:	9305      	str	r3, [sp, #20]
 800336a:	4620      	mov	r0, r4
 800336c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003370:	3a30      	subs	r2, #48	; 0x30
 8003372:	2a09      	cmp	r2, #9
 8003374:	d903      	bls.n	800337e <_vfiprintf_r+0x1ee>
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0c5      	beq.n	8003306 <_vfiprintf_r+0x176>
 800337a:	9105      	str	r1, [sp, #20]
 800337c:	e7c3      	b.n	8003306 <_vfiprintf_r+0x176>
 800337e:	4604      	mov	r4, r0
 8003380:	2301      	movs	r3, #1
 8003382:	fb0c 2101 	mla	r1, ip, r1, r2
 8003386:	e7f0      	b.n	800336a <_vfiprintf_r+0x1da>
 8003388:	ab03      	add	r3, sp, #12
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	462a      	mov	r2, r5
 800338e:	4630      	mov	r0, r6
 8003390:	4b16      	ldr	r3, [pc, #88]	; (80033ec <_vfiprintf_r+0x25c>)
 8003392:	a904      	add	r1, sp, #16
 8003394:	f3af 8000 	nop.w
 8003398:	4607      	mov	r7, r0
 800339a:	1c78      	adds	r0, r7, #1
 800339c:	d1d6      	bne.n	800334c <_vfiprintf_r+0x1bc>
 800339e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033a0:	07d9      	lsls	r1, r3, #31
 80033a2:	d405      	bmi.n	80033b0 <_vfiprintf_r+0x220>
 80033a4:	89ab      	ldrh	r3, [r5, #12]
 80033a6:	059a      	lsls	r2, r3, #22
 80033a8:	d402      	bmi.n	80033b0 <_vfiprintf_r+0x220>
 80033aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033ac:	f7ff fe33 	bl	8003016 <__retarget_lock_release_recursive>
 80033b0:	89ab      	ldrh	r3, [r5, #12]
 80033b2:	065b      	lsls	r3, r3, #25
 80033b4:	f53f af12 	bmi.w	80031dc <_vfiprintf_r+0x4c>
 80033b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033ba:	e711      	b.n	80031e0 <_vfiprintf_r+0x50>
 80033bc:	ab03      	add	r3, sp, #12
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	462a      	mov	r2, r5
 80033c2:	4630      	mov	r0, r6
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <_vfiprintf_r+0x25c>)
 80033c6:	a904      	add	r1, sp, #16
 80033c8:	f000 f882 	bl	80034d0 <_printf_i>
 80033cc:	e7e4      	b.n	8003398 <_vfiprintf_r+0x208>
 80033ce:	bf00      	nop
 80033d0:	08003e3c 	.word	0x08003e3c
 80033d4:	08003e5c 	.word	0x08003e5c
 80033d8:	08003e1c 	.word	0x08003e1c
 80033dc:	08003e7c 	.word	0x08003e7c
 80033e0:	08003e82 	.word	0x08003e82
 80033e4:	08003e86 	.word	0x08003e86
 80033e8:	00000000 	.word	0x00000000
 80033ec:	0800316b 	.word	0x0800316b

080033f0 <_printf_common>:
 80033f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033f4:	4616      	mov	r6, r2
 80033f6:	4699      	mov	r9, r3
 80033f8:	688a      	ldr	r2, [r1, #8]
 80033fa:	690b      	ldr	r3, [r1, #16]
 80033fc:	4607      	mov	r7, r0
 80033fe:	4293      	cmp	r3, r2
 8003400:	bfb8      	it	lt
 8003402:	4613      	movlt	r3, r2
 8003404:	6033      	str	r3, [r6, #0]
 8003406:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800340a:	460c      	mov	r4, r1
 800340c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003410:	b10a      	cbz	r2, 8003416 <_printf_common+0x26>
 8003412:	3301      	adds	r3, #1
 8003414:	6033      	str	r3, [r6, #0]
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	0699      	lsls	r1, r3, #26
 800341a:	bf42      	ittt	mi
 800341c:	6833      	ldrmi	r3, [r6, #0]
 800341e:	3302      	addmi	r3, #2
 8003420:	6033      	strmi	r3, [r6, #0]
 8003422:	6825      	ldr	r5, [r4, #0]
 8003424:	f015 0506 	ands.w	r5, r5, #6
 8003428:	d106      	bne.n	8003438 <_printf_common+0x48>
 800342a:	f104 0a19 	add.w	sl, r4, #25
 800342e:	68e3      	ldr	r3, [r4, #12]
 8003430:	6832      	ldr	r2, [r6, #0]
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	42ab      	cmp	r3, r5
 8003436:	dc28      	bgt.n	800348a <_printf_common+0x9a>
 8003438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800343c:	1e13      	subs	r3, r2, #0
 800343e:	6822      	ldr	r2, [r4, #0]
 8003440:	bf18      	it	ne
 8003442:	2301      	movne	r3, #1
 8003444:	0692      	lsls	r2, r2, #26
 8003446:	d42d      	bmi.n	80034a4 <_printf_common+0xb4>
 8003448:	4649      	mov	r1, r9
 800344a:	4638      	mov	r0, r7
 800344c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003450:	47c0      	blx	r8
 8003452:	3001      	adds	r0, #1
 8003454:	d020      	beq.n	8003498 <_printf_common+0xa8>
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	68e5      	ldr	r5, [r4, #12]
 800345a:	f003 0306 	and.w	r3, r3, #6
 800345e:	2b04      	cmp	r3, #4
 8003460:	bf18      	it	ne
 8003462:	2500      	movne	r5, #0
 8003464:	6832      	ldr	r2, [r6, #0]
 8003466:	f04f 0600 	mov.w	r6, #0
 800346a:	68a3      	ldr	r3, [r4, #8]
 800346c:	bf08      	it	eq
 800346e:	1aad      	subeq	r5, r5, r2
 8003470:	6922      	ldr	r2, [r4, #16]
 8003472:	bf08      	it	eq
 8003474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003478:	4293      	cmp	r3, r2
 800347a:	bfc4      	itt	gt
 800347c:	1a9b      	subgt	r3, r3, r2
 800347e:	18ed      	addgt	r5, r5, r3
 8003480:	341a      	adds	r4, #26
 8003482:	42b5      	cmp	r5, r6
 8003484:	d11a      	bne.n	80034bc <_printf_common+0xcc>
 8003486:	2000      	movs	r0, #0
 8003488:	e008      	b.n	800349c <_printf_common+0xac>
 800348a:	2301      	movs	r3, #1
 800348c:	4652      	mov	r2, sl
 800348e:	4649      	mov	r1, r9
 8003490:	4638      	mov	r0, r7
 8003492:	47c0      	blx	r8
 8003494:	3001      	adds	r0, #1
 8003496:	d103      	bne.n	80034a0 <_printf_common+0xb0>
 8003498:	f04f 30ff 	mov.w	r0, #4294967295
 800349c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034a0:	3501      	adds	r5, #1
 80034a2:	e7c4      	b.n	800342e <_printf_common+0x3e>
 80034a4:	2030      	movs	r0, #48	; 0x30
 80034a6:	18e1      	adds	r1, r4, r3
 80034a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034b2:	4422      	add	r2, r4
 80034b4:	3302      	adds	r3, #2
 80034b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034ba:	e7c5      	b.n	8003448 <_printf_common+0x58>
 80034bc:	2301      	movs	r3, #1
 80034be:	4622      	mov	r2, r4
 80034c0:	4649      	mov	r1, r9
 80034c2:	4638      	mov	r0, r7
 80034c4:	47c0      	blx	r8
 80034c6:	3001      	adds	r0, #1
 80034c8:	d0e6      	beq.n	8003498 <_printf_common+0xa8>
 80034ca:	3601      	adds	r6, #1
 80034cc:	e7d9      	b.n	8003482 <_printf_common+0x92>
	...

080034d0 <_printf_i>:
 80034d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034d4:	7e0f      	ldrb	r7, [r1, #24]
 80034d6:	4691      	mov	r9, r2
 80034d8:	2f78      	cmp	r7, #120	; 0x78
 80034da:	4680      	mov	r8, r0
 80034dc:	460c      	mov	r4, r1
 80034de:	469a      	mov	sl, r3
 80034e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80034e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80034e6:	d807      	bhi.n	80034f8 <_printf_i+0x28>
 80034e8:	2f62      	cmp	r7, #98	; 0x62
 80034ea:	d80a      	bhi.n	8003502 <_printf_i+0x32>
 80034ec:	2f00      	cmp	r7, #0
 80034ee:	f000 80d9 	beq.w	80036a4 <_printf_i+0x1d4>
 80034f2:	2f58      	cmp	r7, #88	; 0x58
 80034f4:	f000 80a4 	beq.w	8003640 <_printf_i+0x170>
 80034f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003500:	e03a      	b.n	8003578 <_printf_i+0xa8>
 8003502:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003506:	2b15      	cmp	r3, #21
 8003508:	d8f6      	bhi.n	80034f8 <_printf_i+0x28>
 800350a:	a101      	add	r1, pc, #4	; (adr r1, 8003510 <_printf_i+0x40>)
 800350c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003510:	08003569 	.word	0x08003569
 8003514:	0800357d 	.word	0x0800357d
 8003518:	080034f9 	.word	0x080034f9
 800351c:	080034f9 	.word	0x080034f9
 8003520:	080034f9 	.word	0x080034f9
 8003524:	080034f9 	.word	0x080034f9
 8003528:	0800357d 	.word	0x0800357d
 800352c:	080034f9 	.word	0x080034f9
 8003530:	080034f9 	.word	0x080034f9
 8003534:	080034f9 	.word	0x080034f9
 8003538:	080034f9 	.word	0x080034f9
 800353c:	0800368b 	.word	0x0800368b
 8003540:	080035ad 	.word	0x080035ad
 8003544:	0800366d 	.word	0x0800366d
 8003548:	080034f9 	.word	0x080034f9
 800354c:	080034f9 	.word	0x080034f9
 8003550:	080036ad 	.word	0x080036ad
 8003554:	080034f9 	.word	0x080034f9
 8003558:	080035ad 	.word	0x080035ad
 800355c:	080034f9 	.word	0x080034f9
 8003560:	080034f9 	.word	0x080034f9
 8003564:	08003675 	.word	0x08003675
 8003568:	682b      	ldr	r3, [r5, #0]
 800356a:	1d1a      	adds	r2, r3, #4
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	602a      	str	r2, [r5, #0]
 8003570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003578:	2301      	movs	r3, #1
 800357a:	e0a4      	b.n	80036c6 <_printf_i+0x1f6>
 800357c:	6820      	ldr	r0, [r4, #0]
 800357e:	6829      	ldr	r1, [r5, #0]
 8003580:	0606      	lsls	r6, r0, #24
 8003582:	f101 0304 	add.w	r3, r1, #4
 8003586:	d50a      	bpl.n	800359e <_printf_i+0xce>
 8003588:	680e      	ldr	r6, [r1, #0]
 800358a:	602b      	str	r3, [r5, #0]
 800358c:	2e00      	cmp	r6, #0
 800358e:	da03      	bge.n	8003598 <_printf_i+0xc8>
 8003590:	232d      	movs	r3, #45	; 0x2d
 8003592:	4276      	negs	r6, r6
 8003594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003598:	230a      	movs	r3, #10
 800359a:	485e      	ldr	r0, [pc, #376]	; (8003714 <_printf_i+0x244>)
 800359c:	e019      	b.n	80035d2 <_printf_i+0x102>
 800359e:	680e      	ldr	r6, [r1, #0]
 80035a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035a4:	602b      	str	r3, [r5, #0]
 80035a6:	bf18      	it	ne
 80035a8:	b236      	sxthne	r6, r6
 80035aa:	e7ef      	b.n	800358c <_printf_i+0xbc>
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	6820      	ldr	r0, [r4, #0]
 80035b0:	1d19      	adds	r1, r3, #4
 80035b2:	6029      	str	r1, [r5, #0]
 80035b4:	0601      	lsls	r1, r0, #24
 80035b6:	d501      	bpl.n	80035bc <_printf_i+0xec>
 80035b8:	681e      	ldr	r6, [r3, #0]
 80035ba:	e002      	b.n	80035c2 <_printf_i+0xf2>
 80035bc:	0646      	lsls	r6, r0, #25
 80035be:	d5fb      	bpl.n	80035b8 <_printf_i+0xe8>
 80035c0:	881e      	ldrh	r6, [r3, #0]
 80035c2:	2f6f      	cmp	r7, #111	; 0x6f
 80035c4:	bf0c      	ite	eq
 80035c6:	2308      	moveq	r3, #8
 80035c8:	230a      	movne	r3, #10
 80035ca:	4852      	ldr	r0, [pc, #328]	; (8003714 <_printf_i+0x244>)
 80035cc:	2100      	movs	r1, #0
 80035ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035d2:	6865      	ldr	r5, [r4, #4]
 80035d4:	2d00      	cmp	r5, #0
 80035d6:	bfa8      	it	ge
 80035d8:	6821      	ldrge	r1, [r4, #0]
 80035da:	60a5      	str	r5, [r4, #8]
 80035dc:	bfa4      	itt	ge
 80035de:	f021 0104 	bicge.w	r1, r1, #4
 80035e2:	6021      	strge	r1, [r4, #0]
 80035e4:	b90e      	cbnz	r6, 80035ea <_printf_i+0x11a>
 80035e6:	2d00      	cmp	r5, #0
 80035e8:	d04d      	beq.n	8003686 <_printf_i+0x1b6>
 80035ea:	4615      	mov	r5, r2
 80035ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80035f0:	fb03 6711 	mls	r7, r3, r1, r6
 80035f4:	5dc7      	ldrb	r7, [r0, r7]
 80035f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80035fa:	4637      	mov	r7, r6
 80035fc:	42bb      	cmp	r3, r7
 80035fe:	460e      	mov	r6, r1
 8003600:	d9f4      	bls.n	80035ec <_printf_i+0x11c>
 8003602:	2b08      	cmp	r3, #8
 8003604:	d10b      	bne.n	800361e <_printf_i+0x14e>
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	07de      	lsls	r6, r3, #31
 800360a:	d508      	bpl.n	800361e <_printf_i+0x14e>
 800360c:	6923      	ldr	r3, [r4, #16]
 800360e:	6861      	ldr	r1, [r4, #4]
 8003610:	4299      	cmp	r1, r3
 8003612:	bfde      	ittt	le
 8003614:	2330      	movle	r3, #48	; 0x30
 8003616:	f805 3c01 	strble.w	r3, [r5, #-1]
 800361a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800361e:	1b52      	subs	r2, r2, r5
 8003620:	6122      	str	r2, [r4, #16]
 8003622:	464b      	mov	r3, r9
 8003624:	4621      	mov	r1, r4
 8003626:	4640      	mov	r0, r8
 8003628:	f8cd a000 	str.w	sl, [sp]
 800362c:	aa03      	add	r2, sp, #12
 800362e:	f7ff fedf 	bl	80033f0 <_printf_common>
 8003632:	3001      	adds	r0, #1
 8003634:	d14c      	bne.n	80036d0 <_printf_i+0x200>
 8003636:	f04f 30ff 	mov.w	r0, #4294967295
 800363a:	b004      	add	sp, #16
 800363c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003640:	4834      	ldr	r0, [pc, #208]	; (8003714 <_printf_i+0x244>)
 8003642:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003646:	6829      	ldr	r1, [r5, #0]
 8003648:	6823      	ldr	r3, [r4, #0]
 800364a:	f851 6b04 	ldr.w	r6, [r1], #4
 800364e:	6029      	str	r1, [r5, #0]
 8003650:	061d      	lsls	r5, r3, #24
 8003652:	d514      	bpl.n	800367e <_printf_i+0x1ae>
 8003654:	07df      	lsls	r7, r3, #31
 8003656:	bf44      	itt	mi
 8003658:	f043 0320 	orrmi.w	r3, r3, #32
 800365c:	6023      	strmi	r3, [r4, #0]
 800365e:	b91e      	cbnz	r6, 8003668 <_printf_i+0x198>
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	f023 0320 	bic.w	r3, r3, #32
 8003666:	6023      	str	r3, [r4, #0]
 8003668:	2310      	movs	r3, #16
 800366a:	e7af      	b.n	80035cc <_printf_i+0xfc>
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	f043 0320 	orr.w	r3, r3, #32
 8003672:	6023      	str	r3, [r4, #0]
 8003674:	2378      	movs	r3, #120	; 0x78
 8003676:	4828      	ldr	r0, [pc, #160]	; (8003718 <_printf_i+0x248>)
 8003678:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800367c:	e7e3      	b.n	8003646 <_printf_i+0x176>
 800367e:	0659      	lsls	r1, r3, #25
 8003680:	bf48      	it	mi
 8003682:	b2b6      	uxthmi	r6, r6
 8003684:	e7e6      	b.n	8003654 <_printf_i+0x184>
 8003686:	4615      	mov	r5, r2
 8003688:	e7bb      	b.n	8003602 <_printf_i+0x132>
 800368a:	682b      	ldr	r3, [r5, #0]
 800368c:	6826      	ldr	r6, [r4, #0]
 800368e:	1d18      	adds	r0, r3, #4
 8003690:	6961      	ldr	r1, [r4, #20]
 8003692:	6028      	str	r0, [r5, #0]
 8003694:	0635      	lsls	r5, r6, #24
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	d501      	bpl.n	800369e <_printf_i+0x1ce>
 800369a:	6019      	str	r1, [r3, #0]
 800369c:	e002      	b.n	80036a4 <_printf_i+0x1d4>
 800369e:	0670      	lsls	r0, r6, #25
 80036a0:	d5fb      	bpl.n	800369a <_printf_i+0x1ca>
 80036a2:	8019      	strh	r1, [r3, #0]
 80036a4:	2300      	movs	r3, #0
 80036a6:	4615      	mov	r5, r2
 80036a8:	6123      	str	r3, [r4, #16]
 80036aa:	e7ba      	b.n	8003622 <_printf_i+0x152>
 80036ac:	682b      	ldr	r3, [r5, #0]
 80036ae:	2100      	movs	r1, #0
 80036b0:	1d1a      	adds	r2, r3, #4
 80036b2:	602a      	str	r2, [r5, #0]
 80036b4:	681d      	ldr	r5, [r3, #0]
 80036b6:	6862      	ldr	r2, [r4, #4]
 80036b8:	4628      	mov	r0, r5
 80036ba:	f000 fa9b 	bl	8003bf4 <memchr>
 80036be:	b108      	cbz	r0, 80036c4 <_printf_i+0x1f4>
 80036c0:	1b40      	subs	r0, r0, r5
 80036c2:	6060      	str	r0, [r4, #4]
 80036c4:	6863      	ldr	r3, [r4, #4]
 80036c6:	6123      	str	r3, [r4, #16]
 80036c8:	2300      	movs	r3, #0
 80036ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036ce:	e7a8      	b.n	8003622 <_printf_i+0x152>
 80036d0:	462a      	mov	r2, r5
 80036d2:	4649      	mov	r1, r9
 80036d4:	4640      	mov	r0, r8
 80036d6:	6923      	ldr	r3, [r4, #16]
 80036d8:	47d0      	blx	sl
 80036da:	3001      	adds	r0, #1
 80036dc:	d0ab      	beq.n	8003636 <_printf_i+0x166>
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	079b      	lsls	r3, r3, #30
 80036e2:	d413      	bmi.n	800370c <_printf_i+0x23c>
 80036e4:	68e0      	ldr	r0, [r4, #12]
 80036e6:	9b03      	ldr	r3, [sp, #12]
 80036e8:	4298      	cmp	r0, r3
 80036ea:	bfb8      	it	lt
 80036ec:	4618      	movlt	r0, r3
 80036ee:	e7a4      	b.n	800363a <_printf_i+0x16a>
 80036f0:	2301      	movs	r3, #1
 80036f2:	4632      	mov	r2, r6
 80036f4:	4649      	mov	r1, r9
 80036f6:	4640      	mov	r0, r8
 80036f8:	47d0      	blx	sl
 80036fa:	3001      	adds	r0, #1
 80036fc:	d09b      	beq.n	8003636 <_printf_i+0x166>
 80036fe:	3501      	adds	r5, #1
 8003700:	68e3      	ldr	r3, [r4, #12]
 8003702:	9903      	ldr	r1, [sp, #12]
 8003704:	1a5b      	subs	r3, r3, r1
 8003706:	42ab      	cmp	r3, r5
 8003708:	dcf2      	bgt.n	80036f0 <_printf_i+0x220>
 800370a:	e7eb      	b.n	80036e4 <_printf_i+0x214>
 800370c:	2500      	movs	r5, #0
 800370e:	f104 0619 	add.w	r6, r4, #25
 8003712:	e7f5      	b.n	8003700 <_printf_i+0x230>
 8003714:	08003e8d 	.word	0x08003e8d
 8003718:	08003e9e 	.word	0x08003e9e

0800371c <_sbrk_r>:
 800371c:	b538      	push	{r3, r4, r5, lr}
 800371e:	2300      	movs	r3, #0
 8003720:	4d05      	ldr	r5, [pc, #20]	; (8003738 <_sbrk_r+0x1c>)
 8003722:	4604      	mov	r4, r0
 8003724:	4608      	mov	r0, r1
 8003726:	602b      	str	r3, [r5, #0]
 8003728:	f7fe fd80 	bl	800222c <_sbrk>
 800372c:	1c43      	adds	r3, r0, #1
 800372e:	d102      	bne.n	8003736 <_sbrk_r+0x1a>
 8003730:	682b      	ldr	r3, [r5, #0]
 8003732:	b103      	cbz	r3, 8003736 <_sbrk_r+0x1a>
 8003734:	6023      	str	r3, [r4, #0]
 8003736:	bd38      	pop	{r3, r4, r5, pc}
 8003738:	200000a0 	.word	0x200000a0

0800373c <__sread>:
 800373c:	b510      	push	{r4, lr}
 800373e:	460c      	mov	r4, r1
 8003740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003744:	f000 fab8 	bl	8003cb8 <_read_r>
 8003748:	2800      	cmp	r0, #0
 800374a:	bfab      	itete	ge
 800374c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800374e:	89a3      	ldrhlt	r3, [r4, #12]
 8003750:	181b      	addge	r3, r3, r0
 8003752:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003756:	bfac      	ite	ge
 8003758:	6563      	strge	r3, [r4, #84]	; 0x54
 800375a:	81a3      	strhlt	r3, [r4, #12]
 800375c:	bd10      	pop	{r4, pc}

0800375e <__swrite>:
 800375e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003762:	461f      	mov	r7, r3
 8003764:	898b      	ldrh	r3, [r1, #12]
 8003766:	4605      	mov	r5, r0
 8003768:	05db      	lsls	r3, r3, #23
 800376a:	460c      	mov	r4, r1
 800376c:	4616      	mov	r6, r2
 800376e:	d505      	bpl.n	800377c <__swrite+0x1e>
 8003770:	2302      	movs	r3, #2
 8003772:	2200      	movs	r2, #0
 8003774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003778:	f000 f9c4 	bl	8003b04 <_lseek_r>
 800377c:	89a3      	ldrh	r3, [r4, #12]
 800377e:	4632      	mov	r2, r6
 8003780:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003784:	81a3      	strh	r3, [r4, #12]
 8003786:	4628      	mov	r0, r5
 8003788:	463b      	mov	r3, r7
 800378a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800378e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003792:	f000 b869 	b.w	8003868 <_write_r>

08003796 <__sseek>:
 8003796:	b510      	push	{r4, lr}
 8003798:	460c      	mov	r4, r1
 800379a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800379e:	f000 f9b1 	bl	8003b04 <_lseek_r>
 80037a2:	1c43      	adds	r3, r0, #1
 80037a4:	89a3      	ldrh	r3, [r4, #12]
 80037a6:	bf15      	itete	ne
 80037a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80037aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80037ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80037b2:	81a3      	strheq	r3, [r4, #12]
 80037b4:	bf18      	it	ne
 80037b6:	81a3      	strhne	r3, [r4, #12]
 80037b8:	bd10      	pop	{r4, pc}

080037ba <__sclose>:
 80037ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037be:	f000 b8d3 	b.w	8003968 <_close_r>
	...

080037c4 <__swbuf_r>:
 80037c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c6:	460e      	mov	r6, r1
 80037c8:	4614      	mov	r4, r2
 80037ca:	4605      	mov	r5, r0
 80037cc:	b118      	cbz	r0, 80037d6 <__swbuf_r+0x12>
 80037ce:	6983      	ldr	r3, [r0, #24]
 80037d0:	b90b      	cbnz	r3, 80037d6 <__swbuf_r+0x12>
 80037d2:	f7ff fb81 	bl	8002ed8 <__sinit>
 80037d6:	4b21      	ldr	r3, [pc, #132]	; (800385c <__swbuf_r+0x98>)
 80037d8:	429c      	cmp	r4, r3
 80037da:	d12b      	bne.n	8003834 <__swbuf_r+0x70>
 80037dc:	686c      	ldr	r4, [r5, #4]
 80037de:	69a3      	ldr	r3, [r4, #24]
 80037e0:	60a3      	str	r3, [r4, #8]
 80037e2:	89a3      	ldrh	r3, [r4, #12]
 80037e4:	071a      	lsls	r2, r3, #28
 80037e6:	d52f      	bpl.n	8003848 <__swbuf_r+0x84>
 80037e8:	6923      	ldr	r3, [r4, #16]
 80037ea:	b36b      	cbz	r3, 8003848 <__swbuf_r+0x84>
 80037ec:	6923      	ldr	r3, [r4, #16]
 80037ee:	6820      	ldr	r0, [r4, #0]
 80037f0:	b2f6      	uxtb	r6, r6
 80037f2:	1ac0      	subs	r0, r0, r3
 80037f4:	6963      	ldr	r3, [r4, #20]
 80037f6:	4637      	mov	r7, r6
 80037f8:	4283      	cmp	r3, r0
 80037fa:	dc04      	bgt.n	8003806 <__swbuf_r+0x42>
 80037fc:	4621      	mov	r1, r4
 80037fe:	4628      	mov	r0, r5
 8003800:	f000 f944 	bl	8003a8c <_fflush_r>
 8003804:	bb30      	cbnz	r0, 8003854 <__swbuf_r+0x90>
 8003806:	68a3      	ldr	r3, [r4, #8]
 8003808:	3001      	adds	r0, #1
 800380a:	3b01      	subs	r3, #1
 800380c:	60a3      	str	r3, [r4, #8]
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	6022      	str	r2, [r4, #0]
 8003814:	701e      	strb	r6, [r3, #0]
 8003816:	6963      	ldr	r3, [r4, #20]
 8003818:	4283      	cmp	r3, r0
 800381a:	d004      	beq.n	8003826 <__swbuf_r+0x62>
 800381c:	89a3      	ldrh	r3, [r4, #12]
 800381e:	07db      	lsls	r3, r3, #31
 8003820:	d506      	bpl.n	8003830 <__swbuf_r+0x6c>
 8003822:	2e0a      	cmp	r6, #10
 8003824:	d104      	bne.n	8003830 <__swbuf_r+0x6c>
 8003826:	4621      	mov	r1, r4
 8003828:	4628      	mov	r0, r5
 800382a:	f000 f92f 	bl	8003a8c <_fflush_r>
 800382e:	b988      	cbnz	r0, 8003854 <__swbuf_r+0x90>
 8003830:	4638      	mov	r0, r7
 8003832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <__swbuf_r+0x9c>)
 8003836:	429c      	cmp	r4, r3
 8003838:	d101      	bne.n	800383e <__swbuf_r+0x7a>
 800383a:	68ac      	ldr	r4, [r5, #8]
 800383c:	e7cf      	b.n	80037de <__swbuf_r+0x1a>
 800383e:	4b09      	ldr	r3, [pc, #36]	; (8003864 <__swbuf_r+0xa0>)
 8003840:	429c      	cmp	r4, r3
 8003842:	bf08      	it	eq
 8003844:	68ec      	ldreq	r4, [r5, #12]
 8003846:	e7ca      	b.n	80037de <__swbuf_r+0x1a>
 8003848:	4621      	mov	r1, r4
 800384a:	4628      	mov	r0, r5
 800384c:	f000 f81e 	bl	800388c <__swsetup_r>
 8003850:	2800      	cmp	r0, #0
 8003852:	d0cb      	beq.n	80037ec <__swbuf_r+0x28>
 8003854:	f04f 37ff 	mov.w	r7, #4294967295
 8003858:	e7ea      	b.n	8003830 <__swbuf_r+0x6c>
 800385a:	bf00      	nop
 800385c:	08003e3c 	.word	0x08003e3c
 8003860:	08003e5c 	.word	0x08003e5c
 8003864:	08003e1c 	.word	0x08003e1c

08003868 <_write_r>:
 8003868:	b538      	push	{r3, r4, r5, lr}
 800386a:	4604      	mov	r4, r0
 800386c:	4608      	mov	r0, r1
 800386e:	4611      	mov	r1, r2
 8003870:	2200      	movs	r2, #0
 8003872:	4d05      	ldr	r5, [pc, #20]	; (8003888 <_write_r+0x20>)
 8003874:	602a      	str	r2, [r5, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	f7fe fc0c 	bl	8002094 <_write>
 800387c:	1c43      	adds	r3, r0, #1
 800387e:	d102      	bne.n	8003886 <_write_r+0x1e>
 8003880:	682b      	ldr	r3, [r5, #0]
 8003882:	b103      	cbz	r3, 8003886 <_write_r+0x1e>
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	bd38      	pop	{r3, r4, r5, pc}
 8003888:	200000a0 	.word	0x200000a0

0800388c <__swsetup_r>:
 800388c:	4b32      	ldr	r3, [pc, #200]	; (8003958 <__swsetup_r+0xcc>)
 800388e:	b570      	push	{r4, r5, r6, lr}
 8003890:	681d      	ldr	r5, [r3, #0]
 8003892:	4606      	mov	r6, r0
 8003894:	460c      	mov	r4, r1
 8003896:	b125      	cbz	r5, 80038a2 <__swsetup_r+0x16>
 8003898:	69ab      	ldr	r3, [r5, #24]
 800389a:	b913      	cbnz	r3, 80038a2 <__swsetup_r+0x16>
 800389c:	4628      	mov	r0, r5
 800389e:	f7ff fb1b 	bl	8002ed8 <__sinit>
 80038a2:	4b2e      	ldr	r3, [pc, #184]	; (800395c <__swsetup_r+0xd0>)
 80038a4:	429c      	cmp	r4, r3
 80038a6:	d10f      	bne.n	80038c8 <__swsetup_r+0x3c>
 80038a8:	686c      	ldr	r4, [r5, #4]
 80038aa:	89a3      	ldrh	r3, [r4, #12]
 80038ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038b0:	0719      	lsls	r1, r3, #28
 80038b2:	d42c      	bmi.n	800390e <__swsetup_r+0x82>
 80038b4:	06dd      	lsls	r5, r3, #27
 80038b6:	d411      	bmi.n	80038dc <__swsetup_r+0x50>
 80038b8:	2309      	movs	r3, #9
 80038ba:	6033      	str	r3, [r6, #0]
 80038bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80038c0:	f04f 30ff 	mov.w	r0, #4294967295
 80038c4:	81a3      	strh	r3, [r4, #12]
 80038c6:	e03e      	b.n	8003946 <__swsetup_r+0xba>
 80038c8:	4b25      	ldr	r3, [pc, #148]	; (8003960 <__swsetup_r+0xd4>)
 80038ca:	429c      	cmp	r4, r3
 80038cc:	d101      	bne.n	80038d2 <__swsetup_r+0x46>
 80038ce:	68ac      	ldr	r4, [r5, #8]
 80038d0:	e7eb      	b.n	80038aa <__swsetup_r+0x1e>
 80038d2:	4b24      	ldr	r3, [pc, #144]	; (8003964 <__swsetup_r+0xd8>)
 80038d4:	429c      	cmp	r4, r3
 80038d6:	bf08      	it	eq
 80038d8:	68ec      	ldreq	r4, [r5, #12]
 80038da:	e7e6      	b.n	80038aa <__swsetup_r+0x1e>
 80038dc:	0758      	lsls	r0, r3, #29
 80038de:	d512      	bpl.n	8003906 <__swsetup_r+0x7a>
 80038e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038e2:	b141      	cbz	r1, 80038f6 <__swsetup_r+0x6a>
 80038e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038e8:	4299      	cmp	r1, r3
 80038ea:	d002      	beq.n	80038f2 <__swsetup_r+0x66>
 80038ec:	4630      	mov	r0, r6
 80038ee:	f000 f99b 	bl	8003c28 <_free_r>
 80038f2:	2300      	movs	r3, #0
 80038f4:	6363      	str	r3, [r4, #52]	; 0x34
 80038f6:	89a3      	ldrh	r3, [r4, #12]
 80038f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038fc:	81a3      	strh	r3, [r4, #12]
 80038fe:	2300      	movs	r3, #0
 8003900:	6063      	str	r3, [r4, #4]
 8003902:	6923      	ldr	r3, [r4, #16]
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	89a3      	ldrh	r3, [r4, #12]
 8003908:	f043 0308 	orr.w	r3, r3, #8
 800390c:	81a3      	strh	r3, [r4, #12]
 800390e:	6923      	ldr	r3, [r4, #16]
 8003910:	b94b      	cbnz	r3, 8003926 <__swsetup_r+0x9a>
 8003912:	89a3      	ldrh	r3, [r4, #12]
 8003914:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391c:	d003      	beq.n	8003926 <__swsetup_r+0x9a>
 800391e:	4621      	mov	r1, r4
 8003920:	4630      	mov	r0, r6
 8003922:	f000 f927 	bl	8003b74 <__smakebuf_r>
 8003926:	89a0      	ldrh	r0, [r4, #12]
 8003928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800392c:	f010 0301 	ands.w	r3, r0, #1
 8003930:	d00a      	beq.n	8003948 <__swsetup_r+0xbc>
 8003932:	2300      	movs	r3, #0
 8003934:	60a3      	str	r3, [r4, #8]
 8003936:	6963      	ldr	r3, [r4, #20]
 8003938:	425b      	negs	r3, r3
 800393a:	61a3      	str	r3, [r4, #24]
 800393c:	6923      	ldr	r3, [r4, #16]
 800393e:	b943      	cbnz	r3, 8003952 <__swsetup_r+0xc6>
 8003940:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003944:	d1ba      	bne.n	80038bc <__swsetup_r+0x30>
 8003946:	bd70      	pop	{r4, r5, r6, pc}
 8003948:	0781      	lsls	r1, r0, #30
 800394a:	bf58      	it	pl
 800394c:	6963      	ldrpl	r3, [r4, #20]
 800394e:	60a3      	str	r3, [r4, #8]
 8003950:	e7f4      	b.n	800393c <__swsetup_r+0xb0>
 8003952:	2000      	movs	r0, #0
 8003954:	e7f7      	b.n	8003946 <__swsetup_r+0xba>
 8003956:	bf00      	nop
 8003958:	2000000c 	.word	0x2000000c
 800395c:	08003e3c 	.word	0x08003e3c
 8003960:	08003e5c 	.word	0x08003e5c
 8003964:	08003e1c 	.word	0x08003e1c

08003968 <_close_r>:
 8003968:	b538      	push	{r3, r4, r5, lr}
 800396a:	2300      	movs	r3, #0
 800396c:	4d05      	ldr	r5, [pc, #20]	; (8003984 <_close_r+0x1c>)
 800396e:	4604      	mov	r4, r0
 8003970:	4608      	mov	r0, r1
 8003972:	602b      	str	r3, [r5, #0]
 8003974:	f7fe fc2a 	bl	80021cc <_close>
 8003978:	1c43      	adds	r3, r0, #1
 800397a:	d102      	bne.n	8003982 <_close_r+0x1a>
 800397c:	682b      	ldr	r3, [r5, #0]
 800397e:	b103      	cbz	r3, 8003982 <_close_r+0x1a>
 8003980:	6023      	str	r3, [r4, #0]
 8003982:	bd38      	pop	{r3, r4, r5, pc}
 8003984:	200000a0 	.word	0x200000a0

08003988 <__sflush_r>:
 8003988:	898a      	ldrh	r2, [r1, #12]
 800398a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398c:	4605      	mov	r5, r0
 800398e:	0710      	lsls	r0, r2, #28
 8003990:	460c      	mov	r4, r1
 8003992:	d457      	bmi.n	8003a44 <__sflush_r+0xbc>
 8003994:	684b      	ldr	r3, [r1, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	dc04      	bgt.n	80039a4 <__sflush_r+0x1c>
 800399a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	dc01      	bgt.n	80039a4 <__sflush_r+0x1c>
 80039a0:	2000      	movs	r0, #0
 80039a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039a6:	2e00      	cmp	r6, #0
 80039a8:	d0fa      	beq.n	80039a0 <__sflush_r+0x18>
 80039aa:	2300      	movs	r3, #0
 80039ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80039b0:	682f      	ldr	r7, [r5, #0]
 80039b2:	602b      	str	r3, [r5, #0]
 80039b4:	d032      	beq.n	8003a1c <__sflush_r+0x94>
 80039b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039b8:	89a3      	ldrh	r3, [r4, #12]
 80039ba:	075a      	lsls	r2, r3, #29
 80039bc:	d505      	bpl.n	80039ca <__sflush_r+0x42>
 80039be:	6863      	ldr	r3, [r4, #4]
 80039c0:	1ac0      	subs	r0, r0, r3
 80039c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039c4:	b10b      	cbz	r3, 80039ca <__sflush_r+0x42>
 80039c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039c8:	1ac0      	subs	r0, r0, r3
 80039ca:	2300      	movs	r3, #0
 80039cc:	4602      	mov	r2, r0
 80039ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039d0:	4628      	mov	r0, r5
 80039d2:	6a21      	ldr	r1, [r4, #32]
 80039d4:	47b0      	blx	r6
 80039d6:	1c43      	adds	r3, r0, #1
 80039d8:	89a3      	ldrh	r3, [r4, #12]
 80039da:	d106      	bne.n	80039ea <__sflush_r+0x62>
 80039dc:	6829      	ldr	r1, [r5, #0]
 80039de:	291d      	cmp	r1, #29
 80039e0:	d82c      	bhi.n	8003a3c <__sflush_r+0xb4>
 80039e2:	4a29      	ldr	r2, [pc, #164]	; (8003a88 <__sflush_r+0x100>)
 80039e4:	40ca      	lsrs	r2, r1
 80039e6:	07d6      	lsls	r6, r2, #31
 80039e8:	d528      	bpl.n	8003a3c <__sflush_r+0xb4>
 80039ea:	2200      	movs	r2, #0
 80039ec:	6062      	str	r2, [r4, #4]
 80039ee:	6922      	ldr	r2, [r4, #16]
 80039f0:	04d9      	lsls	r1, r3, #19
 80039f2:	6022      	str	r2, [r4, #0]
 80039f4:	d504      	bpl.n	8003a00 <__sflush_r+0x78>
 80039f6:	1c42      	adds	r2, r0, #1
 80039f8:	d101      	bne.n	80039fe <__sflush_r+0x76>
 80039fa:	682b      	ldr	r3, [r5, #0]
 80039fc:	b903      	cbnz	r3, 8003a00 <__sflush_r+0x78>
 80039fe:	6560      	str	r0, [r4, #84]	; 0x54
 8003a00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a02:	602f      	str	r7, [r5, #0]
 8003a04:	2900      	cmp	r1, #0
 8003a06:	d0cb      	beq.n	80039a0 <__sflush_r+0x18>
 8003a08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a0c:	4299      	cmp	r1, r3
 8003a0e:	d002      	beq.n	8003a16 <__sflush_r+0x8e>
 8003a10:	4628      	mov	r0, r5
 8003a12:	f000 f909 	bl	8003c28 <_free_r>
 8003a16:	2000      	movs	r0, #0
 8003a18:	6360      	str	r0, [r4, #52]	; 0x34
 8003a1a:	e7c2      	b.n	80039a2 <__sflush_r+0x1a>
 8003a1c:	6a21      	ldr	r1, [r4, #32]
 8003a1e:	2301      	movs	r3, #1
 8003a20:	4628      	mov	r0, r5
 8003a22:	47b0      	blx	r6
 8003a24:	1c41      	adds	r1, r0, #1
 8003a26:	d1c7      	bne.n	80039b8 <__sflush_r+0x30>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0c4      	beq.n	80039b8 <__sflush_r+0x30>
 8003a2e:	2b1d      	cmp	r3, #29
 8003a30:	d001      	beq.n	8003a36 <__sflush_r+0xae>
 8003a32:	2b16      	cmp	r3, #22
 8003a34:	d101      	bne.n	8003a3a <__sflush_r+0xb2>
 8003a36:	602f      	str	r7, [r5, #0]
 8003a38:	e7b2      	b.n	80039a0 <__sflush_r+0x18>
 8003a3a:	89a3      	ldrh	r3, [r4, #12]
 8003a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a40:	81a3      	strh	r3, [r4, #12]
 8003a42:	e7ae      	b.n	80039a2 <__sflush_r+0x1a>
 8003a44:	690f      	ldr	r7, [r1, #16]
 8003a46:	2f00      	cmp	r7, #0
 8003a48:	d0aa      	beq.n	80039a0 <__sflush_r+0x18>
 8003a4a:	0793      	lsls	r3, r2, #30
 8003a4c:	bf18      	it	ne
 8003a4e:	2300      	movne	r3, #0
 8003a50:	680e      	ldr	r6, [r1, #0]
 8003a52:	bf08      	it	eq
 8003a54:	694b      	ldreq	r3, [r1, #20]
 8003a56:	1bf6      	subs	r6, r6, r7
 8003a58:	600f      	str	r7, [r1, #0]
 8003a5a:	608b      	str	r3, [r1, #8]
 8003a5c:	2e00      	cmp	r6, #0
 8003a5e:	dd9f      	ble.n	80039a0 <__sflush_r+0x18>
 8003a60:	4633      	mov	r3, r6
 8003a62:	463a      	mov	r2, r7
 8003a64:	4628      	mov	r0, r5
 8003a66:	6a21      	ldr	r1, [r4, #32]
 8003a68:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003a6c:	47e0      	blx	ip
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	dc06      	bgt.n	8003a80 <__sflush_r+0xf8>
 8003a72:	89a3      	ldrh	r3, [r4, #12]
 8003a74:	f04f 30ff 	mov.w	r0, #4294967295
 8003a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a7c:	81a3      	strh	r3, [r4, #12]
 8003a7e:	e790      	b.n	80039a2 <__sflush_r+0x1a>
 8003a80:	4407      	add	r7, r0
 8003a82:	1a36      	subs	r6, r6, r0
 8003a84:	e7ea      	b.n	8003a5c <__sflush_r+0xd4>
 8003a86:	bf00      	nop
 8003a88:	20400001 	.word	0x20400001

08003a8c <_fflush_r>:
 8003a8c:	b538      	push	{r3, r4, r5, lr}
 8003a8e:	690b      	ldr	r3, [r1, #16]
 8003a90:	4605      	mov	r5, r0
 8003a92:	460c      	mov	r4, r1
 8003a94:	b913      	cbnz	r3, 8003a9c <_fflush_r+0x10>
 8003a96:	2500      	movs	r5, #0
 8003a98:	4628      	mov	r0, r5
 8003a9a:	bd38      	pop	{r3, r4, r5, pc}
 8003a9c:	b118      	cbz	r0, 8003aa6 <_fflush_r+0x1a>
 8003a9e:	6983      	ldr	r3, [r0, #24]
 8003aa0:	b90b      	cbnz	r3, 8003aa6 <_fflush_r+0x1a>
 8003aa2:	f7ff fa19 	bl	8002ed8 <__sinit>
 8003aa6:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <_fflush_r+0x6c>)
 8003aa8:	429c      	cmp	r4, r3
 8003aaa:	d11b      	bne.n	8003ae4 <_fflush_r+0x58>
 8003aac:	686c      	ldr	r4, [r5, #4]
 8003aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0ef      	beq.n	8003a96 <_fflush_r+0xa>
 8003ab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ab8:	07d0      	lsls	r0, r2, #31
 8003aba:	d404      	bmi.n	8003ac6 <_fflush_r+0x3a>
 8003abc:	0599      	lsls	r1, r3, #22
 8003abe:	d402      	bmi.n	8003ac6 <_fflush_r+0x3a>
 8003ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ac2:	f7ff faa7 	bl	8003014 <__retarget_lock_acquire_recursive>
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	4621      	mov	r1, r4
 8003aca:	f7ff ff5d 	bl	8003988 <__sflush_r>
 8003ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ad0:	4605      	mov	r5, r0
 8003ad2:	07da      	lsls	r2, r3, #31
 8003ad4:	d4e0      	bmi.n	8003a98 <_fflush_r+0xc>
 8003ad6:	89a3      	ldrh	r3, [r4, #12]
 8003ad8:	059b      	lsls	r3, r3, #22
 8003ada:	d4dd      	bmi.n	8003a98 <_fflush_r+0xc>
 8003adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ade:	f7ff fa9a 	bl	8003016 <__retarget_lock_release_recursive>
 8003ae2:	e7d9      	b.n	8003a98 <_fflush_r+0xc>
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <_fflush_r+0x70>)
 8003ae6:	429c      	cmp	r4, r3
 8003ae8:	d101      	bne.n	8003aee <_fflush_r+0x62>
 8003aea:	68ac      	ldr	r4, [r5, #8]
 8003aec:	e7df      	b.n	8003aae <_fflush_r+0x22>
 8003aee:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <_fflush_r+0x74>)
 8003af0:	429c      	cmp	r4, r3
 8003af2:	bf08      	it	eq
 8003af4:	68ec      	ldreq	r4, [r5, #12]
 8003af6:	e7da      	b.n	8003aae <_fflush_r+0x22>
 8003af8:	08003e3c 	.word	0x08003e3c
 8003afc:	08003e5c 	.word	0x08003e5c
 8003b00:	08003e1c 	.word	0x08003e1c

08003b04 <_lseek_r>:
 8003b04:	b538      	push	{r3, r4, r5, lr}
 8003b06:	4604      	mov	r4, r0
 8003b08:	4608      	mov	r0, r1
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	4d05      	ldr	r5, [pc, #20]	; (8003b24 <_lseek_r+0x20>)
 8003b10:	602a      	str	r2, [r5, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f7fe fb7e 	bl	8002214 <_lseek>
 8003b18:	1c43      	adds	r3, r0, #1
 8003b1a:	d102      	bne.n	8003b22 <_lseek_r+0x1e>
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	b103      	cbz	r3, 8003b22 <_lseek_r+0x1e>
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	bd38      	pop	{r3, r4, r5, pc}
 8003b24:	200000a0 	.word	0x200000a0

08003b28 <__swhatbuf_r>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	460e      	mov	r6, r1
 8003b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b30:	4614      	mov	r4, r2
 8003b32:	2900      	cmp	r1, #0
 8003b34:	461d      	mov	r5, r3
 8003b36:	b096      	sub	sp, #88	; 0x58
 8003b38:	da08      	bge.n	8003b4c <__swhatbuf_r+0x24>
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003b40:	602a      	str	r2, [r5, #0]
 8003b42:	061a      	lsls	r2, r3, #24
 8003b44:	d410      	bmi.n	8003b68 <__swhatbuf_r+0x40>
 8003b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b4a:	e00e      	b.n	8003b6a <__swhatbuf_r+0x42>
 8003b4c:	466a      	mov	r2, sp
 8003b4e:	f000 f8c5 	bl	8003cdc <_fstat_r>
 8003b52:	2800      	cmp	r0, #0
 8003b54:	dbf1      	blt.n	8003b3a <__swhatbuf_r+0x12>
 8003b56:	9a01      	ldr	r2, [sp, #4]
 8003b58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b60:	425a      	negs	r2, r3
 8003b62:	415a      	adcs	r2, r3
 8003b64:	602a      	str	r2, [r5, #0]
 8003b66:	e7ee      	b.n	8003b46 <__swhatbuf_r+0x1e>
 8003b68:	2340      	movs	r3, #64	; 0x40
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	b016      	add	sp, #88	; 0x58
 8003b70:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b74 <__smakebuf_r>:
 8003b74:	898b      	ldrh	r3, [r1, #12]
 8003b76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b78:	079d      	lsls	r5, r3, #30
 8003b7a:	4606      	mov	r6, r0
 8003b7c:	460c      	mov	r4, r1
 8003b7e:	d507      	bpl.n	8003b90 <__smakebuf_r+0x1c>
 8003b80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b84:	6023      	str	r3, [r4, #0]
 8003b86:	6123      	str	r3, [r4, #16]
 8003b88:	2301      	movs	r3, #1
 8003b8a:	6163      	str	r3, [r4, #20]
 8003b8c:	b002      	add	sp, #8
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
 8003b90:	466a      	mov	r2, sp
 8003b92:	ab01      	add	r3, sp, #4
 8003b94:	f7ff ffc8 	bl	8003b28 <__swhatbuf_r>
 8003b98:	9900      	ldr	r1, [sp, #0]
 8003b9a:	4605      	mov	r5, r0
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	f7ff fa5b 	bl	8003058 <_malloc_r>
 8003ba2:	b948      	cbnz	r0, 8003bb8 <__smakebuf_r+0x44>
 8003ba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ba8:	059a      	lsls	r2, r3, #22
 8003baa:	d4ef      	bmi.n	8003b8c <__smakebuf_r+0x18>
 8003bac:	f023 0303 	bic.w	r3, r3, #3
 8003bb0:	f043 0302 	orr.w	r3, r3, #2
 8003bb4:	81a3      	strh	r3, [r4, #12]
 8003bb6:	e7e3      	b.n	8003b80 <__smakebuf_r+0xc>
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <__smakebuf_r+0x7c>)
 8003bba:	62b3      	str	r3, [r6, #40]	; 0x28
 8003bbc:	89a3      	ldrh	r3, [r4, #12]
 8003bbe:	6020      	str	r0, [r4, #0]
 8003bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc4:	81a3      	strh	r3, [r4, #12]
 8003bc6:	9b00      	ldr	r3, [sp, #0]
 8003bc8:	6120      	str	r0, [r4, #16]
 8003bca:	6163      	str	r3, [r4, #20]
 8003bcc:	9b01      	ldr	r3, [sp, #4]
 8003bce:	b15b      	cbz	r3, 8003be8 <__smakebuf_r+0x74>
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bd6:	f000 f893 	bl	8003d00 <_isatty_r>
 8003bda:	b128      	cbz	r0, 8003be8 <__smakebuf_r+0x74>
 8003bdc:	89a3      	ldrh	r3, [r4, #12]
 8003bde:	f023 0303 	bic.w	r3, r3, #3
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	81a3      	strh	r3, [r4, #12]
 8003be8:	89a0      	ldrh	r0, [r4, #12]
 8003bea:	4305      	orrs	r5, r0
 8003bec:	81a5      	strh	r5, [r4, #12]
 8003bee:	e7cd      	b.n	8003b8c <__smakebuf_r+0x18>
 8003bf0:	08002e71 	.word	0x08002e71

08003bf4 <memchr>:
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	b510      	push	{r4, lr}
 8003bf8:	b2c9      	uxtb	r1, r1
 8003bfa:	4402      	add	r2, r0
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	d101      	bne.n	8003c06 <memchr+0x12>
 8003c02:	2000      	movs	r0, #0
 8003c04:	e003      	b.n	8003c0e <memchr+0x1a>
 8003c06:	7804      	ldrb	r4, [r0, #0]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	428c      	cmp	r4, r1
 8003c0c:	d1f6      	bne.n	8003bfc <memchr+0x8>
 8003c0e:	bd10      	pop	{r4, pc}

08003c10 <__malloc_lock>:
 8003c10:	4801      	ldr	r0, [pc, #4]	; (8003c18 <__malloc_lock+0x8>)
 8003c12:	f7ff b9ff 	b.w	8003014 <__retarget_lock_acquire_recursive>
 8003c16:	bf00      	nop
 8003c18:	20000094 	.word	0x20000094

08003c1c <__malloc_unlock>:
 8003c1c:	4801      	ldr	r0, [pc, #4]	; (8003c24 <__malloc_unlock+0x8>)
 8003c1e:	f7ff b9fa 	b.w	8003016 <__retarget_lock_release_recursive>
 8003c22:	bf00      	nop
 8003c24:	20000094 	.word	0x20000094

08003c28 <_free_r>:
 8003c28:	b538      	push	{r3, r4, r5, lr}
 8003c2a:	4605      	mov	r5, r0
 8003c2c:	2900      	cmp	r1, #0
 8003c2e:	d040      	beq.n	8003cb2 <_free_r+0x8a>
 8003c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c34:	1f0c      	subs	r4, r1, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	bfb8      	it	lt
 8003c3a:	18e4      	addlt	r4, r4, r3
 8003c3c:	f7ff ffe8 	bl	8003c10 <__malloc_lock>
 8003c40:	4a1c      	ldr	r2, [pc, #112]	; (8003cb4 <_free_r+0x8c>)
 8003c42:	6813      	ldr	r3, [r2, #0]
 8003c44:	b933      	cbnz	r3, 8003c54 <_free_r+0x2c>
 8003c46:	6063      	str	r3, [r4, #4]
 8003c48:	6014      	str	r4, [r2, #0]
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c50:	f7ff bfe4 	b.w	8003c1c <__malloc_unlock>
 8003c54:	42a3      	cmp	r3, r4
 8003c56:	d908      	bls.n	8003c6a <_free_r+0x42>
 8003c58:	6820      	ldr	r0, [r4, #0]
 8003c5a:	1821      	adds	r1, r4, r0
 8003c5c:	428b      	cmp	r3, r1
 8003c5e:	bf01      	itttt	eq
 8003c60:	6819      	ldreq	r1, [r3, #0]
 8003c62:	685b      	ldreq	r3, [r3, #4]
 8003c64:	1809      	addeq	r1, r1, r0
 8003c66:	6021      	streq	r1, [r4, #0]
 8003c68:	e7ed      	b.n	8003c46 <_free_r+0x1e>
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	b10b      	cbz	r3, 8003c74 <_free_r+0x4c>
 8003c70:	42a3      	cmp	r3, r4
 8003c72:	d9fa      	bls.n	8003c6a <_free_r+0x42>
 8003c74:	6811      	ldr	r1, [r2, #0]
 8003c76:	1850      	adds	r0, r2, r1
 8003c78:	42a0      	cmp	r0, r4
 8003c7a:	d10b      	bne.n	8003c94 <_free_r+0x6c>
 8003c7c:	6820      	ldr	r0, [r4, #0]
 8003c7e:	4401      	add	r1, r0
 8003c80:	1850      	adds	r0, r2, r1
 8003c82:	4283      	cmp	r3, r0
 8003c84:	6011      	str	r1, [r2, #0]
 8003c86:	d1e0      	bne.n	8003c4a <_free_r+0x22>
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	4401      	add	r1, r0
 8003c8e:	6011      	str	r1, [r2, #0]
 8003c90:	6053      	str	r3, [r2, #4]
 8003c92:	e7da      	b.n	8003c4a <_free_r+0x22>
 8003c94:	d902      	bls.n	8003c9c <_free_r+0x74>
 8003c96:	230c      	movs	r3, #12
 8003c98:	602b      	str	r3, [r5, #0]
 8003c9a:	e7d6      	b.n	8003c4a <_free_r+0x22>
 8003c9c:	6820      	ldr	r0, [r4, #0]
 8003c9e:	1821      	adds	r1, r4, r0
 8003ca0:	428b      	cmp	r3, r1
 8003ca2:	bf01      	itttt	eq
 8003ca4:	6819      	ldreq	r1, [r3, #0]
 8003ca6:	685b      	ldreq	r3, [r3, #4]
 8003ca8:	1809      	addeq	r1, r1, r0
 8003caa:	6021      	streq	r1, [r4, #0]
 8003cac:	6063      	str	r3, [r4, #4]
 8003cae:	6054      	str	r4, [r2, #4]
 8003cb0:	e7cb      	b.n	8003c4a <_free_r+0x22>
 8003cb2:	bd38      	pop	{r3, r4, r5, pc}
 8003cb4:	20000098 	.word	0x20000098

08003cb8 <_read_r>:
 8003cb8:	b538      	push	{r3, r4, r5, lr}
 8003cba:	4604      	mov	r4, r0
 8003cbc:	4608      	mov	r0, r1
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	4d05      	ldr	r5, [pc, #20]	; (8003cd8 <_read_r+0x20>)
 8003cc4:	602a      	str	r2, [r5, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f7fe fa63 	bl	8002192 <_read>
 8003ccc:	1c43      	adds	r3, r0, #1
 8003cce:	d102      	bne.n	8003cd6 <_read_r+0x1e>
 8003cd0:	682b      	ldr	r3, [r5, #0]
 8003cd2:	b103      	cbz	r3, 8003cd6 <_read_r+0x1e>
 8003cd4:	6023      	str	r3, [r4, #0]
 8003cd6:	bd38      	pop	{r3, r4, r5, pc}
 8003cd8:	200000a0 	.word	0x200000a0

08003cdc <_fstat_r>:
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	2300      	movs	r3, #0
 8003ce0:	4d06      	ldr	r5, [pc, #24]	; (8003cfc <_fstat_r+0x20>)
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	4608      	mov	r0, r1
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	602b      	str	r3, [r5, #0]
 8003cea:	f7fe fa7a 	bl	80021e2 <_fstat>
 8003cee:	1c43      	adds	r3, r0, #1
 8003cf0:	d102      	bne.n	8003cf8 <_fstat_r+0x1c>
 8003cf2:	682b      	ldr	r3, [r5, #0]
 8003cf4:	b103      	cbz	r3, 8003cf8 <_fstat_r+0x1c>
 8003cf6:	6023      	str	r3, [r4, #0]
 8003cf8:	bd38      	pop	{r3, r4, r5, pc}
 8003cfa:	bf00      	nop
 8003cfc:	200000a0 	.word	0x200000a0

08003d00 <_isatty_r>:
 8003d00:	b538      	push	{r3, r4, r5, lr}
 8003d02:	2300      	movs	r3, #0
 8003d04:	4d05      	ldr	r5, [pc, #20]	; (8003d1c <_isatty_r+0x1c>)
 8003d06:	4604      	mov	r4, r0
 8003d08:	4608      	mov	r0, r1
 8003d0a:	602b      	str	r3, [r5, #0]
 8003d0c:	f7fe fa78 	bl	8002200 <_isatty>
 8003d10:	1c43      	adds	r3, r0, #1
 8003d12:	d102      	bne.n	8003d1a <_isatty_r+0x1a>
 8003d14:	682b      	ldr	r3, [r5, #0]
 8003d16:	b103      	cbz	r3, 8003d1a <_isatty_r+0x1a>
 8003d18:	6023      	str	r3, [r4, #0]
 8003d1a:	bd38      	pop	{r3, r4, r5, pc}
 8003d1c:	200000a0 	.word	0x200000a0

08003d20 <_init>:
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	bf00      	nop
 8003d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d26:	bc08      	pop	{r3}
 8003d28:	469e      	mov	lr, r3
 8003d2a:	4770      	bx	lr

08003d2c <_fini>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	bf00      	nop
 8003d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d32:	bc08      	pop	{r3}
 8003d34:	469e      	mov	lr, r3
 8003d36:	4770      	bx	lr
