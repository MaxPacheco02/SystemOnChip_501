
FreeRTOS_Queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08004fe0  08004fe0  00014fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a4  080051a4  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  080051a4  080051a4  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051a4  080051a4  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051a4  080051a4  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051a8  080051a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  080051ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000108c  200000c4  08005270  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001150  08005270  00021150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109ea  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002af0  00000000  00000000  00030ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  000335c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00034578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a135  00000000  00000000  000353e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a7d  00000000  00000000  0004f515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091e5b  00000000  00000000  0005ff92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1ded  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004820  00000000  00000000  000f1e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c4 	.word	0x200000c4
 800012c:	00000000 	.word	0x00000000
 8000130:	08004fc8 	.word	0x08004fc8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000c8 	.word	0x200000c8
 800014c:	08004fc8 	.word	0x08004fc8

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	200000e0 	.word	0x200000e0
 800017c:	20000194 	.word	0x20000194

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b09a      	sub	sp, #104	; 0x68
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fc83 	bl	8000a90 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f867 	bl	800025c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f8a7 	bl	80002e0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init();
 8000192:	f000 f8c7 	bl	8000324 <USER_RCC_Init>
  USER_GPIO_Init();
 8000196:	f000 f8d9 	bl	800034c <USER_GPIO_Init>
  USER_USART2_Init();
 800019a:	f000 f987 	bl	80004ac <USER_USART2_Init>

  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  osMessageQDef(msgQueue, 1, uint32_t);
 800019e:	4b26      	ldr	r3, [pc, #152]	; (8000238 <main+0xb8>)
 80001a0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80001a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  msgQueueHandle = osMessageCreate(osMessageQ(msgQueue), NULL);
 80001aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80001ae:	2100      	movs	r1, #0
 80001b0:	4618      	mov	r0, r3
 80001b2:	f001 fc9e 	bl	8001af2 <osMessageCreate>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a20      	ldr	r2, [pc, #128]	; (800023c <main+0xbc>)
 80001ba:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80001bc:	4b20      	ldr	r3, [pc, #128]	; (8000240 <main+0xc0>)
 80001be:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80001c2:	461d      	mov	r5, r3
 80001c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f001 fc2b 	bl	8001a32 <osThreadCreate>
 80001dc:	4603      	mov	r3, r0
 80001de:	4a19      	ldr	r2, [pc, #100]	; (8000244 <main+0xc4>)
 80001e0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(sTask, SenderTask, osPriorityNormal, 0, 128);
 80001e2:	4b19      	ldr	r3, [pc, #100]	; (8000248 <main+0xc8>)
 80001e4:	f107 0420 	add.w	r4, r7, #32
 80001e8:	461d      	mov	r5, r3
 80001ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sTaskHandle = osThreadCreate(osThread(sTask), NULL);
 80001f6:	f107 0320 	add.w	r3, r7, #32
 80001fa:	2100      	movs	r1, #0
 80001fc:	4618      	mov	r0, r3
 80001fe:	f001 fc18 	bl	8001a32 <osThreadCreate>
 8000202:	4603      	mov	r3, r0
 8000204:	4a11      	ldr	r2, [pc, #68]	; (800024c <main+0xcc>)
 8000206:	6013      	str	r3, [r2, #0]
  osThreadDef(rTask, ReceiverTask, osPriorityNormal, 0, 128);
 8000208:	4b11      	ldr	r3, [pc, #68]	; (8000250 <main+0xd0>)
 800020a:	1d3c      	adds	r4, r7, #4
 800020c:	461d      	mov	r5, r3
 800020e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000212:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000216:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rTaskHandle = osThreadCreate(osThread(rTask), NULL);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f001 fc07 	bl	8001a32 <osThreadCreate>
 8000224:	4603      	mov	r3, r0
 8000226:	4a0b      	ldr	r2, [pc, #44]	; (8000254 <main+0xd4>)
 8000228:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nStarting...\r\n");
 800022a:	480b      	ldr	r0, [pc, #44]	; (8000258 <main+0xd8>)
 800022c:	f004 f86a 	bl	8004304 <puts>
  osKernelStart();
 8000230:	f001 fbe8 	bl	8001a04 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000234:	e7fe      	b.n	8000234 <main+0xb4>
 8000236:	bf00      	nop
 8000238:	08005020 	.word	0x08005020
 800023c:	200003a0 	.word	0x200003a0
 8000240:	08005030 	.word	0x08005030
 8000244:	20000394 	.word	0x20000394
 8000248:	0800504c 	.word	0x0800504c
 800024c:	20000398 	.word	0x20000398
 8000250:	08005068 	.word	0x08005068
 8000254:	2000039c 	.word	0x2000039c
 8000258:	08004ffc 	.word	0x08004ffc

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b090      	sub	sp, #64	; 0x40
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	2228      	movs	r2, #40	; 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f003 ff27 	bl	80040be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027e:	2302      	movs	r3, #2
 8000280:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000282:	2301      	movs	r3, #1
 8000284:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000286:	2310      	movs	r3, #16
 8000288:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028a:	2302      	movs	r3, #2
 800028c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800028e:	2300      	movs	r3, #0
 8000290:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000292:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000296:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	f107 0318 	add.w	r3, r7, #24
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fd09 	bl	8000cb4 <HAL_RCC_OscConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002a8:	f000 fa40 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ac:	230f      	movs	r3, #15
 80002ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b0:	2302      	movs	r3, #2
 80002b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2102      	movs	r1, #2
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 ff76 	bl	80011b8 <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002d2:	f000 fa2b 	bl	800072c <Error_Handler>
  }
}
 80002d6:	bf00      	nop
 80002d8:	3740      	adds	r7, #64	; 0x40
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <MX_GPIO_Init+0x40>)
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <MX_GPIO_Init+0x40>)
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	6193      	str	r3, [r2, #24]
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <MX_GPIO_Init+0x40>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	f003 0304 	and.w	r3, r3, #4
 80002fa:	607b      	str	r3, [r7, #4]
 80002fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <MX_GPIO_Init+0x40>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	4a07      	ldr	r2, [pc, #28]	; (8000320 <MX_GPIO_Init+0x40>)
 8000304:	f043 0308 	orr.w	r3, r3, #8
 8000308:	6193      	str	r3, [r2, #24]
 800030a:	4b05      	ldr	r3, [pc, #20]	; (8000320 <MX_GPIO_Init+0x40>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	f003 0308 	and.w	r3, r3, #8
 8000312:	603b      	str	r3, [r7, #0]
 8000314:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	40021000 	.word	0x40021000

08000324 <USER_RCC_Init>:

/* USER CODE BEGIN 4 */
void USER_RCC_Init(void){
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
	RCC->APB1ENR	|=	 RCC_APB1ENR_USART2EN;//  	USART2 clock enable
 8000328:	4b07      	ldr	r3, [pc, #28]	; (8000348 <USER_RCC_Init+0x24>)
 800032a:	69db      	ldr	r3, [r3, #28]
 800032c:	4a06      	ldr	r2, [pc, #24]	; (8000348 <USER_RCC_Init+0x24>)
 800032e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000332:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR	|=	 RCC_APB2ENR_IOPAEN;//    	I/O port A clock enable
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <USER_RCC_Init+0x24>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a03      	ldr	r2, [pc, #12]	; (8000348 <USER_RCC_Init+0x24>)
 800033a:	f043 0304 	orr.w	r3, r3, #4
 800033e:	6193      	str	r3, [r2, #24]
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	40021000 	.word	0x40021000

0800034c <USER_GPIO_Init>:

void USER_GPIO_Init(void){
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BR5;//			PA5 -> 0, LD2 OFF
 8000350:	4b54      	ldr	r3, [pc, #336]	; (80004a4 <USER_GPIO_Init+0x158>)
 8000352:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000356:	611a      	str	r2, [r3, #16]
	//pin PA5 as output push-pull max speed 10MHz
	GPIOA->CRL &= ~GPIO_CRL_CNF5 & ~GPIO_CRL_MODE5_1;
 8000358:	4b52      	ldr	r3, [pc, #328]	; (80004a4 <USER_GPIO_Init+0x158>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a51      	ldr	r2, [pc, #324]	; (80004a4 <USER_GPIO_Init+0x158>)
 800035e:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8000362:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE5_0;
 8000364:	4b4f      	ldr	r3, [pc, #316]	; (80004a4 <USER_GPIO_Init+0x158>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a4e      	ldr	r2, [pc, #312]	; (80004a4 <USER_GPIO_Init+0x158>)
 800036a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800036e:	6013      	str	r3, [r2, #0]

	//pin PA2 (USART2_TX) as alternate function output push-pull, max speed 10MHz
	GPIOA->CRL	&=	~GPIO_CRL_CNF2_0 & ~GPIO_CRL_MODE2_1;
 8000370:	4b4c      	ldr	r3, [pc, #304]	; (80004a4 <USER_GPIO_Init+0x158>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a4b      	ldr	r2, [pc, #300]	; (80004a4 <USER_GPIO_Init+0x158>)
 8000376:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800037a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF2_1 | GPIO_CRL_MODE2_0;
 800037c:	4b49      	ldr	r3, [pc, #292]	; (80004a4 <USER_GPIO_Init+0x158>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a48      	ldr	r2, [pc, #288]	; (80004a4 <USER_GPIO_Init+0x158>)
 8000382:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
 8000386:	6013      	str	r3, [r2, #0]

	//pin PA3 (USART_RX) as input pull-up
	GPIOA->CRL	&=	~GPIO_CRL_CNF3_0 & ~GPIO_CRL_MODE3;
 8000388:	4b46      	ldr	r3, [pc, #280]	; (80004a4 <USER_GPIO_Init+0x158>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a45      	ldr	r2, [pc, #276]	; (80004a4 <USER_GPIO_Init+0x158>)
 800038e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000392:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF3_1;
 8000394:	4b43      	ldr	r3, [pc, #268]	; (80004a4 <USER_GPIO_Init+0x158>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a42      	ldr	r2, [pc, #264]	; (80004a4 <USER_GPIO_Init+0x158>)
 800039a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800039e:	6013      	str	r3, [r2, #0]

	GPIOB->BSRR &= GPIO_BSRR_BR0 & GPIO_BSRR_BR1 & GPIO_BSRR_BR2 & GPIO_BSRR_BR3;
 80003a0:	4b41      	ldr	r3, [pc, #260]	; (80004a8 <USER_GPIO_Init+0x15c>)
 80003a2:	691b      	ldr	r3, [r3, #16]
 80003a4:	4b40      	ldr	r3, [pc, #256]	; (80004a8 <USER_GPIO_Init+0x15c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	611a      	str	r2, [r3, #16]
	//pins PB0-PB3 as output push-pull
	GPIOB->CRL &= ~GPIO_CRL_CNF0 & ~GPIO_CRL_MODE0_1;
 80003aa:	4b3f      	ldr	r3, [pc, #252]	; (80004a8 <USER_GPIO_Init+0x15c>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a3e      	ldr	r2, [pc, #248]	; (80004a8 <USER_GPIO_Init+0x15c>)
 80003b0:	f023 030e 	bic.w	r3, r3, #14
 80003b4:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE0_0;
 80003b6:	4b3c      	ldr	r3, [pc, #240]	; (80004a8 <USER_GPIO_Init+0x15c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a3b      	ldr	r2, [pc, #236]	; (80004a8 <USER_GPIO_Init+0x15c>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~GPIO_CRL_CNF1 & ~GPIO_CRL_MODE1_1;
 80003c2:	4b39      	ldr	r3, [pc, #228]	; (80004a8 <USER_GPIO_Init+0x15c>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a38      	ldr	r2, [pc, #224]	; (80004a8 <USER_GPIO_Init+0x15c>)
 80003c8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80003cc:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE1_0;
 80003ce:	4b36      	ldr	r3, [pc, #216]	; (80004a8 <USER_GPIO_Init+0x15c>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a35      	ldr	r2, [pc, #212]	; (80004a8 <USER_GPIO_Init+0x15c>)
 80003d4:	f043 0310 	orr.w	r3, r3, #16
 80003d8:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~GPIO_CRL_CNF2 & ~GPIO_CRL_MODE2_1;
 80003da:	4b33      	ldr	r3, [pc, #204]	; (80004a8 <USER_GPIO_Init+0x15c>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a32      	ldr	r2, [pc, #200]	; (80004a8 <USER_GPIO_Init+0x15c>)
 80003e0:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 80003e4:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE2_0;
 80003e6:	4b30      	ldr	r3, [pc, #192]	; (80004a8 <USER_GPIO_Init+0x15c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a2f      	ldr	r2, [pc, #188]	; (80004a8 <USER_GPIO_Init+0x15c>)
 80003ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003f0:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~GPIO_CRL_CNF3 & ~GPIO_CRL_MODE3_1;
 80003f2:	4b2d      	ldr	r3, [pc, #180]	; (80004a8 <USER_GPIO_Init+0x15c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a2c      	ldr	r2, [pc, #176]	; (80004a8 <USER_GPIO_Init+0x15c>)
 80003f8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80003fc:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE3_0;
 80003fe:	4b2a      	ldr	r3, [pc, #168]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a29      	ldr	r2, [pc, #164]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000404:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000408:	6013      	str	r3, [r2, #0]
	//pins PB4-PB7 as input pull-up
	GPIOB->CRL &= ~GPIO_CRL_CNF4_0 & ~GPIO_CRL_MODE4;
 800040a:	4b27      	ldr	r3, [pc, #156]	; (80004a8 <USER_GPIO_Init+0x15c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a26      	ldr	r2, [pc, #152]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000410:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8000414:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF4_1;
 8000416:	4b24      	ldr	r3, [pc, #144]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a23      	ldr	r2, [pc, #140]	; (80004a8 <USER_GPIO_Init+0x15c>)
 800041c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000420:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= GPIO_ODR_ODR4;
 8000422:	4b21      	ldr	r3, [pc, #132]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	4a20      	ldr	r2, [pc, #128]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000428:	f043 0310 	orr.w	r3, r3, #16
 800042c:	60d3      	str	r3, [r2, #12]
	GPIOB->CRL &= ~GPIO_CRL_CNF5_0 & ~GPIO_CRL_MODE5;
 800042e:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a1d      	ldr	r2, [pc, #116]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000434:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8000438:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF5_1;
 800043a:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <USER_GPIO_Init+0x15c>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a1a      	ldr	r2, [pc, #104]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000440:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000444:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= GPIO_ODR_ODR5;
 8000446:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000448:	68db      	ldr	r3, [r3, #12]
 800044a:	4a17      	ldr	r2, [pc, #92]	; (80004a8 <USER_GPIO_Init+0x15c>)
 800044c:	f043 0320 	orr.w	r3, r3, #32
 8000450:	60d3      	str	r3, [r2, #12]
	GPIOB->CRL &= ~GPIO_CRL_CNF6_0 & ~GPIO_CRL_MODE6;
 8000452:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a14      	ldr	r2, [pc, #80]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000458:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800045c:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF6_1;
 800045e:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a11      	ldr	r2, [pc, #68]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000464:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000468:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= GPIO_ODR_ODR6;
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <USER_GPIO_Init+0x15c>)
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000474:	60d3      	str	r3, [r2, #12]
	GPIOB->CRL &= ~GPIO_CRL_CNF7_0 & ~GPIO_CRL_MODE7;
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a0b      	ldr	r2, [pc, #44]	; (80004a8 <USER_GPIO_Init+0x15c>)
 800047c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8000480:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF7_1;
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a08      	ldr	r2, [pc, #32]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000488:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800048c:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= GPIO_ODR_ODR7;
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000490:	68db      	ldr	r3, [r3, #12]
 8000492:	4a05      	ldr	r2, [pc, #20]	; (80004a8 <USER_GPIO_Init+0x15c>)
 8000494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000498:	60d3      	str	r3, [r2, #12]
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40010800 	.word	0x40010800
 80004a8:	40010c00 	.word	0x40010c00

080004ac <USER_USART2_Init>:

void USER_USART2_Init(void){
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
	USART2->CR1	|=	 USART_CR1_UE;//		USART enabled
 80004b0:	4b12      	ldr	r3, [pc, #72]	; (80004fc <USER_USART2_Init+0x50>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a11      	ldr	r2, [pc, #68]	; (80004fc <USER_USART2_Init+0x50>)
 80004b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004ba:	60d3      	str	r3, [r2, #12]
	USART2->CR1	&=	~USART_CR1_M//		  	1 start bit, 8 data bits
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <USER_USART2_Init+0x50>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	4a0e      	ldr	r2, [pc, #56]	; (80004fc <USER_USART2_Init+0x50>)
 80004c2:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 80004c6:	60d3      	str	r3, [r2, #12]
			&	~USART_CR1_PCE;//		parity control disabled
	USART2->CR2	&=	~USART_CR2_STOP;//  		1 stop bit
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <USER_USART2_Init+0x50>)
 80004ca:	691b      	ldr	r3, [r3, #16]
 80004cc:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <USER_USART2_Init+0x50>)
 80004ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004d2:	6113      	str	r3, [r2, #16]
	USART2->BRR	 =	 0xD05;//			9600 bps -> 208.33,
 80004d4:	4b09      	ldr	r3, [pc, #36]	; (80004fc <USER_USART2_Init+0x50>)
 80004d6:	f640 5205 	movw	r2, #3333	; 0xd05
 80004da:	609a      	str	r2, [r3, #8]
	//USARTDIV = 32*10^6/(16*9600)
	//NEW USARTDIV = 32*10^6/(16*115200)=17.361
	//BRR = [17->HEX=11][.361*16->HEX=6]=116
	//USART2->BRR = 0x116;
	USART2->CR1	|=	 USART_CR1_TE;//		        transmitter enabled
 80004dc:	4b07      	ldr	r3, [pc, #28]	; (80004fc <USER_USART2_Init+0x50>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	4a06      	ldr	r2, [pc, #24]	; (80004fc <USER_USART2_Init+0x50>)
 80004e2:	f043 0308 	orr.w	r3, r3, #8
 80004e6:	60d3      	str	r3, [r2, #12]
	USART2->CR1	|=	 USART_CR1_RE;//		        receiver enabled
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <USER_USART2_Init+0x50>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	4a03      	ldr	r2, [pc, #12]	; (80004fc <USER_USART2_Init+0x50>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	60d3      	str	r3, [r2, #12]
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	40004400 	.word	0x40004400

08000500 <SenderTask>:
uint32_t USER_USART2_Receive(void){
	while((USART2->SR & USART_SR_RXNE) == 0){}
	return USART2->DR;
}

void SenderTask(void const * argument){
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	uint32_t choice = 0, counter = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	627b      	str	r3, [r7, #36]	; 0x24
 800050c:	2300      	movs	r3, #0
 800050e:	623b      	str	r3, [r7, #32]
	uint32_t temp, tecla, found;
	for(;;)
	{
		found = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	61bb      	str	r3, [r7, #24]
		for(int i = 0 ; i < 4 ; i++){
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	e07a      	b.n	8000610 <SenderTask+0x110>
			for(int j = 0 ; j < 4 ; j++){
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	e00a      	b.n	8000536 <SenderTask+0x36>
				key_change[j] = key_change_template[j];
 8000520:	4a5a      	ldr	r2, [pc, #360]	; (800068c <SenderTask+0x18c>)
 8000522:	693b      	ldr	r3, [r7, #16]
 8000524:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000528:	4a59      	ldr	r2, [pc, #356]	; (8000690 <SenderTask+0x190>)
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0 ; j < 4 ; j++){
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	3301      	adds	r3, #1
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	2b03      	cmp	r3, #3
 800053a:	ddf1      	ble.n	8000520 <SenderTask+0x20>
			}
			key_change[i]+=16;
 800053c:	4a54      	ldr	r2, [pc, #336]	; (8000690 <SenderTask+0x190>)
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000544:	3310      	adds	r3, #16
 8000546:	b299      	uxth	r1, r3
 8000548:	4a51      	ldr	r2, [pc, #324]	; (8000690 <SenderTask+0x190>)
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			GPIOB->BSRR = (1 << key_change[0]) | (1 << key_change[1]) | (1 << key_change[2]) | (1 << key_change[3]);
 8000550:	4b4f      	ldr	r3, [pc, #316]	; (8000690 <SenderTask+0x190>)
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	461a      	mov	r2, r3
 8000556:	2301      	movs	r3, #1
 8000558:	fa03 f202 	lsl.w	r2, r3, r2
 800055c:	4b4c      	ldr	r3, [pc, #304]	; (8000690 <SenderTask+0x190>)
 800055e:	885b      	ldrh	r3, [r3, #2]
 8000560:	4619      	mov	r1, r3
 8000562:	2301      	movs	r3, #1
 8000564:	408b      	lsls	r3, r1
 8000566:	431a      	orrs	r2, r3
 8000568:	4b49      	ldr	r3, [pc, #292]	; (8000690 <SenderTask+0x190>)
 800056a:	889b      	ldrh	r3, [r3, #4]
 800056c:	4619      	mov	r1, r3
 800056e:	2301      	movs	r3, #1
 8000570:	408b      	lsls	r3, r1
 8000572:	431a      	orrs	r2, r3
 8000574:	4b46      	ldr	r3, [pc, #280]	; (8000690 <SenderTask+0x190>)
 8000576:	88db      	ldrh	r3, [r3, #6]
 8000578:	4619      	mov	r1, r3
 800057a:	2301      	movs	r3, #1
 800057c:	408b      	lsls	r3, r1
 800057e:	431a      	orrs	r2, r3
 8000580:	4b44      	ldr	r3, [pc, #272]	; (8000694 <SenderTask+0x194>)
 8000582:	611a      	str	r2, [r3, #16]
			if(!(GPIOB->IDR & GPIO_IDR_IDR4 ) & !found){
 8000584:	4b43      	ldr	r3, [pc, #268]	; (8000694 <SenderTask+0x194>)
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	f003 0210 	and.w	r2, r3, #16
 800058c:	69bb      	ldr	r3, [r7, #24]
 800058e:	4313      	orrs	r3, r2
 8000590:	2b00      	cmp	r3, #0
 8000592:	d107      	bne.n	80005a4 <SenderTask+0xa4>
			 tecla = keys[4*i];
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	4a3f      	ldr	r2, [pc, #252]	; (8000698 <SenderTask+0x198>)
 800059a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800059e:	61fb      	str	r3, [r7, #28]
			 found = 1;
 80005a0:	2301      	movs	r3, #1
 80005a2:	61bb      	str	r3, [r7, #24]
			}
			if(!(GPIOB->IDR & GPIO_IDR_IDR5 ) & !found){
 80005a4:	4b3b      	ldr	r3, [pc, #236]	; (8000694 <SenderTask+0x194>)
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	f003 0220 	and.w	r2, r3, #32
 80005ac:	69bb      	ldr	r3, [r7, #24]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d108      	bne.n	80005c6 <SenderTask+0xc6>
			  tecla = keys[1+4*i];
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	3301      	adds	r3, #1
 80005ba:	4a37      	ldr	r2, [pc, #220]	; (8000698 <SenderTask+0x198>)
 80005bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005c0:	61fb      	str	r3, [r7, #28]
			  found = 1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
			}
			if(!(GPIOB->IDR & GPIO_IDR_IDR6 ) & !found){
 80005c6:	4b33      	ldr	r3, [pc, #204]	; (8000694 <SenderTask+0x194>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80005ce:	69bb      	ldr	r3, [r7, #24]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d108      	bne.n	80005e8 <SenderTask+0xe8>
			  tecla = keys[2+4*i];
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	3302      	adds	r3, #2
 80005dc:	4a2e      	ldr	r2, [pc, #184]	; (8000698 <SenderTask+0x198>)
 80005de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e2:	61fb      	str	r3, [r7, #28]
			  found = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	61bb      	str	r3, [r7, #24]
			}
			if(!(GPIOB->IDR & GPIO_IDR_IDR7 ) & !found){
 80005e8:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <SenderTask+0x194>)
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80005f0:	69bb      	ldr	r3, [r7, #24]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d108      	bne.n	800060a <SenderTask+0x10a>
			  tecla = keys[3+4*i];
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	3303      	adds	r3, #3
 80005fe:	4a26      	ldr	r2, [pc, #152]	; (8000698 <SenderTask+0x198>)
 8000600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000604:	61fb      	str	r3, [r7, #28]
			  found = 1;
 8000606:	2301      	movs	r3, #1
 8000608:	61bb      	str	r3, [r7, #24]
		for(int i = 0 ; i < 4 ; i++){
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	3301      	adds	r3, #1
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	2b03      	cmp	r3, #3
 8000614:	dd81      	ble.n	800051a <SenderTask+0x1a>
			}
		}
		if(found){
 8000616:	69bb      	ldr	r3, [r7, #24]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d016      	beq.n	800064a <SenderTask+0x14a>
			if (tecla == 2 || tecla == 4 || tecla == 8)
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	2b02      	cmp	r3, #2
 8000620:	d005      	beq.n	800062e <SenderTask+0x12e>
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	2b04      	cmp	r3, #4
 8000626:	d002      	beq.n	800062e <SenderTask+0x12e>
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	2b08      	cmp	r3, #8
 800062c:	d104      	bne.n	8000638 <SenderTask+0x138>
				choice = (tecla / 2) - 1;
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	085b      	lsrs	r3, r3, #1
 8000632:	3b01      	subs	r3, #1
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
 8000636:	e00a      	b.n	800064e <SenderTask+0x14e>
			else if (tecla == 11)
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	2b0b      	cmp	r3, #11
 800063c:	d102      	bne.n	8000644 <SenderTask+0x144>
				choice = 2;
 800063e:	2302      	movs	r3, #2
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
 8000642:	e004      	b.n	800064e <SenderTask+0x14e>
			else
				choice = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
 8000648:	e001      	b.n	800064e <SenderTask+0x14e>
		} else
			choice = 4;
 800064a:	2304      	movs	r3, #4
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
		//printf("Send %s\r\n", msg[choice]);
		if( osMessagePut(msgQueueHandle, choice, 0) != osOK )
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <SenderTask+0x19c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2200      	movs	r2, #0
 8000654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fa74 	bl	8001b44 <osMessagePut>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d002      	beq.n	8000668 <SenderTask+0x168>
			printf("Failed to put data to the Queue\r\n");
 8000662:	480f      	ldr	r0, [pc, #60]	; (80006a0 <SenderTask+0x1a0>)
 8000664:	f003 fe4e 	bl	8004304 <puts>
		temp = osKernelSysTick() - (200 * counter++);
 8000668:	f001 f9d3 	bl	8001a12 <osKernelSysTick>
 800066c:	4601      	mov	r1, r0
 800066e:	6a3b      	ldr	r3, [r7, #32]
 8000670:	1c5a      	adds	r2, r3, #1
 8000672:	623a      	str	r2, [r7, #32]
 8000674:	22c8      	movs	r2, #200	; 0xc8
 8000676:	fb02 f303 	mul.w	r3, r2, r3
 800067a:	1acb      	subs	r3, r1, r3
 800067c:	60fb      	str	r3, [r7, #12]
		osDelay( 200 - temp );
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fa20 	bl	8001aca <osDelay>
		found = 0;
 800068a:	e741      	b.n	8000510 <SenderTask+0x10>
 800068c:	20000000 	.word	0x20000000
 8000690:	20000008 	.word	0x20000008
 8000694:	40010c00 	.word	0x40010c00
 8000698:	20000010 	.word	0x20000010
 800069c:	200003a0 	.word	0x200003a0
 80006a0:	08005084 	.word	0x08005084

080006a4 <ReceiverTask>:
	}
}
void ReceiverTask(void const * argument){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	osEvent r_event;
	for(;;)
	{
		r_event = osMessageGet(msgQueueHandle, 200);
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <ReceiverTask+0x44>)
 80006ae:	6819      	ldr	r1, [r3, #0]
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	22c8      	movs	r2, #200	; 0xc8
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fa84 	bl	8001bc4 <osMessageGet>
		if( r_event.status == osEventMessage ){
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	2b10      	cmp	r3, #16
 80006c0:	d10d      	bne.n	80006de <ReceiverTask+0x3a>
			uint32_t choice = r_event.value.v;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	617b      	str	r3, [r7, #20]
			printf("Received: %s\r\n", msg[choice] );
 80006c6:	697a      	ldr	r2, [r7, #20]
 80006c8:	4613      	mov	r3, r2
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	4413      	add	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4a06      	ldr	r2, [pc, #24]	; (80006ec <ReceiverTask+0x48>)
 80006d2:	4413      	add	r3, r2
 80006d4:	4619      	mov	r1, r3
 80006d6:	4806      	ldr	r0, [pc, #24]	; (80006f0 <ReceiverTask+0x4c>)
 80006d8:	f003 fd8e 	bl	80041f8 <iprintf>
 80006dc:	e7e6      	b.n	80006ac <ReceiverTask+0x8>
		}
		else
			printf("Failed to get data from the Queue\r\n");
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <ReceiverTask+0x50>)
 80006e0:	f003 fe10 	bl	8004304 <puts>
		r_event = osMessageGet(msgQueueHandle, 200);
 80006e4:	e7e2      	b.n	80006ac <ReceiverTask+0x8>
 80006e6:	bf00      	nop
 80006e8:	200003a0 	.word	0x200003a0
 80006ec:	20000030 	.word	0x20000030
 80006f0:	080050a8 	.word	0x080050a8
 80006f4:	080050b8 	.word	0x080050b8

080006f8 <StartDefaultTask>:
/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 8000700:	2001      	movs	r0, #1
 8000702:	f001 f9e2 	bl	8001aca <osDelay>
 8000706:	e7fb      	b.n	8000700 <StartDefaultTask+0x8>

08000708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a04      	ldr	r2, [pc, #16]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d101      	bne.n	800071e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800071a:	f000 f9cf 	bl	8000abc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40000800 	.word	0x40000800

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <_write>:
 */

#include "myprintf.h"
#include "main.h"

int _write(int file, char *ptr, int len){
 8000738:	b480      	push	{r7}
 800073a:	b087      	sub	sp, #28
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	e00f      	b.n	800076a <_write+0x32>
		while( ( USART2->SR & USART_SR_TXE ) == 0 ){}
 800074a:	bf00      	nop
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <_write+0x48>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000754:	2b00      	cmp	r3, #0
 8000756:	d0f9      	beq.n	800074c <_write+0x14>
		USART2->DR = *ptr++;
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	1c5a      	adds	r2, r3, #1
 800075c:	60ba      	str	r2, [r7, #8]
 800075e:	781a      	ldrb	r2, [r3, #0]
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <_write+0x48>)
 8000762:	605a      	str	r2, [r3, #4]
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3301      	adds	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	697a      	ldr	r2, [r7, #20]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	429a      	cmp	r2, r3
 8000770:	dbeb      	blt.n	800074a <_write+0x12>
	}
	return len;
 8000772:	687b      	ldr	r3, [r7, #4]
}
 8000774:	4618      	mov	r0, r3
 8000776:	371c      	adds	r7, #28
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40004400 	.word	0x40004400

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <HAL_MspInit+0x68>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	4a17      	ldr	r2, [pc, #92]	; (80007ec <HAL_MspInit+0x68>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6193      	str	r3, [r2, #24]
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <HAL_MspInit+0x68>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_MspInit+0x68>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	4a11      	ldr	r2, [pc, #68]	; (80007ec <HAL_MspInit+0x68>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	61d3      	str	r3, [r2, #28]
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <HAL_MspInit+0x68>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	210f      	movs	r1, #15
 80007be:	f06f 0001 	mvn.w	r0, #1
 80007c2:	f000 fa4c 	bl	8000c5e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <HAL_MspInit+0x6c>)
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <HAL_MspInit+0x6c>)
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40010000 	.word	0x40010000

080007f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08e      	sub	sp, #56	; 0x38
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000800:	2300      	movs	r3, #0
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000804:	2300      	movs	r3, #0
 8000806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800080a:	4b34      	ldr	r3, [pc, #208]	; (80008dc <HAL_InitTick+0xe8>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	4a33      	ldr	r2, [pc, #204]	; (80008dc <HAL_InitTick+0xe8>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	61d3      	str	r3, [r2, #28]
 8000816:	4b31      	ldr	r3, [pc, #196]	; (80008dc <HAL_InitTick+0xe8>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000822:	f107 0210 	add.w	r2, r7, #16
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fe29 	bl	8001484 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000838:	2b00      	cmp	r3, #0
 800083a:	d103      	bne.n	8000844 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800083c:	f000 fe0e 	bl	800145c <HAL_RCC_GetPCLK1Freq>
 8000840:	6378      	str	r0, [r7, #52]	; 0x34
 8000842:	e004      	b.n	800084e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000844:	f000 fe0a 	bl	800145c <HAL_RCC_GetPCLK1Freq>
 8000848:	4603      	mov	r3, r0
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800084e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000850:	4a23      	ldr	r2, [pc, #140]	; (80008e0 <HAL_InitTick+0xec>)
 8000852:	fba2 2303 	umull	r2, r3, r2, r3
 8000856:	0c9b      	lsrs	r3, r3, #18
 8000858:	3b01      	subs	r3, #1
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800085c:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <HAL_InitTick+0xf0>)
 800085e:	4a22      	ldr	r2, [pc, #136]	; (80008e8 <HAL_InitTick+0xf4>)
 8000860:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000862:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <HAL_InitTick+0xf0>)
 8000864:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000868:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800086a:	4a1e      	ldr	r2, [pc, #120]	; (80008e4 <HAL_InitTick+0xf0>)
 800086c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800086e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000870:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <HAL_InitTick+0xf0>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <HAL_InitTick+0xf0>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <HAL_InitTick+0xf0>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000882:	4818      	ldr	r0, [pc, #96]	; (80008e4 <HAL_InitTick+0xf0>)
 8000884:	f000 fe4c 	bl	8001520 <HAL_TIM_Base_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800088e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000892:	2b00      	cmp	r3, #0
 8000894:	d11b      	bne.n	80008ce <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000896:	4813      	ldr	r0, [pc, #76]	; (80008e4 <HAL_InitTick+0xf0>)
 8000898:	f000 fe9a 	bl	80015d0 <HAL_TIM_Base_Start_IT>
 800089c:	4603      	mov	r3, r0
 800089e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d111      	bne.n	80008ce <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80008aa:	201e      	movs	r0, #30
 80008ac:	f000 f9f3 	bl	8000c96 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b0f      	cmp	r3, #15
 80008b4:	d808      	bhi.n	80008c8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80008b6:	2200      	movs	r2, #0
 80008b8:	6879      	ldr	r1, [r7, #4]
 80008ba:	201e      	movs	r0, #30
 80008bc:	f000 f9cf 	bl	8000c5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008c0:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <HAL_InitTick+0xf8>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6013      	str	r3, [r2, #0]
 80008c6:	e002      	b.n	80008ce <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80008c8:	2301      	movs	r3, #1
 80008ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3738      	adds	r7, #56	; 0x38
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000
 80008e0:	431bde83 	.word	0x431bde83
 80008e4:	200003a4 	.word	0x200003a4
 80008e8:	40000800 	.word	0x40000800
 80008ec:	20000054 	.word	0x20000054

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
	...

0800091c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <TIM4_IRQHandler+0x10>)
 8000922:	f000 fea7 	bl	8001674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200003a4 	.word	0x200003a4

08000930 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	e00a      	b.n	8000958 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000942:	f3af 8000 	nop.w
 8000946:	4601      	mov	r1, r0
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	60ba      	str	r2, [r7, #8]
 800094e:	b2ca      	uxtb	r2, r1
 8000950:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	3301      	adds	r3, #1
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697a      	ldr	r2, [r7, #20]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	429a      	cmp	r2, r3
 800095e:	dbf0      	blt.n	8000942 <_read+0x12>
  }

  return len;
 8000960:	687b      	ldr	r3, [r7, #4]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <_close>:
  }
  return len;
}

int _close(int file)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000990:	605a      	str	r2, [r3, #4]
  return 0;
 8000992:	2300      	movs	r3, #0
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr

0800099e <_isatty>:

int _isatty(int file)
{
 800099e:	b480      	push	{r7}
 80009a0:	b083      	sub	sp, #12
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr

080009b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b085      	sub	sp, #20
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
	...

080009cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d4:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <_sbrk+0x5c>)
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <_sbrk+0x60>)
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <_sbrk+0x64>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d102      	bne.n	80009ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <_sbrk+0x64>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <_sbrk+0x68>)
 80009ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <_sbrk+0x64>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d207      	bcs.n	8000a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009fc:	f003 fa2e 	bl	8003e5c <__errno>
 8000a00:	4603      	mov	r3, r0
 8000a02:	220c      	movs	r2, #12
 8000a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0a:	e009      	b.n	8000a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <_sbrk+0x64>)
 8000a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20005000 	.word	0x20005000
 8000a2c:	00000400 	.word	0x00000400
 8000a30:	200003ec 	.word	0x200003ec
 8000a34:	20001150 	.word	0x20001150

08000a38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a46:	490d      	ldr	r1, [pc, #52]	; (8000a7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a5c:	4c0a      	ldr	r4, [pc, #40]	; (8000a88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a6a:	f7ff ffe5 	bl	8000a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f003 faf1 	bl	8004054 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a72:	f7ff fb85 	bl	8000180 <main>
  bx lr
 8000a76:	4770      	bx	lr
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8000a80:	080051ac 	.word	0x080051ac
  ldr r2, =_sbss
 8000a84:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8000a88:	20001150 	.word	0x20001150

08000a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC1_2_IRQHandler>
	...

08000a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x28>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x28>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f8d1 	bl	8000c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f7ff fea4 	bl	80007f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff fe6a 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40022000 	.word	0x40022000

08000abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_IncTick+0x1c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_IncTick+0x20>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a03      	ldr	r2, [pc, #12]	; (8000adc <HAL_IncTick+0x20>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	20000058 	.word	0x20000058
 8000adc:	200003f0 	.word	0x200003f0

08000ae0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b02      	ldr	r3, [pc, #8]	; (8000af0 <HAL_GetTick+0x10>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	200003f0 	.word	0x200003f0

08000af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b26:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	60d3      	str	r3, [r2, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <__NVIC_GetPriorityGrouping+0x18>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	f003 0307 	and.w	r3, r3, #7
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db0b      	blt.n	8000b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 021f 	and.w	r2, r3, #31
 8000b70:	4906      	ldr	r1, [pc, #24]	; (8000b8c <__NVIC_EnableIRQ+0x34>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	095b      	lsrs	r3, r3, #5
 8000b78:	2001      	movs	r0, #1
 8000b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	e000e100 	.word	0xe000e100

08000b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db0a      	blt.n	8000bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	490c      	ldr	r1, [pc, #48]	; (8000bdc <__NVIC_SetPriority+0x4c>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	0112      	lsls	r2, r2, #4
 8000bb0:	b2d2      	uxtb	r2, r2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb8:	e00a      	b.n	8000bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4908      	ldr	r1, [pc, #32]	; (8000be0 <__NVIC_SetPriority+0x50>)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	f003 030f 	and.w	r3, r3, #15
 8000bc6:	3b04      	subs	r3, #4
 8000bc8:	0112      	lsls	r2, r2, #4
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	440b      	add	r3, r1
 8000bce:	761a      	strb	r2, [r3, #24]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e100 	.word	0xe000e100
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b089      	sub	sp, #36	; 0x24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	f1c3 0307 	rsb	r3, r3, #7
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	bf28      	it	cs
 8000c02:	2304      	movcs	r3, #4
 8000c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3304      	adds	r3, #4
 8000c0a:	2b06      	cmp	r3, #6
 8000c0c:	d902      	bls.n	8000c14 <NVIC_EncodePriority+0x30>
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3b03      	subs	r3, #3
 8000c12:	e000      	b.n	8000c16 <NVIC_EncodePriority+0x32>
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	f04f 32ff 	mov.w	r2, #4294967295
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43da      	mvns	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	401a      	ands	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	43d9      	mvns	r1, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	4313      	orrs	r3, r2
         );
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3724      	adds	r7, #36	; 0x24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff4f 	bl	8000af4 <__NVIC_SetPriorityGrouping>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c70:	f7ff ff64 	bl	8000b3c <__NVIC_GetPriorityGrouping>
 8000c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	6978      	ldr	r0, [r7, #20]
 8000c7c:	f7ff ffb2 	bl	8000be4 <NVIC_EncodePriority>
 8000c80:	4602      	mov	r2, r0
 8000c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff81 	bl	8000b90 <__NVIC_SetPriority>
}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff57 	bl	8000b58 <__NVIC_EnableIRQ>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d101      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e272      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 8087 	beq.w	8000de2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cd4:	4b92      	ldr	r3, [pc, #584]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 030c 	and.w	r3, r3, #12
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	d00c      	beq.n	8000cfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ce0:	4b8f      	ldr	r3, [pc, #572]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 030c 	and.w	r3, r3, #12
 8000ce8:	2b08      	cmp	r3, #8
 8000cea:	d112      	bne.n	8000d12 <HAL_RCC_OscConfig+0x5e>
 8000cec:	4b8c      	ldr	r3, [pc, #560]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf8:	d10b      	bne.n	8000d12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cfa:	4b89      	ldr	r3, [pc, #548]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d06c      	beq.n	8000de0 <HAL_RCC_OscConfig+0x12c>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d168      	bne.n	8000de0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e24c      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d1a:	d106      	bne.n	8000d2a <HAL_RCC_OscConfig+0x76>
 8000d1c:	4b80      	ldr	r3, [pc, #512]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a7f      	ldr	r2, [pc, #508]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	e02e      	b.n	8000d88 <HAL_RCC_OscConfig+0xd4>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d10c      	bne.n	8000d4c <HAL_RCC_OscConfig+0x98>
 8000d32:	4b7b      	ldr	r3, [pc, #492]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a7a      	ldr	r2, [pc, #488]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	4b78      	ldr	r3, [pc, #480]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a77      	ldr	r2, [pc, #476]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	e01d      	b.n	8000d88 <HAL_RCC_OscConfig+0xd4>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d54:	d10c      	bne.n	8000d70 <HAL_RCC_OscConfig+0xbc>
 8000d56:	4b72      	ldr	r3, [pc, #456]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a71      	ldr	r2, [pc, #452]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	4b6f      	ldr	r3, [pc, #444]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a6e      	ldr	r2, [pc, #440]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	e00b      	b.n	8000d88 <HAL_RCC_OscConfig+0xd4>
 8000d70:	4b6b      	ldr	r3, [pc, #428]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a6a      	ldr	r2, [pc, #424]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	4b68      	ldr	r3, [pc, #416]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a67      	ldr	r2, [pc, #412]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d013      	beq.n	8000db8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d90:	f7ff fea6 	bl	8000ae0 <HAL_GetTick>
 8000d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d98:	f7ff fea2 	bl	8000ae0 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b64      	cmp	r3, #100	; 0x64
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e200      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000daa:	4b5d      	ldr	r3, [pc, #372]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0f0      	beq.n	8000d98 <HAL_RCC_OscConfig+0xe4>
 8000db6:	e014      	b.n	8000de2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db8:	f7ff fe92 	bl	8000ae0 <HAL_GetTick>
 8000dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dbe:	e008      	b.n	8000dd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dc0:	f7ff fe8e 	bl	8000ae0 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	2b64      	cmp	r3, #100	; 0x64
 8000dcc:	d901      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e1ec      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd2:	4b53      	ldr	r3, [pc, #332]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1f0      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x10c>
 8000dde:	e000      	b.n	8000de2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d063      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dee:	4b4c      	ldr	r3, [pc, #304]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 030c 	and.w	r3, r3, #12
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d00b      	beq.n	8000e12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dfa:	4b49      	ldr	r3, [pc, #292]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 030c 	and.w	r3, r3, #12
 8000e02:	2b08      	cmp	r3, #8
 8000e04:	d11c      	bne.n	8000e40 <HAL_RCC_OscConfig+0x18c>
 8000e06:	4b46      	ldr	r3, [pc, #280]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d116      	bne.n	8000e40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e12:	4b43      	ldr	r3, [pc, #268]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d005      	beq.n	8000e2a <HAL_RCC_OscConfig+0x176>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d001      	beq.n	8000e2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e1c0      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2a:	4b3d      	ldr	r3, [pc, #244]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	4939      	ldr	r1, [pc, #228]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e3e:	e03a      	b.n	8000eb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d020      	beq.n	8000e8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e48:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <HAL_RCC_OscConfig+0x270>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4e:	f7ff fe47 	bl	8000ae0 <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e54:	e008      	b.n	8000e68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e56:	f7ff fe43 	bl	8000ae0 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e1a1      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e68:	4b2d      	ldr	r3, [pc, #180]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f0      	beq.n	8000e56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e74:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	4927      	ldr	r1, [pc, #156]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	4313      	orrs	r3, r2
 8000e86:	600b      	str	r3, [r1, #0]
 8000e88:	e015      	b.n	8000eb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e8a:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <HAL_RCC_OscConfig+0x270>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e90:	f7ff fe26 	bl	8000ae0 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e98:	f7ff fe22 	bl	8000ae0 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e180      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f0      	bne.n	8000e98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d03a      	beq.n	8000f38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d019      	beq.n	8000efe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_RCC_OscConfig+0x274>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed0:	f7ff fe06 	bl	8000ae0 <HAL_GetTick>
 8000ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ed8:	f7ff fe02 	bl	8000ae0 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e160      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d0f0      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f000 faf4 	bl	80014e4 <RCC_Delay>
 8000efc:	e01c      	b.n	8000f38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_RCC_OscConfig+0x274>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f04:	f7ff fdec 	bl	8000ae0 <HAL_GetTick>
 8000f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0a:	e00f      	b.n	8000f2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f0c:	f7ff fde8 	bl	8000ae0 <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d908      	bls.n	8000f2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e146      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000
 8000f24:	42420000 	.word	0x42420000
 8000f28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f2c:	4b92      	ldr	r3, [pc, #584]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1e9      	bne.n	8000f0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 80a6 	beq.w	8001092 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f4a:	4b8b      	ldr	r3, [pc, #556]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10d      	bne.n	8000f72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f56:	4b88      	ldr	r3, [pc, #544]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a87      	ldr	r2, [pc, #540]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f60:	61d3      	str	r3, [r2, #28]
 8000f62:	4b85      	ldr	r3, [pc, #532]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f72:	4b82      	ldr	r3, [pc, #520]	; (800117c <HAL_RCC_OscConfig+0x4c8>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d118      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f7e:	4b7f      	ldr	r3, [pc, #508]	; (800117c <HAL_RCC_OscConfig+0x4c8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a7e      	ldr	r2, [pc, #504]	; (800117c <HAL_RCC_OscConfig+0x4c8>)
 8000f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f8a:	f7ff fda9 	bl	8000ae0 <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f92:	f7ff fda5 	bl	8000ae0 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b64      	cmp	r3, #100	; 0x64
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e103      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa4:	4b75      	ldr	r3, [pc, #468]	; (800117c <HAL_RCC_OscConfig+0x4c8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0f0      	beq.n	8000f92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d106      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x312>
 8000fb8:	4b6f      	ldr	r3, [pc, #444]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	4a6e      	ldr	r2, [pc, #440]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6213      	str	r3, [r2, #32]
 8000fc4:	e02d      	b.n	8001022 <HAL_RCC_OscConfig+0x36e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x334>
 8000fce:	4b6a      	ldr	r3, [pc, #424]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	4a69      	ldr	r2, [pc, #420]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	f023 0301 	bic.w	r3, r3, #1
 8000fd8:	6213      	str	r3, [r2, #32]
 8000fda:	4b67      	ldr	r3, [pc, #412]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	4a66      	ldr	r2, [pc, #408]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	f023 0304 	bic.w	r3, r3, #4
 8000fe4:	6213      	str	r3, [r2, #32]
 8000fe6:	e01c      	b.n	8001022 <HAL_RCC_OscConfig+0x36e>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	2b05      	cmp	r3, #5
 8000fee:	d10c      	bne.n	800100a <HAL_RCC_OscConfig+0x356>
 8000ff0:	4b61      	ldr	r3, [pc, #388]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	4a60      	ldr	r2, [pc, #384]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	6213      	str	r3, [r2, #32]
 8000ffc:	4b5e      	ldr	r3, [pc, #376]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	4a5d      	ldr	r2, [pc, #372]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	6213      	str	r3, [r2, #32]
 8001008:	e00b      	b.n	8001022 <HAL_RCC_OscConfig+0x36e>
 800100a:	4b5b      	ldr	r3, [pc, #364]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	4a5a      	ldr	r2, [pc, #360]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001010:	f023 0301 	bic.w	r3, r3, #1
 8001014:	6213      	str	r3, [r2, #32]
 8001016:	4b58      	ldr	r3, [pc, #352]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	4a57      	ldr	r2, [pc, #348]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	f023 0304 	bic.w	r3, r3, #4
 8001020:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d015      	beq.n	8001056 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800102a:	f7ff fd59 	bl	8000ae0 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001030:	e00a      	b.n	8001048 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001032:	f7ff fd55 	bl	8000ae0 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001040:	4293      	cmp	r3, r2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e0b1      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001048:	4b4b      	ldr	r3, [pc, #300]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0ee      	beq.n	8001032 <HAL_RCC_OscConfig+0x37e>
 8001054:	e014      	b.n	8001080 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001056:	f7ff fd43 	bl	8000ae0 <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800105c:	e00a      	b.n	8001074 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800105e:	f7ff fd3f 	bl	8000ae0 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	f241 3288 	movw	r2, #5000	; 0x1388
 800106c:	4293      	cmp	r3, r2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e09b      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001074:	4b40      	ldr	r3, [pc, #256]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1ee      	bne.n	800105e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d105      	bne.n	8001092 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001086:	4b3c      	ldr	r3, [pc, #240]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a3b      	ldr	r2, [pc, #236]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001090:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 8087 	beq.w	80011aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800109c:	4b36      	ldr	r3, [pc, #216]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 030c 	and.w	r3, r3, #12
 80010a4:	2b08      	cmp	r3, #8
 80010a6:	d061      	beq.n	800116c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69db      	ldr	r3, [r3, #28]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d146      	bne.n	800113e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010b0:	4b33      	ldr	r3, [pc, #204]	; (8001180 <HAL_RCC_OscConfig+0x4cc>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b6:	f7ff fd13 	bl	8000ae0 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010be:	f7ff fd0f 	bl	8000ae0 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e06d      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d0:	4b29      	ldr	r3, [pc, #164]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1f0      	bne.n	80010be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e4:	d108      	bne.n	80010f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010e6:	4b24      	ldr	r3, [pc, #144]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4921      	ldr	r1, [pc, #132]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010f8:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a19      	ldr	r1, [r3, #32]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	430b      	orrs	r3, r1
 800110a:	491b      	ldr	r1, [pc, #108]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 800110c:	4313      	orrs	r3, r2
 800110e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <HAL_RCC_OscConfig+0x4cc>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001116:	f7ff fce3 	bl	8000ae0 <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800111e:	f7ff fcdf 	bl	8000ae0 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e03d      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0x46a>
 800113c:	e035      	b.n	80011aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <HAL_RCC_OscConfig+0x4cc>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff fccc 	bl	8000ae0 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800114c:	f7ff fcc8 	bl	8000ae0 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e026      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f0      	bne.n	800114c <HAL_RCC_OscConfig+0x498>
 800116a:	e01e      	b.n	80011aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d107      	bne.n	8001184 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e019      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
 8001178:	40021000 	.word	0x40021000
 800117c:	40007000 	.word	0x40007000
 8001180:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_RCC_OscConfig+0x500>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	429a      	cmp	r2, r3
 8001196:	d106      	bne.n	80011a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d001      	beq.n	80011aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40021000 	.word	0x40021000

080011b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e0d0      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011cc:	4b6a      	ldr	r3, [pc, #424]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d910      	bls.n	80011fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011da:	4b67      	ldr	r3, [pc, #412]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 0207 	bic.w	r2, r3, #7
 80011e2:	4965      	ldr	r1, [pc, #404]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ea:	4b63      	ldr	r3, [pc, #396]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d001      	beq.n	80011fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e0b8      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d020      	beq.n	800124a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001214:	4b59      	ldr	r3, [pc, #356]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	4a58      	ldr	r2, [pc, #352]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800121e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800122c:	4b53      	ldr	r3, [pc, #332]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	4a52      	ldr	r2, [pc, #328]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001236:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001238:	4b50      	ldr	r3, [pc, #320]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	494d      	ldr	r1, [pc, #308]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	4313      	orrs	r3, r2
 8001248:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d040      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d107      	bne.n	800126e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	4b47      	ldr	r3, [pc, #284]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d115      	bne.n	8001296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e07f      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d107      	bne.n	8001286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001276:	4b41      	ldr	r3, [pc, #260]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d109      	bne.n	8001296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e073      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001286:	4b3d      	ldr	r3, [pc, #244]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e06b      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001296:	4b39      	ldr	r3, [pc, #228]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f023 0203 	bic.w	r2, r3, #3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	4936      	ldr	r1, [pc, #216]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012a8:	f7ff fc1a 	bl	8000ae0 <HAL_GetTick>
 80012ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ae:	e00a      	b.n	80012c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b0:	f7ff fc16 	bl	8000ae0 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80012be:	4293      	cmp	r3, r2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e053      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c6:	4b2d      	ldr	r3, [pc, #180]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 020c 	and.w	r2, r3, #12
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d1eb      	bne.n	80012b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012d8:	4b27      	ldr	r3, [pc, #156]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d210      	bcs.n	8001308 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e6:	4b24      	ldr	r3, [pc, #144]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 0207 	bic.w	r2, r3, #7
 80012ee:	4922      	ldr	r1, [pc, #136]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d001      	beq.n	8001308 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e032      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	d008      	beq.n	8001326 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	4916      	ldr	r1, [pc, #88]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d009      	beq.n	8001346 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	490e      	ldr	r1, [pc, #56]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	4313      	orrs	r3, r2
 8001344:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001346:	f000 f821 	bl	800138c <HAL_RCC_GetSysClockFreq>
 800134a:	4602      	mov	r2, r0
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	490a      	ldr	r1, [pc, #40]	; (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 8001358:	5ccb      	ldrb	r3, [r1, r3]
 800135a:	fa22 f303 	lsr.w	r3, r2, r3
 800135e:	4a09      	ldr	r2, [pc, #36]	; (8001384 <HAL_RCC_ClockConfig+0x1cc>)
 8001360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_RCC_ClockConfig+0x1d0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fa44 	bl	80007f4 <HAL_InitTick>

  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40022000 	.word	0x40022000
 800137c:	40021000 	.word	0x40021000
 8001380:	080050f4 	.word	0x080050f4
 8001384:	20000050 	.word	0x20000050
 8001388:	20000054 	.word	0x20000054

0800138c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800138c:	b490      	push	{r4, r7}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001392:	4b29      	ldr	r3, [pc, #164]	; (8001438 <HAL_RCC_GetSysClockFreq+0xac>)
 8001394:	1d3c      	adds	r4, r7, #4
 8001396:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001398:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800139c:	f240 2301 	movw	r3, #513	; 0x201
 80013a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013b6:	4b21      	ldr	r3, [pc, #132]	; (800143c <HAL_RCC_GetSysClockFreq+0xb0>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d002      	beq.n	80013cc <HAL_RCC_GetSysClockFreq+0x40>
 80013c6:	2b08      	cmp	r3, #8
 80013c8:	d003      	beq.n	80013d2 <HAL_RCC_GetSysClockFreq+0x46>
 80013ca:	e02b      	b.n	8001424 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013ce:	623b      	str	r3, [r7, #32]
      break;
 80013d0:	e02b      	b.n	800142a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	0c9b      	lsrs	r3, r3, #18
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3328      	adds	r3, #40	; 0x28
 80013dc:	443b      	add	r3, r7
 80013de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013e2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d012      	beq.n	8001414 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <HAL_RCC_GetSysClockFreq+0xb0>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	0c5b      	lsrs	r3, r3, #17
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	3328      	adds	r3, #40	; 0x28
 80013fa:	443b      	add	r3, r7
 80013fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001400:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001406:	fb03 f202 	mul.w	r2, r3, r2
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
 8001412:	e004      	b.n	800141e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001418:	fb02 f303 	mul.w	r3, r2, r3
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	623b      	str	r3, [r7, #32]
      break;
 8001422:	e002      	b.n	800142a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001426:	623b      	str	r3, [r7, #32]
      break;
 8001428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800142a:	6a3b      	ldr	r3, [r7, #32]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3728      	adds	r7, #40	; 0x28
 8001430:	46bd      	mov	sp, r7
 8001432:	bc90      	pop	{r4, r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	080050dc 	.word	0x080050dc
 800143c:	40021000 	.word	0x40021000
 8001440:	007a1200 	.word	0x007a1200
 8001444:	003d0900 	.word	0x003d0900

08001448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800144c:	4b02      	ldr	r3, [pc, #8]	; (8001458 <HAL_RCC_GetHCLKFreq+0x10>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	20000050 	.word	0x20000050

0800145c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001460:	f7ff fff2 	bl	8001448 <HAL_RCC_GetHCLKFreq>
 8001464:	4602      	mov	r2, r0
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	0a1b      	lsrs	r3, r3, #8
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	4903      	ldr	r1, [pc, #12]	; (8001480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001472:	5ccb      	ldrb	r3, [r1, r3]
 8001474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001478:	4618      	mov	r0, r3
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000
 8001480:	08005104 	.word	0x08005104

08001484 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	220f      	movs	r2, #15
 8001492:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <HAL_RCC_GetClockConfig+0x58>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0203 	and.w	r2, r3, #3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014a0:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <HAL_RCC_GetClockConfig+0x58>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_RCC_GetClockConfig+0x58>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <HAL_RCC_GetClockConfig+0x58>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	08db      	lsrs	r3, r3, #3
 80014be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_RCC_GetClockConfig+0x5c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0207 	and.w	r2, r3, #7
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40022000 	.word	0x40022000

080014e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <RCC_Delay+0x34>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0a      	ldr	r2, [pc, #40]	; (800151c <RCC_Delay+0x38>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	0a5b      	lsrs	r3, r3, #9
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001500:	bf00      	nop
  }
  while (Delay --);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1e5a      	subs	r2, r3, #1
 8001506:	60fa      	str	r2, [r7, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f9      	bne.n	8001500 <RCC_Delay+0x1c>
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	20000050 	.word	0x20000050
 800151c:	10624dd3 	.word	0x10624dd3

08001520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e041      	b.n	80015b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d106      	bne.n	800154c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f839 	bl	80015be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2202      	movs	r2, #2
 8001550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3304      	adds	r3, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4610      	mov	r0, r2
 8001560:	f000 f9b4 	bl	80018cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d001      	beq.n	80015e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e03a      	b.n	800165e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2202      	movs	r2, #2
 80015ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0201 	orr.w	r2, r2, #1
 80015fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a18      	ldr	r2, [pc, #96]	; (8001668 <HAL_TIM_Base_Start_IT+0x98>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d00e      	beq.n	8001628 <HAL_TIM_Base_Start_IT+0x58>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001612:	d009      	beq.n	8001628 <HAL_TIM_Base_Start_IT+0x58>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a14      	ldr	r2, [pc, #80]	; (800166c <HAL_TIM_Base_Start_IT+0x9c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d004      	beq.n	8001628 <HAL_TIM_Base_Start_IT+0x58>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a13      	ldr	r2, [pc, #76]	; (8001670 <HAL_TIM_Base_Start_IT+0xa0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d111      	bne.n	800164c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b06      	cmp	r3, #6
 8001638:	d010      	beq.n	800165c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f042 0201 	orr.w	r2, r2, #1
 8001648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800164a:	e007      	b.n	800165c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0201 	orr.w	r2, r2, #1
 800165a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	40012c00 	.word	0x40012c00
 800166c:	40000400 	.word	0x40000400
 8001670:	40000800 	.word	0x40000800

08001674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b02      	cmp	r3, #2
 8001688:	d122      	bne.n	80016d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b02      	cmp	r3, #2
 8001696:	d11b      	bne.n	80016d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f06f 0202 	mvn.w	r2, #2
 80016a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f8ed 	bl	8001896 <HAL_TIM_IC_CaptureCallback>
 80016bc:	e005      	b.n	80016ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f8e0 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 f8ef 	bl	80018a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d122      	bne.n	8001724 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d11b      	bne.n	8001724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f06f 0204 	mvn.w	r2, #4
 80016f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2202      	movs	r2, #2
 80016fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f8c3 	bl	8001896 <HAL_TIM_IC_CaptureCallback>
 8001710:	e005      	b.n	800171e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f8b6 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f8c5 	bl	80018a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b08      	cmp	r3, #8
 8001730:	d122      	bne.n	8001778 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b08      	cmp	r3, #8
 800173e:	d11b      	bne.n	8001778 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f06f 0208 	mvn.w	r2, #8
 8001748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2204      	movs	r2, #4
 800174e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f899 	bl	8001896 <HAL_TIM_IC_CaptureCallback>
 8001764:	e005      	b.n	8001772 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f88c 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f89b 	bl	80018a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b10      	cmp	r3, #16
 8001784:	d122      	bne.n	80017cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b10      	cmp	r3, #16
 8001792:	d11b      	bne.n	80017cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f06f 0210 	mvn.w	r2, #16
 800179c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2208      	movs	r2, #8
 80017a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f86f 	bl	8001896 <HAL_TIM_IC_CaptureCallback>
 80017b8:	e005      	b.n	80017c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f862 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f871 	bl	80018a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d10e      	bne.n	80017f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d107      	bne.n	80017f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f06f 0201 	mvn.w	r2, #1
 80017f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7fe ff88 	bl	8000708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001802:	2b80      	cmp	r3, #128	; 0x80
 8001804:	d10e      	bne.n	8001824 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001810:	2b80      	cmp	r3, #128	; 0x80
 8001812:	d107      	bne.n	8001824 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800181c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f8bf 	bl	80019a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182e:	2b40      	cmp	r3, #64	; 0x40
 8001830:	d10e      	bne.n	8001850 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183c:	2b40      	cmp	r3, #64	; 0x40
 800183e:	d107      	bne.n	8001850 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f835 	bl	80018ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	2b20      	cmp	r3, #32
 800185c:	d10e      	bne.n	800187c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 0320 	and.w	r3, r3, #32
 8001868:	2b20      	cmp	r3, #32
 800186a:	d107      	bne.n	800187c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f06f 0220 	mvn.w	r2, #32
 8001874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f88a 	bl	8001990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr

08001896 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a29      	ldr	r2, [pc, #164]	; (8001984 <TIM_Base_SetConfig+0xb8>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d00b      	beq.n	80018fc <TIM_Base_SetConfig+0x30>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ea:	d007      	beq.n	80018fc <TIM_Base_SetConfig+0x30>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a26      	ldr	r2, [pc, #152]	; (8001988 <TIM_Base_SetConfig+0xbc>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d003      	beq.n	80018fc <TIM_Base_SetConfig+0x30>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a25      	ldr	r2, [pc, #148]	; (800198c <TIM_Base_SetConfig+0xc0>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d108      	bne.n	800190e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	4313      	orrs	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a1c      	ldr	r2, [pc, #112]	; (8001984 <TIM_Base_SetConfig+0xb8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d00b      	beq.n	800192e <TIM_Base_SetConfig+0x62>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800191c:	d007      	beq.n	800192e <TIM_Base_SetConfig+0x62>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a19      	ldr	r2, [pc, #100]	; (8001988 <TIM_Base_SetConfig+0xbc>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d003      	beq.n	800192e <TIM_Base_SetConfig+0x62>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a18      	ldr	r2, [pc, #96]	; (800198c <TIM_Base_SetConfig+0xc0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d108      	bne.n	8001940 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	4313      	orrs	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	4313      	orrs	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a07      	ldr	r2, [pc, #28]	; (8001984 <TIM_Base_SetConfig+0xb8>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d103      	bne.n	8001974 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	691a      	ldr	r2, [r3, #16]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	615a      	str	r2, [r3, #20]
}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	40012c00 	.word	0x40012c00
 8001988:	40000400 	.word	0x40000400
 800198c:	40000800 	.word	0x40000800

08001990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80019c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c6:	2b84      	cmp	r3, #132	; 0x84
 80019c8:	d005      	beq.n	80019d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80019ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4413      	add	r3, r2
 80019d2:	3303      	adds	r3, #3
 80019d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr

080019e2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019e8:	f3ef 8305 	mrs	r3, IPSR
 80019ec:	607b      	str	r3, [r7, #4]
  return(result);
 80019ee:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001a08:	f001 f918 	bl	8002c3c <vTaskStartScheduler>
  
  return osOK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8001a16:	f7ff ffe4 	bl	80019e2 <inHandlerMode>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8001a20:	f001 fa2e 	bl	8002e80 <xTaskGetTickCountFromISR>
 8001a24:	4603      	mov	r3, r0
 8001a26:	e002      	b.n	8001a2e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8001a28:	f001 fa1c 	bl	8002e64 <xTaskGetTickCount>
 8001a2c:	4603      	mov	r3, r0
  }
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001a32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a34:	b089      	sub	sp, #36	; 0x24
 8001a36:	af04      	add	r7, sp, #16
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d020      	beq.n	8001a86 <osThreadCreate+0x54>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d01c      	beq.n	8001a86 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685c      	ldr	r4, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681d      	ldr	r5, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691e      	ldr	r6, [r3, #16]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ffa8 	bl	80019b4 <makeFreeRtosPriority>
 8001a64:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a6e:	9202      	str	r2, [sp, #8]
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	9100      	str	r1, [sp, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4632      	mov	r2, r6
 8001a78:	4629      	mov	r1, r5
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f000 ff08 	bl	8002890 <xTaskCreateStatic>
 8001a80:	4603      	mov	r3, r0
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	e01c      	b.n	8001ac0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685c      	ldr	r4, [r3, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a92:	b29e      	uxth	r6, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ff8a 	bl	80019b4 <makeFreeRtosPriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	9200      	str	r2, [sp, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	4632      	mov	r2, r6
 8001aae:	4629      	mov	r1, r5
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f000 ff49 	bl	8002948 <xTaskCreate>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d001      	beq.n	8001ac0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e000      	b.n	8001ac2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <osDelay+0x16>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	e000      	b.n	8001ae2 <osDelay+0x18>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f001 f876 	bl	8002bd4 <vTaskDelay>
  
  return osOK;
 8001ae8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001af2:	b590      	push	{r4, r7, lr}
 8001af4:	b085      	sub	sp, #20
 8001af6:	af02      	add	r7, sp, #8
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d011      	beq.n	8001b28 <osMessageCreate+0x36>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00d      	beq.n	8001b28 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6859      	ldr	r1, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	9400      	str	r4, [sp, #0]
 8001b20:	f000 f9dc 	bl	8001edc <xQueueGenericCreateStatic>
 8001b24:	4603      	mov	r3, r0
 8001b26:	e008      	b.n	8001b3a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6818      	ldr	r0, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	4619      	mov	r1, r3
 8001b34:	f000 fa49 	bl	8001fca <xQueueGenericCreate>
 8001b38:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd90      	pop	{r4, r7, pc}
	...

08001b44 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <osMessagePut+0x1e>
    ticks = 1;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8001b62:	f7ff ff3e 	bl	80019e2 <inHandlerMode>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d018      	beq.n	8001b9e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8001b6c:	f107 0210 	add.w	r2, r7, #16
 8001b70:	f107 0108 	add.w	r1, r7, #8
 8001b74:	2300      	movs	r3, #0
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 fb82 	bl	8002280 <xQueueGenericSendFromISR>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d001      	beq.n	8001b86 <osMessagePut+0x42>
      return osErrorOS;
 8001b82:	23ff      	movs	r3, #255	; 0xff
 8001b84:	e018      	b.n	8001bb8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d014      	beq.n	8001bb6 <osMessagePut+0x72>
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <osMessagePut+0x7c>)
 8001b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	f3bf 8f4f 	dsb	sy
 8001b98:	f3bf 8f6f 	isb	sy
 8001b9c:	e00b      	b.n	8001bb6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8001b9e:	f107 0108 	add.w	r1, r7, #8
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 fa6c 	bl	8002084 <xQueueGenericSend>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d001      	beq.n	8001bb6 <osMessagePut+0x72>
      return osErrorOS;
 8001bb2:	23ff      	movs	r3, #255	; 0xff
 8001bb4:	e000      	b.n	8001bb8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	e000ed04 	.word	0xe000ed04

08001bc4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b08b      	sub	sp, #44	; 0x2c
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10a      	bne.n	8001bf4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	617b      	str	r3, [r7, #20]
    return event;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	461c      	mov	r4, r3
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001bee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001bf2:	e054      	b.n	8001c9e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c02:	d103      	bne.n	8001c0c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0a:	e009      	b.n	8001c20 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d006      	beq.n	8001c20 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <osMessageGet+0x5c>
      ticks = 1;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8001c20:	f7ff fedf 	bl	80019e2 <inHandlerMode>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d01c      	beq.n	8001c64 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8001c2a:	f107 0220 	add.w	r2, r7, #32
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	3304      	adds	r3, #4
 8001c34:	4619      	mov	r1, r3
 8001c36:	68b8      	ldr	r0, [r7, #8]
 8001c38:	f000 fc9a 	bl	8002570 <xQueueReceiveFromISR>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d102      	bne.n	8001c48 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8001c42:	2310      	movs	r3, #16
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e001      	b.n	8001c4c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d01d      	beq.n	8001c8e <osMessageGet+0xca>
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <osMessageGet+0xe4>)
 8001c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	f3bf 8f4f 	dsb	sy
 8001c5e:	f3bf 8f6f 	isb	sy
 8001c62:	e014      	b.n	8001c8e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	3304      	adds	r3, #4
 8001c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	68b8      	ldr	r0, [r7, #8]
 8001c70:	f000 fb9e 	bl	80023b0 <xQueueReceive>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d102      	bne.n	8001c80 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8001c7a:	2310      	movs	r3, #16
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	e006      	b.n	8001c8e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <osMessageGet+0xc6>
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <osMessageGet+0xc8>
 8001c8a:	2340      	movs	r3, #64	; 0x40
 8001c8c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	461c      	mov	r4, r3
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	372c      	adds	r7, #44	; 0x2c
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd90      	pop	{r4, r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	e000ed04 	.word	0xe000ed04

08001cac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f103 0208 	add.w	r2, r3, #8
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f103 0208 	add.w	r2, r3, #8
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f103 0208 	add.w	r2, r3, #8
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d02:	b480      	push	{r7}
 8001d04:	b085      	sub	sp, #20
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	601a      	str	r2, [r3, #0]
}
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5e:	d103      	bne.n	8001d68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	e00c      	b.n	8001d82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3308      	adds	r3, #8
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	e002      	b.n	8001d76 <vListInsert+0x2e>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d2f6      	bcs.n	8001d70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	601a      	str	r2, [r3, #0]
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6892      	ldr	r2, [r2, #8]
 8001dce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6852      	ldr	r2, [r2, #4]
 8001dd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d103      	bne.n	8001dec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	1e5a      	subs	r2, r3, #1
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr
	...

08001e0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10a      	bne.n	8001e36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e24:	f383 8811 	msr	BASEPRI, r3
 8001e28:	f3bf 8f6f 	isb	sy
 8001e2c:	f3bf 8f4f 	dsb	sy
 8001e30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001e32:	bf00      	nop
 8001e34:	e7fe      	b.n	8001e34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001e36:	f001 fd39 	bl	80038ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e42:	68f9      	ldr	r1, [r7, #12]
 8001e44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	441a      	add	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e66:	3b01      	subs	r3, #1
 8001e68:	68f9      	ldr	r1, [r7, #12]
 8001e6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001e6c:	fb01 f303 	mul.w	r3, r1, r3
 8001e70:	441a      	add	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	22ff      	movs	r2, #255	; 0xff
 8001e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	22ff      	movs	r2, #255	; 0xff
 8001e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d114      	bne.n	8001eb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01a      	beq.n	8001eca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3310      	adds	r3, #16
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f001 f947 	bl	800312c <xTaskRemoveFromEventList>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d012      	beq.n	8001eca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <xQueueGenericReset+0xcc>)
 8001ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	f3bf 8f4f 	dsb	sy
 8001eb0:	f3bf 8f6f 	isb	sy
 8001eb4:	e009      	b.n	8001eca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	3310      	adds	r3, #16
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fef6 	bl	8001cac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3324      	adds	r3, #36	; 0x24
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fef1 	bl	8001cac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001eca:	f001 fd1f 	bl	800390c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001ece:	2301      	movs	r3, #1
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	e000ed04 	.word	0xe000ed04

08001edc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08e      	sub	sp, #56	; 0x38
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10a      	bne.n	8001f06 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef4:	f383 8811 	msr	BASEPRI, r3
 8001ef8:	f3bf 8f6f 	isb	sy
 8001efc:	f3bf 8f4f 	dsb	sy
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001f02:	bf00      	nop
 8001f04:	e7fe      	b.n	8001f04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10a      	bne.n	8001f22 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f10:	f383 8811 	msr	BASEPRI, r3
 8001f14:	f3bf 8f6f 	isb	sy
 8001f18:	f3bf 8f4f 	dsb	sy
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001f1e:	bf00      	nop
 8001f20:	e7fe      	b.n	8001f20 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <xQueueGenericCreateStatic+0x52>
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <xQueueGenericCreateStatic+0x56>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <xQueueGenericCreateStatic+0x58>
 8001f32:	2300      	movs	r3, #0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10a      	bne.n	8001f4e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3c:	f383 8811 	msr	BASEPRI, r3
 8001f40:	f3bf 8f6f 	isb	sy
 8001f44:	f3bf 8f4f 	dsb	sy
 8001f48:	623b      	str	r3, [r7, #32]
}
 8001f4a:	bf00      	nop
 8001f4c:	e7fe      	b.n	8001f4c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <xQueueGenericCreateStatic+0x7e>
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <xQueueGenericCreateStatic+0x82>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <xQueueGenericCreateStatic+0x84>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10a      	bne.n	8001f7a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f68:	f383 8811 	msr	BASEPRI, r3
 8001f6c:	f3bf 8f6f 	isb	sy
 8001f70:	f3bf 8f4f 	dsb	sy
 8001f74:	61fb      	str	r3, [r7, #28]
}
 8001f76:	bf00      	nop
 8001f78:	e7fe      	b.n	8001f78 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001f7a:	2348      	movs	r3, #72	; 0x48
 8001f7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b48      	cmp	r3, #72	; 0x48
 8001f82:	d00a      	beq.n	8001f9a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f88:	f383 8811 	msr	BASEPRI, r3
 8001f8c:	f3bf 8f6f 	isb	sy
 8001f90:	f3bf 8f4f 	dsb	sy
 8001f94:	61bb      	str	r3, [r7, #24]
}
 8001f96:	bf00      	nop
 8001f98:	e7fe      	b.n	8001f98 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00d      	beq.n	8001fc0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001fac:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 f843 	bl	8002046 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3730      	adds	r7, #48	; 0x30
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b08a      	sub	sp, #40	; 0x28
 8001fce:	af02      	add	r7, sp, #8
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10a      	bne.n	8001ff4 <xQueueGenericCreate+0x2a>
	__asm volatile
 8001fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe2:	f383 8811 	msr	BASEPRI, r3
 8001fe6:	f3bf 8f6f 	isb	sy
 8001fea:	f3bf 8f4f 	dsb	sy
 8001fee:	613b      	str	r3, [r7, #16]
}
 8001ff0:	bf00      	nop
 8001ff2:	e7fe      	b.n	8001ff2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d102      	bne.n	8002000 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	e004      	b.n	800200a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	fb02 f303 	mul.w	r3, r2, r3
 8002008:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3348      	adds	r3, #72	; 0x48
 800200e:	4618      	mov	r0, r3
 8002010:	f001 fd4c 	bl	8003aac <pvPortMalloc>
 8002014:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00f      	beq.n	800203c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	3348      	adds	r3, #72	; 0x48
 8002020:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800202a:	79fa      	ldrb	r2, [r7, #7]
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f805 	bl	8002046 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800203c:	69bb      	ldr	r3, [r7, #24]
	}
 800203e:	4618      	mov	r0, r3
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b084      	sub	sp, #16
 800204a:	af00      	add	r7, sp, #0
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d103      	bne.n	8002062 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	e002      	b.n	8002068 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002074:	2101      	movs	r1, #1
 8002076:	69b8      	ldr	r0, [r7, #24]
 8002078:	f7ff fec8 	bl	8001e0c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08e      	sub	sp, #56	; 0x38
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002092:	2300      	movs	r3, #0
 8002094:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10a      	bne.n	80020b6 <xQueueGenericSend+0x32>
	__asm volatile
 80020a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a4:	f383 8811 	msr	BASEPRI, r3
 80020a8:	f3bf 8f6f 	isb	sy
 80020ac:	f3bf 8f4f 	dsb	sy
 80020b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80020b2:	bf00      	nop
 80020b4:	e7fe      	b.n	80020b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d103      	bne.n	80020c4 <xQueueGenericSend+0x40>
 80020bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <xQueueGenericSend+0x44>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <xQueueGenericSend+0x46>
 80020c8:	2300      	movs	r3, #0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10a      	bne.n	80020e4 <xQueueGenericSend+0x60>
	__asm volatile
 80020ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d2:	f383 8811 	msr	BASEPRI, r3
 80020d6:	f3bf 8f6f 	isb	sy
 80020da:	f3bf 8f4f 	dsb	sy
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80020e0:	bf00      	nop
 80020e2:	e7fe      	b.n	80020e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d103      	bne.n	80020f2 <xQueueGenericSend+0x6e>
 80020ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <xQueueGenericSend+0x72>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <xQueueGenericSend+0x74>
 80020f6:	2300      	movs	r3, #0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10a      	bne.n	8002112 <xQueueGenericSend+0x8e>
	__asm volatile
 80020fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002100:	f383 8811 	msr	BASEPRI, r3
 8002104:	f3bf 8f6f 	isb	sy
 8002108:	f3bf 8f4f 	dsb	sy
 800210c:	623b      	str	r3, [r7, #32]
}
 800210e:	bf00      	nop
 8002110:	e7fe      	b.n	8002110 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002112:	f001 f9cf 	bl	80034b4 <xTaskGetSchedulerState>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d102      	bne.n	8002122 <xQueueGenericSend+0x9e>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <xQueueGenericSend+0xa2>
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <xQueueGenericSend+0xa4>
 8002126:	2300      	movs	r3, #0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10a      	bne.n	8002142 <xQueueGenericSend+0xbe>
	__asm volatile
 800212c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002130:	f383 8811 	msr	BASEPRI, r3
 8002134:	f3bf 8f6f 	isb	sy
 8002138:	f3bf 8f4f 	dsb	sy
 800213c:	61fb      	str	r3, [r7, #28]
}
 800213e:	bf00      	nop
 8002140:	e7fe      	b.n	8002140 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002142:	f001 fbb3 	bl	80038ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800214a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214e:	429a      	cmp	r2, r3
 8002150:	d302      	bcc.n	8002158 <xQueueGenericSend+0xd4>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b02      	cmp	r3, #2
 8002156:	d129      	bne.n	80021ac <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	68b9      	ldr	r1, [r7, #8]
 800215c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800215e:	f000 fa87 	bl	8002670 <prvCopyDataToQueue>
 8002162:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	2b00      	cmp	r3, #0
 800216a:	d010      	beq.n	800218e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800216c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216e:	3324      	adds	r3, #36	; 0x24
 8002170:	4618      	mov	r0, r3
 8002172:	f000 ffdb 	bl	800312c <xTaskRemoveFromEventList>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800217c:	4b3f      	ldr	r3, [pc, #252]	; (800227c <xQueueGenericSend+0x1f8>)
 800217e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	f3bf 8f4f 	dsb	sy
 8002188:	f3bf 8f6f 	isb	sy
 800218c:	e00a      	b.n	80021a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800218e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002194:	4b39      	ldr	r3, [pc, #228]	; (800227c <xQueueGenericSend+0x1f8>)
 8002196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	f3bf 8f4f 	dsb	sy
 80021a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80021a4:	f001 fbb2 	bl	800390c <vPortExitCritical>
				return pdPASS;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e063      	b.n	8002274 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d103      	bne.n	80021ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80021b2:	f001 fbab 	bl	800390c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e05c      	b.n	8002274 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80021ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d106      	bne.n	80021ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4618      	mov	r0, r3
 80021c6:	f001 f813 	bl	80031f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80021ca:	2301      	movs	r3, #1
 80021cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80021ce:	f001 fb9d 	bl	800390c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80021d2:	f000 fd9d 	bl	8002d10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80021d6:	f001 fb69 	bl	80038ac <vPortEnterCritical>
 80021da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021e0:	b25b      	sxtb	r3, r3
 80021e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e6:	d103      	bne.n	80021f0 <xQueueGenericSend+0x16c>
 80021e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021f6:	b25b      	sxtb	r3, r3
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d103      	bne.n	8002206 <xQueueGenericSend+0x182>
 80021fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002206:	f001 fb81 	bl	800390c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800220a:	1d3a      	adds	r2, r7, #4
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f001 f802 	bl	800321c <xTaskCheckForTimeOut>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d124      	bne.n	8002268 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800221e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002220:	f000 fb1e 	bl	8002860 <prvIsQueueFull>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d018      	beq.n	800225c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222c:	3310      	adds	r3, #16
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f000 ff56 	bl	80030e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800223a:	f000 faa9 	bl	8002790 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800223e:	f000 fd75 	bl	8002d2c <xTaskResumeAll>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	f47f af7c 	bne.w	8002142 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <xQueueGenericSend+0x1f8>)
 800224c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	f3bf 8f4f 	dsb	sy
 8002256:	f3bf 8f6f 	isb	sy
 800225a:	e772      	b.n	8002142 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800225c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800225e:	f000 fa97 	bl	8002790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002262:	f000 fd63 	bl	8002d2c <xTaskResumeAll>
 8002266:	e76c      	b.n	8002142 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800226a:	f000 fa91 	bl	8002790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800226e:	f000 fd5d 	bl	8002d2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002272:	2300      	movs	r3, #0
		}
	}
}
 8002274:	4618      	mov	r0, r3
 8002276:	3738      	adds	r7, #56	; 0x38
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	e000ed04 	.word	0xe000ed04

08002280 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08e      	sub	sp, #56	; 0x38
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229c:	f383 8811 	msr	BASEPRI, r3
 80022a0:	f3bf 8f6f 	isb	sy
 80022a4:	f3bf 8f4f 	dsb	sy
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80022aa:	bf00      	nop
 80022ac:	e7fe      	b.n	80022ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d103      	bne.n	80022bc <xQueueGenericSendFromISR+0x3c>
 80022b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <xQueueGenericSendFromISR+0x40>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <xQueueGenericSendFromISR+0x42>
 80022c0:	2300      	movs	r3, #0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10a      	bne.n	80022dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80022c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ca:	f383 8811 	msr	BASEPRI, r3
 80022ce:	f3bf 8f6f 	isb	sy
 80022d2:	f3bf 8f4f 	dsb	sy
 80022d6:	623b      	str	r3, [r7, #32]
}
 80022d8:	bf00      	nop
 80022da:	e7fe      	b.n	80022da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d103      	bne.n	80022ea <xQueueGenericSendFromISR+0x6a>
 80022e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <xQueueGenericSendFromISR+0x6e>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <xQueueGenericSendFromISR+0x70>
 80022ee:	2300      	movs	r3, #0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10a      	bne.n	800230a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80022f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f8:	f383 8811 	msr	BASEPRI, r3
 80022fc:	f3bf 8f6f 	isb	sy
 8002300:	f3bf 8f4f 	dsb	sy
 8002304:	61fb      	str	r3, [r7, #28]
}
 8002306:	bf00      	nop
 8002308:	e7fe      	b.n	8002308 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800230a:	f001 fb91 	bl	8003a30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800230e:	f3ef 8211 	mrs	r2, BASEPRI
 8002312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002316:	f383 8811 	msr	BASEPRI, r3
 800231a:	f3bf 8f6f 	isb	sy
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	61ba      	str	r2, [r7, #24]
 8002324:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002326:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800232a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002332:	429a      	cmp	r2, r3
 8002334:	d302      	bcc.n	800233c <xQueueGenericSendFromISR+0xbc>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d12c      	bne.n	8002396 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800234c:	f000 f990 	bl	8002670 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002350:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d112      	bne.n	8002380 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800235a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	2b00      	cmp	r3, #0
 8002360:	d016      	beq.n	8002390 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002364:	3324      	adds	r3, #36	; 0x24
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fee0 	bl	800312c <xTaskRemoveFromEventList>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00e      	beq.n	8002390 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00b      	beq.n	8002390 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	e007      	b.n	8002390 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002380:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002384:	3301      	adds	r3, #1
 8002386:	b2db      	uxtb	r3, r3
 8002388:	b25a      	sxtb	r2, r3
 800238a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002390:	2301      	movs	r3, #1
 8002392:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002394:	e001      	b.n	800239a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002396:	2300      	movs	r3, #0
 8002398:	637b      	str	r3, [r7, #52]	; 0x34
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80023a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80023a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3738      	adds	r7, #56	; 0x38
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08c      	sub	sp, #48	; 0x30
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80023bc:	2300      	movs	r3, #0
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10a      	bne.n	80023e0 <xQueueReceive+0x30>
	__asm volatile
 80023ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ce:	f383 8811 	msr	BASEPRI, r3
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	623b      	str	r3, [r7, #32]
}
 80023dc:	bf00      	nop
 80023de:	e7fe      	b.n	80023de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d103      	bne.n	80023ee <xQueueReceive+0x3e>
 80023e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <xQueueReceive+0x42>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <xQueueReceive+0x44>
 80023f2:	2300      	movs	r3, #0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10a      	bne.n	800240e <xQueueReceive+0x5e>
	__asm volatile
 80023f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fc:	f383 8811 	msr	BASEPRI, r3
 8002400:	f3bf 8f6f 	isb	sy
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	61fb      	str	r3, [r7, #28]
}
 800240a:	bf00      	nop
 800240c:	e7fe      	b.n	800240c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800240e:	f001 f851 	bl	80034b4 <xTaskGetSchedulerState>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <xQueueReceive+0x6e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <xQueueReceive+0x72>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <xQueueReceive+0x74>
 8002422:	2300      	movs	r3, #0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10a      	bne.n	800243e <xQueueReceive+0x8e>
	__asm volatile
 8002428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242c:	f383 8811 	msr	BASEPRI, r3
 8002430:	f3bf 8f6f 	isb	sy
 8002434:	f3bf 8f4f 	dsb	sy
 8002438:	61bb      	str	r3, [r7, #24]
}
 800243a:	bf00      	nop
 800243c:	e7fe      	b.n	800243c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800243e:	f001 fa35 	bl	80038ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002446:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	2b00      	cmp	r3, #0
 800244c:	d01f      	beq.n	800248e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002452:	f000 f977 	bl	8002744 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	1e5a      	subs	r2, r3, #1
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00f      	beq.n	8002486 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002468:	3310      	adds	r3, #16
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fe5e 	bl	800312c <xTaskRemoveFromEventList>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002476:	4b3d      	ldr	r3, [pc, #244]	; (800256c <xQueueReceive+0x1bc>)
 8002478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002486:	f001 fa41 	bl	800390c <vPortExitCritical>
				return pdPASS;
 800248a:	2301      	movs	r3, #1
 800248c:	e069      	b.n	8002562 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d103      	bne.n	800249c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002494:	f001 fa3a 	bl	800390c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002498:	2300      	movs	r3, #0
 800249a:	e062      	b.n	8002562 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024a2:	f107 0310 	add.w	r3, r7, #16
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fea2 	bl	80031f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024ac:	2301      	movs	r3, #1
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024b0:	f001 fa2c 	bl	800390c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024b4:	f000 fc2c 	bl	8002d10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024b8:	f001 f9f8 	bl	80038ac <vPortEnterCritical>
 80024bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024c2:	b25b      	sxtb	r3, r3
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c8:	d103      	bne.n	80024d2 <xQueueReceive+0x122>
 80024ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024d8:	b25b      	sxtb	r3, r3
 80024da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024de:	d103      	bne.n	80024e8 <xQueueReceive+0x138>
 80024e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024e8:	f001 fa10 	bl	800390c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024ec:	1d3a      	adds	r2, r7, #4
 80024ee:	f107 0310 	add.w	r3, r7, #16
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 fe91 	bl	800321c <xTaskCheckForTimeOut>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d123      	bne.n	8002548 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002502:	f000 f997 	bl	8002834 <prvIsQueueEmpty>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d017      	beq.n	800253c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250e:	3324      	adds	r3, #36	; 0x24
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f000 fde5 	bl	80030e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800251a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800251c:	f000 f938 	bl	8002790 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002520:	f000 fc04 	bl	8002d2c <xTaskResumeAll>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d189      	bne.n	800243e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <xQueueReceive+0x1bc>)
 800252c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	f3bf 8f4f 	dsb	sy
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	e780      	b.n	800243e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800253c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800253e:	f000 f927 	bl	8002790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002542:	f000 fbf3 	bl	8002d2c <xTaskResumeAll>
 8002546:	e77a      	b.n	800243e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800254a:	f000 f921 	bl	8002790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800254e:	f000 fbed 	bl	8002d2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002554:	f000 f96e 	bl	8002834 <prvIsQueueEmpty>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	f43f af6f 	beq.w	800243e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002560:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002562:	4618      	mov	r0, r3
 8002564:	3730      	adds	r7, #48	; 0x30
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	e000ed04 	.word	0xe000ed04

08002570 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08e      	sub	sp, #56	; 0x38
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10a      	bne.n	800259c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258a:	f383 8811 	msr	BASEPRI, r3
 800258e:	f3bf 8f6f 	isb	sy
 8002592:	f3bf 8f4f 	dsb	sy
 8002596:	623b      	str	r3, [r7, #32]
}
 8002598:	bf00      	nop
 800259a:	e7fe      	b.n	800259a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d103      	bne.n	80025aa <xQueueReceiveFromISR+0x3a>
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <xQueueReceiveFromISR+0x3e>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <xQueueReceiveFromISR+0x40>
 80025ae:	2300      	movs	r3, #0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10a      	bne.n	80025ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80025b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b8:	f383 8811 	msr	BASEPRI, r3
 80025bc:	f3bf 8f6f 	isb	sy
 80025c0:	f3bf 8f4f 	dsb	sy
 80025c4:	61fb      	str	r3, [r7, #28]
}
 80025c6:	bf00      	nop
 80025c8:	e7fe      	b.n	80025c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80025ca:	f001 fa31 	bl	8003a30 <vPortValidateInterruptPriority>
	__asm volatile
 80025ce:	f3ef 8211 	mrs	r2, BASEPRI
 80025d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d6:	f383 8811 	msr	BASEPRI, r3
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	61ba      	str	r2, [r7, #24]
 80025e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80025e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d02f      	beq.n	8002656 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80025f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002604:	f000 f89e 	bl	8002744 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260a:	1e5a      	subs	r2, r3, #1
 800260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002610:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d112      	bne.n	8002640 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d016      	beq.n	8002650 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002624:	3310      	adds	r3, #16
 8002626:	4618      	mov	r0, r3
 8002628:	f000 fd80 	bl	800312c <xTaskRemoveFromEventList>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00e      	beq.n	8002650 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00b      	beq.n	8002650 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	e007      	b.n	8002650 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002644:	3301      	adds	r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	b25a      	sxtb	r2, r3
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002650:	2301      	movs	r3, #1
 8002652:	637b      	str	r3, [r7, #52]	; 0x34
 8002654:	e001      	b.n	800265a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002656:	2300      	movs	r3, #0
 8002658:	637b      	str	r3, [r7, #52]	; 0x34
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	f383 8811 	msr	BASEPRI, r3
}
 8002664:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002668:	4618      	mov	r0, r3
 800266a:	3738      	adds	r7, #56	; 0x38
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002684:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10d      	bne.n	80026aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d14d      	bne.n	8002732 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4618      	mov	r0, r3
 800269c:	f000 ff28 	bl	80034f0 <xTaskPriorityDisinherit>
 80026a0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	e043      	b.n	8002732 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d119      	bne.n	80026e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6898      	ldr	r0, [r3, #8]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	461a      	mov	r2, r3
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	f001 fcf1 	bl	80040a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	441a      	add	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d32b      	bcc.n	8002732 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	e026      	b.n	8002732 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	68d8      	ldr	r0, [r3, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	461a      	mov	r2, r3
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	f001 fcd7 	bl	80040a2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	425b      	negs	r3, r3
 80026fe:	441a      	add	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d207      	bcs.n	8002720 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	425b      	negs	r3, r3
 800271a:	441a      	add	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d105      	bne.n	8002732 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	3b01      	subs	r3, #1
 8002730:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800273a:	697b      	ldr	r3, [r7, #20]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	2b00      	cmp	r3, #0
 8002754:	d018      	beq.n	8002788 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	441a      	add	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	d303      	bcc.n	8002778 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68d9      	ldr	r1, [r3, #12]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	461a      	mov	r2, r3
 8002782:	6838      	ldr	r0, [r7, #0]
 8002784:	f001 fc8d 	bl	80040a2 <memcpy>
	}
}
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002798:	f001 f888 	bl	80038ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027a4:	e011      	b.n	80027ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d012      	beq.n	80027d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3324      	adds	r3, #36	; 0x24
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fcba 	bl	800312c <xTaskRemoveFromEventList>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80027be:	f000 fd8f 	bl	80032e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	dce9      	bgt.n	80027a6 <prvUnlockQueue+0x16>
 80027d2:	e000      	b.n	80027d6 <prvUnlockQueue+0x46>
					break;
 80027d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	22ff      	movs	r2, #255	; 0xff
 80027da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80027de:	f001 f895 	bl	800390c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80027e2:	f001 f863 	bl	80038ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027ee:	e011      	b.n	8002814 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d012      	beq.n	800281e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3310      	adds	r3, #16
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fc95 	bl	800312c <xTaskRemoveFromEventList>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002808:	f000 fd6a 	bl	80032e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800280c:	7bbb      	ldrb	r3, [r7, #14]
 800280e:	3b01      	subs	r3, #1
 8002810:	b2db      	uxtb	r3, r3
 8002812:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002818:	2b00      	cmp	r3, #0
 800281a:	dce9      	bgt.n	80027f0 <prvUnlockQueue+0x60>
 800281c:	e000      	b.n	8002820 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800281e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	22ff      	movs	r2, #255	; 0xff
 8002824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002828:	f001 f870 	bl	800390c <vPortExitCritical>
}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800283c:	f001 f836 	bl	80038ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	2b00      	cmp	r3, #0
 8002846:	d102      	bne.n	800284e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002848:	2301      	movs	r3, #1
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	e001      	b.n	8002852 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002852:	f001 f85b 	bl	800390c <vPortExitCritical>

	return xReturn;
 8002856:	68fb      	ldr	r3, [r7, #12]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002868:	f001 f820 	bl	80038ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	429a      	cmp	r2, r3
 8002876:	d102      	bne.n	800287e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002878:	2301      	movs	r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	e001      	b.n	8002882 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002882:	f001 f843 	bl	800390c <vPortExitCritical>

	return xReturn;
 8002886:	68fb      	ldr	r3, [r7, #12]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08e      	sub	sp, #56	; 0x38
 8002894:	af04      	add	r7, sp, #16
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
 800289c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800289e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10a      	bne.n	80028ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80028a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a8:	f383 8811 	msr	BASEPRI, r3
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	623b      	str	r3, [r7, #32]
}
 80028b6:	bf00      	nop
 80028b8:	e7fe      	b.n	80028b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80028ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10a      	bne.n	80028d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80028c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c4:	f383 8811 	msr	BASEPRI, r3
 80028c8:	f3bf 8f6f 	isb	sy
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	61fb      	str	r3, [r7, #28]
}
 80028d2:	bf00      	nop
 80028d4:	e7fe      	b.n	80028d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80028d6:	23b4      	movs	r3, #180	; 0xb4
 80028d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2bb4      	cmp	r3, #180	; 0xb4
 80028de:	d00a      	beq.n	80028f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80028e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	61bb      	str	r3, [r7, #24]
}
 80028f2:	bf00      	nop
 80028f4:	e7fe      	b.n	80028f4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80028f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01e      	beq.n	800293a <xTaskCreateStatic+0xaa>
 80028fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d01b      	beq.n	800293a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800290a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	2202      	movs	r2, #2
 8002910:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002914:	2300      	movs	r3, #0
 8002916:	9303      	str	r3, [sp, #12]
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	9302      	str	r3, [sp, #8]
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f851 	bl	80029d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002932:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002934:	f000 f8e4 	bl	8002b00 <prvAddNewTaskToReadyList>
 8002938:	e001      	b.n	800293e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800293e:	697b      	ldr	r3, [r7, #20]
	}
 8002940:	4618      	mov	r0, r3
 8002942:	3728      	adds	r7, #40	; 0x28
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08c      	sub	sp, #48	; 0x30
 800294c:	af04      	add	r7, sp, #16
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	4613      	mov	r3, r2
 8002956:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4618      	mov	r0, r3
 800295e:	f001 f8a5 	bl	8003aac <pvPortMalloc>
 8002962:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00e      	beq.n	8002988 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800296a:	20b4      	movs	r0, #180	; 0xb4
 800296c:	f001 f89e 	bl	8003aac <pvPortMalloc>
 8002970:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	631a      	str	r2, [r3, #48]	; 0x30
 800297e:	e005      	b.n	800298c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002980:	6978      	ldr	r0, [r7, #20]
 8002982:	f001 f957 	bl	8003c34 <vPortFree>
 8002986:	e001      	b.n	800298c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d017      	beq.n	80029c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800299a:	88fa      	ldrh	r2, [r7, #6]
 800299c:	2300      	movs	r3, #0
 800299e:	9303      	str	r3, [sp, #12]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	9302      	str	r3, [sp, #8]
 80029a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f80f 	bl	80029d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029b6:	69f8      	ldr	r0, [r7, #28]
 80029b8:	f000 f8a2 	bl	8002b00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80029bc:	2301      	movs	r3, #1
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	e002      	b.n	80029c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
 80029c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80029c8:	69bb      	ldr	r3, [r7, #24]
	}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3720      	adds	r7, #32
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029ec:	3b01      	subs	r3, #1
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	f023 0307 	bic.w	r3, r3, #7
 80029fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <prvInitialiseNewTask+0x48>
	__asm volatile
 8002a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0a:	f383 8811 	msr	BASEPRI, r3
 8002a0e:	f3bf 8f6f 	isb	sy
 8002a12:	f3bf 8f4f 	dsb	sy
 8002a16:	617b      	str	r3, [r7, #20]
}
 8002a18:	bf00      	nop
 8002a1a:	e7fe      	b.n	8002a1a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61fb      	str	r3, [r7, #28]
 8002a20:	e012      	b.n	8002a48 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	4413      	add	r3, r2
 8002a28:	7819      	ldrb	r1, [r3, #0]
 8002a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	4413      	add	r3, r2
 8002a30:	3334      	adds	r3, #52	; 0x34
 8002a32:	460a      	mov	r2, r1
 8002a34:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d006      	beq.n	8002a50 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3301      	adds	r3, #1
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b0f      	cmp	r3, #15
 8002a4c:	d9e9      	bls.n	8002a22 <prvInitialiseNewTask+0x4e>
 8002a4e:	e000      	b.n	8002a52 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002a50:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5c:	2b06      	cmp	r3, #6
 8002a5e:	d901      	bls.n	8002a64 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a60:	2306      	movs	r3, #6
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a6e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a72:	2200      	movs	r2, #0
 8002a74:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	3304      	adds	r3, #4
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff f935 	bl	8001cea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a82:	3318      	adds	r3, #24
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff f930 	bl	8001cea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a92:	f1c3 0207 	rsb	r2, r3, #7
 8002a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab2:	334c      	adds	r3, #76	; 0x4c
 8002ab4:	2260      	movs	r2, #96	; 0x60
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f001 fb00 	bl	80040be <memset>
 8002abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac0:	4a0c      	ldr	r2, [pc, #48]	; (8002af4 <prvInitialiseNewTask+0x120>)
 8002ac2:	651a      	str	r2, [r3, #80]	; 0x50
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac6:	4a0c      	ldr	r2, [pc, #48]	; (8002af8 <prvInitialiseNewTask+0x124>)
 8002ac8:	655a      	str	r2, [r3, #84]	; 0x54
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	4a0b      	ldr	r2, [pc, #44]	; (8002afc <prvInitialiseNewTask+0x128>)
 8002ace:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	68f9      	ldr	r1, [r7, #12]
 8002ad4:	69b8      	ldr	r0, [r7, #24]
 8002ad6:	f000 fdf7 	bl	80036c8 <pxPortInitialiseStack>
 8002ada:	4602      	mov	r2, r0
 8002adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ade:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002aec:	bf00      	nop
 8002aee:	3720      	adds	r7, #32
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	0800512c 	.word	0x0800512c
 8002af8:	0800514c 	.word	0x0800514c
 8002afc:	0800510c 	.word	0x0800510c

08002b00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b08:	f000 fed0 	bl	80038ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b0c:	4b2a      	ldr	r3, [pc, #168]	; (8002bb8 <prvAddNewTaskToReadyList+0xb8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3301      	adds	r3, #1
 8002b12:	4a29      	ldr	r2, [pc, #164]	; (8002bb8 <prvAddNewTaskToReadyList+0xb8>)
 8002b14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b16:	4b29      	ldr	r3, [pc, #164]	; (8002bbc <prvAddNewTaskToReadyList+0xbc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b1e:	4a27      	ldr	r2, [pc, #156]	; (8002bbc <prvAddNewTaskToReadyList+0xbc>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b24:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <prvAddNewTaskToReadyList+0xb8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d110      	bne.n	8002b4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b2c:	f000 fbfc 	bl	8003328 <prvInitialiseTaskLists>
 8002b30:	e00d      	b.n	8002b4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b32:	4b23      	ldr	r3, [pc, #140]	; (8002bc0 <prvAddNewTaskToReadyList+0xc0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d109      	bne.n	8002b4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <prvAddNewTaskToReadyList+0xbc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d802      	bhi.n	8002b4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b48:	4a1c      	ldr	r2, [pc, #112]	; (8002bbc <prvAddNewTaskToReadyList+0xbc>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b4e:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <prvAddNewTaskToReadyList+0xc4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3301      	adds	r3, #1
 8002b54:	4a1b      	ldr	r2, [pc, #108]	; (8002bc4 <prvAddNewTaskToReadyList+0xc4>)
 8002b56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <prvAddNewTaskToReadyList+0xc8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <prvAddNewTaskToReadyList+0xc8>)
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4a15      	ldr	r2, [pc, #84]	; (8002bcc <prvAddNewTaskToReadyList+0xcc>)
 8002b78:	441a      	add	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4610      	mov	r0, r2
 8002b82:	f7ff f8be 	bl	8001d02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b86:	f000 fec1 	bl	800390c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <prvAddNewTaskToReadyList+0xc0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00e      	beq.n	8002bb0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <prvAddNewTaskToReadyList+0xbc>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d207      	bcs.n	8002bb0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <prvAddNewTaskToReadyList+0xd0>)
 8002ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bb0:	bf00      	nop
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	200004f4 	.word	0x200004f4
 8002bbc:	200003f4 	.word	0x200003f4
 8002bc0:	20000500 	.word	0x20000500
 8002bc4:	20000510 	.word	0x20000510
 8002bc8:	200004fc 	.word	0x200004fc
 8002bcc:	200003f8 	.word	0x200003f8
 8002bd0:	e000ed04 	.word	0xe000ed04

08002bd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d017      	beq.n	8002c16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002be6:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <vTaskDelay+0x60>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <vTaskDelay+0x30>
	__asm volatile
 8002bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf2:	f383 8811 	msr	BASEPRI, r3
 8002bf6:	f3bf 8f6f 	isb	sy
 8002bfa:	f3bf 8f4f 	dsb	sy
 8002bfe:	60bb      	str	r3, [r7, #8]
}
 8002c00:	bf00      	nop
 8002c02:	e7fe      	b.n	8002c02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c04:	f000 f884 	bl	8002d10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c08:	2100      	movs	r1, #0
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fcf6 	bl	80035fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c10:	f000 f88c 	bl	8002d2c <xTaskResumeAll>
 8002c14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d107      	bne.n	8002c2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <vTaskDelay+0x64>)
 8002c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c2c:	bf00      	nop
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	2000051c 	.word	0x2000051c
 8002c38:	e000ed04 	.word	0xe000ed04

08002c3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c4a:	463a      	mov	r2, r7
 8002c4c:	1d39      	adds	r1, r7, #4
 8002c4e:	f107 0308 	add.w	r3, r7, #8
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fd fa7c 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002c58:	6839      	ldr	r1, [r7, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	9202      	str	r2, [sp, #8]
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	2300      	movs	r3, #0
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	2300      	movs	r3, #0
 8002c68:	460a      	mov	r2, r1
 8002c6a:	4921      	ldr	r1, [pc, #132]	; (8002cf0 <vTaskStartScheduler+0xb4>)
 8002c6c:	4821      	ldr	r0, [pc, #132]	; (8002cf4 <vTaskStartScheduler+0xb8>)
 8002c6e:	f7ff fe0f 	bl	8002890 <xTaskCreateStatic>
 8002c72:	4603      	mov	r3, r0
 8002c74:	4a20      	ldr	r2, [pc, #128]	; (8002cf8 <vTaskStartScheduler+0xbc>)
 8002c76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002c78:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <vTaskStartScheduler+0xbc>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002c80:	2301      	movs	r3, #1
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	e001      	b.n	8002c8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d11b      	bne.n	8002cc8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c94:	f383 8811 	msr	BASEPRI, r3
 8002c98:	f3bf 8f6f 	isb	sy
 8002c9c:	f3bf 8f4f 	dsb	sy
 8002ca0:	613b      	str	r3, [r7, #16]
}
 8002ca2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002ca4:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <vTaskStartScheduler+0xc0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	334c      	adds	r3, #76	; 0x4c
 8002caa:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <vTaskStartScheduler+0xc4>)
 8002cac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <vTaskStartScheduler+0xc8>)
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002cb6:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <vTaskStartScheduler+0xcc>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002cbc:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <vTaskStartScheduler+0xd0>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002cc2:	f000 fd81 	bl	80037c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002cc6:	e00e      	b.n	8002ce6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cce:	d10a      	bne.n	8002ce6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	60fb      	str	r3, [r7, #12]
}
 8002ce2:	bf00      	nop
 8002ce4:	e7fe      	b.n	8002ce4 <vTaskStartScheduler+0xa8>
}
 8002ce6:	bf00      	nop
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	080050ec 	.word	0x080050ec
 8002cf4:	080032f9 	.word	0x080032f9
 8002cf8:	20000518 	.word	0x20000518
 8002cfc:	200003f4 	.word	0x200003f4
 8002d00:	20000060 	.word	0x20000060
 8002d04:	20000514 	.word	0x20000514
 8002d08:	20000500 	.word	0x20000500
 8002d0c:	200004f8 	.word	0x200004f8

08002d10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002d14:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <vTaskSuspendAll+0x18>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	4a03      	ldr	r2, [pc, #12]	; (8002d28 <vTaskSuspendAll+0x18>)
 8002d1c:	6013      	str	r3, [r2, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	2000051c 	.word	0x2000051c

08002d2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d3a:	4b41      	ldr	r3, [pc, #260]	; (8002e40 <xTaskResumeAll+0x114>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10a      	bne.n	8002d58 <xTaskResumeAll+0x2c>
	__asm volatile
 8002d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d46:	f383 8811 	msr	BASEPRI, r3
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	603b      	str	r3, [r7, #0]
}
 8002d54:	bf00      	nop
 8002d56:	e7fe      	b.n	8002d56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d58:	f000 fda8 	bl	80038ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d5c:	4b38      	ldr	r3, [pc, #224]	; (8002e40 <xTaskResumeAll+0x114>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	4a37      	ldr	r2, [pc, #220]	; (8002e40 <xTaskResumeAll+0x114>)
 8002d64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d66:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <xTaskResumeAll+0x114>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d161      	bne.n	8002e32 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d6e:	4b35      	ldr	r3, [pc, #212]	; (8002e44 <xTaskResumeAll+0x118>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d05d      	beq.n	8002e32 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d76:	e02e      	b.n	8002dd6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002d78:	4b33      	ldr	r3, [pc, #204]	; (8002e48 <xTaskResumeAll+0x11c>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3318      	adds	r3, #24
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff f817 	bl	8001db8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff f812 	bl	8001db8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d98:	2201      	movs	r2, #1
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	4b2b      	ldr	r3, [pc, #172]	; (8002e4c <xTaskResumeAll+0x120>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	4a2a      	ldr	r2, [pc, #168]	; (8002e4c <xTaskResumeAll+0x120>)
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4a27      	ldr	r2, [pc, #156]	; (8002e50 <xTaskResumeAll+0x124>)
 8002db4:	441a      	add	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3304      	adds	r3, #4
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	f7fe ffa0 	bl	8001d02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc6:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <xTaskResumeAll+0x128>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d302      	bcc.n	8002dd6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002dd0:	4b21      	ldr	r3, [pc, #132]	; (8002e58 <xTaskResumeAll+0x12c>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dd6:	4b1c      	ldr	r3, [pc, #112]	; (8002e48 <xTaskResumeAll+0x11c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1cc      	bne.n	8002d78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002de4:	f000 fb42 	bl	800346c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002de8:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <xTaskResumeAll+0x130>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d010      	beq.n	8002e16 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002df4:	f000 f856 	bl	8002ea4 <xTaskIncrementTick>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002dfe:	4b16      	ldr	r3, [pc, #88]	; (8002e58 <xTaskResumeAll+0x12c>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f1      	bne.n	8002df4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002e10:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <xTaskResumeAll+0x130>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <xTaskResumeAll+0x12c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e22:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <xTaskResumeAll+0x134>)
 8002e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e32:	f000 fd6b 	bl	800390c <vPortExitCritical>

	return xAlreadyYielded;
 8002e36:	68bb      	ldr	r3, [r7, #8]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	2000051c 	.word	0x2000051c
 8002e44:	200004f4 	.word	0x200004f4
 8002e48:	200004b4 	.word	0x200004b4
 8002e4c:	200004fc 	.word	0x200004fc
 8002e50:	200003f8 	.word	0x200003f8
 8002e54:	200003f4 	.word	0x200003f4
 8002e58:	20000508 	.word	0x20000508
 8002e5c:	20000504 	.word	0x20000504
 8002e60:	e000ed04 	.word	0xe000ed04

08002e64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002e6a:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <xTaskGetTickCount+0x18>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002e70:	687b      	ldr	r3, [r7, #4]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr
 8002e7c:	200004f8 	.word	0x200004f8

08002e80 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e86:	f000 fdd3 	bl	8003a30 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8002e8e:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <xTaskGetTickCountFromISR+0x20>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e94:	683b      	ldr	r3, [r7, #0]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	200004f8 	.word	0x200004f8

08002ea4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eae:	4b51      	ldr	r3, [pc, #324]	; (8002ff4 <xTaskIncrementTick+0x150>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f040 808d 	bne.w	8002fd2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002eb8:	4b4f      	ldr	r3, [pc, #316]	; (8002ff8 <xTaskIncrementTick+0x154>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ec0:	4a4d      	ldr	r2, [pc, #308]	; (8002ff8 <xTaskIncrementTick+0x154>)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d120      	bne.n	8002f0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ecc:	4b4b      	ldr	r3, [pc, #300]	; (8002ffc <xTaskIncrementTick+0x158>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <xTaskIncrementTick+0x48>
	__asm volatile
 8002ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	603b      	str	r3, [r7, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	e7fe      	b.n	8002eea <xTaskIncrementTick+0x46>
 8002eec:	4b43      	ldr	r3, [pc, #268]	; (8002ffc <xTaskIncrementTick+0x158>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	4b43      	ldr	r3, [pc, #268]	; (8003000 <xTaskIncrementTick+0x15c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a41      	ldr	r2, [pc, #260]	; (8002ffc <xTaskIncrementTick+0x158>)
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4a41      	ldr	r2, [pc, #260]	; (8003000 <xTaskIncrementTick+0x15c>)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b40      	ldr	r3, [pc, #256]	; (8003004 <xTaskIncrementTick+0x160>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3301      	adds	r3, #1
 8002f06:	4a3f      	ldr	r2, [pc, #252]	; (8003004 <xTaskIncrementTick+0x160>)
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	f000 faaf 	bl	800346c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f0e:	4b3e      	ldr	r3, [pc, #248]	; (8003008 <xTaskIncrementTick+0x164>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d34d      	bcc.n	8002fb4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f18:	4b38      	ldr	r3, [pc, #224]	; (8002ffc <xTaskIncrementTick+0x158>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <xTaskIncrementTick+0x82>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <xTaskIncrementTick+0x84>
 8002f26:	2300      	movs	r3, #0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d004      	beq.n	8002f36 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f2c:	4b36      	ldr	r3, [pc, #216]	; (8003008 <xTaskIncrementTick+0x164>)
 8002f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f32:	601a      	str	r2, [r3, #0]
					break;
 8002f34:	e03e      	b.n	8002fb4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f36:	4b31      	ldr	r3, [pc, #196]	; (8002ffc <xTaskIncrementTick+0x158>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d203      	bcs.n	8002f56 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f4e:	4a2e      	ldr	r2, [pc, #184]	; (8003008 <xTaskIncrementTick+0x164>)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6013      	str	r3, [r2, #0]
						break;
 8002f54:	e02e      	b.n	8002fb4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe ff2c 	bl	8001db8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d004      	beq.n	8002f72 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	3318      	adds	r3, #24
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe ff23 	bl	8001db8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f76:	2201      	movs	r2, #1
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	4b24      	ldr	r3, [pc, #144]	; (800300c <xTaskIncrementTick+0x168>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	4a22      	ldr	r2, [pc, #136]	; (800300c <xTaskIncrementTick+0x168>)
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4a1f      	ldr	r2, [pc, #124]	; (8003010 <xTaskIncrementTick+0x16c>)
 8002f92:	441a      	add	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	3304      	adds	r3, #4
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	f7fe feb1 	bl	8001d02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <xTaskIncrementTick+0x170>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d3b4      	bcc.n	8002f18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fb2:	e7b1      	b.n	8002f18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fb4:	4b17      	ldr	r3, [pc, #92]	; (8003014 <xTaskIncrementTick+0x170>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fba:	4915      	ldr	r1, [pc, #84]	; (8003010 <xTaskIncrementTick+0x16c>)
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d907      	bls.n	8002fdc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	e004      	b.n	8002fdc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002fd2:	4b11      	ldr	r3, [pc, #68]	; (8003018 <xTaskIncrementTick+0x174>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	4a0f      	ldr	r2, [pc, #60]	; (8003018 <xTaskIncrementTick+0x174>)
 8002fda:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <xTaskIncrementTick+0x178>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002fe8:	697b      	ldr	r3, [r7, #20]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	2000051c 	.word	0x2000051c
 8002ff8:	200004f8 	.word	0x200004f8
 8002ffc:	200004ac 	.word	0x200004ac
 8003000:	200004b0 	.word	0x200004b0
 8003004:	2000050c 	.word	0x2000050c
 8003008:	20000514 	.word	0x20000514
 800300c:	200004fc 	.word	0x200004fc
 8003010:	200003f8 	.word	0x200003f8
 8003014:	200003f4 	.word	0x200003f4
 8003018:	20000504 	.word	0x20000504
 800301c:	20000508 	.word	0x20000508

08003020 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003026:	4b29      	ldr	r3, [pc, #164]	; (80030cc <vTaskSwitchContext+0xac>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800302e:	4b28      	ldr	r3, [pc, #160]	; (80030d0 <vTaskSwitchContext+0xb0>)
 8003030:	2201      	movs	r2, #1
 8003032:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003034:	e044      	b.n	80030c0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003036:	4b26      	ldr	r3, [pc, #152]	; (80030d0 <vTaskSwitchContext+0xb0>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800303c:	4b25      	ldr	r3, [pc, #148]	; (80030d4 <vTaskSwitchContext+0xb4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800304a:	7afb      	ldrb	r3, [r7, #11]
 800304c:	f1c3 031f 	rsb	r3, r3, #31
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	4921      	ldr	r1, [pc, #132]	; (80030d8 <vTaskSwitchContext+0xb8>)
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10a      	bne.n	800307c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306a:	f383 8811 	msr	BASEPRI, r3
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	607b      	str	r3, [r7, #4]
}
 8003078:	bf00      	nop
 800307a:	e7fe      	b.n	800307a <vTaskSwitchContext+0x5a>
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4a14      	ldr	r2, [pc, #80]	; (80030d8 <vTaskSwitchContext+0xb8>)
 8003088:	4413      	add	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	3308      	adds	r3, #8
 800309e:	429a      	cmp	r2, r3
 80030a0:	d104      	bne.n	80030ac <vTaskSwitchContext+0x8c>
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <vTaskSwitchContext+0xbc>)
 80030b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <vTaskSwitchContext+0xbc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	334c      	adds	r3, #76	; 0x4c
 80030bc:	4a08      	ldr	r2, [pc, #32]	; (80030e0 <vTaskSwitchContext+0xc0>)
 80030be:	6013      	str	r3, [r2, #0]
}
 80030c0:	bf00      	nop
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	2000051c 	.word	0x2000051c
 80030d0:	20000508 	.word	0x20000508
 80030d4:	200004fc 	.word	0x200004fc
 80030d8:	200003f8 	.word	0x200003f8
 80030dc:	200003f4 	.word	0x200003f4
 80030e0:	20000060 	.word	0x20000060

080030e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10a      	bne.n	800310a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	60fb      	str	r3, [r7, #12]
}
 8003106:	bf00      	nop
 8003108:	e7fe      	b.n	8003108 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800310a:	4b07      	ldr	r3, [pc, #28]	; (8003128 <vTaskPlaceOnEventList+0x44>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	3318      	adds	r3, #24
 8003110:	4619      	mov	r1, r3
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fe fe18 	bl	8001d48 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003118:	2101      	movs	r1, #1
 800311a:	6838      	ldr	r0, [r7, #0]
 800311c:	f000 fa6e 	bl	80035fc <prvAddCurrentTaskToDelayedList>
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	200003f4 	.word	0x200003f4

0800312c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10a      	bne.n	8003158 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	60fb      	str	r3, [r7, #12]
}
 8003154:	bf00      	nop
 8003156:	e7fe      	b.n	8003156 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	3318      	adds	r3, #24
 800315c:	4618      	mov	r0, r3
 800315e:	f7fe fe2b 	bl	8001db8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003162:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <xTaskRemoveFromEventList+0xac>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d11c      	bne.n	80031a4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	3304      	adds	r3, #4
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe fe22 	bl	8001db8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	2201      	movs	r2, #1
 800317a:	409a      	lsls	r2, r3
 800317c:	4b17      	ldr	r3, [pc, #92]	; (80031dc <xTaskRemoveFromEventList+0xb0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4313      	orrs	r3, r2
 8003182:	4a16      	ldr	r2, [pc, #88]	; (80031dc <xTaskRemoveFromEventList+0xb0>)
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4a13      	ldr	r2, [pc, #76]	; (80031e0 <xTaskRemoveFromEventList+0xb4>)
 8003194:	441a      	add	r2, r3
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	3304      	adds	r3, #4
 800319a:	4619      	mov	r1, r3
 800319c:	4610      	mov	r0, r2
 800319e:	f7fe fdb0 	bl	8001d02 <vListInsertEnd>
 80031a2:	e005      	b.n	80031b0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	3318      	adds	r3, #24
 80031a8:	4619      	mov	r1, r3
 80031aa:	480e      	ldr	r0, [pc, #56]	; (80031e4 <xTaskRemoveFromEventList+0xb8>)
 80031ac:	f7fe fda9 	bl	8001d02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <xTaskRemoveFromEventList+0xbc>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d905      	bls.n	80031ca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80031be:	2301      	movs	r3, #1
 80031c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80031c2:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <xTaskRemoveFromEventList+0xc0>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	e001      	b.n	80031ce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80031ce:	697b      	ldr	r3, [r7, #20]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	2000051c 	.word	0x2000051c
 80031dc:	200004fc 	.word	0x200004fc
 80031e0:	200003f8 	.word	0x200003f8
 80031e4:	200004b4 	.word	0x200004b4
 80031e8:	200003f4 	.word	0x200003f4
 80031ec:	20000508 	.word	0x20000508

080031f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <vTaskInternalSetTimeOutState+0x24>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <vTaskInternalSetTimeOutState+0x28>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	605a      	str	r2, [r3, #4]
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	2000050c 	.word	0x2000050c
 8003218:	200004f8 	.word	0x200004f8

0800321c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	613b      	str	r3, [r7, #16]
}
 800323e:	bf00      	nop
 8003240:	e7fe      	b.n	8003240 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10a      	bne.n	800325e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	60fb      	str	r3, [r7, #12]
}
 800325a:	bf00      	nop
 800325c:	e7fe      	b.n	800325c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800325e:	f000 fb25 	bl	80038ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003262:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <xTaskCheckForTimeOut+0xbc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327a:	d102      	bne.n	8003282 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800327c:	2300      	movs	r3, #0
 800327e:	61fb      	str	r3, [r7, #28]
 8003280:	e023      	b.n	80032ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <xTaskCheckForTimeOut+0xc0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d007      	beq.n	800329e <xTaskCheckForTimeOut+0x82>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	429a      	cmp	r2, r3
 8003296:	d302      	bcc.n	800329e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003298:	2301      	movs	r3, #1
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	e015      	b.n	80032ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d20b      	bcs.n	80032c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	1ad2      	subs	r2, r2, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff ff9b 	bl	80031f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	e004      	b.n	80032ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80032c6:	2301      	movs	r3, #1
 80032c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80032ca:	f000 fb1f 	bl	800390c <vPortExitCritical>

	return xReturn;
 80032ce:	69fb      	ldr	r3, [r7, #28]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3720      	adds	r7, #32
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	200004f8 	.word	0x200004f8
 80032dc:	2000050c 	.word	0x2000050c

080032e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <vTaskMissedYield+0x14>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
}
 80032ea:	bf00      	nop
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20000508 	.word	0x20000508

080032f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003300:	f000 f852 	bl	80033a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <prvIdleTask+0x28>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d9f9      	bls.n	8003300 <prvIdleTask+0x8>
			{
				taskYIELD();
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <prvIdleTask+0x2c>)
 800330e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800331c:	e7f0      	b.n	8003300 <prvIdleTask+0x8>
 800331e:	bf00      	nop
 8003320:	200003f8 	.word	0x200003f8
 8003324:	e000ed04 	.word	0xe000ed04

08003328 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800332e:	2300      	movs	r3, #0
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	e00c      	b.n	800334e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4a12      	ldr	r2, [pc, #72]	; (8003388 <prvInitialiseTaskLists+0x60>)
 8003340:	4413      	add	r3, r2
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe fcb2 	bl	8001cac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3301      	adds	r3, #1
 800334c:	607b      	str	r3, [r7, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b06      	cmp	r3, #6
 8003352:	d9ef      	bls.n	8003334 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003354:	480d      	ldr	r0, [pc, #52]	; (800338c <prvInitialiseTaskLists+0x64>)
 8003356:	f7fe fca9 	bl	8001cac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800335a:	480d      	ldr	r0, [pc, #52]	; (8003390 <prvInitialiseTaskLists+0x68>)
 800335c:	f7fe fca6 	bl	8001cac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003360:	480c      	ldr	r0, [pc, #48]	; (8003394 <prvInitialiseTaskLists+0x6c>)
 8003362:	f7fe fca3 	bl	8001cac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003366:	480c      	ldr	r0, [pc, #48]	; (8003398 <prvInitialiseTaskLists+0x70>)
 8003368:	f7fe fca0 	bl	8001cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800336c:	480b      	ldr	r0, [pc, #44]	; (800339c <prvInitialiseTaskLists+0x74>)
 800336e:	f7fe fc9d 	bl	8001cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <prvInitialiseTaskLists+0x78>)
 8003374:	4a05      	ldr	r2, [pc, #20]	; (800338c <prvInitialiseTaskLists+0x64>)
 8003376:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003378:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <prvInitialiseTaskLists+0x7c>)
 800337a:	4a05      	ldr	r2, [pc, #20]	; (8003390 <prvInitialiseTaskLists+0x68>)
 800337c:	601a      	str	r2, [r3, #0]
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	200003f8 	.word	0x200003f8
 800338c:	20000484 	.word	0x20000484
 8003390:	20000498 	.word	0x20000498
 8003394:	200004b4 	.word	0x200004b4
 8003398:	200004c8 	.word	0x200004c8
 800339c:	200004e0 	.word	0x200004e0
 80033a0:	200004ac 	.word	0x200004ac
 80033a4:	200004b0 	.word	0x200004b0

080033a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033ae:	e019      	b.n	80033e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80033b0:	f000 fa7c 	bl	80038ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80033b4:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <prvCheckTasksWaitingTermination+0x50>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3304      	adds	r3, #4
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe fcf9 	bl	8001db8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80033c6:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <prvCheckTasksWaitingTermination+0x54>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	4a0b      	ldr	r2, [pc, #44]	; (80033fc <prvCheckTasksWaitingTermination+0x54>)
 80033ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <prvCheckTasksWaitingTermination+0x58>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	4a0a      	ldr	r2, [pc, #40]	; (8003400 <prvCheckTasksWaitingTermination+0x58>)
 80033d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80033da:	f000 fa97 	bl	800390c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f810 	bl	8003404 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033e4:	4b06      	ldr	r3, [pc, #24]	; (8003400 <prvCheckTasksWaitingTermination+0x58>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e1      	bne.n	80033b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80033ec:	bf00      	nop
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	200004c8 	.word	0x200004c8
 80033fc:	200004f4 	.word	0x200004f4
 8003400:	200004dc 	.word	0x200004dc

08003404 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	334c      	adds	r3, #76	; 0x4c
 8003410:	4618      	mov	r0, r3
 8003412:	f000 ff8d 	bl	8004330 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d108      	bne.n	8003432 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fc05 	bl	8003c34 <vPortFree>
				vPortFree( pxTCB );
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fc02 	bl	8003c34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003430:	e018      	b.n	8003464 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003438:	2b01      	cmp	r3, #1
 800343a:	d103      	bne.n	8003444 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fbf9 	bl	8003c34 <vPortFree>
	}
 8003442:	e00f      	b.n	8003464 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800344a:	2b02      	cmp	r3, #2
 800344c:	d00a      	beq.n	8003464 <prvDeleteTCB+0x60>
	__asm volatile
 800344e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	60fb      	str	r3, [r7, #12]
}
 8003460:	bf00      	nop
 8003462:	e7fe      	b.n	8003462 <prvDeleteTCB+0x5e>
	}
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003472:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <prvResetNextTaskUnblockTime+0x40>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <prvResetNextTaskUnblockTime+0x14>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <prvResetNextTaskUnblockTime+0x16>
 8003480:	2300      	movs	r3, #0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d004      	beq.n	8003490 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003486:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <prvResetNextTaskUnblockTime+0x44>)
 8003488:	f04f 32ff 	mov.w	r2, #4294967295
 800348c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800348e:	e008      	b.n	80034a2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <prvResetNextTaskUnblockTime+0x40>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <prvResetNextTaskUnblockTime+0x44>)
 80034a0:	6013      	str	r3, [r2, #0]
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr
 80034ac:	200004ac 	.word	0x200004ac
 80034b0:	20000514 	.word	0x20000514

080034b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80034ba:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <xTaskGetSchedulerState+0x34>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80034c2:	2301      	movs	r3, #1
 80034c4:	607b      	str	r3, [r7, #4]
 80034c6:	e008      	b.n	80034da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034c8:	4b08      	ldr	r3, [pc, #32]	; (80034ec <xTaskGetSchedulerState+0x38>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d102      	bne.n	80034d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80034d0:	2302      	movs	r3, #2
 80034d2:	607b      	str	r3, [r7, #4]
 80034d4:	e001      	b.n	80034da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80034d6:	2300      	movs	r3, #0
 80034d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80034da:	687b      	ldr	r3, [r7, #4]
	}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20000500 	.word	0x20000500
 80034ec:	2000051c 	.word	0x2000051c

080034f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d06e      	beq.n	80035e4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003506:	4b3a      	ldr	r3, [pc, #232]	; (80035f0 <xTaskPriorityDisinherit+0x100>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	429a      	cmp	r2, r3
 800350e:	d00a      	beq.n	8003526 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	60fb      	str	r3, [r7, #12]
}
 8003522:	bf00      	nop
 8003524:	e7fe      	b.n	8003524 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10a      	bne.n	8003544 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	60bb      	str	r3, [r7, #8]
}
 8003540:	bf00      	nop
 8003542:	e7fe      	b.n	8003542 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003548:	1e5a      	subs	r2, r3, #1
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	429a      	cmp	r2, r3
 8003558:	d044      	beq.n	80035e4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355e:	2b00      	cmp	r3, #0
 8003560:	d140      	bne.n	80035e4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	3304      	adds	r3, #4
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe fc26 	bl	8001db8 <uxListRemove>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d115      	bne.n	800359e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003576:	491f      	ldr	r1, [pc, #124]	; (80035f4 <xTaskPriorityDisinherit+0x104>)
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10a      	bne.n	800359e <xTaskPriorityDisinherit+0xae>
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	2201      	movs	r2, #1
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43da      	mvns	r2, r3
 8003594:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <xTaskPriorityDisinherit+0x108>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4013      	ands	r3, r2
 800359a:	4a17      	ldr	r2, [pc, #92]	; (80035f8 <xTaskPriorityDisinherit+0x108>)
 800359c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	f1c3 0207 	rsb	r2, r3, #7
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	2201      	movs	r2, #1
 80035b8:	409a      	lsls	r2, r3
 80035ba:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <xTaskPriorityDisinherit+0x108>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4313      	orrs	r3, r2
 80035c0:	4a0d      	ldr	r2, [pc, #52]	; (80035f8 <xTaskPriorityDisinherit+0x108>)
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <xTaskPriorityDisinherit+0x104>)
 80035d2:	441a      	add	r2, r3
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	3304      	adds	r3, #4
 80035d8:	4619      	mov	r1, r3
 80035da:	4610      	mov	r0, r2
 80035dc:	f7fe fb91 	bl	8001d02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80035e0:	2301      	movs	r3, #1
 80035e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80035e4:	697b      	ldr	r3, [r7, #20]
	}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	200003f4 	.word	0x200003f4
 80035f4:	200003f8 	.word	0x200003f8
 80035f8:	200004fc 	.word	0x200004fc

080035fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003606:	4b29      	ldr	r3, [pc, #164]	; (80036ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800360c:	4b28      	ldr	r3, [pc, #160]	; (80036b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3304      	adds	r3, #4
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe fbd0 	bl	8001db8 <uxListRemove>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10b      	bne.n	8003636 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800361e:	4b24      	ldr	r3, [pc, #144]	; (80036b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	2201      	movs	r2, #1
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43da      	mvns	r2, r3
 800362c:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4013      	ands	r3, r2
 8003632:	4a20      	ldr	r2, [pc, #128]	; (80036b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003634:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363c:	d10a      	bne.n	8003654 <prvAddCurrentTaskToDelayedList+0x58>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d007      	beq.n	8003654 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003644:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3304      	adds	r3, #4
 800364a:	4619      	mov	r1, r3
 800364c:	481a      	ldr	r0, [pc, #104]	; (80036b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800364e:	f7fe fb58 	bl	8001d02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003652:	e026      	b.n	80036a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800365c:	4b14      	ldr	r3, [pc, #80]	; (80036b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	429a      	cmp	r2, r3
 800366a:	d209      	bcs.n	8003680 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3304      	adds	r3, #4
 8003676:	4619      	mov	r1, r3
 8003678:	4610      	mov	r0, r2
 800367a:	f7fe fb65 	bl	8001d48 <vListInsert>
}
 800367e:	e010      	b.n	80036a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003680:	4b0f      	ldr	r3, [pc, #60]	; (80036c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3304      	adds	r3, #4
 800368a:	4619      	mov	r1, r3
 800368c:	4610      	mov	r0, r2
 800368e:	f7fe fb5b 	bl	8001d48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	429a      	cmp	r2, r3
 800369a:	d202      	bcs.n	80036a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800369c:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	6013      	str	r3, [r2, #0]
}
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	200004f8 	.word	0x200004f8
 80036b0:	200003f4 	.word	0x200003f4
 80036b4:	200004fc 	.word	0x200004fc
 80036b8:	200004e0 	.word	0x200004e0
 80036bc:	200004b0 	.word	0x200004b0
 80036c0:	200004ac 	.word	0x200004ac
 80036c4:	20000514 	.word	0x20000514

080036c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3b04      	subs	r3, #4
 80036d8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	3b04      	subs	r3, #4
 80036e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f023 0201 	bic.w	r2, r3, #1
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3b04      	subs	r3, #4
 80036f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80036f8:	4a08      	ldr	r2, [pc, #32]	; (800371c <pxPortInitialiseStack+0x54>)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	3b14      	subs	r3, #20
 8003702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	3b20      	subs	r3, #32
 800370e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003710:	68fb      	ldr	r3, [r7, #12]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr
 800371c:	08003721 	.word	0x08003721

08003720 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003726:	2300      	movs	r3, #0
 8003728:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800372a:	4b12      	ldr	r3, [pc, #72]	; (8003774 <prvTaskExitError+0x54>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003732:	d00a      	beq.n	800374a <prvTaskExitError+0x2a>
	__asm volatile
 8003734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	60fb      	str	r3, [r7, #12]
}
 8003746:	bf00      	nop
 8003748:	e7fe      	b.n	8003748 <prvTaskExitError+0x28>
	__asm volatile
 800374a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	60bb      	str	r3, [r7, #8]
}
 800375c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800375e:	bf00      	nop
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0fc      	beq.n	8003760 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003766:	bf00      	nop
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	2000005c 	.word	0x2000005c
	...

08003780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003780:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <pxCurrentTCBConst2>)
 8003782:	6819      	ldr	r1, [r3, #0]
 8003784:	6808      	ldr	r0, [r1, #0]
 8003786:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800378a:	f380 8809 	msr	PSP, r0
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f380 8811 	msr	BASEPRI, r0
 800379a:	f04e 0e0d 	orr.w	lr, lr, #13
 800379e:	4770      	bx	lr

080037a0 <pxCurrentTCBConst2>:
 80037a0:	200003f4 	.word	0x200003f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop

080037a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80037a8:	4806      	ldr	r0, [pc, #24]	; (80037c4 <prvPortStartFirstTask+0x1c>)
 80037aa:	6800      	ldr	r0, [r0, #0]
 80037ac:	6800      	ldr	r0, [r0, #0]
 80037ae:	f380 8808 	msr	MSP, r0
 80037b2:	b662      	cpsie	i
 80037b4:	b661      	cpsie	f
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	df00      	svc	0
 80037c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80037c2:	bf00      	nop
 80037c4:	e000ed08 	.word	0xe000ed08

080037c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80037ce:	4b32      	ldr	r3, [pc, #200]	; (8003898 <xPortStartScheduler+0xd0>)
 80037d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	22ff      	movs	r2, #255	; 0xff
 80037de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	4b2a      	ldr	r3, [pc, #168]	; (800389c <xPortStartScheduler+0xd4>)
 80037f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80037f6:	4b2a      	ldr	r3, [pc, #168]	; (80038a0 <xPortStartScheduler+0xd8>)
 80037f8:	2207      	movs	r2, #7
 80037fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037fc:	e009      	b.n	8003812 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80037fe:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <xPortStartScheduler+0xd8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3b01      	subs	r3, #1
 8003804:	4a26      	ldr	r2, [pc, #152]	; (80038a0 <xPortStartScheduler+0xd8>)
 8003806:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	b2db      	uxtb	r3, r3
 8003810:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381a:	2b80      	cmp	r3, #128	; 0x80
 800381c:	d0ef      	beq.n	80037fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800381e:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <xPortStartScheduler+0xd8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f1c3 0307 	rsb	r3, r3, #7
 8003826:	2b04      	cmp	r3, #4
 8003828:	d00a      	beq.n	8003840 <xPortStartScheduler+0x78>
	__asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	60bb      	str	r3, [r7, #8]
}
 800383c:	bf00      	nop
 800383e:	e7fe      	b.n	800383e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <xPortStartScheduler+0xd8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	021b      	lsls	r3, r3, #8
 8003846:	4a16      	ldr	r2, [pc, #88]	; (80038a0 <xPortStartScheduler+0xd8>)
 8003848:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800384a:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <xPortStartScheduler+0xd8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003852:	4a13      	ldr	r2, [pc, #76]	; (80038a0 <xPortStartScheduler+0xd8>)
 8003854:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	b2da      	uxtb	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <xPortStartScheduler+0xdc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <xPortStartScheduler+0xdc>)
 8003864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003868:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800386a:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <xPortStartScheduler+0xdc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a0d      	ldr	r2, [pc, #52]	; (80038a4 <xPortStartScheduler+0xdc>)
 8003870:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003874:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003876:	f000 f8b9 	bl	80039ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <xPortStartScheduler+0xe0>)
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003880:	f7ff ff92 	bl	80037a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003884:	f7ff fbcc 	bl	8003020 <vTaskSwitchContext>
	prvTaskExitError();
 8003888:	f7ff ff4a 	bl	8003720 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	e000e400 	.word	0xe000e400
 800389c:	20000520 	.word	0x20000520
 80038a0:	20000524 	.word	0x20000524
 80038a4:	e000ed20 	.word	0xe000ed20
 80038a8:	2000005c 	.word	0x2000005c

080038ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
	__asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	607b      	str	r3, [r7, #4]
}
 80038c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80038c6:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <vPortEnterCritical+0x58>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3301      	adds	r3, #1
 80038cc:	4a0d      	ldr	r2, [pc, #52]	; (8003904 <vPortEnterCritical+0x58>)
 80038ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80038d0:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <vPortEnterCritical+0x58>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d10f      	bne.n	80038f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <vPortEnterCritical+0x5c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80038e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e6:	f383 8811 	msr	BASEPRI, r3
 80038ea:	f3bf 8f6f 	isb	sy
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	603b      	str	r3, [r7, #0]
}
 80038f4:	bf00      	nop
 80038f6:	e7fe      	b.n	80038f6 <vPortEnterCritical+0x4a>
	}
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	2000005c 	.word	0x2000005c
 8003908:	e000ed04 	.word	0xe000ed04

0800390c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003912:	4b11      	ldr	r3, [pc, #68]	; (8003958 <vPortExitCritical+0x4c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <vPortExitCritical+0x24>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	607b      	str	r3, [r7, #4]
}
 800392c:	bf00      	nop
 800392e:	e7fe      	b.n	800392e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003930:	4b09      	ldr	r3, [pc, #36]	; (8003958 <vPortExitCritical+0x4c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3b01      	subs	r3, #1
 8003936:	4a08      	ldr	r2, [pc, #32]	; (8003958 <vPortExitCritical+0x4c>)
 8003938:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800393a:	4b07      	ldr	r3, [pc, #28]	; (8003958 <vPortExitCritical+0x4c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d105      	bne.n	800394e <vPortExitCritical+0x42>
 8003942:	2300      	movs	r3, #0
 8003944:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	f383 8811 	msr	BASEPRI, r3
}
 800394c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr
 8003958:	2000005c 	.word	0x2000005c
 800395c:	00000000 	.word	0x00000000

08003960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003960:	f3ef 8009 	mrs	r0, PSP
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <pxCurrentTCBConst>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003970:	6010      	str	r0, [r2, #0]
 8003972:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003976:	f04f 0050 	mov.w	r0, #80	; 0x50
 800397a:	f380 8811 	msr	BASEPRI, r0
 800397e:	f7ff fb4f 	bl	8003020 <vTaskSwitchContext>
 8003982:	f04f 0000 	mov.w	r0, #0
 8003986:	f380 8811 	msr	BASEPRI, r0
 800398a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800398e:	6819      	ldr	r1, [r3, #0]
 8003990:	6808      	ldr	r0, [r1, #0]
 8003992:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003996:	f380 8809 	msr	PSP, r0
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	4770      	bx	lr

080039a0 <pxCurrentTCBConst>:
 80039a0:	200003f4 	.word	0x200003f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop

080039a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
	__asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	607b      	str	r3, [r7, #4]
}
 80039c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80039c2:	f7ff fa6f 	bl	8002ea4 <xTaskIncrementTick>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <SysTick_Handler+0x40>)
 80039ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	2300      	movs	r3, #0
 80039d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	f383 8811 	msr	BASEPRI, r3
}
 80039de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	e000ed04 	.word	0xe000ed04

080039ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80039f0:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <vPortSetupTimerInterrupt+0x30>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <vPortSetupTimerInterrupt+0x34>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <vPortSetupTimerInterrupt+0x38>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a09      	ldr	r2, [pc, #36]	; (8003a28 <vPortSetupTimerInterrupt+0x3c>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	099b      	lsrs	r3, r3, #6
 8003a08:	4a08      	ldr	r2, [pc, #32]	; (8003a2c <vPortSetupTimerInterrupt+0x40>)
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a0e:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <vPortSetupTimerInterrupt+0x30>)
 8003a10:	2207      	movs	r2, #7
 8003a12:	601a      	str	r2, [r3, #0]
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr
 8003a1c:	e000e010 	.word	0xe000e010
 8003a20:	e000e018 	.word	0xe000e018
 8003a24:	20000050 	.word	0x20000050
 8003a28:	10624dd3 	.word	0x10624dd3
 8003a2c:	e000e014 	.word	0xe000e014

08003a30 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003a36:	f3ef 8305 	mrs	r3, IPSR
 8003a3a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b0f      	cmp	r3, #15
 8003a40:	d914      	bls.n	8003a6c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003a42:	4a16      	ldr	r2, [pc, #88]	; (8003a9c <vPortValidateInterruptPriority+0x6c>)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003a4c:	4b14      	ldr	r3, [pc, #80]	; (8003aa0 <vPortValidateInterruptPriority+0x70>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	7afa      	ldrb	r2, [r7, #11]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d20a      	bcs.n	8003a6c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	607b      	str	r3, [r7, #4]
}
 8003a68:	bf00      	nop
 8003a6a:	e7fe      	b.n	8003a6a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003a6c:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <vPortValidateInterruptPriority+0x74>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a74:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <vPortValidateInterruptPriority+0x78>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d90a      	bls.n	8003a92 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	603b      	str	r3, [r7, #0]
}
 8003a8e:	bf00      	nop
 8003a90:	e7fe      	b.n	8003a90 <vPortValidateInterruptPriority+0x60>
	}
 8003a92:	bf00      	nop
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr
 8003a9c:	e000e3f0 	.word	0xe000e3f0
 8003aa0:	20000520 	.word	0x20000520
 8003aa4:	e000ed0c 	.word	0xe000ed0c
 8003aa8:	20000524 	.word	0x20000524

08003aac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003ab8:	f7ff f92a 	bl	8002d10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003abc:	4b58      	ldr	r3, [pc, #352]	; (8003c20 <pvPortMalloc+0x174>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ac4:	f000 f910 	bl	8003ce8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ac8:	4b56      	ldr	r3, [pc, #344]	; (8003c24 <pvPortMalloc+0x178>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f040 808e 	bne.w	8003bf2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01d      	beq.n	8003b18 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003adc:	2208      	movs	r2, #8
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d014      	beq.n	8003b18 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f023 0307 	bic.w	r3, r3, #7
 8003af4:	3308      	adds	r3, #8
 8003af6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <pvPortMalloc+0x6c>
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	617b      	str	r3, [r7, #20]
}
 8003b14:	bf00      	nop
 8003b16:	e7fe      	b.n	8003b16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d069      	beq.n	8003bf2 <pvPortMalloc+0x146>
 8003b1e:	4b42      	ldr	r3, [pc, #264]	; (8003c28 <pvPortMalloc+0x17c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d864      	bhi.n	8003bf2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003b28:	4b40      	ldr	r3, [pc, #256]	; (8003c2c <pvPortMalloc+0x180>)
 8003b2a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003b2c:	4b3f      	ldr	r3, [pc, #252]	; (8003c2c <pvPortMalloc+0x180>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b32:	e004      	b.n	8003b3e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d903      	bls.n	8003b50 <pvPortMalloc+0xa4>
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1f1      	bne.n	8003b34 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003b50:	4b33      	ldr	r3, [pc, #204]	; (8003c20 <pvPortMalloc+0x174>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d04b      	beq.n	8003bf2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2208      	movs	r2, #8
 8003b60:	4413      	add	r3, r2
 8003b62:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	1ad2      	subs	r2, r2, r3
 8003b74:	2308      	movs	r3, #8
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d91f      	bls.n	8003bbc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <pvPortMalloc+0xf8>
	__asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	613b      	str	r3, [r7, #16]
}
 8003ba0:	bf00      	nop
 8003ba2:	e7fe      	b.n	8003ba2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	1ad2      	subs	r2, r2, r3
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003bb6:	69b8      	ldr	r0, [r7, #24]
 8003bb8:	f000 f8f8 	bl	8003dac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003bbc:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <pvPortMalloc+0x17c>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <pvPortMalloc+0x17c>)
 8003bc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003bca:	4b17      	ldr	r3, [pc, #92]	; (8003c28 <pvPortMalloc+0x17c>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	4b18      	ldr	r3, [pc, #96]	; (8003c30 <pvPortMalloc+0x184>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d203      	bcs.n	8003bde <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003bd6:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <pvPortMalloc+0x17c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <pvPortMalloc+0x184>)
 8003bdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <pvPortMalloc+0x178>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	431a      	orrs	r2, r3
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003bf2:	f7ff f89b 	bl	8002d2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <pvPortMalloc+0x16a>
	__asm volatile
 8003c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	60fb      	str	r3, [r7, #12]
}
 8003c12:	bf00      	nop
 8003c14:	e7fe      	b.n	8003c14 <pvPortMalloc+0x168>
	return pvReturn;
 8003c16:	69fb      	ldr	r3, [r7, #28]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3728      	adds	r7, #40	; 0x28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20001130 	.word	0x20001130
 8003c24:	2000113c 	.word	0x2000113c
 8003c28:	20001134 	.word	0x20001134
 8003c2c:	20001128 	.word	0x20001128
 8003c30:	20001138 	.word	0x20001138

08003c34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d048      	beq.n	8003cd8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003c46:	2308      	movs	r3, #8
 8003c48:	425b      	negs	r3, r3
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	4b21      	ldr	r3, [pc, #132]	; (8003ce0 <vPortFree+0xac>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10a      	bne.n	8003c78 <vPortFree+0x44>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	60fb      	str	r3, [r7, #12]
}
 8003c74:	bf00      	nop
 8003c76:	e7fe      	b.n	8003c76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <vPortFree+0x62>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	60bb      	str	r3, [r7, #8]
}
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <vPortFree+0xac>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d019      	beq.n	8003cd8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d115      	bne.n	8003cd8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <vPortFree+0xac>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003cbc:	f7ff f828 	bl	8002d10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <vPortFree+0xb0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4413      	add	r3, r2
 8003cca:	4a06      	ldr	r2, [pc, #24]	; (8003ce4 <vPortFree+0xb0>)
 8003ccc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003cce:	6938      	ldr	r0, [r7, #16]
 8003cd0:	f000 f86c 	bl	8003dac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003cd4:	f7ff f82a 	bl	8002d2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003cd8:	bf00      	nop
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	2000113c 	.word	0x2000113c
 8003ce4:	20001134 	.word	0x20001134

08003ce8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003cee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003cf2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003cf4:	4b27      	ldr	r3, [pc, #156]	; (8003d94 <prvHeapInit+0xac>)
 8003cf6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00c      	beq.n	8003d1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3307      	adds	r3, #7
 8003d06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0307 	bic.w	r3, r3, #7
 8003d0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <prvHeapInit+0xac>)
 8003d18:	4413      	add	r3, r2
 8003d1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d20:	4a1d      	ldr	r2, [pc, #116]	; (8003d98 <prvHeapInit+0xb0>)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003d26:	4b1c      	ldr	r3, [pc, #112]	; (8003d98 <prvHeapInit+0xb0>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	4413      	add	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003d34:	2208      	movs	r2, #8
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0307 	bic.w	r3, r3, #7
 8003d42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4a15      	ldr	r2, [pc, #84]	; (8003d9c <prvHeapInit+0xb4>)
 8003d48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003d4a:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <prvHeapInit+0xb4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003d52:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <prvHeapInit+0xb4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	1ad2      	subs	r2, r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <prvHeapInit+0xb4>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <prvHeapInit+0xb8>)
 8003d76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	4a09      	ldr	r2, [pc, #36]	; (8003da4 <prvHeapInit+0xbc>)
 8003d7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <prvHeapInit+0xc0>)
 8003d82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d86:	601a      	str	r2, [r3, #0]
}
 8003d88:	bf00      	nop
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	20000528 	.word	0x20000528
 8003d98:	20001128 	.word	0x20001128
 8003d9c:	20001130 	.word	0x20001130
 8003da0:	20001138 	.word	0x20001138
 8003da4:	20001134 	.word	0x20001134
 8003da8:	2000113c 	.word	0x2000113c

08003dac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003db4:	4b27      	ldr	r3, [pc, #156]	; (8003e54 <prvInsertBlockIntoFreeList+0xa8>)
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	e002      	b.n	8003dc0 <prvInsertBlockIntoFreeList+0x14>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d8f7      	bhi.n	8003dba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d108      	bne.n	8003dee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	441a      	add	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	441a      	add	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d118      	bne.n	8003e34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <prvInsertBlockIntoFreeList+0xac>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d00d      	beq.n	8003e2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	441a      	add	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	e008      	b.n	8003e3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <prvInsertBlockIntoFreeList+0xac>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e003      	b.n	8003e3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d002      	beq.n	8003e4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr
 8003e54:	20001128 	.word	0x20001128
 8003e58:	20001130 	.word	0x20001130

08003e5c <__errno>:
 8003e5c:	4b01      	ldr	r3, [pc, #4]	; (8003e64 <__errno+0x8>)
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	20000060 	.word	0x20000060

08003e68 <std>:
 8003e68:	2300      	movs	r3, #0
 8003e6a:	b510      	push	{r4, lr}
 8003e6c:	4604      	mov	r4, r0
 8003e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8003e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e76:	6083      	str	r3, [r0, #8]
 8003e78:	8181      	strh	r1, [r0, #12]
 8003e7a:	6643      	str	r3, [r0, #100]	; 0x64
 8003e7c:	81c2      	strh	r2, [r0, #14]
 8003e7e:	6183      	str	r3, [r0, #24]
 8003e80:	4619      	mov	r1, r3
 8003e82:	2208      	movs	r2, #8
 8003e84:	305c      	adds	r0, #92	; 0x5c
 8003e86:	f000 f91a 	bl	80040be <memset>
 8003e8a:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <std+0x38>)
 8003e8c:	6224      	str	r4, [r4, #32]
 8003e8e:	6263      	str	r3, [r4, #36]	; 0x24
 8003e90:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <std+0x3c>)
 8003e92:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e94:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <std+0x40>)
 8003e96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e98:	4b04      	ldr	r3, [pc, #16]	; (8003eac <std+0x44>)
 8003e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8003e9c:	bd10      	pop	{r4, pc}
 8003e9e:	bf00      	nop
 8003ea0:	08004409 	.word	0x08004409
 8003ea4:	0800442b 	.word	0x0800442b
 8003ea8:	08004463 	.word	0x08004463
 8003eac:	08004487 	.word	0x08004487

08003eb0 <_cleanup_r>:
 8003eb0:	4901      	ldr	r1, [pc, #4]	; (8003eb8 <_cleanup_r+0x8>)
 8003eb2:	f000 b8af 	b.w	8004014 <_fwalk_reent>
 8003eb6:	bf00      	nop
 8003eb8:	08004759 	.word	0x08004759

08003ebc <__sfmoreglue>:
 8003ebc:	2268      	movs	r2, #104	; 0x68
 8003ebe:	b570      	push	{r4, r5, r6, lr}
 8003ec0:	1e4d      	subs	r5, r1, #1
 8003ec2:	4355      	muls	r5, r2
 8003ec4:	460e      	mov	r6, r1
 8003ec6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003eca:	f000 f921 	bl	8004110 <_malloc_r>
 8003ece:	4604      	mov	r4, r0
 8003ed0:	b140      	cbz	r0, 8003ee4 <__sfmoreglue+0x28>
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	e9c0 1600 	strd	r1, r6, [r0]
 8003ed8:	300c      	adds	r0, #12
 8003eda:	60a0      	str	r0, [r4, #8]
 8003edc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ee0:	f000 f8ed 	bl	80040be <memset>
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}

08003ee8 <__sfp_lock_acquire>:
 8003ee8:	4801      	ldr	r0, [pc, #4]	; (8003ef0 <__sfp_lock_acquire+0x8>)
 8003eea:	f000 b8d8 	b.w	800409e <__retarget_lock_acquire_recursive>
 8003eee:	bf00      	nop
 8003ef0:	20001141 	.word	0x20001141

08003ef4 <__sfp_lock_release>:
 8003ef4:	4801      	ldr	r0, [pc, #4]	; (8003efc <__sfp_lock_release+0x8>)
 8003ef6:	f000 b8d3 	b.w	80040a0 <__retarget_lock_release_recursive>
 8003efa:	bf00      	nop
 8003efc:	20001141 	.word	0x20001141

08003f00 <__sinit_lock_acquire>:
 8003f00:	4801      	ldr	r0, [pc, #4]	; (8003f08 <__sinit_lock_acquire+0x8>)
 8003f02:	f000 b8cc 	b.w	800409e <__retarget_lock_acquire_recursive>
 8003f06:	bf00      	nop
 8003f08:	20001142 	.word	0x20001142

08003f0c <__sinit_lock_release>:
 8003f0c:	4801      	ldr	r0, [pc, #4]	; (8003f14 <__sinit_lock_release+0x8>)
 8003f0e:	f000 b8c7 	b.w	80040a0 <__retarget_lock_release_recursive>
 8003f12:	bf00      	nop
 8003f14:	20001142 	.word	0x20001142

08003f18 <__sinit>:
 8003f18:	b510      	push	{r4, lr}
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	f7ff fff0 	bl	8003f00 <__sinit_lock_acquire>
 8003f20:	69a3      	ldr	r3, [r4, #24]
 8003f22:	b11b      	cbz	r3, 8003f2c <__sinit+0x14>
 8003f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f28:	f7ff bff0 	b.w	8003f0c <__sinit_lock_release>
 8003f2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003f30:	6523      	str	r3, [r4, #80]	; 0x50
 8003f32:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <__sinit+0x68>)
 8003f34:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <__sinit+0x6c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	62a2      	str	r2, [r4, #40]	; 0x28
 8003f3a:	42a3      	cmp	r3, r4
 8003f3c:	bf08      	it	eq
 8003f3e:	2301      	moveq	r3, #1
 8003f40:	4620      	mov	r0, r4
 8003f42:	bf08      	it	eq
 8003f44:	61a3      	streq	r3, [r4, #24]
 8003f46:	f000 f81f 	bl	8003f88 <__sfp>
 8003f4a:	6060      	str	r0, [r4, #4]
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f000 f81b 	bl	8003f88 <__sfp>
 8003f52:	60a0      	str	r0, [r4, #8]
 8003f54:	4620      	mov	r0, r4
 8003f56:	f000 f817 	bl	8003f88 <__sfp>
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2104      	movs	r1, #4
 8003f5e:	60e0      	str	r0, [r4, #12]
 8003f60:	6860      	ldr	r0, [r4, #4]
 8003f62:	f7ff ff81 	bl	8003e68 <std>
 8003f66:	2201      	movs	r2, #1
 8003f68:	2109      	movs	r1, #9
 8003f6a:	68a0      	ldr	r0, [r4, #8]
 8003f6c:	f7ff ff7c 	bl	8003e68 <std>
 8003f70:	2202      	movs	r2, #2
 8003f72:	2112      	movs	r1, #18
 8003f74:	68e0      	ldr	r0, [r4, #12]
 8003f76:	f7ff ff77 	bl	8003e68 <std>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	61a3      	str	r3, [r4, #24]
 8003f7e:	e7d1      	b.n	8003f24 <__sinit+0xc>
 8003f80:	0800516c 	.word	0x0800516c
 8003f84:	08003eb1 	.word	0x08003eb1

08003f88 <__sfp>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	4607      	mov	r7, r0
 8003f8c:	f7ff ffac 	bl	8003ee8 <__sfp_lock_acquire>
 8003f90:	4b1e      	ldr	r3, [pc, #120]	; (800400c <__sfp+0x84>)
 8003f92:	681e      	ldr	r6, [r3, #0]
 8003f94:	69b3      	ldr	r3, [r6, #24]
 8003f96:	b913      	cbnz	r3, 8003f9e <__sfp+0x16>
 8003f98:	4630      	mov	r0, r6
 8003f9a:	f7ff ffbd 	bl	8003f18 <__sinit>
 8003f9e:	3648      	adds	r6, #72	; 0x48
 8003fa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	d503      	bpl.n	8003fb0 <__sfp+0x28>
 8003fa8:	6833      	ldr	r3, [r6, #0]
 8003faa:	b30b      	cbz	r3, 8003ff0 <__sfp+0x68>
 8003fac:	6836      	ldr	r6, [r6, #0]
 8003fae:	e7f7      	b.n	8003fa0 <__sfp+0x18>
 8003fb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003fb4:	b9d5      	cbnz	r5, 8003fec <__sfp+0x64>
 8003fb6:	4b16      	ldr	r3, [pc, #88]	; (8004010 <__sfp+0x88>)
 8003fb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003fbc:	60e3      	str	r3, [r4, #12]
 8003fbe:	6665      	str	r5, [r4, #100]	; 0x64
 8003fc0:	f000 f86c 	bl	800409c <__retarget_lock_init_recursive>
 8003fc4:	f7ff ff96 	bl	8003ef4 <__sfp_lock_release>
 8003fc8:	2208      	movs	r2, #8
 8003fca:	4629      	mov	r1, r5
 8003fcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003fd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003fd4:	6025      	str	r5, [r4, #0]
 8003fd6:	61a5      	str	r5, [r4, #24]
 8003fd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003fdc:	f000 f86f 	bl	80040be <memset>
 8003fe0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003fe4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003fe8:	4620      	mov	r0, r4
 8003fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fec:	3468      	adds	r4, #104	; 0x68
 8003fee:	e7d9      	b.n	8003fa4 <__sfp+0x1c>
 8003ff0:	2104      	movs	r1, #4
 8003ff2:	4638      	mov	r0, r7
 8003ff4:	f7ff ff62 	bl	8003ebc <__sfmoreglue>
 8003ff8:	4604      	mov	r4, r0
 8003ffa:	6030      	str	r0, [r6, #0]
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	d1d5      	bne.n	8003fac <__sfp+0x24>
 8004000:	f7ff ff78 	bl	8003ef4 <__sfp_lock_release>
 8004004:	230c      	movs	r3, #12
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	e7ee      	b.n	8003fe8 <__sfp+0x60>
 800400a:	bf00      	nop
 800400c:	0800516c 	.word	0x0800516c
 8004010:	ffff0001 	.word	0xffff0001

08004014 <_fwalk_reent>:
 8004014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004018:	4606      	mov	r6, r0
 800401a:	4688      	mov	r8, r1
 800401c:	2700      	movs	r7, #0
 800401e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004022:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004026:	f1b9 0901 	subs.w	r9, r9, #1
 800402a:	d505      	bpl.n	8004038 <_fwalk_reent+0x24>
 800402c:	6824      	ldr	r4, [r4, #0]
 800402e:	2c00      	cmp	r4, #0
 8004030:	d1f7      	bne.n	8004022 <_fwalk_reent+0xe>
 8004032:	4638      	mov	r0, r7
 8004034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004038:	89ab      	ldrh	r3, [r5, #12]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d907      	bls.n	800404e <_fwalk_reent+0x3a>
 800403e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004042:	3301      	adds	r3, #1
 8004044:	d003      	beq.n	800404e <_fwalk_reent+0x3a>
 8004046:	4629      	mov	r1, r5
 8004048:	4630      	mov	r0, r6
 800404a:	47c0      	blx	r8
 800404c:	4307      	orrs	r7, r0
 800404e:	3568      	adds	r5, #104	; 0x68
 8004050:	e7e9      	b.n	8004026 <_fwalk_reent+0x12>
	...

08004054 <__libc_init_array>:
 8004054:	b570      	push	{r4, r5, r6, lr}
 8004056:	2600      	movs	r6, #0
 8004058:	4d0c      	ldr	r5, [pc, #48]	; (800408c <__libc_init_array+0x38>)
 800405a:	4c0d      	ldr	r4, [pc, #52]	; (8004090 <__libc_init_array+0x3c>)
 800405c:	1b64      	subs	r4, r4, r5
 800405e:	10a4      	asrs	r4, r4, #2
 8004060:	42a6      	cmp	r6, r4
 8004062:	d109      	bne.n	8004078 <__libc_init_array+0x24>
 8004064:	f000 ffb0 	bl	8004fc8 <_init>
 8004068:	2600      	movs	r6, #0
 800406a:	4d0a      	ldr	r5, [pc, #40]	; (8004094 <__libc_init_array+0x40>)
 800406c:	4c0a      	ldr	r4, [pc, #40]	; (8004098 <__libc_init_array+0x44>)
 800406e:	1b64      	subs	r4, r4, r5
 8004070:	10a4      	asrs	r4, r4, #2
 8004072:	42a6      	cmp	r6, r4
 8004074:	d105      	bne.n	8004082 <__libc_init_array+0x2e>
 8004076:	bd70      	pop	{r4, r5, r6, pc}
 8004078:	f855 3b04 	ldr.w	r3, [r5], #4
 800407c:	4798      	blx	r3
 800407e:	3601      	adds	r6, #1
 8004080:	e7ee      	b.n	8004060 <__libc_init_array+0xc>
 8004082:	f855 3b04 	ldr.w	r3, [r5], #4
 8004086:	4798      	blx	r3
 8004088:	3601      	adds	r6, #1
 800408a:	e7f2      	b.n	8004072 <__libc_init_array+0x1e>
 800408c:	080051a4 	.word	0x080051a4
 8004090:	080051a4 	.word	0x080051a4
 8004094:	080051a4 	.word	0x080051a4
 8004098:	080051a8 	.word	0x080051a8

0800409c <__retarget_lock_init_recursive>:
 800409c:	4770      	bx	lr

0800409e <__retarget_lock_acquire_recursive>:
 800409e:	4770      	bx	lr

080040a0 <__retarget_lock_release_recursive>:
 80040a0:	4770      	bx	lr

080040a2 <memcpy>:
 80040a2:	440a      	add	r2, r1
 80040a4:	4291      	cmp	r1, r2
 80040a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80040aa:	d100      	bne.n	80040ae <memcpy+0xc>
 80040ac:	4770      	bx	lr
 80040ae:	b510      	push	{r4, lr}
 80040b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040b4:	4291      	cmp	r1, r2
 80040b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040ba:	d1f9      	bne.n	80040b0 <memcpy+0xe>
 80040bc:	bd10      	pop	{r4, pc}

080040be <memset>:
 80040be:	4603      	mov	r3, r0
 80040c0:	4402      	add	r2, r0
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d100      	bne.n	80040c8 <memset+0xa>
 80040c6:	4770      	bx	lr
 80040c8:	f803 1b01 	strb.w	r1, [r3], #1
 80040cc:	e7f9      	b.n	80040c2 <memset+0x4>
	...

080040d0 <sbrk_aligned>:
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	4e0e      	ldr	r6, [pc, #56]	; (800410c <sbrk_aligned+0x3c>)
 80040d4:	460c      	mov	r4, r1
 80040d6:	6831      	ldr	r1, [r6, #0]
 80040d8:	4605      	mov	r5, r0
 80040da:	b911      	cbnz	r1, 80040e2 <sbrk_aligned+0x12>
 80040dc:	f000 f984 	bl	80043e8 <_sbrk_r>
 80040e0:	6030      	str	r0, [r6, #0]
 80040e2:	4621      	mov	r1, r4
 80040e4:	4628      	mov	r0, r5
 80040e6:	f000 f97f 	bl	80043e8 <_sbrk_r>
 80040ea:	1c43      	adds	r3, r0, #1
 80040ec:	d00a      	beq.n	8004104 <sbrk_aligned+0x34>
 80040ee:	1cc4      	adds	r4, r0, #3
 80040f0:	f024 0403 	bic.w	r4, r4, #3
 80040f4:	42a0      	cmp	r0, r4
 80040f6:	d007      	beq.n	8004108 <sbrk_aligned+0x38>
 80040f8:	1a21      	subs	r1, r4, r0
 80040fa:	4628      	mov	r0, r5
 80040fc:	f000 f974 	bl	80043e8 <_sbrk_r>
 8004100:	3001      	adds	r0, #1
 8004102:	d101      	bne.n	8004108 <sbrk_aligned+0x38>
 8004104:	f04f 34ff 	mov.w	r4, #4294967295
 8004108:	4620      	mov	r0, r4
 800410a:	bd70      	pop	{r4, r5, r6, pc}
 800410c:	20001148 	.word	0x20001148

08004110 <_malloc_r>:
 8004110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004114:	1ccd      	adds	r5, r1, #3
 8004116:	f025 0503 	bic.w	r5, r5, #3
 800411a:	3508      	adds	r5, #8
 800411c:	2d0c      	cmp	r5, #12
 800411e:	bf38      	it	cc
 8004120:	250c      	movcc	r5, #12
 8004122:	2d00      	cmp	r5, #0
 8004124:	4607      	mov	r7, r0
 8004126:	db01      	blt.n	800412c <_malloc_r+0x1c>
 8004128:	42a9      	cmp	r1, r5
 800412a:	d905      	bls.n	8004138 <_malloc_r+0x28>
 800412c:	230c      	movs	r3, #12
 800412e:	2600      	movs	r6, #0
 8004130:	603b      	str	r3, [r7, #0]
 8004132:	4630      	mov	r0, r6
 8004134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004138:	4e2e      	ldr	r6, [pc, #184]	; (80041f4 <_malloc_r+0xe4>)
 800413a:	f000 fbc1 	bl	80048c0 <__malloc_lock>
 800413e:	6833      	ldr	r3, [r6, #0]
 8004140:	461c      	mov	r4, r3
 8004142:	bb34      	cbnz	r4, 8004192 <_malloc_r+0x82>
 8004144:	4629      	mov	r1, r5
 8004146:	4638      	mov	r0, r7
 8004148:	f7ff ffc2 	bl	80040d0 <sbrk_aligned>
 800414c:	1c43      	adds	r3, r0, #1
 800414e:	4604      	mov	r4, r0
 8004150:	d14d      	bne.n	80041ee <_malloc_r+0xde>
 8004152:	6834      	ldr	r4, [r6, #0]
 8004154:	4626      	mov	r6, r4
 8004156:	2e00      	cmp	r6, #0
 8004158:	d140      	bne.n	80041dc <_malloc_r+0xcc>
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	4631      	mov	r1, r6
 800415e:	4638      	mov	r0, r7
 8004160:	eb04 0803 	add.w	r8, r4, r3
 8004164:	f000 f940 	bl	80043e8 <_sbrk_r>
 8004168:	4580      	cmp	r8, r0
 800416a:	d13a      	bne.n	80041e2 <_malloc_r+0xd2>
 800416c:	6821      	ldr	r1, [r4, #0]
 800416e:	3503      	adds	r5, #3
 8004170:	1a6d      	subs	r5, r5, r1
 8004172:	f025 0503 	bic.w	r5, r5, #3
 8004176:	3508      	adds	r5, #8
 8004178:	2d0c      	cmp	r5, #12
 800417a:	bf38      	it	cc
 800417c:	250c      	movcc	r5, #12
 800417e:	4638      	mov	r0, r7
 8004180:	4629      	mov	r1, r5
 8004182:	f7ff ffa5 	bl	80040d0 <sbrk_aligned>
 8004186:	3001      	adds	r0, #1
 8004188:	d02b      	beq.n	80041e2 <_malloc_r+0xd2>
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	442b      	add	r3, r5
 800418e:	6023      	str	r3, [r4, #0]
 8004190:	e00e      	b.n	80041b0 <_malloc_r+0xa0>
 8004192:	6822      	ldr	r2, [r4, #0]
 8004194:	1b52      	subs	r2, r2, r5
 8004196:	d41e      	bmi.n	80041d6 <_malloc_r+0xc6>
 8004198:	2a0b      	cmp	r2, #11
 800419a:	d916      	bls.n	80041ca <_malloc_r+0xba>
 800419c:	1961      	adds	r1, r4, r5
 800419e:	42a3      	cmp	r3, r4
 80041a0:	6025      	str	r5, [r4, #0]
 80041a2:	bf18      	it	ne
 80041a4:	6059      	strne	r1, [r3, #4]
 80041a6:	6863      	ldr	r3, [r4, #4]
 80041a8:	bf08      	it	eq
 80041aa:	6031      	streq	r1, [r6, #0]
 80041ac:	5162      	str	r2, [r4, r5]
 80041ae:	604b      	str	r3, [r1, #4]
 80041b0:	4638      	mov	r0, r7
 80041b2:	f104 060b 	add.w	r6, r4, #11
 80041b6:	f000 fb89 	bl	80048cc <__malloc_unlock>
 80041ba:	f026 0607 	bic.w	r6, r6, #7
 80041be:	1d23      	adds	r3, r4, #4
 80041c0:	1af2      	subs	r2, r6, r3
 80041c2:	d0b6      	beq.n	8004132 <_malloc_r+0x22>
 80041c4:	1b9b      	subs	r3, r3, r6
 80041c6:	50a3      	str	r3, [r4, r2]
 80041c8:	e7b3      	b.n	8004132 <_malloc_r+0x22>
 80041ca:	6862      	ldr	r2, [r4, #4]
 80041cc:	42a3      	cmp	r3, r4
 80041ce:	bf0c      	ite	eq
 80041d0:	6032      	streq	r2, [r6, #0]
 80041d2:	605a      	strne	r2, [r3, #4]
 80041d4:	e7ec      	b.n	80041b0 <_malloc_r+0xa0>
 80041d6:	4623      	mov	r3, r4
 80041d8:	6864      	ldr	r4, [r4, #4]
 80041da:	e7b2      	b.n	8004142 <_malloc_r+0x32>
 80041dc:	4634      	mov	r4, r6
 80041de:	6876      	ldr	r6, [r6, #4]
 80041e0:	e7b9      	b.n	8004156 <_malloc_r+0x46>
 80041e2:	230c      	movs	r3, #12
 80041e4:	4638      	mov	r0, r7
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	f000 fb70 	bl	80048cc <__malloc_unlock>
 80041ec:	e7a1      	b.n	8004132 <_malloc_r+0x22>
 80041ee:	6025      	str	r5, [r4, #0]
 80041f0:	e7de      	b.n	80041b0 <_malloc_r+0xa0>
 80041f2:	bf00      	nop
 80041f4:	20001144 	.word	0x20001144

080041f8 <iprintf>:
 80041f8:	b40f      	push	{r0, r1, r2, r3}
 80041fa:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <iprintf+0x2c>)
 80041fc:	b513      	push	{r0, r1, r4, lr}
 80041fe:	681c      	ldr	r4, [r3, #0]
 8004200:	b124      	cbz	r4, 800420c <iprintf+0x14>
 8004202:	69a3      	ldr	r3, [r4, #24]
 8004204:	b913      	cbnz	r3, 800420c <iprintf+0x14>
 8004206:	4620      	mov	r0, r4
 8004208:	f7ff fe86 	bl	8003f18 <__sinit>
 800420c:	ab05      	add	r3, sp, #20
 800420e:	4620      	mov	r0, r4
 8004210:	9a04      	ldr	r2, [sp, #16]
 8004212:	68a1      	ldr	r1, [r4, #8]
 8004214:	9301      	str	r3, [sp, #4]
 8004216:	f000 fbcf 	bl	80049b8 <_vfiprintf_r>
 800421a:	b002      	add	sp, #8
 800421c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004220:	b004      	add	sp, #16
 8004222:	4770      	bx	lr
 8004224:	20000060 	.word	0x20000060

08004228 <_puts_r>:
 8004228:	b570      	push	{r4, r5, r6, lr}
 800422a:	460e      	mov	r6, r1
 800422c:	4605      	mov	r5, r0
 800422e:	b118      	cbz	r0, 8004238 <_puts_r+0x10>
 8004230:	6983      	ldr	r3, [r0, #24]
 8004232:	b90b      	cbnz	r3, 8004238 <_puts_r+0x10>
 8004234:	f7ff fe70 	bl	8003f18 <__sinit>
 8004238:	69ab      	ldr	r3, [r5, #24]
 800423a:	68ac      	ldr	r4, [r5, #8]
 800423c:	b913      	cbnz	r3, 8004244 <_puts_r+0x1c>
 800423e:	4628      	mov	r0, r5
 8004240:	f7ff fe6a 	bl	8003f18 <__sinit>
 8004244:	4b2c      	ldr	r3, [pc, #176]	; (80042f8 <_puts_r+0xd0>)
 8004246:	429c      	cmp	r4, r3
 8004248:	d120      	bne.n	800428c <_puts_r+0x64>
 800424a:	686c      	ldr	r4, [r5, #4]
 800424c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800424e:	07db      	lsls	r3, r3, #31
 8004250:	d405      	bmi.n	800425e <_puts_r+0x36>
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	0598      	lsls	r0, r3, #22
 8004256:	d402      	bmi.n	800425e <_puts_r+0x36>
 8004258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800425a:	f7ff ff20 	bl	800409e <__retarget_lock_acquire_recursive>
 800425e:	89a3      	ldrh	r3, [r4, #12]
 8004260:	0719      	lsls	r1, r3, #28
 8004262:	d51d      	bpl.n	80042a0 <_puts_r+0x78>
 8004264:	6923      	ldr	r3, [r4, #16]
 8004266:	b1db      	cbz	r3, 80042a0 <_puts_r+0x78>
 8004268:	3e01      	subs	r6, #1
 800426a:	68a3      	ldr	r3, [r4, #8]
 800426c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004270:	3b01      	subs	r3, #1
 8004272:	60a3      	str	r3, [r4, #8]
 8004274:	bb39      	cbnz	r1, 80042c6 <_puts_r+0x9e>
 8004276:	2b00      	cmp	r3, #0
 8004278:	da38      	bge.n	80042ec <_puts_r+0xc4>
 800427a:	4622      	mov	r2, r4
 800427c:	210a      	movs	r1, #10
 800427e:	4628      	mov	r0, r5
 8004280:	f000 f906 	bl	8004490 <__swbuf_r>
 8004284:	3001      	adds	r0, #1
 8004286:	d011      	beq.n	80042ac <_puts_r+0x84>
 8004288:	250a      	movs	r5, #10
 800428a:	e011      	b.n	80042b0 <_puts_r+0x88>
 800428c:	4b1b      	ldr	r3, [pc, #108]	; (80042fc <_puts_r+0xd4>)
 800428e:	429c      	cmp	r4, r3
 8004290:	d101      	bne.n	8004296 <_puts_r+0x6e>
 8004292:	68ac      	ldr	r4, [r5, #8]
 8004294:	e7da      	b.n	800424c <_puts_r+0x24>
 8004296:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <_puts_r+0xd8>)
 8004298:	429c      	cmp	r4, r3
 800429a:	bf08      	it	eq
 800429c:	68ec      	ldreq	r4, [r5, #12]
 800429e:	e7d5      	b.n	800424c <_puts_r+0x24>
 80042a0:	4621      	mov	r1, r4
 80042a2:	4628      	mov	r0, r5
 80042a4:	f000 f958 	bl	8004558 <__swsetup_r>
 80042a8:	2800      	cmp	r0, #0
 80042aa:	d0dd      	beq.n	8004268 <_puts_r+0x40>
 80042ac:	f04f 35ff 	mov.w	r5, #4294967295
 80042b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042b2:	07da      	lsls	r2, r3, #31
 80042b4:	d405      	bmi.n	80042c2 <_puts_r+0x9a>
 80042b6:	89a3      	ldrh	r3, [r4, #12]
 80042b8:	059b      	lsls	r3, r3, #22
 80042ba:	d402      	bmi.n	80042c2 <_puts_r+0x9a>
 80042bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042be:	f7ff feef 	bl	80040a0 <__retarget_lock_release_recursive>
 80042c2:	4628      	mov	r0, r5
 80042c4:	bd70      	pop	{r4, r5, r6, pc}
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	da04      	bge.n	80042d4 <_puts_r+0xac>
 80042ca:	69a2      	ldr	r2, [r4, #24]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	dc06      	bgt.n	80042de <_puts_r+0xb6>
 80042d0:	290a      	cmp	r1, #10
 80042d2:	d004      	beq.n	80042de <_puts_r+0xb6>
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	6022      	str	r2, [r4, #0]
 80042da:	7019      	strb	r1, [r3, #0]
 80042dc:	e7c5      	b.n	800426a <_puts_r+0x42>
 80042de:	4622      	mov	r2, r4
 80042e0:	4628      	mov	r0, r5
 80042e2:	f000 f8d5 	bl	8004490 <__swbuf_r>
 80042e6:	3001      	adds	r0, #1
 80042e8:	d1bf      	bne.n	800426a <_puts_r+0x42>
 80042ea:	e7df      	b.n	80042ac <_puts_r+0x84>
 80042ec:	250a      	movs	r5, #10
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	6022      	str	r2, [r4, #0]
 80042f4:	701d      	strb	r5, [r3, #0]
 80042f6:	e7db      	b.n	80042b0 <_puts_r+0x88>
 80042f8:	0800512c 	.word	0x0800512c
 80042fc:	0800514c 	.word	0x0800514c
 8004300:	0800510c 	.word	0x0800510c

08004304 <puts>:
 8004304:	4b02      	ldr	r3, [pc, #8]	; (8004310 <puts+0xc>)
 8004306:	4601      	mov	r1, r0
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	f7ff bf8d 	b.w	8004228 <_puts_r>
 800430e:	bf00      	nop
 8004310:	20000060 	.word	0x20000060

08004314 <cleanup_glue>:
 8004314:	b538      	push	{r3, r4, r5, lr}
 8004316:	460c      	mov	r4, r1
 8004318:	6809      	ldr	r1, [r1, #0]
 800431a:	4605      	mov	r5, r0
 800431c:	b109      	cbz	r1, 8004322 <cleanup_glue+0xe>
 800431e:	f7ff fff9 	bl	8004314 <cleanup_glue>
 8004322:	4621      	mov	r1, r4
 8004324:	4628      	mov	r0, r5
 8004326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800432a:	f000 bad5 	b.w	80048d8 <_free_r>
	...

08004330 <_reclaim_reent>:
 8004330:	4b2c      	ldr	r3, [pc, #176]	; (80043e4 <_reclaim_reent+0xb4>)
 8004332:	b570      	push	{r4, r5, r6, lr}
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4604      	mov	r4, r0
 8004338:	4283      	cmp	r3, r0
 800433a:	d051      	beq.n	80043e0 <_reclaim_reent+0xb0>
 800433c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800433e:	b143      	cbz	r3, 8004352 <_reclaim_reent+0x22>
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d14a      	bne.n	80043dc <_reclaim_reent+0xac>
 8004346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004348:	6819      	ldr	r1, [r3, #0]
 800434a:	b111      	cbz	r1, 8004352 <_reclaim_reent+0x22>
 800434c:	4620      	mov	r0, r4
 800434e:	f000 fac3 	bl	80048d8 <_free_r>
 8004352:	6961      	ldr	r1, [r4, #20]
 8004354:	b111      	cbz	r1, 800435c <_reclaim_reent+0x2c>
 8004356:	4620      	mov	r0, r4
 8004358:	f000 fabe 	bl	80048d8 <_free_r>
 800435c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800435e:	b111      	cbz	r1, 8004366 <_reclaim_reent+0x36>
 8004360:	4620      	mov	r0, r4
 8004362:	f000 fab9 	bl	80048d8 <_free_r>
 8004366:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004368:	b111      	cbz	r1, 8004370 <_reclaim_reent+0x40>
 800436a:	4620      	mov	r0, r4
 800436c:	f000 fab4 	bl	80048d8 <_free_r>
 8004370:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004372:	b111      	cbz	r1, 800437a <_reclaim_reent+0x4a>
 8004374:	4620      	mov	r0, r4
 8004376:	f000 faaf 	bl	80048d8 <_free_r>
 800437a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800437c:	b111      	cbz	r1, 8004384 <_reclaim_reent+0x54>
 800437e:	4620      	mov	r0, r4
 8004380:	f000 faaa 	bl	80048d8 <_free_r>
 8004384:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004386:	b111      	cbz	r1, 800438e <_reclaim_reent+0x5e>
 8004388:	4620      	mov	r0, r4
 800438a:	f000 faa5 	bl	80048d8 <_free_r>
 800438e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004390:	b111      	cbz	r1, 8004398 <_reclaim_reent+0x68>
 8004392:	4620      	mov	r0, r4
 8004394:	f000 faa0 	bl	80048d8 <_free_r>
 8004398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800439a:	b111      	cbz	r1, 80043a2 <_reclaim_reent+0x72>
 800439c:	4620      	mov	r0, r4
 800439e:	f000 fa9b 	bl	80048d8 <_free_r>
 80043a2:	69a3      	ldr	r3, [r4, #24]
 80043a4:	b1e3      	cbz	r3, 80043e0 <_reclaim_reent+0xb0>
 80043a6:	4620      	mov	r0, r4
 80043a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80043aa:	4798      	blx	r3
 80043ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80043ae:	b1b9      	cbz	r1, 80043e0 <_reclaim_reent+0xb0>
 80043b0:	4620      	mov	r0, r4
 80043b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80043b6:	f7ff bfad 	b.w	8004314 <cleanup_glue>
 80043ba:	5949      	ldr	r1, [r1, r5]
 80043bc:	b941      	cbnz	r1, 80043d0 <_reclaim_reent+0xa0>
 80043be:	3504      	adds	r5, #4
 80043c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043c2:	2d80      	cmp	r5, #128	; 0x80
 80043c4:	68d9      	ldr	r1, [r3, #12]
 80043c6:	d1f8      	bne.n	80043ba <_reclaim_reent+0x8a>
 80043c8:	4620      	mov	r0, r4
 80043ca:	f000 fa85 	bl	80048d8 <_free_r>
 80043ce:	e7ba      	b.n	8004346 <_reclaim_reent+0x16>
 80043d0:	680e      	ldr	r6, [r1, #0]
 80043d2:	4620      	mov	r0, r4
 80043d4:	f000 fa80 	bl	80048d8 <_free_r>
 80043d8:	4631      	mov	r1, r6
 80043da:	e7ef      	b.n	80043bc <_reclaim_reent+0x8c>
 80043dc:	2500      	movs	r5, #0
 80043de:	e7ef      	b.n	80043c0 <_reclaim_reent+0x90>
 80043e0:	bd70      	pop	{r4, r5, r6, pc}
 80043e2:	bf00      	nop
 80043e4:	20000060 	.word	0x20000060

080043e8 <_sbrk_r>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	2300      	movs	r3, #0
 80043ec:	4d05      	ldr	r5, [pc, #20]	; (8004404 <_sbrk_r+0x1c>)
 80043ee:	4604      	mov	r4, r0
 80043f0:	4608      	mov	r0, r1
 80043f2:	602b      	str	r3, [r5, #0]
 80043f4:	f7fc faea 	bl	80009cc <_sbrk>
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	d102      	bne.n	8004402 <_sbrk_r+0x1a>
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	b103      	cbz	r3, 8004402 <_sbrk_r+0x1a>
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	bd38      	pop	{r3, r4, r5, pc}
 8004404:	2000114c 	.word	0x2000114c

08004408 <__sread>:
 8004408:	b510      	push	{r4, lr}
 800440a:	460c      	mov	r4, r1
 800440c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004410:	f000 fd98 	bl	8004f44 <_read_r>
 8004414:	2800      	cmp	r0, #0
 8004416:	bfab      	itete	ge
 8004418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800441a:	89a3      	ldrhlt	r3, [r4, #12]
 800441c:	181b      	addge	r3, r3, r0
 800441e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004422:	bfac      	ite	ge
 8004424:	6563      	strge	r3, [r4, #84]	; 0x54
 8004426:	81a3      	strhlt	r3, [r4, #12]
 8004428:	bd10      	pop	{r4, pc}

0800442a <__swrite>:
 800442a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800442e:	461f      	mov	r7, r3
 8004430:	898b      	ldrh	r3, [r1, #12]
 8004432:	4605      	mov	r5, r0
 8004434:	05db      	lsls	r3, r3, #23
 8004436:	460c      	mov	r4, r1
 8004438:	4616      	mov	r6, r2
 800443a:	d505      	bpl.n	8004448 <__swrite+0x1e>
 800443c:	2302      	movs	r3, #2
 800443e:	2200      	movs	r2, #0
 8004440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004444:	f000 f9c4 	bl	80047d0 <_lseek_r>
 8004448:	89a3      	ldrh	r3, [r4, #12]
 800444a:	4632      	mov	r2, r6
 800444c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004450:	81a3      	strh	r3, [r4, #12]
 8004452:	4628      	mov	r0, r5
 8004454:	463b      	mov	r3, r7
 8004456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800445a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800445e:	f000 b869 	b.w	8004534 <_write_r>

08004462 <__sseek>:
 8004462:	b510      	push	{r4, lr}
 8004464:	460c      	mov	r4, r1
 8004466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800446a:	f000 f9b1 	bl	80047d0 <_lseek_r>
 800446e:	1c43      	adds	r3, r0, #1
 8004470:	89a3      	ldrh	r3, [r4, #12]
 8004472:	bf15      	itete	ne
 8004474:	6560      	strne	r0, [r4, #84]	; 0x54
 8004476:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800447a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800447e:	81a3      	strheq	r3, [r4, #12]
 8004480:	bf18      	it	ne
 8004482:	81a3      	strhne	r3, [r4, #12]
 8004484:	bd10      	pop	{r4, pc}

08004486 <__sclose>:
 8004486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800448a:	f000 b8d3 	b.w	8004634 <_close_r>
	...

08004490 <__swbuf_r>:
 8004490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004492:	460e      	mov	r6, r1
 8004494:	4614      	mov	r4, r2
 8004496:	4605      	mov	r5, r0
 8004498:	b118      	cbz	r0, 80044a2 <__swbuf_r+0x12>
 800449a:	6983      	ldr	r3, [r0, #24]
 800449c:	b90b      	cbnz	r3, 80044a2 <__swbuf_r+0x12>
 800449e:	f7ff fd3b 	bl	8003f18 <__sinit>
 80044a2:	4b21      	ldr	r3, [pc, #132]	; (8004528 <__swbuf_r+0x98>)
 80044a4:	429c      	cmp	r4, r3
 80044a6:	d12b      	bne.n	8004500 <__swbuf_r+0x70>
 80044a8:	686c      	ldr	r4, [r5, #4]
 80044aa:	69a3      	ldr	r3, [r4, #24]
 80044ac:	60a3      	str	r3, [r4, #8]
 80044ae:	89a3      	ldrh	r3, [r4, #12]
 80044b0:	071a      	lsls	r2, r3, #28
 80044b2:	d52f      	bpl.n	8004514 <__swbuf_r+0x84>
 80044b4:	6923      	ldr	r3, [r4, #16]
 80044b6:	b36b      	cbz	r3, 8004514 <__swbuf_r+0x84>
 80044b8:	6923      	ldr	r3, [r4, #16]
 80044ba:	6820      	ldr	r0, [r4, #0]
 80044bc:	b2f6      	uxtb	r6, r6
 80044be:	1ac0      	subs	r0, r0, r3
 80044c0:	6963      	ldr	r3, [r4, #20]
 80044c2:	4637      	mov	r7, r6
 80044c4:	4283      	cmp	r3, r0
 80044c6:	dc04      	bgt.n	80044d2 <__swbuf_r+0x42>
 80044c8:	4621      	mov	r1, r4
 80044ca:	4628      	mov	r0, r5
 80044cc:	f000 f944 	bl	8004758 <_fflush_r>
 80044d0:	bb30      	cbnz	r0, 8004520 <__swbuf_r+0x90>
 80044d2:	68a3      	ldr	r3, [r4, #8]
 80044d4:	3001      	adds	r0, #1
 80044d6:	3b01      	subs	r3, #1
 80044d8:	60a3      	str	r3, [r4, #8]
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	6022      	str	r2, [r4, #0]
 80044e0:	701e      	strb	r6, [r3, #0]
 80044e2:	6963      	ldr	r3, [r4, #20]
 80044e4:	4283      	cmp	r3, r0
 80044e6:	d004      	beq.n	80044f2 <__swbuf_r+0x62>
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	07db      	lsls	r3, r3, #31
 80044ec:	d506      	bpl.n	80044fc <__swbuf_r+0x6c>
 80044ee:	2e0a      	cmp	r6, #10
 80044f0:	d104      	bne.n	80044fc <__swbuf_r+0x6c>
 80044f2:	4621      	mov	r1, r4
 80044f4:	4628      	mov	r0, r5
 80044f6:	f000 f92f 	bl	8004758 <_fflush_r>
 80044fa:	b988      	cbnz	r0, 8004520 <__swbuf_r+0x90>
 80044fc:	4638      	mov	r0, r7
 80044fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004500:	4b0a      	ldr	r3, [pc, #40]	; (800452c <__swbuf_r+0x9c>)
 8004502:	429c      	cmp	r4, r3
 8004504:	d101      	bne.n	800450a <__swbuf_r+0x7a>
 8004506:	68ac      	ldr	r4, [r5, #8]
 8004508:	e7cf      	b.n	80044aa <__swbuf_r+0x1a>
 800450a:	4b09      	ldr	r3, [pc, #36]	; (8004530 <__swbuf_r+0xa0>)
 800450c:	429c      	cmp	r4, r3
 800450e:	bf08      	it	eq
 8004510:	68ec      	ldreq	r4, [r5, #12]
 8004512:	e7ca      	b.n	80044aa <__swbuf_r+0x1a>
 8004514:	4621      	mov	r1, r4
 8004516:	4628      	mov	r0, r5
 8004518:	f000 f81e 	bl	8004558 <__swsetup_r>
 800451c:	2800      	cmp	r0, #0
 800451e:	d0cb      	beq.n	80044b8 <__swbuf_r+0x28>
 8004520:	f04f 37ff 	mov.w	r7, #4294967295
 8004524:	e7ea      	b.n	80044fc <__swbuf_r+0x6c>
 8004526:	bf00      	nop
 8004528:	0800512c 	.word	0x0800512c
 800452c:	0800514c 	.word	0x0800514c
 8004530:	0800510c 	.word	0x0800510c

08004534 <_write_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	4604      	mov	r4, r0
 8004538:	4608      	mov	r0, r1
 800453a:	4611      	mov	r1, r2
 800453c:	2200      	movs	r2, #0
 800453e:	4d05      	ldr	r5, [pc, #20]	; (8004554 <_write_r+0x20>)
 8004540:	602a      	str	r2, [r5, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	f7fc f8f8 	bl	8000738 <_write>
 8004548:	1c43      	adds	r3, r0, #1
 800454a:	d102      	bne.n	8004552 <_write_r+0x1e>
 800454c:	682b      	ldr	r3, [r5, #0]
 800454e:	b103      	cbz	r3, 8004552 <_write_r+0x1e>
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	bd38      	pop	{r3, r4, r5, pc}
 8004554:	2000114c 	.word	0x2000114c

08004558 <__swsetup_r>:
 8004558:	4b32      	ldr	r3, [pc, #200]	; (8004624 <__swsetup_r+0xcc>)
 800455a:	b570      	push	{r4, r5, r6, lr}
 800455c:	681d      	ldr	r5, [r3, #0]
 800455e:	4606      	mov	r6, r0
 8004560:	460c      	mov	r4, r1
 8004562:	b125      	cbz	r5, 800456e <__swsetup_r+0x16>
 8004564:	69ab      	ldr	r3, [r5, #24]
 8004566:	b913      	cbnz	r3, 800456e <__swsetup_r+0x16>
 8004568:	4628      	mov	r0, r5
 800456a:	f7ff fcd5 	bl	8003f18 <__sinit>
 800456e:	4b2e      	ldr	r3, [pc, #184]	; (8004628 <__swsetup_r+0xd0>)
 8004570:	429c      	cmp	r4, r3
 8004572:	d10f      	bne.n	8004594 <__swsetup_r+0x3c>
 8004574:	686c      	ldr	r4, [r5, #4]
 8004576:	89a3      	ldrh	r3, [r4, #12]
 8004578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800457c:	0719      	lsls	r1, r3, #28
 800457e:	d42c      	bmi.n	80045da <__swsetup_r+0x82>
 8004580:	06dd      	lsls	r5, r3, #27
 8004582:	d411      	bmi.n	80045a8 <__swsetup_r+0x50>
 8004584:	2309      	movs	r3, #9
 8004586:	6033      	str	r3, [r6, #0]
 8004588:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	81a3      	strh	r3, [r4, #12]
 8004592:	e03e      	b.n	8004612 <__swsetup_r+0xba>
 8004594:	4b25      	ldr	r3, [pc, #148]	; (800462c <__swsetup_r+0xd4>)
 8004596:	429c      	cmp	r4, r3
 8004598:	d101      	bne.n	800459e <__swsetup_r+0x46>
 800459a:	68ac      	ldr	r4, [r5, #8]
 800459c:	e7eb      	b.n	8004576 <__swsetup_r+0x1e>
 800459e:	4b24      	ldr	r3, [pc, #144]	; (8004630 <__swsetup_r+0xd8>)
 80045a0:	429c      	cmp	r4, r3
 80045a2:	bf08      	it	eq
 80045a4:	68ec      	ldreq	r4, [r5, #12]
 80045a6:	e7e6      	b.n	8004576 <__swsetup_r+0x1e>
 80045a8:	0758      	lsls	r0, r3, #29
 80045aa:	d512      	bpl.n	80045d2 <__swsetup_r+0x7a>
 80045ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045ae:	b141      	cbz	r1, 80045c2 <__swsetup_r+0x6a>
 80045b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045b4:	4299      	cmp	r1, r3
 80045b6:	d002      	beq.n	80045be <__swsetup_r+0x66>
 80045b8:	4630      	mov	r0, r6
 80045ba:	f000 f98d 	bl	80048d8 <_free_r>
 80045be:	2300      	movs	r3, #0
 80045c0:	6363      	str	r3, [r4, #52]	; 0x34
 80045c2:	89a3      	ldrh	r3, [r4, #12]
 80045c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045c8:	81a3      	strh	r3, [r4, #12]
 80045ca:	2300      	movs	r3, #0
 80045cc:	6063      	str	r3, [r4, #4]
 80045ce:	6923      	ldr	r3, [r4, #16]
 80045d0:	6023      	str	r3, [r4, #0]
 80045d2:	89a3      	ldrh	r3, [r4, #12]
 80045d4:	f043 0308 	orr.w	r3, r3, #8
 80045d8:	81a3      	strh	r3, [r4, #12]
 80045da:	6923      	ldr	r3, [r4, #16]
 80045dc:	b94b      	cbnz	r3, 80045f2 <__swsetup_r+0x9a>
 80045de:	89a3      	ldrh	r3, [r4, #12]
 80045e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045e8:	d003      	beq.n	80045f2 <__swsetup_r+0x9a>
 80045ea:	4621      	mov	r1, r4
 80045ec:	4630      	mov	r0, r6
 80045ee:	f000 f927 	bl	8004840 <__smakebuf_r>
 80045f2:	89a0      	ldrh	r0, [r4, #12]
 80045f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045f8:	f010 0301 	ands.w	r3, r0, #1
 80045fc:	d00a      	beq.n	8004614 <__swsetup_r+0xbc>
 80045fe:	2300      	movs	r3, #0
 8004600:	60a3      	str	r3, [r4, #8]
 8004602:	6963      	ldr	r3, [r4, #20]
 8004604:	425b      	negs	r3, r3
 8004606:	61a3      	str	r3, [r4, #24]
 8004608:	6923      	ldr	r3, [r4, #16]
 800460a:	b943      	cbnz	r3, 800461e <__swsetup_r+0xc6>
 800460c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004610:	d1ba      	bne.n	8004588 <__swsetup_r+0x30>
 8004612:	bd70      	pop	{r4, r5, r6, pc}
 8004614:	0781      	lsls	r1, r0, #30
 8004616:	bf58      	it	pl
 8004618:	6963      	ldrpl	r3, [r4, #20]
 800461a:	60a3      	str	r3, [r4, #8]
 800461c:	e7f4      	b.n	8004608 <__swsetup_r+0xb0>
 800461e:	2000      	movs	r0, #0
 8004620:	e7f7      	b.n	8004612 <__swsetup_r+0xba>
 8004622:	bf00      	nop
 8004624:	20000060 	.word	0x20000060
 8004628:	0800512c 	.word	0x0800512c
 800462c:	0800514c 	.word	0x0800514c
 8004630:	0800510c 	.word	0x0800510c

08004634 <_close_r>:
 8004634:	b538      	push	{r3, r4, r5, lr}
 8004636:	2300      	movs	r3, #0
 8004638:	4d05      	ldr	r5, [pc, #20]	; (8004650 <_close_r+0x1c>)
 800463a:	4604      	mov	r4, r0
 800463c:	4608      	mov	r0, r1
 800463e:	602b      	str	r3, [r5, #0]
 8004640:	f7fc f993 	bl	800096a <_close>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	d102      	bne.n	800464e <_close_r+0x1a>
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	b103      	cbz	r3, 800464e <_close_r+0x1a>
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	bd38      	pop	{r3, r4, r5, pc}
 8004650:	2000114c 	.word	0x2000114c

08004654 <__sflush_r>:
 8004654:	898a      	ldrh	r2, [r1, #12]
 8004656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004658:	4605      	mov	r5, r0
 800465a:	0710      	lsls	r0, r2, #28
 800465c:	460c      	mov	r4, r1
 800465e:	d457      	bmi.n	8004710 <__sflush_r+0xbc>
 8004660:	684b      	ldr	r3, [r1, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	dc04      	bgt.n	8004670 <__sflush_r+0x1c>
 8004666:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	dc01      	bgt.n	8004670 <__sflush_r+0x1c>
 800466c:	2000      	movs	r0, #0
 800466e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004672:	2e00      	cmp	r6, #0
 8004674:	d0fa      	beq.n	800466c <__sflush_r+0x18>
 8004676:	2300      	movs	r3, #0
 8004678:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800467c:	682f      	ldr	r7, [r5, #0]
 800467e:	602b      	str	r3, [r5, #0]
 8004680:	d032      	beq.n	80046e8 <__sflush_r+0x94>
 8004682:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004684:	89a3      	ldrh	r3, [r4, #12]
 8004686:	075a      	lsls	r2, r3, #29
 8004688:	d505      	bpl.n	8004696 <__sflush_r+0x42>
 800468a:	6863      	ldr	r3, [r4, #4]
 800468c:	1ac0      	subs	r0, r0, r3
 800468e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004690:	b10b      	cbz	r3, 8004696 <__sflush_r+0x42>
 8004692:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004694:	1ac0      	subs	r0, r0, r3
 8004696:	2300      	movs	r3, #0
 8004698:	4602      	mov	r2, r0
 800469a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800469c:	4628      	mov	r0, r5
 800469e:	6a21      	ldr	r1, [r4, #32]
 80046a0:	47b0      	blx	r6
 80046a2:	1c43      	adds	r3, r0, #1
 80046a4:	89a3      	ldrh	r3, [r4, #12]
 80046a6:	d106      	bne.n	80046b6 <__sflush_r+0x62>
 80046a8:	6829      	ldr	r1, [r5, #0]
 80046aa:	291d      	cmp	r1, #29
 80046ac:	d82c      	bhi.n	8004708 <__sflush_r+0xb4>
 80046ae:	4a29      	ldr	r2, [pc, #164]	; (8004754 <__sflush_r+0x100>)
 80046b0:	40ca      	lsrs	r2, r1
 80046b2:	07d6      	lsls	r6, r2, #31
 80046b4:	d528      	bpl.n	8004708 <__sflush_r+0xb4>
 80046b6:	2200      	movs	r2, #0
 80046b8:	6062      	str	r2, [r4, #4]
 80046ba:	6922      	ldr	r2, [r4, #16]
 80046bc:	04d9      	lsls	r1, r3, #19
 80046be:	6022      	str	r2, [r4, #0]
 80046c0:	d504      	bpl.n	80046cc <__sflush_r+0x78>
 80046c2:	1c42      	adds	r2, r0, #1
 80046c4:	d101      	bne.n	80046ca <__sflush_r+0x76>
 80046c6:	682b      	ldr	r3, [r5, #0]
 80046c8:	b903      	cbnz	r3, 80046cc <__sflush_r+0x78>
 80046ca:	6560      	str	r0, [r4, #84]	; 0x54
 80046cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046ce:	602f      	str	r7, [r5, #0]
 80046d0:	2900      	cmp	r1, #0
 80046d2:	d0cb      	beq.n	800466c <__sflush_r+0x18>
 80046d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046d8:	4299      	cmp	r1, r3
 80046da:	d002      	beq.n	80046e2 <__sflush_r+0x8e>
 80046dc:	4628      	mov	r0, r5
 80046de:	f000 f8fb 	bl	80048d8 <_free_r>
 80046e2:	2000      	movs	r0, #0
 80046e4:	6360      	str	r0, [r4, #52]	; 0x34
 80046e6:	e7c2      	b.n	800466e <__sflush_r+0x1a>
 80046e8:	6a21      	ldr	r1, [r4, #32]
 80046ea:	2301      	movs	r3, #1
 80046ec:	4628      	mov	r0, r5
 80046ee:	47b0      	blx	r6
 80046f0:	1c41      	adds	r1, r0, #1
 80046f2:	d1c7      	bne.n	8004684 <__sflush_r+0x30>
 80046f4:	682b      	ldr	r3, [r5, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0c4      	beq.n	8004684 <__sflush_r+0x30>
 80046fa:	2b1d      	cmp	r3, #29
 80046fc:	d001      	beq.n	8004702 <__sflush_r+0xae>
 80046fe:	2b16      	cmp	r3, #22
 8004700:	d101      	bne.n	8004706 <__sflush_r+0xb2>
 8004702:	602f      	str	r7, [r5, #0]
 8004704:	e7b2      	b.n	800466c <__sflush_r+0x18>
 8004706:	89a3      	ldrh	r3, [r4, #12]
 8004708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800470c:	81a3      	strh	r3, [r4, #12]
 800470e:	e7ae      	b.n	800466e <__sflush_r+0x1a>
 8004710:	690f      	ldr	r7, [r1, #16]
 8004712:	2f00      	cmp	r7, #0
 8004714:	d0aa      	beq.n	800466c <__sflush_r+0x18>
 8004716:	0793      	lsls	r3, r2, #30
 8004718:	bf18      	it	ne
 800471a:	2300      	movne	r3, #0
 800471c:	680e      	ldr	r6, [r1, #0]
 800471e:	bf08      	it	eq
 8004720:	694b      	ldreq	r3, [r1, #20]
 8004722:	1bf6      	subs	r6, r6, r7
 8004724:	600f      	str	r7, [r1, #0]
 8004726:	608b      	str	r3, [r1, #8]
 8004728:	2e00      	cmp	r6, #0
 800472a:	dd9f      	ble.n	800466c <__sflush_r+0x18>
 800472c:	4633      	mov	r3, r6
 800472e:	463a      	mov	r2, r7
 8004730:	4628      	mov	r0, r5
 8004732:	6a21      	ldr	r1, [r4, #32]
 8004734:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004738:	47e0      	blx	ip
 800473a:	2800      	cmp	r0, #0
 800473c:	dc06      	bgt.n	800474c <__sflush_r+0xf8>
 800473e:	89a3      	ldrh	r3, [r4, #12]
 8004740:	f04f 30ff 	mov.w	r0, #4294967295
 8004744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004748:	81a3      	strh	r3, [r4, #12]
 800474a:	e790      	b.n	800466e <__sflush_r+0x1a>
 800474c:	4407      	add	r7, r0
 800474e:	1a36      	subs	r6, r6, r0
 8004750:	e7ea      	b.n	8004728 <__sflush_r+0xd4>
 8004752:	bf00      	nop
 8004754:	20400001 	.word	0x20400001

08004758 <_fflush_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	690b      	ldr	r3, [r1, #16]
 800475c:	4605      	mov	r5, r0
 800475e:	460c      	mov	r4, r1
 8004760:	b913      	cbnz	r3, 8004768 <_fflush_r+0x10>
 8004762:	2500      	movs	r5, #0
 8004764:	4628      	mov	r0, r5
 8004766:	bd38      	pop	{r3, r4, r5, pc}
 8004768:	b118      	cbz	r0, 8004772 <_fflush_r+0x1a>
 800476a:	6983      	ldr	r3, [r0, #24]
 800476c:	b90b      	cbnz	r3, 8004772 <_fflush_r+0x1a>
 800476e:	f7ff fbd3 	bl	8003f18 <__sinit>
 8004772:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <_fflush_r+0x6c>)
 8004774:	429c      	cmp	r4, r3
 8004776:	d11b      	bne.n	80047b0 <_fflush_r+0x58>
 8004778:	686c      	ldr	r4, [r5, #4]
 800477a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0ef      	beq.n	8004762 <_fflush_r+0xa>
 8004782:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004784:	07d0      	lsls	r0, r2, #31
 8004786:	d404      	bmi.n	8004792 <_fflush_r+0x3a>
 8004788:	0599      	lsls	r1, r3, #22
 800478a:	d402      	bmi.n	8004792 <_fflush_r+0x3a>
 800478c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800478e:	f7ff fc86 	bl	800409e <__retarget_lock_acquire_recursive>
 8004792:	4628      	mov	r0, r5
 8004794:	4621      	mov	r1, r4
 8004796:	f7ff ff5d 	bl	8004654 <__sflush_r>
 800479a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800479c:	4605      	mov	r5, r0
 800479e:	07da      	lsls	r2, r3, #31
 80047a0:	d4e0      	bmi.n	8004764 <_fflush_r+0xc>
 80047a2:	89a3      	ldrh	r3, [r4, #12]
 80047a4:	059b      	lsls	r3, r3, #22
 80047a6:	d4dd      	bmi.n	8004764 <_fflush_r+0xc>
 80047a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047aa:	f7ff fc79 	bl	80040a0 <__retarget_lock_release_recursive>
 80047ae:	e7d9      	b.n	8004764 <_fflush_r+0xc>
 80047b0:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <_fflush_r+0x70>)
 80047b2:	429c      	cmp	r4, r3
 80047b4:	d101      	bne.n	80047ba <_fflush_r+0x62>
 80047b6:	68ac      	ldr	r4, [r5, #8]
 80047b8:	e7df      	b.n	800477a <_fflush_r+0x22>
 80047ba:	4b04      	ldr	r3, [pc, #16]	; (80047cc <_fflush_r+0x74>)
 80047bc:	429c      	cmp	r4, r3
 80047be:	bf08      	it	eq
 80047c0:	68ec      	ldreq	r4, [r5, #12]
 80047c2:	e7da      	b.n	800477a <_fflush_r+0x22>
 80047c4:	0800512c 	.word	0x0800512c
 80047c8:	0800514c 	.word	0x0800514c
 80047cc:	0800510c 	.word	0x0800510c

080047d0 <_lseek_r>:
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	4604      	mov	r4, r0
 80047d4:	4608      	mov	r0, r1
 80047d6:	4611      	mov	r1, r2
 80047d8:	2200      	movs	r2, #0
 80047da:	4d05      	ldr	r5, [pc, #20]	; (80047f0 <_lseek_r+0x20>)
 80047dc:	602a      	str	r2, [r5, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	f7fc f8e7 	bl	80009b2 <_lseek>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d102      	bne.n	80047ee <_lseek_r+0x1e>
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	b103      	cbz	r3, 80047ee <_lseek_r+0x1e>
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	bd38      	pop	{r3, r4, r5, pc}
 80047f0:	2000114c 	.word	0x2000114c

080047f4 <__swhatbuf_r>:
 80047f4:	b570      	push	{r4, r5, r6, lr}
 80047f6:	460e      	mov	r6, r1
 80047f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047fc:	4614      	mov	r4, r2
 80047fe:	2900      	cmp	r1, #0
 8004800:	461d      	mov	r5, r3
 8004802:	b096      	sub	sp, #88	; 0x58
 8004804:	da08      	bge.n	8004818 <__swhatbuf_r+0x24>
 8004806:	2200      	movs	r2, #0
 8004808:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800480c:	602a      	str	r2, [r5, #0]
 800480e:	061a      	lsls	r2, r3, #24
 8004810:	d410      	bmi.n	8004834 <__swhatbuf_r+0x40>
 8004812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004816:	e00e      	b.n	8004836 <__swhatbuf_r+0x42>
 8004818:	466a      	mov	r2, sp
 800481a:	f000 fba5 	bl	8004f68 <_fstat_r>
 800481e:	2800      	cmp	r0, #0
 8004820:	dbf1      	blt.n	8004806 <__swhatbuf_r+0x12>
 8004822:	9a01      	ldr	r2, [sp, #4]
 8004824:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004828:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800482c:	425a      	negs	r2, r3
 800482e:	415a      	adcs	r2, r3
 8004830:	602a      	str	r2, [r5, #0]
 8004832:	e7ee      	b.n	8004812 <__swhatbuf_r+0x1e>
 8004834:	2340      	movs	r3, #64	; 0x40
 8004836:	2000      	movs	r0, #0
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	b016      	add	sp, #88	; 0x58
 800483c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004840 <__smakebuf_r>:
 8004840:	898b      	ldrh	r3, [r1, #12]
 8004842:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004844:	079d      	lsls	r5, r3, #30
 8004846:	4606      	mov	r6, r0
 8004848:	460c      	mov	r4, r1
 800484a:	d507      	bpl.n	800485c <__smakebuf_r+0x1c>
 800484c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004850:	6023      	str	r3, [r4, #0]
 8004852:	6123      	str	r3, [r4, #16]
 8004854:	2301      	movs	r3, #1
 8004856:	6163      	str	r3, [r4, #20]
 8004858:	b002      	add	sp, #8
 800485a:	bd70      	pop	{r4, r5, r6, pc}
 800485c:	466a      	mov	r2, sp
 800485e:	ab01      	add	r3, sp, #4
 8004860:	f7ff ffc8 	bl	80047f4 <__swhatbuf_r>
 8004864:	9900      	ldr	r1, [sp, #0]
 8004866:	4605      	mov	r5, r0
 8004868:	4630      	mov	r0, r6
 800486a:	f7ff fc51 	bl	8004110 <_malloc_r>
 800486e:	b948      	cbnz	r0, 8004884 <__smakebuf_r+0x44>
 8004870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004874:	059a      	lsls	r2, r3, #22
 8004876:	d4ef      	bmi.n	8004858 <__smakebuf_r+0x18>
 8004878:	f023 0303 	bic.w	r3, r3, #3
 800487c:	f043 0302 	orr.w	r3, r3, #2
 8004880:	81a3      	strh	r3, [r4, #12]
 8004882:	e7e3      	b.n	800484c <__smakebuf_r+0xc>
 8004884:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <__smakebuf_r+0x7c>)
 8004886:	62b3      	str	r3, [r6, #40]	; 0x28
 8004888:	89a3      	ldrh	r3, [r4, #12]
 800488a:	6020      	str	r0, [r4, #0]
 800488c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004890:	81a3      	strh	r3, [r4, #12]
 8004892:	9b00      	ldr	r3, [sp, #0]
 8004894:	6120      	str	r0, [r4, #16]
 8004896:	6163      	str	r3, [r4, #20]
 8004898:	9b01      	ldr	r3, [sp, #4]
 800489a:	b15b      	cbz	r3, 80048b4 <__smakebuf_r+0x74>
 800489c:	4630      	mov	r0, r6
 800489e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048a2:	f000 fb73 	bl	8004f8c <_isatty_r>
 80048a6:	b128      	cbz	r0, 80048b4 <__smakebuf_r+0x74>
 80048a8:	89a3      	ldrh	r3, [r4, #12]
 80048aa:	f023 0303 	bic.w	r3, r3, #3
 80048ae:	f043 0301 	orr.w	r3, r3, #1
 80048b2:	81a3      	strh	r3, [r4, #12]
 80048b4:	89a0      	ldrh	r0, [r4, #12]
 80048b6:	4305      	orrs	r5, r0
 80048b8:	81a5      	strh	r5, [r4, #12]
 80048ba:	e7cd      	b.n	8004858 <__smakebuf_r+0x18>
 80048bc:	08003eb1 	.word	0x08003eb1

080048c0 <__malloc_lock>:
 80048c0:	4801      	ldr	r0, [pc, #4]	; (80048c8 <__malloc_lock+0x8>)
 80048c2:	f7ff bbec 	b.w	800409e <__retarget_lock_acquire_recursive>
 80048c6:	bf00      	nop
 80048c8:	20001140 	.word	0x20001140

080048cc <__malloc_unlock>:
 80048cc:	4801      	ldr	r0, [pc, #4]	; (80048d4 <__malloc_unlock+0x8>)
 80048ce:	f7ff bbe7 	b.w	80040a0 <__retarget_lock_release_recursive>
 80048d2:	bf00      	nop
 80048d4:	20001140 	.word	0x20001140

080048d8 <_free_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	4605      	mov	r5, r0
 80048dc:	2900      	cmp	r1, #0
 80048de:	d040      	beq.n	8004962 <_free_r+0x8a>
 80048e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048e4:	1f0c      	subs	r4, r1, #4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bfb8      	it	lt
 80048ea:	18e4      	addlt	r4, r4, r3
 80048ec:	f7ff ffe8 	bl	80048c0 <__malloc_lock>
 80048f0:	4a1c      	ldr	r2, [pc, #112]	; (8004964 <_free_r+0x8c>)
 80048f2:	6813      	ldr	r3, [r2, #0]
 80048f4:	b933      	cbnz	r3, 8004904 <_free_r+0x2c>
 80048f6:	6063      	str	r3, [r4, #4]
 80048f8:	6014      	str	r4, [r2, #0]
 80048fa:	4628      	mov	r0, r5
 80048fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004900:	f7ff bfe4 	b.w	80048cc <__malloc_unlock>
 8004904:	42a3      	cmp	r3, r4
 8004906:	d908      	bls.n	800491a <_free_r+0x42>
 8004908:	6820      	ldr	r0, [r4, #0]
 800490a:	1821      	adds	r1, r4, r0
 800490c:	428b      	cmp	r3, r1
 800490e:	bf01      	itttt	eq
 8004910:	6819      	ldreq	r1, [r3, #0]
 8004912:	685b      	ldreq	r3, [r3, #4]
 8004914:	1809      	addeq	r1, r1, r0
 8004916:	6021      	streq	r1, [r4, #0]
 8004918:	e7ed      	b.n	80048f6 <_free_r+0x1e>
 800491a:	461a      	mov	r2, r3
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	b10b      	cbz	r3, 8004924 <_free_r+0x4c>
 8004920:	42a3      	cmp	r3, r4
 8004922:	d9fa      	bls.n	800491a <_free_r+0x42>
 8004924:	6811      	ldr	r1, [r2, #0]
 8004926:	1850      	adds	r0, r2, r1
 8004928:	42a0      	cmp	r0, r4
 800492a:	d10b      	bne.n	8004944 <_free_r+0x6c>
 800492c:	6820      	ldr	r0, [r4, #0]
 800492e:	4401      	add	r1, r0
 8004930:	1850      	adds	r0, r2, r1
 8004932:	4283      	cmp	r3, r0
 8004934:	6011      	str	r1, [r2, #0]
 8004936:	d1e0      	bne.n	80048fa <_free_r+0x22>
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	4401      	add	r1, r0
 800493e:	6011      	str	r1, [r2, #0]
 8004940:	6053      	str	r3, [r2, #4]
 8004942:	e7da      	b.n	80048fa <_free_r+0x22>
 8004944:	d902      	bls.n	800494c <_free_r+0x74>
 8004946:	230c      	movs	r3, #12
 8004948:	602b      	str	r3, [r5, #0]
 800494a:	e7d6      	b.n	80048fa <_free_r+0x22>
 800494c:	6820      	ldr	r0, [r4, #0]
 800494e:	1821      	adds	r1, r4, r0
 8004950:	428b      	cmp	r3, r1
 8004952:	bf01      	itttt	eq
 8004954:	6819      	ldreq	r1, [r3, #0]
 8004956:	685b      	ldreq	r3, [r3, #4]
 8004958:	1809      	addeq	r1, r1, r0
 800495a:	6021      	streq	r1, [r4, #0]
 800495c:	6063      	str	r3, [r4, #4]
 800495e:	6054      	str	r4, [r2, #4]
 8004960:	e7cb      	b.n	80048fa <_free_r+0x22>
 8004962:	bd38      	pop	{r3, r4, r5, pc}
 8004964:	20001144 	.word	0x20001144

08004968 <__sfputc_r>:
 8004968:	6893      	ldr	r3, [r2, #8]
 800496a:	b410      	push	{r4}
 800496c:	3b01      	subs	r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	6093      	str	r3, [r2, #8]
 8004972:	da07      	bge.n	8004984 <__sfputc_r+0x1c>
 8004974:	6994      	ldr	r4, [r2, #24]
 8004976:	42a3      	cmp	r3, r4
 8004978:	db01      	blt.n	800497e <__sfputc_r+0x16>
 800497a:	290a      	cmp	r1, #10
 800497c:	d102      	bne.n	8004984 <__sfputc_r+0x1c>
 800497e:	bc10      	pop	{r4}
 8004980:	f7ff bd86 	b.w	8004490 <__swbuf_r>
 8004984:	6813      	ldr	r3, [r2, #0]
 8004986:	1c58      	adds	r0, r3, #1
 8004988:	6010      	str	r0, [r2, #0]
 800498a:	7019      	strb	r1, [r3, #0]
 800498c:	4608      	mov	r0, r1
 800498e:	bc10      	pop	{r4}
 8004990:	4770      	bx	lr

08004992 <__sfputs_r>:
 8004992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004994:	4606      	mov	r6, r0
 8004996:	460f      	mov	r7, r1
 8004998:	4614      	mov	r4, r2
 800499a:	18d5      	adds	r5, r2, r3
 800499c:	42ac      	cmp	r4, r5
 800499e:	d101      	bne.n	80049a4 <__sfputs_r+0x12>
 80049a0:	2000      	movs	r0, #0
 80049a2:	e007      	b.n	80049b4 <__sfputs_r+0x22>
 80049a4:	463a      	mov	r2, r7
 80049a6:	4630      	mov	r0, r6
 80049a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ac:	f7ff ffdc 	bl	8004968 <__sfputc_r>
 80049b0:	1c43      	adds	r3, r0, #1
 80049b2:	d1f3      	bne.n	800499c <__sfputs_r+0xa>
 80049b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049b8 <_vfiprintf_r>:
 80049b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049bc:	460d      	mov	r5, r1
 80049be:	4614      	mov	r4, r2
 80049c0:	4698      	mov	r8, r3
 80049c2:	4606      	mov	r6, r0
 80049c4:	b09d      	sub	sp, #116	; 0x74
 80049c6:	b118      	cbz	r0, 80049d0 <_vfiprintf_r+0x18>
 80049c8:	6983      	ldr	r3, [r0, #24]
 80049ca:	b90b      	cbnz	r3, 80049d0 <_vfiprintf_r+0x18>
 80049cc:	f7ff faa4 	bl	8003f18 <__sinit>
 80049d0:	4b89      	ldr	r3, [pc, #548]	; (8004bf8 <_vfiprintf_r+0x240>)
 80049d2:	429d      	cmp	r5, r3
 80049d4:	d11b      	bne.n	8004a0e <_vfiprintf_r+0x56>
 80049d6:	6875      	ldr	r5, [r6, #4]
 80049d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049da:	07d9      	lsls	r1, r3, #31
 80049dc:	d405      	bmi.n	80049ea <_vfiprintf_r+0x32>
 80049de:	89ab      	ldrh	r3, [r5, #12]
 80049e0:	059a      	lsls	r2, r3, #22
 80049e2:	d402      	bmi.n	80049ea <_vfiprintf_r+0x32>
 80049e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049e6:	f7ff fb5a 	bl	800409e <__retarget_lock_acquire_recursive>
 80049ea:	89ab      	ldrh	r3, [r5, #12]
 80049ec:	071b      	lsls	r3, r3, #28
 80049ee:	d501      	bpl.n	80049f4 <_vfiprintf_r+0x3c>
 80049f0:	692b      	ldr	r3, [r5, #16]
 80049f2:	b9eb      	cbnz	r3, 8004a30 <_vfiprintf_r+0x78>
 80049f4:	4629      	mov	r1, r5
 80049f6:	4630      	mov	r0, r6
 80049f8:	f7ff fdae 	bl	8004558 <__swsetup_r>
 80049fc:	b1c0      	cbz	r0, 8004a30 <_vfiprintf_r+0x78>
 80049fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a00:	07dc      	lsls	r4, r3, #31
 8004a02:	d50e      	bpl.n	8004a22 <_vfiprintf_r+0x6a>
 8004a04:	f04f 30ff 	mov.w	r0, #4294967295
 8004a08:	b01d      	add	sp, #116	; 0x74
 8004a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0e:	4b7b      	ldr	r3, [pc, #492]	; (8004bfc <_vfiprintf_r+0x244>)
 8004a10:	429d      	cmp	r5, r3
 8004a12:	d101      	bne.n	8004a18 <_vfiprintf_r+0x60>
 8004a14:	68b5      	ldr	r5, [r6, #8]
 8004a16:	e7df      	b.n	80049d8 <_vfiprintf_r+0x20>
 8004a18:	4b79      	ldr	r3, [pc, #484]	; (8004c00 <_vfiprintf_r+0x248>)
 8004a1a:	429d      	cmp	r5, r3
 8004a1c:	bf08      	it	eq
 8004a1e:	68f5      	ldreq	r5, [r6, #12]
 8004a20:	e7da      	b.n	80049d8 <_vfiprintf_r+0x20>
 8004a22:	89ab      	ldrh	r3, [r5, #12]
 8004a24:	0598      	lsls	r0, r3, #22
 8004a26:	d4ed      	bmi.n	8004a04 <_vfiprintf_r+0x4c>
 8004a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a2a:	f7ff fb39 	bl	80040a0 <__retarget_lock_release_recursive>
 8004a2e:	e7e9      	b.n	8004a04 <_vfiprintf_r+0x4c>
 8004a30:	2300      	movs	r3, #0
 8004a32:	9309      	str	r3, [sp, #36]	; 0x24
 8004a34:	2320      	movs	r3, #32
 8004a36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a3a:	2330      	movs	r3, #48	; 0x30
 8004a3c:	f04f 0901 	mov.w	r9, #1
 8004a40:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a44:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004c04 <_vfiprintf_r+0x24c>
 8004a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a4c:	4623      	mov	r3, r4
 8004a4e:	469a      	mov	sl, r3
 8004a50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a54:	b10a      	cbz	r2, 8004a5a <_vfiprintf_r+0xa2>
 8004a56:	2a25      	cmp	r2, #37	; 0x25
 8004a58:	d1f9      	bne.n	8004a4e <_vfiprintf_r+0x96>
 8004a5a:	ebba 0b04 	subs.w	fp, sl, r4
 8004a5e:	d00b      	beq.n	8004a78 <_vfiprintf_r+0xc0>
 8004a60:	465b      	mov	r3, fp
 8004a62:	4622      	mov	r2, r4
 8004a64:	4629      	mov	r1, r5
 8004a66:	4630      	mov	r0, r6
 8004a68:	f7ff ff93 	bl	8004992 <__sfputs_r>
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	f000 80aa 	beq.w	8004bc6 <_vfiprintf_r+0x20e>
 8004a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a74:	445a      	add	r2, fp
 8004a76:	9209      	str	r2, [sp, #36]	; 0x24
 8004a78:	f89a 3000 	ldrb.w	r3, [sl]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 80a2 	beq.w	8004bc6 <_vfiprintf_r+0x20e>
 8004a82:	2300      	movs	r3, #0
 8004a84:	f04f 32ff 	mov.w	r2, #4294967295
 8004a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a8c:	f10a 0a01 	add.w	sl, sl, #1
 8004a90:	9304      	str	r3, [sp, #16]
 8004a92:	9307      	str	r3, [sp, #28]
 8004a94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a98:	931a      	str	r3, [sp, #104]	; 0x68
 8004a9a:	4654      	mov	r4, sl
 8004a9c:	2205      	movs	r2, #5
 8004a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aa2:	4858      	ldr	r0, [pc, #352]	; (8004c04 <_vfiprintf_r+0x24c>)
 8004aa4:	f000 fa82 	bl	8004fac <memchr>
 8004aa8:	9a04      	ldr	r2, [sp, #16]
 8004aaa:	b9d8      	cbnz	r0, 8004ae4 <_vfiprintf_r+0x12c>
 8004aac:	06d1      	lsls	r1, r2, #27
 8004aae:	bf44      	itt	mi
 8004ab0:	2320      	movmi	r3, #32
 8004ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ab6:	0713      	lsls	r3, r2, #28
 8004ab8:	bf44      	itt	mi
 8004aba:	232b      	movmi	r3, #43	; 0x2b
 8004abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8004ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ac6:	d015      	beq.n	8004af4 <_vfiprintf_r+0x13c>
 8004ac8:	4654      	mov	r4, sl
 8004aca:	2000      	movs	r0, #0
 8004acc:	f04f 0c0a 	mov.w	ip, #10
 8004ad0:	9a07      	ldr	r2, [sp, #28]
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ad8:	3b30      	subs	r3, #48	; 0x30
 8004ada:	2b09      	cmp	r3, #9
 8004adc:	d94e      	bls.n	8004b7c <_vfiprintf_r+0x1c4>
 8004ade:	b1b0      	cbz	r0, 8004b0e <_vfiprintf_r+0x156>
 8004ae0:	9207      	str	r2, [sp, #28]
 8004ae2:	e014      	b.n	8004b0e <_vfiprintf_r+0x156>
 8004ae4:	eba0 0308 	sub.w	r3, r0, r8
 8004ae8:	fa09 f303 	lsl.w	r3, r9, r3
 8004aec:	4313      	orrs	r3, r2
 8004aee:	46a2      	mov	sl, r4
 8004af0:	9304      	str	r3, [sp, #16]
 8004af2:	e7d2      	b.n	8004a9a <_vfiprintf_r+0xe2>
 8004af4:	9b03      	ldr	r3, [sp, #12]
 8004af6:	1d19      	adds	r1, r3, #4
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	9103      	str	r1, [sp, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bfbb      	ittet	lt
 8004b00:	425b      	neglt	r3, r3
 8004b02:	f042 0202 	orrlt.w	r2, r2, #2
 8004b06:	9307      	strge	r3, [sp, #28]
 8004b08:	9307      	strlt	r3, [sp, #28]
 8004b0a:	bfb8      	it	lt
 8004b0c:	9204      	strlt	r2, [sp, #16]
 8004b0e:	7823      	ldrb	r3, [r4, #0]
 8004b10:	2b2e      	cmp	r3, #46	; 0x2e
 8004b12:	d10c      	bne.n	8004b2e <_vfiprintf_r+0x176>
 8004b14:	7863      	ldrb	r3, [r4, #1]
 8004b16:	2b2a      	cmp	r3, #42	; 0x2a
 8004b18:	d135      	bne.n	8004b86 <_vfiprintf_r+0x1ce>
 8004b1a:	9b03      	ldr	r3, [sp, #12]
 8004b1c:	3402      	adds	r4, #2
 8004b1e:	1d1a      	adds	r2, r3, #4
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	9203      	str	r2, [sp, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bfb8      	it	lt
 8004b28:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b2c:	9305      	str	r3, [sp, #20]
 8004b2e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004c08 <_vfiprintf_r+0x250>
 8004b32:	2203      	movs	r2, #3
 8004b34:	4650      	mov	r0, sl
 8004b36:	7821      	ldrb	r1, [r4, #0]
 8004b38:	f000 fa38 	bl	8004fac <memchr>
 8004b3c:	b140      	cbz	r0, 8004b50 <_vfiprintf_r+0x198>
 8004b3e:	2340      	movs	r3, #64	; 0x40
 8004b40:	eba0 000a 	sub.w	r0, r0, sl
 8004b44:	fa03 f000 	lsl.w	r0, r3, r0
 8004b48:	9b04      	ldr	r3, [sp, #16]
 8004b4a:	3401      	adds	r4, #1
 8004b4c:	4303      	orrs	r3, r0
 8004b4e:	9304      	str	r3, [sp, #16]
 8004b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b54:	2206      	movs	r2, #6
 8004b56:	482d      	ldr	r0, [pc, #180]	; (8004c0c <_vfiprintf_r+0x254>)
 8004b58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b5c:	f000 fa26 	bl	8004fac <memchr>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d03f      	beq.n	8004be4 <_vfiprintf_r+0x22c>
 8004b64:	4b2a      	ldr	r3, [pc, #168]	; (8004c10 <_vfiprintf_r+0x258>)
 8004b66:	bb1b      	cbnz	r3, 8004bb0 <_vfiprintf_r+0x1f8>
 8004b68:	9b03      	ldr	r3, [sp, #12]
 8004b6a:	3307      	adds	r3, #7
 8004b6c:	f023 0307 	bic.w	r3, r3, #7
 8004b70:	3308      	adds	r3, #8
 8004b72:	9303      	str	r3, [sp, #12]
 8004b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b76:	443b      	add	r3, r7
 8004b78:	9309      	str	r3, [sp, #36]	; 0x24
 8004b7a:	e767      	b.n	8004a4c <_vfiprintf_r+0x94>
 8004b7c:	460c      	mov	r4, r1
 8004b7e:	2001      	movs	r0, #1
 8004b80:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b84:	e7a5      	b.n	8004ad2 <_vfiprintf_r+0x11a>
 8004b86:	2300      	movs	r3, #0
 8004b88:	f04f 0c0a 	mov.w	ip, #10
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	3401      	adds	r4, #1
 8004b90:	9305      	str	r3, [sp, #20]
 8004b92:	4620      	mov	r0, r4
 8004b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b98:	3a30      	subs	r2, #48	; 0x30
 8004b9a:	2a09      	cmp	r2, #9
 8004b9c:	d903      	bls.n	8004ba6 <_vfiprintf_r+0x1ee>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0c5      	beq.n	8004b2e <_vfiprintf_r+0x176>
 8004ba2:	9105      	str	r1, [sp, #20]
 8004ba4:	e7c3      	b.n	8004b2e <_vfiprintf_r+0x176>
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	2301      	movs	r3, #1
 8004baa:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bae:	e7f0      	b.n	8004b92 <_vfiprintf_r+0x1da>
 8004bb0:	ab03      	add	r3, sp, #12
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	462a      	mov	r2, r5
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	4b16      	ldr	r3, [pc, #88]	; (8004c14 <_vfiprintf_r+0x25c>)
 8004bba:	a904      	add	r1, sp, #16
 8004bbc:	f3af 8000 	nop.w
 8004bc0:	4607      	mov	r7, r0
 8004bc2:	1c78      	adds	r0, r7, #1
 8004bc4:	d1d6      	bne.n	8004b74 <_vfiprintf_r+0x1bc>
 8004bc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bc8:	07d9      	lsls	r1, r3, #31
 8004bca:	d405      	bmi.n	8004bd8 <_vfiprintf_r+0x220>
 8004bcc:	89ab      	ldrh	r3, [r5, #12]
 8004bce:	059a      	lsls	r2, r3, #22
 8004bd0:	d402      	bmi.n	8004bd8 <_vfiprintf_r+0x220>
 8004bd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bd4:	f7ff fa64 	bl	80040a0 <__retarget_lock_release_recursive>
 8004bd8:	89ab      	ldrh	r3, [r5, #12]
 8004bda:	065b      	lsls	r3, r3, #25
 8004bdc:	f53f af12 	bmi.w	8004a04 <_vfiprintf_r+0x4c>
 8004be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004be2:	e711      	b.n	8004a08 <_vfiprintf_r+0x50>
 8004be4:	ab03      	add	r3, sp, #12
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	462a      	mov	r2, r5
 8004bea:	4630      	mov	r0, r6
 8004bec:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <_vfiprintf_r+0x25c>)
 8004bee:	a904      	add	r1, sp, #16
 8004bf0:	f000 f882 	bl	8004cf8 <_printf_i>
 8004bf4:	e7e4      	b.n	8004bc0 <_vfiprintf_r+0x208>
 8004bf6:	bf00      	nop
 8004bf8:	0800512c 	.word	0x0800512c
 8004bfc:	0800514c 	.word	0x0800514c
 8004c00:	0800510c 	.word	0x0800510c
 8004c04:	08005170 	.word	0x08005170
 8004c08:	08005176 	.word	0x08005176
 8004c0c:	0800517a 	.word	0x0800517a
 8004c10:	00000000 	.word	0x00000000
 8004c14:	08004993 	.word	0x08004993

08004c18 <_printf_common>:
 8004c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c1c:	4616      	mov	r6, r2
 8004c1e:	4699      	mov	r9, r3
 8004c20:	688a      	ldr	r2, [r1, #8]
 8004c22:	690b      	ldr	r3, [r1, #16]
 8004c24:	4607      	mov	r7, r0
 8004c26:	4293      	cmp	r3, r2
 8004c28:	bfb8      	it	lt
 8004c2a:	4613      	movlt	r3, r2
 8004c2c:	6033      	str	r3, [r6, #0]
 8004c2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c32:	460c      	mov	r4, r1
 8004c34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c38:	b10a      	cbz	r2, 8004c3e <_printf_common+0x26>
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	6033      	str	r3, [r6, #0]
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	0699      	lsls	r1, r3, #26
 8004c42:	bf42      	ittt	mi
 8004c44:	6833      	ldrmi	r3, [r6, #0]
 8004c46:	3302      	addmi	r3, #2
 8004c48:	6033      	strmi	r3, [r6, #0]
 8004c4a:	6825      	ldr	r5, [r4, #0]
 8004c4c:	f015 0506 	ands.w	r5, r5, #6
 8004c50:	d106      	bne.n	8004c60 <_printf_common+0x48>
 8004c52:	f104 0a19 	add.w	sl, r4, #25
 8004c56:	68e3      	ldr	r3, [r4, #12]
 8004c58:	6832      	ldr	r2, [r6, #0]
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	42ab      	cmp	r3, r5
 8004c5e:	dc28      	bgt.n	8004cb2 <_printf_common+0x9a>
 8004c60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c64:	1e13      	subs	r3, r2, #0
 8004c66:	6822      	ldr	r2, [r4, #0]
 8004c68:	bf18      	it	ne
 8004c6a:	2301      	movne	r3, #1
 8004c6c:	0692      	lsls	r2, r2, #26
 8004c6e:	d42d      	bmi.n	8004ccc <_printf_common+0xb4>
 8004c70:	4649      	mov	r1, r9
 8004c72:	4638      	mov	r0, r7
 8004c74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c78:	47c0      	blx	r8
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	d020      	beq.n	8004cc0 <_printf_common+0xa8>
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	68e5      	ldr	r5, [r4, #12]
 8004c82:	f003 0306 	and.w	r3, r3, #6
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	bf18      	it	ne
 8004c8a:	2500      	movne	r5, #0
 8004c8c:	6832      	ldr	r2, [r6, #0]
 8004c8e:	f04f 0600 	mov.w	r6, #0
 8004c92:	68a3      	ldr	r3, [r4, #8]
 8004c94:	bf08      	it	eq
 8004c96:	1aad      	subeq	r5, r5, r2
 8004c98:	6922      	ldr	r2, [r4, #16]
 8004c9a:	bf08      	it	eq
 8004c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	bfc4      	itt	gt
 8004ca4:	1a9b      	subgt	r3, r3, r2
 8004ca6:	18ed      	addgt	r5, r5, r3
 8004ca8:	341a      	adds	r4, #26
 8004caa:	42b5      	cmp	r5, r6
 8004cac:	d11a      	bne.n	8004ce4 <_printf_common+0xcc>
 8004cae:	2000      	movs	r0, #0
 8004cb0:	e008      	b.n	8004cc4 <_printf_common+0xac>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	4652      	mov	r2, sl
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	4638      	mov	r0, r7
 8004cba:	47c0      	blx	r8
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d103      	bne.n	8004cc8 <_printf_common+0xb0>
 8004cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc8:	3501      	adds	r5, #1
 8004cca:	e7c4      	b.n	8004c56 <_printf_common+0x3e>
 8004ccc:	2030      	movs	r0, #48	; 0x30
 8004cce:	18e1      	adds	r1, r4, r3
 8004cd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cda:	4422      	add	r2, r4
 8004cdc:	3302      	adds	r3, #2
 8004cde:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ce2:	e7c5      	b.n	8004c70 <_printf_common+0x58>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	4622      	mov	r2, r4
 8004ce8:	4649      	mov	r1, r9
 8004cea:	4638      	mov	r0, r7
 8004cec:	47c0      	blx	r8
 8004cee:	3001      	adds	r0, #1
 8004cf0:	d0e6      	beq.n	8004cc0 <_printf_common+0xa8>
 8004cf2:	3601      	adds	r6, #1
 8004cf4:	e7d9      	b.n	8004caa <_printf_common+0x92>
	...

08004cf8 <_printf_i>:
 8004cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cfc:	7e0f      	ldrb	r7, [r1, #24]
 8004cfe:	4691      	mov	r9, r2
 8004d00:	2f78      	cmp	r7, #120	; 0x78
 8004d02:	4680      	mov	r8, r0
 8004d04:	460c      	mov	r4, r1
 8004d06:	469a      	mov	sl, r3
 8004d08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d0e:	d807      	bhi.n	8004d20 <_printf_i+0x28>
 8004d10:	2f62      	cmp	r7, #98	; 0x62
 8004d12:	d80a      	bhi.n	8004d2a <_printf_i+0x32>
 8004d14:	2f00      	cmp	r7, #0
 8004d16:	f000 80d9 	beq.w	8004ecc <_printf_i+0x1d4>
 8004d1a:	2f58      	cmp	r7, #88	; 0x58
 8004d1c:	f000 80a4 	beq.w	8004e68 <_printf_i+0x170>
 8004d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d28:	e03a      	b.n	8004da0 <_printf_i+0xa8>
 8004d2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d2e:	2b15      	cmp	r3, #21
 8004d30:	d8f6      	bhi.n	8004d20 <_printf_i+0x28>
 8004d32:	a101      	add	r1, pc, #4	; (adr r1, 8004d38 <_printf_i+0x40>)
 8004d34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d38:	08004d91 	.word	0x08004d91
 8004d3c:	08004da5 	.word	0x08004da5
 8004d40:	08004d21 	.word	0x08004d21
 8004d44:	08004d21 	.word	0x08004d21
 8004d48:	08004d21 	.word	0x08004d21
 8004d4c:	08004d21 	.word	0x08004d21
 8004d50:	08004da5 	.word	0x08004da5
 8004d54:	08004d21 	.word	0x08004d21
 8004d58:	08004d21 	.word	0x08004d21
 8004d5c:	08004d21 	.word	0x08004d21
 8004d60:	08004d21 	.word	0x08004d21
 8004d64:	08004eb3 	.word	0x08004eb3
 8004d68:	08004dd5 	.word	0x08004dd5
 8004d6c:	08004e95 	.word	0x08004e95
 8004d70:	08004d21 	.word	0x08004d21
 8004d74:	08004d21 	.word	0x08004d21
 8004d78:	08004ed5 	.word	0x08004ed5
 8004d7c:	08004d21 	.word	0x08004d21
 8004d80:	08004dd5 	.word	0x08004dd5
 8004d84:	08004d21 	.word	0x08004d21
 8004d88:	08004d21 	.word	0x08004d21
 8004d8c:	08004e9d 	.word	0x08004e9d
 8004d90:	682b      	ldr	r3, [r5, #0]
 8004d92:	1d1a      	adds	r2, r3, #4
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	602a      	str	r2, [r5, #0]
 8004d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004da0:	2301      	movs	r3, #1
 8004da2:	e0a4      	b.n	8004eee <_printf_i+0x1f6>
 8004da4:	6820      	ldr	r0, [r4, #0]
 8004da6:	6829      	ldr	r1, [r5, #0]
 8004da8:	0606      	lsls	r6, r0, #24
 8004daa:	f101 0304 	add.w	r3, r1, #4
 8004dae:	d50a      	bpl.n	8004dc6 <_printf_i+0xce>
 8004db0:	680e      	ldr	r6, [r1, #0]
 8004db2:	602b      	str	r3, [r5, #0]
 8004db4:	2e00      	cmp	r6, #0
 8004db6:	da03      	bge.n	8004dc0 <_printf_i+0xc8>
 8004db8:	232d      	movs	r3, #45	; 0x2d
 8004dba:	4276      	negs	r6, r6
 8004dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dc0:	230a      	movs	r3, #10
 8004dc2:	485e      	ldr	r0, [pc, #376]	; (8004f3c <_printf_i+0x244>)
 8004dc4:	e019      	b.n	8004dfa <_printf_i+0x102>
 8004dc6:	680e      	ldr	r6, [r1, #0]
 8004dc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dcc:	602b      	str	r3, [r5, #0]
 8004dce:	bf18      	it	ne
 8004dd0:	b236      	sxthne	r6, r6
 8004dd2:	e7ef      	b.n	8004db4 <_printf_i+0xbc>
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	6820      	ldr	r0, [r4, #0]
 8004dd8:	1d19      	adds	r1, r3, #4
 8004dda:	6029      	str	r1, [r5, #0]
 8004ddc:	0601      	lsls	r1, r0, #24
 8004dde:	d501      	bpl.n	8004de4 <_printf_i+0xec>
 8004de0:	681e      	ldr	r6, [r3, #0]
 8004de2:	e002      	b.n	8004dea <_printf_i+0xf2>
 8004de4:	0646      	lsls	r6, r0, #25
 8004de6:	d5fb      	bpl.n	8004de0 <_printf_i+0xe8>
 8004de8:	881e      	ldrh	r6, [r3, #0]
 8004dea:	2f6f      	cmp	r7, #111	; 0x6f
 8004dec:	bf0c      	ite	eq
 8004dee:	2308      	moveq	r3, #8
 8004df0:	230a      	movne	r3, #10
 8004df2:	4852      	ldr	r0, [pc, #328]	; (8004f3c <_printf_i+0x244>)
 8004df4:	2100      	movs	r1, #0
 8004df6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dfa:	6865      	ldr	r5, [r4, #4]
 8004dfc:	2d00      	cmp	r5, #0
 8004dfe:	bfa8      	it	ge
 8004e00:	6821      	ldrge	r1, [r4, #0]
 8004e02:	60a5      	str	r5, [r4, #8]
 8004e04:	bfa4      	itt	ge
 8004e06:	f021 0104 	bicge.w	r1, r1, #4
 8004e0a:	6021      	strge	r1, [r4, #0]
 8004e0c:	b90e      	cbnz	r6, 8004e12 <_printf_i+0x11a>
 8004e0e:	2d00      	cmp	r5, #0
 8004e10:	d04d      	beq.n	8004eae <_printf_i+0x1b6>
 8004e12:	4615      	mov	r5, r2
 8004e14:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e18:	fb03 6711 	mls	r7, r3, r1, r6
 8004e1c:	5dc7      	ldrb	r7, [r0, r7]
 8004e1e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e22:	4637      	mov	r7, r6
 8004e24:	42bb      	cmp	r3, r7
 8004e26:	460e      	mov	r6, r1
 8004e28:	d9f4      	bls.n	8004e14 <_printf_i+0x11c>
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d10b      	bne.n	8004e46 <_printf_i+0x14e>
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	07de      	lsls	r6, r3, #31
 8004e32:	d508      	bpl.n	8004e46 <_printf_i+0x14e>
 8004e34:	6923      	ldr	r3, [r4, #16]
 8004e36:	6861      	ldr	r1, [r4, #4]
 8004e38:	4299      	cmp	r1, r3
 8004e3a:	bfde      	ittt	le
 8004e3c:	2330      	movle	r3, #48	; 0x30
 8004e3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e46:	1b52      	subs	r2, r2, r5
 8004e48:	6122      	str	r2, [r4, #16]
 8004e4a:	464b      	mov	r3, r9
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	4640      	mov	r0, r8
 8004e50:	f8cd a000 	str.w	sl, [sp]
 8004e54:	aa03      	add	r2, sp, #12
 8004e56:	f7ff fedf 	bl	8004c18 <_printf_common>
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	d14c      	bne.n	8004ef8 <_printf_i+0x200>
 8004e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e62:	b004      	add	sp, #16
 8004e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e68:	4834      	ldr	r0, [pc, #208]	; (8004f3c <_printf_i+0x244>)
 8004e6a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e6e:	6829      	ldr	r1, [r5, #0]
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e76:	6029      	str	r1, [r5, #0]
 8004e78:	061d      	lsls	r5, r3, #24
 8004e7a:	d514      	bpl.n	8004ea6 <_printf_i+0x1ae>
 8004e7c:	07df      	lsls	r7, r3, #31
 8004e7e:	bf44      	itt	mi
 8004e80:	f043 0320 	orrmi.w	r3, r3, #32
 8004e84:	6023      	strmi	r3, [r4, #0]
 8004e86:	b91e      	cbnz	r6, 8004e90 <_printf_i+0x198>
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	f023 0320 	bic.w	r3, r3, #32
 8004e8e:	6023      	str	r3, [r4, #0]
 8004e90:	2310      	movs	r3, #16
 8004e92:	e7af      	b.n	8004df4 <_printf_i+0xfc>
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	f043 0320 	orr.w	r3, r3, #32
 8004e9a:	6023      	str	r3, [r4, #0]
 8004e9c:	2378      	movs	r3, #120	; 0x78
 8004e9e:	4828      	ldr	r0, [pc, #160]	; (8004f40 <_printf_i+0x248>)
 8004ea0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ea4:	e7e3      	b.n	8004e6e <_printf_i+0x176>
 8004ea6:	0659      	lsls	r1, r3, #25
 8004ea8:	bf48      	it	mi
 8004eaa:	b2b6      	uxthmi	r6, r6
 8004eac:	e7e6      	b.n	8004e7c <_printf_i+0x184>
 8004eae:	4615      	mov	r5, r2
 8004eb0:	e7bb      	b.n	8004e2a <_printf_i+0x132>
 8004eb2:	682b      	ldr	r3, [r5, #0]
 8004eb4:	6826      	ldr	r6, [r4, #0]
 8004eb6:	1d18      	adds	r0, r3, #4
 8004eb8:	6961      	ldr	r1, [r4, #20]
 8004eba:	6028      	str	r0, [r5, #0]
 8004ebc:	0635      	lsls	r5, r6, #24
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	d501      	bpl.n	8004ec6 <_printf_i+0x1ce>
 8004ec2:	6019      	str	r1, [r3, #0]
 8004ec4:	e002      	b.n	8004ecc <_printf_i+0x1d4>
 8004ec6:	0670      	lsls	r0, r6, #25
 8004ec8:	d5fb      	bpl.n	8004ec2 <_printf_i+0x1ca>
 8004eca:	8019      	strh	r1, [r3, #0]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	4615      	mov	r5, r2
 8004ed0:	6123      	str	r3, [r4, #16]
 8004ed2:	e7ba      	b.n	8004e4a <_printf_i+0x152>
 8004ed4:	682b      	ldr	r3, [r5, #0]
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	1d1a      	adds	r2, r3, #4
 8004eda:	602a      	str	r2, [r5, #0]
 8004edc:	681d      	ldr	r5, [r3, #0]
 8004ede:	6862      	ldr	r2, [r4, #4]
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	f000 f863 	bl	8004fac <memchr>
 8004ee6:	b108      	cbz	r0, 8004eec <_printf_i+0x1f4>
 8004ee8:	1b40      	subs	r0, r0, r5
 8004eea:	6060      	str	r0, [r4, #4]
 8004eec:	6863      	ldr	r3, [r4, #4]
 8004eee:	6123      	str	r3, [r4, #16]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ef6:	e7a8      	b.n	8004e4a <_printf_i+0x152>
 8004ef8:	462a      	mov	r2, r5
 8004efa:	4649      	mov	r1, r9
 8004efc:	4640      	mov	r0, r8
 8004efe:	6923      	ldr	r3, [r4, #16]
 8004f00:	47d0      	blx	sl
 8004f02:	3001      	adds	r0, #1
 8004f04:	d0ab      	beq.n	8004e5e <_printf_i+0x166>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	079b      	lsls	r3, r3, #30
 8004f0a:	d413      	bmi.n	8004f34 <_printf_i+0x23c>
 8004f0c:	68e0      	ldr	r0, [r4, #12]
 8004f0e:	9b03      	ldr	r3, [sp, #12]
 8004f10:	4298      	cmp	r0, r3
 8004f12:	bfb8      	it	lt
 8004f14:	4618      	movlt	r0, r3
 8004f16:	e7a4      	b.n	8004e62 <_printf_i+0x16a>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	4632      	mov	r2, r6
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	4640      	mov	r0, r8
 8004f20:	47d0      	blx	sl
 8004f22:	3001      	adds	r0, #1
 8004f24:	d09b      	beq.n	8004e5e <_printf_i+0x166>
 8004f26:	3501      	adds	r5, #1
 8004f28:	68e3      	ldr	r3, [r4, #12]
 8004f2a:	9903      	ldr	r1, [sp, #12]
 8004f2c:	1a5b      	subs	r3, r3, r1
 8004f2e:	42ab      	cmp	r3, r5
 8004f30:	dcf2      	bgt.n	8004f18 <_printf_i+0x220>
 8004f32:	e7eb      	b.n	8004f0c <_printf_i+0x214>
 8004f34:	2500      	movs	r5, #0
 8004f36:	f104 0619 	add.w	r6, r4, #25
 8004f3a:	e7f5      	b.n	8004f28 <_printf_i+0x230>
 8004f3c:	08005181 	.word	0x08005181
 8004f40:	08005192 	.word	0x08005192

08004f44 <_read_r>:
 8004f44:	b538      	push	{r3, r4, r5, lr}
 8004f46:	4604      	mov	r4, r0
 8004f48:	4608      	mov	r0, r1
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	4d05      	ldr	r5, [pc, #20]	; (8004f64 <_read_r+0x20>)
 8004f50:	602a      	str	r2, [r5, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	f7fb fcec 	bl	8000930 <_read>
 8004f58:	1c43      	adds	r3, r0, #1
 8004f5a:	d102      	bne.n	8004f62 <_read_r+0x1e>
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	b103      	cbz	r3, 8004f62 <_read_r+0x1e>
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	bd38      	pop	{r3, r4, r5, pc}
 8004f64:	2000114c 	.word	0x2000114c

08004f68 <_fstat_r>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	4d06      	ldr	r5, [pc, #24]	; (8004f88 <_fstat_r+0x20>)
 8004f6e:	4604      	mov	r4, r0
 8004f70:	4608      	mov	r0, r1
 8004f72:	4611      	mov	r1, r2
 8004f74:	602b      	str	r3, [r5, #0]
 8004f76:	f7fb fd03 	bl	8000980 <_fstat>
 8004f7a:	1c43      	adds	r3, r0, #1
 8004f7c:	d102      	bne.n	8004f84 <_fstat_r+0x1c>
 8004f7e:	682b      	ldr	r3, [r5, #0]
 8004f80:	b103      	cbz	r3, 8004f84 <_fstat_r+0x1c>
 8004f82:	6023      	str	r3, [r4, #0]
 8004f84:	bd38      	pop	{r3, r4, r5, pc}
 8004f86:	bf00      	nop
 8004f88:	2000114c 	.word	0x2000114c

08004f8c <_isatty_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	2300      	movs	r3, #0
 8004f90:	4d05      	ldr	r5, [pc, #20]	; (8004fa8 <_isatty_r+0x1c>)
 8004f92:	4604      	mov	r4, r0
 8004f94:	4608      	mov	r0, r1
 8004f96:	602b      	str	r3, [r5, #0]
 8004f98:	f7fb fd01 	bl	800099e <_isatty>
 8004f9c:	1c43      	adds	r3, r0, #1
 8004f9e:	d102      	bne.n	8004fa6 <_isatty_r+0x1a>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	b103      	cbz	r3, 8004fa6 <_isatty_r+0x1a>
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	bd38      	pop	{r3, r4, r5, pc}
 8004fa8:	2000114c 	.word	0x2000114c

08004fac <memchr>:
 8004fac:	4603      	mov	r3, r0
 8004fae:	b510      	push	{r4, lr}
 8004fb0:	b2c9      	uxtb	r1, r1
 8004fb2:	4402      	add	r2, r0
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	d101      	bne.n	8004fbe <memchr+0x12>
 8004fba:	2000      	movs	r0, #0
 8004fbc:	e003      	b.n	8004fc6 <memchr+0x1a>
 8004fbe:	7804      	ldrb	r4, [r0, #0]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	428c      	cmp	r4, r1
 8004fc4:	d1f6      	bne.n	8004fb4 <memchr+0x8>
 8004fc6:	bd10      	pop	{r4, pc}

08004fc8 <_init>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	bf00      	nop
 8004fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fce:	bc08      	pop	{r3}
 8004fd0:	469e      	mov	lr, r3
 8004fd2:	4770      	bx	lr

08004fd4 <_fini>:
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd6:	bf00      	nop
 8004fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fda:	bc08      	pop	{r3}
 8004fdc:	469e      	mov	lr, r3
 8004fde:	4770      	bx	lr
