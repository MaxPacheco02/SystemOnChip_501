
LAB3_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002054  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08002160  08002160  00012160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800223c  0800223c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800223c  0800223c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800223c  0800223c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800223c  0800223c  0001223c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002240  08002240  00012240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  080022b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080022b4  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003018  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fc2  00000000  00000000  000230b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000488  00000000  00000000  00024078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003e0  00000000  00000000  00024500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017572  00000000  00000000  000248e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000055c6  00000000  00000000  0003be52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080c3b  00000000  00000000  00041418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2053  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017ec  00000000  00000000  000c20a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002148 	.word	0x08002148

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002148 	.word	0x08002148

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t msg[] = "Hello World!\r\n";
 8000152:	4b1a      	ldr	r3, [pc, #104]	; (80001bc <main+0x70>)
 8000154:	f107 0410 	add.w	r4, r7, #16
 8000158:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800015a:	c407      	stmia	r4!, {r0, r1, r2}
 800015c:	8023      	strh	r3, [r4, #0]
 800015e:	3402      	adds	r4, #2
 8000160:	0c1b      	lsrs	r3, r3, #16
 8000162:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fa62 	bl	800062c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f830 	bl	80001cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f870 	bl	8000250 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init();
 8000170:	f000 f8a8 	bl	80002c4 <USER_RCC_Init>
  USER_GPIO_Init();
 8000174:	f000 f8ba 	bl	80002ec <USER_GPIO_Init>
  USER_USART2_Init();
 8000178:	f000 f8e8 	bl	800034c <USER_USART2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //USER_USART2_Transmit( msg, sizeof( msg ) );
	  printf(msg);
 800017c:	f107 0310 	add.w	r3, r7, #16
 8000180:	4618      	mov	r0, r3
 8000182:	f000 ffd7 	bl	8001134 <iprintf>
	  if(USER_USART2_Receive() == 't'){
 8000186:	f000 f90b 	bl	80003a0 <USER_USART2_Receive>
 800018a:	4603      	mov	r3, r0
 800018c:	2b74      	cmp	r3, #116	; 0x74
 800018e:	d110      	bne.n	80001b2 <main+0x66>
		  GPIOA->ODR ^= GPIO_ODR_ODR5;
 8000190:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <main+0x74>)
 8000192:	68db      	ldr	r3, [r3, #12]
 8000194:	4a0a      	ldr	r2, [pc, #40]	; (80001c0 <main+0x74>)
 8000196:	f083 0320 	eor.w	r3, r3, #32
 800019a:	60d3      	str	r3, [r2, #12]
		  uint8_t msg2[] = "toggle led";
 800019c:	4a09      	ldr	r2, [pc, #36]	; (80001c4 <main+0x78>)
 800019e:	1d3b      	adds	r3, r7, #4
 80001a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80001a2:	c303      	stmia	r3!, {r0, r1}
 80001a4:	801a      	strh	r2, [r3, #0]
 80001a6:	3302      	adds	r3, #2
 80001a8:	0c12      	lsrs	r2, r2, #16
 80001aa:	701a      	strb	r2, [r3, #0]
		  printf("led\r\n");
 80001ac:	4806      	ldr	r0, [pc, #24]	; (80001c8 <main+0x7c>)
 80001ae:	f001 f847 	bl	8001240 <puts>
		  //USER_USART2_Transmit(msg2, sizeof(msg2));
	  }

	  HAL_Delay(1000);
 80001b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b6:	f000 fa9b 	bl	80006f0 <HAL_Delay>
	  printf(msg);
 80001ba:	e7df      	b.n	800017c <main+0x30>
 80001bc:	08002168 	.word	0x08002168
 80001c0:	40010800 	.word	0x40010800
 80001c4:	08002178 	.word	0x08002178
 80001c8:	08002160 	.word	0x08002160

080001cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b090      	sub	sp, #64	; 0x40
 80001d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d2:	f107 0318 	add.w	r3, r7, #24
 80001d6:	2228      	movs	r2, #40	; 0x28
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f000 ffa2 	bl	8001124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]
 80001ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ee:	2302      	movs	r3, #2
 80001f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f2:	2301      	movs	r3, #1
 80001f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f6:	2310      	movs	r3, #16
 80001f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fa:	2302      	movs	r3, #2
 80001fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001fe:	2300      	movs	r3, #0
 8000200:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000202:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000206:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000208:	f107 0318 	add.w	r3, r7, #24
 800020c:	4618      	mov	r0, r3
 800020e:	f000 fb77 	bl	8000900 <HAL_RCC_OscConfig>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000218:	f000 f8d4 	bl	80003c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021c:	230f      	movs	r3, #15
 800021e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000220:	2302      	movs	r3, #2
 8000222:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800022c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2102      	movs	r1, #2
 8000236:	4618      	mov	r0, r3
 8000238:	f000 fde4 	bl	8000e04 <HAL_RCC_ClockConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000242:	f000 f8bf 	bl	80003c4 <Error_Handler>
  }
}
 8000246:	bf00      	nop
 8000248:	3740      	adds	r7, #64	; 0x40
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000256:	4b1a      	ldr	r3, [pc, #104]	; (80002c0 <MX_GPIO_Init+0x70>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	4a19      	ldr	r2, [pc, #100]	; (80002c0 <MX_GPIO_Init+0x70>)
 800025c:	f043 0310 	orr.w	r3, r3, #16
 8000260:	6193      	str	r3, [r2, #24]
 8000262:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <MX_GPIO_Init+0x70>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	f003 0310 	and.w	r3, r3, #16
 800026a:	60fb      	str	r3, [r7, #12]
 800026c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800026e:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <MX_GPIO_Init+0x70>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	4a13      	ldr	r2, [pc, #76]	; (80002c0 <MX_GPIO_Init+0x70>)
 8000274:	f043 0320 	orr.w	r3, r3, #32
 8000278:	6193      	str	r3, [r2, #24]
 800027a:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <MX_GPIO_Init+0x70>)
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	f003 0320 	and.w	r3, r3, #32
 8000282:	60bb      	str	r3, [r7, #8]
 8000284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000286:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <MX_GPIO_Init+0x70>)
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <MX_GPIO_Init+0x70>)
 800028c:	f043 0304 	orr.w	r3, r3, #4
 8000290:	6193      	str	r3, [r2, #24]
 8000292:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <MX_GPIO_Init+0x70>)
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	f003 0304 	and.w	r3, r3, #4
 800029a:	607b      	str	r3, [r7, #4]
 800029c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <MX_GPIO_Init+0x70>)
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	4a07      	ldr	r2, [pc, #28]	; (80002c0 <MX_GPIO_Init+0x70>)
 80002a4:	f043 0308 	orr.w	r3, r3, #8
 80002a8:	6193      	str	r3, [r2, #24]
 80002aa:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <MX_GPIO_Init+0x70>)
 80002ac:	699b      	ldr	r3, [r3, #24]
 80002ae:	f003 0308 	and.w	r3, r3, #8
 80002b2:	603b      	str	r3, [r7, #0]
 80002b4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	40021000 	.word	0x40021000

080002c4 <USER_RCC_Init>:

/* USER CODE BEGIN 4 */
void USER_RCC_Init(void){
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
	RCC->APB1ENR	|=	 RCC_APB1ENR_USART2EN;//  	USART2 clock enable
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <USER_RCC_Init+0x24>)
 80002ca:	69db      	ldr	r3, [r3, #28]
 80002cc:	4a06      	ldr	r2, [pc, #24]	; (80002e8 <USER_RCC_Init+0x24>)
 80002ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d2:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR	|=	 RCC_APB2ENR_IOPAEN;//    	I/O port A clock enable
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <USER_RCC_Init+0x24>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a03      	ldr	r2, [pc, #12]	; (80002e8 <USER_RCC_Init+0x24>)
 80002da:	f043 0304 	orr.w	r3, r3, #4
 80002de:	6193      	str	r3, [r2, #24]
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr
 80002e8:	40021000 	.word	0x40021000

080002ec <USER_GPIO_Init>:

void USER_GPIO_Init(void){
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BR5;//			PA5 -> 0, LD2 OFF
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <USER_GPIO_Init+0x5c>)
 80002f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80002f6:	611a      	str	r2, [r3, #16]
	//pin PA5 as output push-pull max speed 10MHz
	GPIOA->CRL &= ~GPIO_CRL_CNF5 & ~GPIO_CRL_MODE5_1;
 80002f8:	4b13      	ldr	r3, [pc, #76]	; (8000348 <USER_GPIO_Init+0x5c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a12      	ldr	r2, [pc, #72]	; (8000348 <USER_GPIO_Init+0x5c>)
 80002fe:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8000302:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE5_0;
 8000304:	4b10      	ldr	r3, [pc, #64]	; (8000348 <USER_GPIO_Init+0x5c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a0f      	ldr	r2, [pc, #60]	; (8000348 <USER_GPIO_Init+0x5c>)
 800030a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800030e:	6013      	str	r3, [r2, #0]

	//pin PA2 (USART2_TX) as alternate function output push-pull, max speed 10MHz
	GPIOA->CRL	&=	~GPIO_CRL_CNF2_0 & ~GPIO_CRL_MODE2_1;
 8000310:	4b0d      	ldr	r3, [pc, #52]	; (8000348 <USER_GPIO_Init+0x5c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a0c      	ldr	r2, [pc, #48]	; (8000348 <USER_GPIO_Init+0x5c>)
 8000316:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800031a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF2_1 | GPIO_CRL_MODE2_0;
 800031c:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <USER_GPIO_Init+0x5c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a09      	ldr	r2, [pc, #36]	; (8000348 <USER_GPIO_Init+0x5c>)
 8000322:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
 8000326:	6013      	str	r3, [r2, #0]

	//pin PA3 (USART_RX) as input pull-up
	GPIOA->CRL	&=	~GPIO_CRL_CNF3_0 & ~GPIO_CRL_MODE3;
 8000328:	4b07      	ldr	r3, [pc, #28]	; (8000348 <USER_GPIO_Init+0x5c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a06      	ldr	r2, [pc, #24]	; (8000348 <USER_GPIO_Init+0x5c>)
 800032e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000332:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF3_1;
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <USER_GPIO_Init+0x5c>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a03      	ldr	r2, [pc, #12]	; (8000348 <USER_GPIO_Init+0x5c>)
 800033a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800033e:	6013      	str	r3, [r2, #0]
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	40010800 	.word	0x40010800

0800034c <USER_USART2_Init>:

void USER_USART2_Init(void){
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
	USART2->CR1	|=	 USART_CR1_UE;//		USART enabled
 8000350:	4b12      	ldr	r3, [pc, #72]	; (800039c <USER_USART2_Init+0x50>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	4a11      	ldr	r2, [pc, #68]	; (800039c <USER_USART2_Init+0x50>)
 8000356:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800035a:	60d3      	str	r3, [r2, #12]
	USART2->CR1	&=	~USART_CR1_M//		  	1 start bit, 8 data bits
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <USER_USART2_Init+0x50>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	4a0e      	ldr	r2, [pc, #56]	; (800039c <USER_USART2_Init+0x50>)
 8000362:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 8000366:	60d3      	str	r3, [r2, #12]
			&	~USART_CR1_PCE;//		parity control disabled
	USART2->CR2	&=	~USART_CR2_STOP;//  		1 stop bit
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <USER_USART2_Init+0x50>)
 800036a:	691b      	ldr	r3, [r3, #16]
 800036c:	4a0b      	ldr	r2, [pc, #44]	; (800039c <USER_USART2_Init+0x50>)
 800036e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000372:	6113      	str	r3, [r2, #16]
	USART2->BRR	 =	 0xD05;//			9600 bps -> 208.33,
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <USER_USART2_Init+0x50>)
 8000376:	f640 5205 	movw	r2, #3333	; 0xd05
 800037a:	609a      	str	r2, [r3, #8]
	//NEW USARTDIV = 32*10^6/(16*115200)=17.361
	//BRR = [17->HEX=11][.361*16->HEX=6]=116
	//USART2->BRR = 0x116;


	USART2->CR1	|=	 USART_CR1_TE;//		        transmitter enabled
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <USER_USART2_Init+0x50>)
 800037e:	68db      	ldr	r3, [r3, #12]
 8000380:	4a06      	ldr	r2, [pc, #24]	; (800039c <USER_USART2_Init+0x50>)
 8000382:	f043 0308 	orr.w	r3, r3, #8
 8000386:	60d3      	str	r3, [r2, #12]
	USART2->CR1	|=	 USART_CR1_RE;//		        receiver enabled
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <USER_USART2_Init+0x50>)
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	4a03      	ldr	r2, [pc, #12]	; (800039c <USER_USART2_Init+0x50>)
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	60d3      	str	r3, [r2, #12]
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr
 800039c:	40004400 	.word	0x40004400

080003a0 <USER_USART2_Receive>:
		while( ( USART2->SR & USART_SR_TXE ) == 0 ){}//	wait until transmit reg is empty
		USART2->DR = *pData++;//			transmit data
	}
}

uint32_t USER_USART2_Receive(void){
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
	while((USART2->SR & USART_SR_RXNE) == 0){}
 80003a4:	bf00      	nop
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <USER_USART2_Receive+0x20>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f003 0320 	and.w	r3, r3, #32
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0f9      	beq.n	80003a6 <USER_USART2_Receive+0x6>
	return USART2->DR;
 80003b2:	4b03      	ldr	r3, [pc, #12]	; (80003c0 <USER_USART2_Receive+0x20>)
 80003b4:	685b      	ldr	r3, [r3, #4]
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40004400 	.word	0x40004400

080003c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c8:	b672      	cpsid	i
}
 80003ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003cc:	e7fe      	b.n	80003cc <Error_Handler+0x8>
	...

080003d0 <_write>:
 */

#include "myprintf.h"
#include "main.h"

int _write(int file, char *ptr, int len){
 80003d0:	b480      	push	{r7}
 80003d2:	b087      	sub	sp, #28
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	60f8      	str	r0, [r7, #12]
 80003d8:	60b9      	str	r1, [r7, #8]
 80003da:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++){
 80003dc:	2300      	movs	r3, #0
 80003de:	617b      	str	r3, [r7, #20]
 80003e0:	e00f      	b.n	8000402 <_write+0x32>
		while( ( USART2->SR & USART_SR_TXE ) == 0 ){}
 80003e2:	bf00      	nop
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <_write+0x48>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d0f9      	beq.n	80003e4 <_write+0x14>
		USART2->DR = *ptr++;
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	1c5a      	adds	r2, r3, #1
 80003f4:	60ba      	str	r2, [r7, #8]
 80003f6:	781a      	ldrb	r2, [r3, #0]
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <_write+0x48>)
 80003fa:	605a      	str	r2, [r3, #4]
	for(DataIdx=0; DataIdx<len; DataIdx++){
 80003fc:	697b      	ldr	r3, [r7, #20]
 80003fe:	3301      	adds	r3, #1
 8000400:	617b      	str	r3, [r7, #20]
 8000402:	697a      	ldr	r2, [r7, #20]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	429a      	cmp	r2, r3
 8000408:	dbeb      	blt.n	80003e2 <_write+0x12>
	}
	return len;
 800040a:	687b      	ldr	r3, [r7, #4]
}
 800040c:	4618      	mov	r0, r3
 800040e:	371c      	adds	r7, #28
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	40004400 	.word	0x40004400

0800041c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <HAL_MspInit+0x5c>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a14      	ldr	r2, [pc, #80]	; (8000478 <HAL_MspInit+0x5c>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6193      	str	r3, [r2, #24]
 800042e:	4b12      	ldr	r3, [pc, #72]	; (8000478 <HAL_MspInit+0x5c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <HAL_MspInit+0x5c>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <HAL_MspInit+0x5c>)
 8000440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000444:	61d3      	str	r3, [r2, #28]
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <HAL_MspInit+0x5c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <HAL_MspInit+0x60>)
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	4a04      	ldr	r2, [pc, #16]	; (800047c <HAL_MspInit+0x60>)
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000
 800047c:	40010000 	.word	0x40010000

08000480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000484:	e7fe      	b.n	8000484 <NMI_Handler+0x4>

08000486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800048a:	e7fe      	b.n	800048a <HardFault_Handler+0x4>

0800048c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000490:	e7fe      	b.n	8000490 <MemManage_Handler+0x4>

08000492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000496:	e7fe      	b.n	8000496 <BusFault_Handler+0x4>

08000498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800049c:	e7fe      	b.n	800049c <UsageFault_Handler+0x4>

0800049e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr

080004aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr

080004b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr

080004c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c6:	f000 f8f7 	bl	80006b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}

080004ce <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b086      	sub	sp, #24
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	60f8      	str	r0, [r7, #12]
 80004d6:	60b9      	str	r1, [r7, #8]
 80004d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
 80004de:	e00a      	b.n	80004f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004e0:	f3af 8000 	nop.w
 80004e4:	4601      	mov	r1, r0
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	1c5a      	adds	r2, r3, #1
 80004ea:	60ba      	str	r2, [r7, #8]
 80004ec:	b2ca      	uxtb	r2, r1
 80004ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	3301      	adds	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
 80004f6:	697a      	ldr	r2, [r7, #20]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	dbf0      	blt.n	80004e0 <_read+0x12>
  }

  return len;
 80004fe:	687b      	ldr	r3, [r7, #4]
}
 8000500:	4618      	mov	r0, r3
 8000502:	3718      	adds	r7, #24
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000514:	4618      	mov	r0, r3
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr

0800051e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800051e:	b480      	push	{r7}
 8000520:	b083      	sub	sp, #12
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
 8000526:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800052e:	605a      	str	r2, [r3, #4]
  return 0;
 8000530:	2300      	movs	r3, #0
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <_isatty>:

int _isatty(int file)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000544:	2301      	movs	r3, #1
}
 8000546:	4618      	mov	r0, r3
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr

08000568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000570:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <_sbrk+0x5c>)
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <_sbrk+0x60>)
 8000574:	1ad3      	subs	r3, r2, r3
 8000576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <_sbrk+0x64>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d102      	bne.n	800058a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <_sbrk+0x64>)
 8000586:	4a12      	ldr	r2, [pc, #72]	; (80005d0 <_sbrk+0x68>)
 8000588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <_sbrk+0x64>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	429a      	cmp	r2, r3
 8000596:	d207      	bcs.n	80005a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000598:	f000 fd9a 	bl	80010d0 <__errno>
 800059c:	4603      	mov	r3, r0
 800059e:	220c      	movs	r2, #12
 80005a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a6:	e009      	b.n	80005bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <_sbrk+0x64>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <_sbrk+0x64>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	4a05      	ldr	r2, [pc, #20]	; (80005cc <_sbrk+0x64>)
 80005b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ba:	68fb      	ldr	r3, [r7, #12]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3718      	adds	r7, #24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20005000 	.word	0x20005000
 80005c8:	00000400 	.word	0x00000400
 80005cc:	2000008c 	.word	0x2000008c
 80005d0:	200000a8 	.word	0x200000a8

080005d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e0:	480c      	ldr	r0, [pc, #48]	; (8000614 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005e2:	490d      	ldr	r1, [pc, #52]	; (8000618 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005e4:	4a0d      	ldr	r2, [pc, #52]	; (800061c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e8:	e002      	b.n	80005f0 <LoopCopyDataInit>

080005ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ee:	3304      	adds	r3, #4

080005f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f4:	d3f9      	bcc.n	80005ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005f8:	4c0a      	ldr	r4, [pc, #40]	; (8000624 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005fc:	e001      	b.n	8000602 <LoopFillZerobss>

080005fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000600:	3204      	adds	r2, #4

08000602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000604:	d3fb      	bcc.n	80005fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000606:	f7ff ffe5 	bl	80005d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800060a:	f000 fd67 	bl	80010dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060e:	f7ff fd9d 	bl	800014c <main>
  bx lr
 8000612:	4770      	bx	lr
  ldr r0, =_sdata
 8000614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000618:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800061c:	08002244 	.word	0x08002244
  ldr r2, =_sbss
 8000620:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000624:	200000a4 	.word	0x200000a4

08000628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000628:	e7fe      	b.n	8000628 <ADC1_2_IRQHandler>
	...

0800062c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <HAL_Init+0x28>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a07      	ldr	r2, [pc, #28]	; (8000654 <HAL_Init+0x28>)
 8000636:	f043 0310 	orr.w	r3, r3, #16
 800063a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063c:	2003      	movs	r0, #3
 800063e:	f000 f92b 	bl	8000898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000642:	2000      	movs	r0, #0
 8000644:	f000 f808 	bl	8000658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000648:	f7ff fee8 	bl	800041c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40022000 	.word	0x40022000

08000658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HAL_InitTick+0x54>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_InitTick+0x58>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	4619      	mov	r1, r3
 800066a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000672:	fbb2 f3f3 	udiv	r3, r2, r3
 8000676:	4618      	mov	r0, r3
 8000678:	f000 f935 	bl	80008e6 <HAL_SYSTICK_Config>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000682:	2301      	movs	r3, #1
 8000684:	e00e      	b.n	80006a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b0f      	cmp	r3, #15
 800068a:	d80a      	bhi.n	80006a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800068c:	2200      	movs	r2, #0
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000694:	f000 f90b 	bl	80008ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <HAL_InitTick+0x5c>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800069e:	2300      	movs	r3, #0
 80006a0:	e000      	b.n	80006a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20000008 	.word	0x20000008
 80006b4:	20000004 	.word	0x20000004

080006b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HAL_IncTick+0x1c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <HAL_IncTick+0x20>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4413      	add	r3, r2
 80006c8:	4a03      	ldr	r2, [pc, #12]	; (80006d8 <HAL_IncTick+0x20>)
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000090 	.word	0x20000090

080006dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return uwTick;
 80006e0:	4b02      	ldr	r3, [pc, #8]	; (80006ec <HAL_GetTick+0x10>)
 80006e2:	681b      	ldr	r3, [r3, #0]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	20000090 	.word	0x20000090

080006f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006f8:	f7ff fff0 	bl	80006dc <HAL_GetTick>
 80006fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000708:	d005      	beq.n	8000716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <HAL_Delay+0x44>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4413      	add	r3, r2
 8000714:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000716:	bf00      	nop
 8000718:	f7ff ffe0 	bl	80006dc <HAL_GetTick>
 800071c:	4602      	mov	r2, r0
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	429a      	cmp	r2, r3
 8000726:	d8f7      	bhi.n	8000718 <HAL_Delay+0x28>
  {
  }
}
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000008 	.word	0x20000008

08000738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000754:	4013      	ands	r3, r2
 8000756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076a:	4a04      	ldr	r2, [pc, #16]	; (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	60d3      	str	r3, [r2, #12]
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <__NVIC_GetPriorityGrouping+0x18>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	f003 0307 	and.w	r3, r3, #7
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	db0a      	blt.n	80007c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	490c      	ldr	r1, [pc, #48]	; (80007e8 <__NVIC_SetPriority+0x4c>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	0112      	lsls	r2, r2, #4
 80007bc:	b2d2      	uxtb	r2, r2
 80007be:	440b      	add	r3, r1
 80007c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c4:	e00a      	b.n	80007dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4908      	ldr	r1, [pc, #32]	; (80007ec <__NVIC_SetPriority+0x50>)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	f003 030f 	and.w	r3, r3, #15
 80007d2:	3b04      	subs	r3, #4
 80007d4:	0112      	lsls	r2, r2, #4
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	440b      	add	r3, r1
 80007da:	761a      	strb	r2, [r3, #24]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000e100 	.word	0xe000e100
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b089      	sub	sp, #36	; 0x24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	f1c3 0307 	rsb	r3, r3, #7
 800080a:	2b04      	cmp	r3, #4
 800080c:	bf28      	it	cs
 800080e:	2304      	movcs	r3, #4
 8000810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3304      	adds	r3, #4
 8000816:	2b06      	cmp	r3, #6
 8000818:	d902      	bls.n	8000820 <NVIC_EncodePriority+0x30>
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3b03      	subs	r3, #3
 800081e:	e000      	b.n	8000822 <NVIC_EncodePriority+0x32>
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	43da      	mvns	r2, r3
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	401a      	ands	r2, r3
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000838:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	43d9      	mvns	r1, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	4313      	orrs	r3, r2
         );
}
 800084a:	4618      	mov	r0, r3
 800084c:	3724      	adds	r7, #36	; 0x24
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3b01      	subs	r3, #1
 8000860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000864:	d301      	bcc.n	800086a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000866:	2301      	movs	r3, #1
 8000868:	e00f      	b.n	800088a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <SysTick_Config+0x40>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000872:	210f      	movs	r1, #15
 8000874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000878:	f7ff ff90 	bl	800079c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <SysTick_Config+0x40>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000882:	4b04      	ldr	r3, [pc, #16]	; (8000894 <SysTick_Config+0x40>)
 8000884:	2207      	movs	r2, #7
 8000886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	e000e010 	.word	0xe000e010

08000898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ff49 	bl	8000738 <__NVIC_SetPriorityGrouping>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b086      	sub	sp, #24
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	4603      	mov	r3, r0
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
 80008ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008c0:	f7ff ff5e 	bl	8000780 <__NVIC_GetPriorityGrouping>
 80008c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	68b9      	ldr	r1, [r7, #8]
 80008ca:	6978      	ldr	r0, [r7, #20]
 80008cc:	f7ff ff90 	bl	80007f0 <NVIC_EncodePriority>
 80008d0:	4602      	mov	r2, r0
 80008d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d6:	4611      	mov	r1, r2
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff5f 	bl	800079c <__NVIC_SetPriority>
}
 80008de:	bf00      	nop
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ffb0 	bl	8000854 <SysTick_Config>
 80008f4:	4603      	mov	r3, r0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d101      	bne.n	8000912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e272      	b.n	8000df8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	2b00      	cmp	r3, #0
 800091c:	f000 8087 	beq.w	8000a2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000920:	4b92      	ldr	r3, [pc, #584]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f003 030c 	and.w	r3, r3, #12
 8000928:	2b04      	cmp	r3, #4
 800092a:	d00c      	beq.n	8000946 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800092c:	4b8f      	ldr	r3, [pc, #572]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f003 030c 	and.w	r3, r3, #12
 8000934:	2b08      	cmp	r3, #8
 8000936:	d112      	bne.n	800095e <HAL_RCC_OscConfig+0x5e>
 8000938:	4b8c      	ldr	r3, [pc, #560]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000944:	d10b      	bne.n	800095e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000946:	4b89      	ldr	r3, [pc, #548]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094e:	2b00      	cmp	r3, #0
 8000950:	d06c      	beq.n	8000a2c <HAL_RCC_OscConfig+0x12c>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d168      	bne.n	8000a2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	e24c      	b.n	8000df8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000966:	d106      	bne.n	8000976 <HAL_RCC_OscConfig+0x76>
 8000968:	4b80      	ldr	r3, [pc, #512]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a7f      	ldr	r2, [pc, #508]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 800096e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	e02e      	b.n	80009d4 <HAL_RCC_OscConfig+0xd4>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d10c      	bne.n	8000998 <HAL_RCC_OscConfig+0x98>
 800097e:	4b7b      	ldr	r3, [pc, #492]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a7a      	ldr	r2, [pc, #488]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 8000984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000988:	6013      	str	r3, [r2, #0]
 800098a:	4b78      	ldr	r3, [pc, #480]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a77      	ldr	r2, [pc, #476]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 8000990:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000994:	6013      	str	r3, [r2, #0]
 8000996:	e01d      	b.n	80009d4 <HAL_RCC_OscConfig+0xd4>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009a0:	d10c      	bne.n	80009bc <HAL_RCC_OscConfig+0xbc>
 80009a2:	4b72      	ldr	r3, [pc, #456]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a71      	ldr	r2, [pc, #452]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 80009a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ac:	6013      	str	r3, [r2, #0]
 80009ae:	4b6f      	ldr	r3, [pc, #444]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a6e      	ldr	r2, [pc, #440]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 80009b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009b8:	6013      	str	r3, [r2, #0]
 80009ba:	e00b      	b.n	80009d4 <HAL_RCC_OscConfig+0xd4>
 80009bc:	4b6b      	ldr	r3, [pc, #428]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a6a      	ldr	r2, [pc, #424]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 80009c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	4b68      	ldr	r3, [pc, #416]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a67      	ldr	r2, [pc, #412]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 80009ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d013      	beq.n	8000a04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009dc:	f7ff fe7e 	bl	80006dc <HAL_GetTick>
 80009e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009e2:	e008      	b.n	80009f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009e4:	f7ff fe7a 	bl	80006dc <HAL_GetTick>
 80009e8:	4602      	mov	r2, r0
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	2b64      	cmp	r3, #100	; 0x64
 80009f0:	d901      	bls.n	80009f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80009f2:	2303      	movs	r3, #3
 80009f4:	e200      	b.n	8000df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009f6:	4b5d      	ldr	r3, [pc, #372]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f0      	beq.n	80009e4 <HAL_RCC_OscConfig+0xe4>
 8000a02:	e014      	b.n	8000a2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a04:	f7ff fe6a 	bl	80006dc <HAL_GetTick>
 8000a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a0a:	e008      	b.n	8000a1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a0c:	f7ff fe66 	bl	80006dc <HAL_GetTick>
 8000a10:	4602      	mov	r2, r0
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	2b64      	cmp	r3, #100	; 0x64
 8000a18:	d901      	bls.n	8000a1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	e1ec      	b.n	8000df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a1e:	4b53      	ldr	r3, [pc, #332]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1f0      	bne.n	8000a0c <HAL_RCC_OscConfig+0x10c>
 8000a2a:	e000      	b.n	8000a2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d063      	beq.n	8000b02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a3a:	4b4c      	ldr	r3, [pc, #304]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f003 030c 	and.w	r3, r3, #12
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d00b      	beq.n	8000a5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000a46:	4b49      	ldr	r3, [pc, #292]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f003 030c 	and.w	r3, r3, #12
 8000a4e:	2b08      	cmp	r3, #8
 8000a50:	d11c      	bne.n	8000a8c <HAL_RCC_OscConfig+0x18c>
 8000a52:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d116      	bne.n	8000a8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a5e:	4b43      	ldr	r3, [pc, #268]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d005      	beq.n	8000a76 <HAL_RCC_OscConfig+0x176>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	691b      	ldr	r3, [r3, #16]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d001      	beq.n	8000a76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e1c0      	b.n	8000df8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a76:	4b3d      	ldr	r3, [pc, #244]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	4939      	ldr	r1, [pc, #228]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 8000a86:	4313      	orrs	r3, r2
 8000a88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a8a:	e03a      	b.n	8000b02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	691b      	ldr	r3, [r3, #16]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d020      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a94:	4b36      	ldr	r3, [pc, #216]	; (8000b70 <HAL_RCC_OscConfig+0x270>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a9a:	f7ff fe1f 	bl	80006dc <HAL_GetTick>
 8000a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aa0:	e008      	b.n	8000ab4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000aa2:	f7ff fe1b 	bl	80006dc <HAL_GetTick>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d901      	bls.n	8000ab4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	e1a1      	b.n	8000df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f003 0302 	and.w	r3, r3, #2
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d0f0      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ac0:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	4927      	ldr	r1, [pc, #156]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	600b      	str	r3, [r1, #0]
 8000ad4:	e015      	b.n	8000b02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <HAL_RCC_OscConfig+0x270>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000adc:	f7ff fdfe 	bl	80006dc <HAL_GetTick>
 8000ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ae2:	e008      	b.n	8000af6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ae4:	f7ff fdfa 	bl	80006dc <HAL_GetTick>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d901      	bls.n	8000af6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000af2:	2303      	movs	r3, #3
 8000af4:	e180      	b.n	8000df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000af6:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d1f0      	bne.n	8000ae4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d03a      	beq.n	8000b84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d019      	beq.n	8000b4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_RCC_OscConfig+0x274>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b1c:	f7ff fdde 	bl	80006dc <HAL_GetTick>
 8000b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b22:	e008      	b.n	8000b36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b24:	f7ff fdda 	bl	80006dc <HAL_GetTick>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d901      	bls.n	8000b36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000b32:	2303      	movs	r3, #3
 8000b34:	e160      	b.n	8000df8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <HAL_RCC_OscConfig+0x26c>)
 8000b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d0f0      	beq.n	8000b24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000b42:	2001      	movs	r0, #1
 8000b44:	f000 faa6 	bl	8001094 <RCC_Delay>
 8000b48:	e01c      	b.n	8000b84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_RCC_OscConfig+0x274>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b50:	f7ff fdc4 	bl	80006dc <HAL_GetTick>
 8000b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b56:	e00f      	b.n	8000b78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b58:	f7ff fdc0 	bl	80006dc <HAL_GetTick>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d908      	bls.n	8000b78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000b66:	2303      	movs	r3, #3
 8000b68:	e146      	b.n	8000df8 <HAL_RCC_OscConfig+0x4f8>
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	42420000 	.word	0x42420000
 8000b74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b78:	4b92      	ldr	r3, [pc, #584]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7c:	f003 0302 	and.w	r3, r3, #2
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1e9      	bne.n	8000b58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f000 80a6 	beq.w	8000cde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b92:	2300      	movs	r3, #0
 8000b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b96:	4b8b      	ldr	r3, [pc, #556]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d10d      	bne.n	8000bbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	4b88      	ldr	r3, [pc, #544]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	4a87      	ldr	r2, [pc, #540]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	61d3      	str	r3, [r2, #28]
 8000bae:	4b85      	ldr	r3, [pc, #532]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bbe:	4b82      	ldr	r3, [pc, #520]	; (8000dc8 <HAL_RCC_OscConfig+0x4c8>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d118      	bne.n	8000bfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bca:	4b7f      	ldr	r3, [pc, #508]	; (8000dc8 <HAL_RCC_OscConfig+0x4c8>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a7e      	ldr	r2, [pc, #504]	; (8000dc8 <HAL_RCC_OscConfig+0x4c8>)
 8000bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000bd6:	f7ff fd81 	bl	80006dc <HAL_GetTick>
 8000bda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bdc:	e008      	b.n	8000bf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000bde:	f7ff fd7d 	bl	80006dc <HAL_GetTick>
 8000be2:	4602      	mov	r2, r0
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	2b64      	cmp	r3, #100	; 0x64
 8000bea:	d901      	bls.n	8000bf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000bec:	2303      	movs	r3, #3
 8000bee:	e103      	b.n	8000df8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bf0:	4b75      	ldr	r3, [pc, #468]	; (8000dc8 <HAL_RCC_OscConfig+0x4c8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0f0      	beq.n	8000bde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d106      	bne.n	8000c12 <HAL_RCC_OscConfig+0x312>
 8000c04:	4b6f      	ldr	r3, [pc, #444]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c06:	6a1b      	ldr	r3, [r3, #32]
 8000c08:	4a6e      	ldr	r2, [pc, #440]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6213      	str	r3, [r2, #32]
 8000c10:	e02d      	b.n	8000c6e <HAL_RCC_OscConfig+0x36e>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d10c      	bne.n	8000c34 <HAL_RCC_OscConfig+0x334>
 8000c1a:	4b6a      	ldr	r3, [pc, #424]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c1c:	6a1b      	ldr	r3, [r3, #32]
 8000c1e:	4a69      	ldr	r2, [pc, #420]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c20:	f023 0301 	bic.w	r3, r3, #1
 8000c24:	6213      	str	r3, [r2, #32]
 8000c26:	4b67      	ldr	r3, [pc, #412]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c28:	6a1b      	ldr	r3, [r3, #32]
 8000c2a:	4a66      	ldr	r2, [pc, #408]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c2c:	f023 0304 	bic.w	r3, r3, #4
 8000c30:	6213      	str	r3, [r2, #32]
 8000c32:	e01c      	b.n	8000c6e <HAL_RCC_OscConfig+0x36e>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	2b05      	cmp	r3, #5
 8000c3a:	d10c      	bne.n	8000c56 <HAL_RCC_OscConfig+0x356>
 8000c3c:	4b61      	ldr	r3, [pc, #388]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c3e:	6a1b      	ldr	r3, [r3, #32]
 8000c40:	4a60      	ldr	r2, [pc, #384]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	6213      	str	r3, [r2, #32]
 8000c48:	4b5e      	ldr	r3, [pc, #376]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c4a:	6a1b      	ldr	r3, [r3, #32]
 8000c4c:	4a5d      	ldr	r2, [pc, #372]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6213      	str	r3, [r2, #32]
 8000c54:	e00b      	b.n	8000c6e <HAL_RCC_OscConfig+0x36e>
 8000c56:	4b5b      	ldr	r3, [pc, #364]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c58:	6a1b      	ldr	r3, [r3, #32]
 8000c5a:	4a5a      	ldr	r2, [pc, #360]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c5c:	f023 0301 	bic.w	r3, r3, #1
 8000c60:	6213      	str	r3, [r2, #32]
 8000c62:	4b58      	ldr	r3, [pc, #352]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c64:	6a1b      	ldr	r3, [r3, #32]
 8000c66:	4a57      	ldr	r2, [pc, #348]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c68:	f023 0304 	bic.w	r3, r3, #4
 8000c6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d015      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c76:	f7ff fd31 	bl	80006dc <HAL_GetTick>
 8000c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c7c:	e00a      	b.n	8000c94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c7e:	f7ff fd2d 	bl	80006dc <HAL_GetTick>
 8000c82:	4602      	mov	r2, r0
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d901      	bls.n	8000c94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000c90:	2303      	movs	r3, #3
 8000c92:	e0b1      	b.n	8000df8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c94:	4b4b      	ldr	r3, [pc, #300]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c96:	6a1b      	ldr	r3, [r3, #32]
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0ee      	beq.n	8000c7e <HAL_RCC_OscConfig+0x37e>
 8000ca0:	e014      	b.n	8000ccc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ca2:	f7ff fd1b 	bl	80006dc <HAL_GetTick>
 8000ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ca8:	e00a      	b.n	8000cc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000caa:	f7ff fd17 	bl	80006dc <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d901      	bls.n	8000cc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e09b      	b.n	8000df8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cc0:	4b40      	ldr	r3, [pc, #256]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000cc2:	6a1b      	ldr	r3, [r3, #32]
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1ee      	bne.n	8000caa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ccc:	7dfb      	ldrb	r3, [r7, #23]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d105      	bne.n	8000cde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cd2:	4b3c      	ldr	r3, [pc, #240]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	4a3b      	ldr	r2, [pc, #236]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 8087 	beq.w	8000df6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ce8:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 030c 	and.w	r3, r3, #12
 8000cf0:	2b08      	cmp	r3, #8
 8000cf2:	d061      	beq.n	8000db8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d146      	bne.n	8000d8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cfc:	4b33      	ldr	r3, [pc, #204]	; (8000dcc <HAL_RCC_OscConfig+0x4cc>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d02:	f7ff fceb 	bl	80006dc <HAL_GetTick>
 8000d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d08:	e008      	b.n	8000d1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d0a:	f7ff fce7 	bl	80006dc <HAL_GetTick>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d901      	bls.n	8000d1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e06d      	b.n	8000df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d1c:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1f0      	bne.n	8000d0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6a1b      	ldr	r3, [r3, #32]
 8000d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d30:	d108      	bne.n	8000d44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d32:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	4921      	ldr	r1, [pc, #132]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000d40:	4313      	orrs	r3, r2
 8000d42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a19      	ldr	r1, [r3, #32]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d54:	430b      	orrs	r3, r1
 8000d56:	491b      	ldr	r1, [pc, #108]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <HAL_RCC_OscConfig+0x4cc>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d62:	f7ff fcbb 	bl	80006dc <HAL_GetTick>
 8000d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d68:	e008      	b.n	8000d7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d6a:	f7ff fcb7 	bl	80006dc <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e03d      	b.n	8000df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0f0      	beq.n	8000d6a <HAL_RCC_OscConfig+0x46a>
 8000d88:	e035      	b.n	8000df6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <HAL_RCC_OscConfig+0x4cc>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d90:	f7ff fca4 	bl	80006dc <HAL_GetTick>
 8000d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d98:	f7ff fca0 	bl	80006dc <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e026      	b.n	8000df8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_RCC_OscConfig+0x4c4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1f0      	bne.n	8000d98 <HAL_RCC_OscConfig+0x498>
 8000db6:	e01e      	b.n	8000df6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69db      	ldr	r3, [r3, #28]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d107      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e019      	b.n	8000df8 <HAL_RCC_OscConfig+0x4f8>
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40007000 	.word	0x40007000
 8000dcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_RCC_OscConfig+0x500>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a1b      	ldr	r3, [r3, #32]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d106      	bne.n	8000df2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d001      	beq.n	8000df6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e000      	b.n	8000df8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40021000 	.word	0x40021000

08000e04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d101      	bne.n	8000e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e0d0      	b.n	8000fba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e18:	4b6a      	ldr	r3, [pc, #424]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0307 	and.w	r3, r3, #7
 8000e20:	683a      	ldr	r2, [r7, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d910      	bls.n	8000e48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e26:	4b67      	ldr	r3, [pc, #412]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f023 0207 	bic.w	r2, r3, #7
 8000e2e:	4965      	ldr	r1, [pc, #404]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e36:	4b63      	ldr	r3, [pc, #396]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d001      	beq.n	8000e48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e0b8      	b.n	8000fba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d020      	beq.n	8000e96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d005      	beq.n	8000e6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e60:	4b59      	ldr	r3, [pc, #356]	; (8000fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	4a58      	ldr	r2, [pc, #352]	; (8000fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000e6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0308 	and.w	r3, r3, #8
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d005      	beq.n	8000e84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e78:	4b53      	ldr	r3, [pc, #332]	; (8000fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	4a52      	ldr	r2, [pc, #328]	; (8000fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000e82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e84:	4b50      	ldr	r3, [pc, #320]	; (8000fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	494d      	ldr	r1, [pc, #308]	; (8000fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e92:	4313      	orrs	r3, r2
 8000e94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d040      	beq.n	8000f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d107      	bne.n	8000eba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eaa:	4b47      	ldr	r3, [pc, #284]	; (8000fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d115      	bne.n	8000ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e07f      	b.n	8000fba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d107      	bne.n	8000ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ec2:	4b41      	ldr	r3, [pc, #260]	; (8000fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d109      	bne.n	8000ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e073      	b.n	8000fba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed2:	4b3d      	ldr	r3, [pc, #244]	; (8000fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e06b      	b.n	8000fba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ee2:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f023 0203 	bic.w	r2, r3, #3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	4936      	ldr	r1, [pc, #216]	; (8000fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ef4:	f7ff fbf2 	bl	80006dc <HAL_GetTick>
 8000ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000efa:	e00a      	b.n	8000f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000efc:	f7ff fbee 	bl	80006dc <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e053      	b.n	8000fba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f12:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 020c 	and.w	r2, r3, #12
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d1eb      	bne.n	8000efc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000f24:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d210      	bcs.n	8000f54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f32:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f023 0207 	bic.w	r2, r3, #7
 8000f3a:	4922      	ldr	r1, [pc, #136]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f42:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d001      	beq.n	8000f54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e032      	b.n	8000fba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d008      	beq.n	8000f72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	4916      	ldr	r1, [pc, #88]	; (8000fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d009      	beq.n	8000f92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	490e      	ldr	r1, [pc, #56]	; (8000fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f92:	f000 f821 	bl	8000fd8 <HAL_RCC_GetSysClockFreq>
 8000f96:	4602      	mov	r2, r0
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	091b      	lsrs	r3, r3, #4
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	490a      	ldr	r1, [pc, #40]	; (8000fcc <HAL_RCC_ClockConfig+0x1c8>)
 8000fa4:	5ccb      	ldrb	r3, [r1, r3]
 8000fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8000faa:	4a09      	ldr	r2, [pc, #36]	; (8000fd0 <HAL_RCC_ClockConfig+0x1cc>)
 8000fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_RCC_ClockConfig+0x1d0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fb50 	bl	8000658 <HAL_InitTick>

  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40022000 	.word	0x40022000
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	08002194 	.word	0x08002194
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fd8:	b490      	push	{r4, r7}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fde:	4b29      	ldr	r3, [pc, #164]	; (8001084 <HAL_RCC_GetSysClockFreq+0xac>)
 8000fe0:	1d3c      	adds	r4, r7, #4
 8000fe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fe4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fe8:	f240 2301 	movw	r3, #513	; 0x201
 8000fec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61bb      	str	r3, [r7, #24]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 030c 	and.w	r3, r3, #12
 800100e:	2b04      	cmp	r3, #4
 8001010:	d002      	beq.n	8001018 <HAL_RCC_GetSysClockFreq+0x40>
 8001012:	2b08      	cmp	r3, #8
 8001014:	d003      	beq.n	800101e <HAL_RCC_GetSysClockFreq+0x46>
 8001016:	e02b      	b.n	8001070 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001018:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_RCC_GetSysClockFreq+0xb4>)
 800101a:	623b      	str	r3, [r7, #32]
      break;
 800101c:	e02b      	b.n	8001076 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	0c9b      	lsrs	r3, r3, #18
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3328      	adds	r3, #40	; 0x28
 8001028:	443b      	add	r3, r7
 800102a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800102e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d012      	beq.n	8001060 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <HAL_RCC_GetSysClockFreq+0xb0>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	0c5b      	lsrs	r3, r3, #17
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	3328      	adds	r3, #40	; 0x28
 8001046:	443b      	add	r3, r7
 8001048:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800104c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001052:	fb03 f202 	mul.w	r2, r3, r2
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	fbb2 f3f3 	udiv	r3, r2, r3
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
 800105e:	e004      	b.n	800106a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001064:	fb02 f303 	mul.w	r3, r2, r3
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	623b      	str	r3, [r7, #32]
      break;
 800106e:	e002      	b.n	8001076 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001072:	623b      	str	r3, [r7, #32]
      break;
 8001074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001076:	6a3b      	ldr	r3, [r7, #32]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3728      	adds	r7, #40	; 0x28
 800107c:	46bd      	mov	sp, r7
 800107e:	bc90      	pop	{r4, r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	08002184 	.word	0x08002184
 8001088:	40021000 	.word	0x40021000
 800108c:	007a1200 	.word	0x007a1200
 8001090:	003d0900 	.word	0x003d0900

08001094 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <RCC_Delay+0x34>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <RCC_Delay+0x38>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	0a5b      	lsrs	r3, r3, #9
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	fb02 f303 	mul.w	r3, r2, r3
 80010ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80010b0:	bf00      	nop
  }
  while (Delay --);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	1e5a      	subs	r2, r3, #1
 80010b6:	60fa      	str	r2, [r7, #12]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f9      	bne.n	80010b0 <RCC_Delay+0x1c>
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	20000000 	.word	0x20000000
 80010cc:	10624dd3 	.word	0x10624dd3

080010d0 <__errno>:
 80010d0:	4b01      	ldr	r3, [pc, #4]	; (80010d8 <__errno+0x8>)
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	2000000c 	.word	0x2000000c

080010dc <__libc_init_array>:
 80010dc:	b570      	push	{r4, r5, r6, lr}
 80010de:	2600      	movs	r6, #0
 80010e0:	4d0c      	ldr	r5, [pc, #48]	; (8001114 <__libc_init_array+0x38>)
 80010e2:	4c0d      	ldr	r4, [pc, #52]	; (8001118 <__libc_init_array+0x3c>)
 80010e4:	1b64      	subs	r4, r4, r5
 80010e6:	10a4      	asrs	r4, r4, #2
 80010e8:	42a6      	cmp	r6, r4
 80010ea:	d109      	bne.n	8001100 <__libc_init_array+0x24>
 80010ec:	f001 f82c 	bl	8002148 <_init>
 80010f0:	2600      	movs	r6, #0
 80010f2:	4d0a      	ldr	r5, [pc, #40]	; (800111c <__libc_init_array+0x40>)
 80010f4:	4c0a      	ldr	r4, [pc, #40]	; (8001120 <__libc_init_array+0x44>)
 80010f6:	1b64      	subs	r4, r4, r5
 80010f8:	10a4      	asrs	r4, r4, #2
 80010fa:	42a6      	cmp	r6, r4
 80010fc:	d105      	bne.n	800110a <__libc_init_array+0x2e>
 80010fe:	bd70      	pop	{r4, r5, r6, pc}
 8001100:	f855 3b04 	ldr.w	r3, [r5], #4
 8001104:	4798      	blx	r3
 8001106:	3601      	adds	r6, #1
 8001108:	e7ee      	b.n	80010e8 <__libc_init_array+0xc>
 800110a:	f855 3b04 	ldr.w	r3, [r5], #4
 800110e:	4798      	blx	r3
 8001110:	3601      	adds	r6, #1
 8001112:	e7f2      	b.n	80010fa <__libc_init_array+0x1e>
 8001114:	0800223c 	.word	0x0800223c
 8001118:	0800223c 	.word	0x0800223c
 800111c:	0800223c 	.word	0x0800223c
 8001120:	08002240 	.word	0x08002240

08001124 <memset>:
 8001124:	4603      	mov	r3, r0
 8001126:	4402      	add	r2, r0
 8001128:	4293      	cmp	r3, r2
 800112a:	d100      	bne.n	800112e <memset+0xa>
 800112c:	4770      	bx	lr
 800112e:	f803 1b01 	strb.w	r1, [r3], #1
 8001132:	e7f9      	b.n	8001128 <memset+0x4>

08001134 <iprintf>:
 8001134:	b40f      	push	{r0, r1, r2, r3}
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <iprintf+0x2c>)
 8001138:	b513      	push	{r0, r1, r4, lr}
 800113a:	681c      	ldr	r4, [r3, #0]
 800113c:	b124      	cbz	r4, 8001148 <iprintf+0x14>
 800113e:	69a3      	ldr	r3, [r4, #24]
 8001140:	b913      	cbnz	r3, 8001148 <iprintf+0x14>
 8001142:	4620      	mov	r0, r4
 8001144:	f000 fa5a 	bl	80015fc <__sinit>
 8001148:	ab05      	add	r3, sp, #20
 800114a:	4620      	mov	r0, r4
 800114c:	9a04      	ldr	r2, [sp, #16]
 800114e:	68a1      	ldr	r1, [r4, #8]
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	f000 fc5d 	bl	8001a10 <_vfiprintf_r>
 8001156:	b002      	add	sp, #8
 8001158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800115c:	b004      	add	sp, #16
 800115e:	4770      	bx	lr
 8001160:	2000000c 	.word	0x2000000c

08001164 <_puts_r>:
 8001164:	b570      	push	{r4, r5, r6, lr}
 8001166:	460e      	mov	r6, r1
 8001168:	4605      	mov	r5, r0
 800116a:	b118      	cbz	r0, 8001174 <_puts_r+0x10>
 800116c:	6983      	ldr	r3, [r0, #24]
 800116e:	b90b      	cbnz	r3, 8001174 <_puts_r+0x10>
 8001170:	f000 fa44 	bl	80015fc <__sinit>
 8001174:	69ab      	ldr	r3, [r5, #24]
 8001176:	68ac      	ldr	r4, [r5, #8]
 8001178:	b913      	cbnz	r3, 8001180 <_puts_r+0x1c>
 800117a:	4628      	mov	r0, r5
 800117c:	f000 fa3e 	bl	80015fc <__sinit>
 8001180:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <_puts_r+0xd0>)
 8001182:	429c      	cmp	r4, r3
 8001184:	d120      	bne.n	80011c8 <_puts_r+0x64>
 8001186:	686c      	ldr	r4, [r5, #4]
 8001188:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800118a:	07db      	lsls	r3, r3, #31
 800118c:	d405      	bmi.n	800119a <_puts_r+0x36>
 800118e:	89a3      	ldrh	r3, [r4, #12]
 8001190:	0598      	lsls	r0, r3, #22
 8001192:	d402      	bmi.n	800119a <_puts_r+0x36>
 8001194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001196:	f000 facf 	bl	8001738 <__retarget_lock_acquire_recursive>
 800119a:	89a3      	ldrh	r3, [r4, #12]
 800119c:	0719      	lsls	r1, r3, #28
 800119e:	d51d      	bpl.n	80011dc <_puts_r+0x78>
 80011a0:	6923      	ldr	r3, [r4, #16]
 80011a2:	b1db      	cbz	r3, 80011dc <_puts_r+0x78>
 80011a4:	3e01      	subs	r6, #1
 80011a6:	68a3      	ldr	r3, [r4, #8]
 80011a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80011ac:	3b01      	subs	r3, #1
 80011ae:	60a3      	str	r3, [r4, #8]
 80011b0:	bb39      	cbnz	r1, 8001202 <_puts_r+0x9e>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	da38      	bge.n	8001228 <_puts_r+0xc4>
 80011b6:	4622      	mov	r2, r4
 80011b8:	210a      	movs	r1, #10
 80011ba:	4628      	mov	r0, r5
 80011bc:	f000 f848 	bl	8001250 <__swbuf_r>
 80011c0:	3001      	adds	r0, #1
 80011c2:	d011      	beq.n	80011e8 <_puts_r+0x84>
 80011c4:	250a      	movs	r5, #10
 80011c6:	e011      	b.n	80011ec <_puts_r+0x88>
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <_puts_r+0xd4>)
 80011ca:	429c      	cmp	r4, r3
 80011cc:	d101      	bne.n	80011d2 <_puts_r+0x6e>
 80011ce:	68ac      	ldr	r4, [r5, #8]
 80011d0:	e7da      	b.n	8001188 <_puts_r+0x24>
 80011d2:	4b1a      	ldr	r3, [pc, #104]	; (800123c <_puts_r+0xd8>)
 80011d4:	429c      	cmp	r4, r3
 80011d6:	bf08      	it	eq
 80011d8:	68ec      	ldreq	r4, [r5, #12]
 80011da:	e7d5      	b.n	8001188 <_puts_r+0x24>
 80011dc:	4621      	mov	r1, r4
 80011de:	4628      	mov	r0, r5
 80011e0:	f000 f888 	bl	80012f4 <__swsetup_r>
 80011e4:	2800      	cmp	r0, #0
 80011e6:	d0dd      	beq.n	80011a4 <_puts_r+0x40>
 80011e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80011ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80011ee:	07da      	lsls	r2, r3, #31
 80011f0:	d405      	bmi.n	80011fe <_puts_r+0x9a>
 80011f2:	89a3      	ldrh	r3, [r4, #12]
 80011f4:	059b      	lsls	r3, r3, #22
 80011f6:	d402      	bmi.n	80011fe <_puts_r+0x9a>
 80011f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011fa:	f000 fa9e 	bl	800173a <__retarget_lock_release_recursive>
 80011fe:	4628      	mov	r0, r5
 8001200:	bd70      	pop	{r4, r5, r6, pc}
 8001202:	2b00      	cmp	r3, #0
 8001204:	da04      	bge.n	8001210 <_puts_r+0xac>
 8001206:	69a2      	ldr	r2, [r4, #24]
 8001208:	429a      	cmp	r2, r3
 800120a:	dc06      	bgt.n	800121a <_puts_r+0xb6>
 800120c:	290a      	cmp	r1, #10
 800120e:	d004      	beq.n	800121a <_puts_r+0xb6>
 8001210:	6823      	ldr	r3, [r4, #0]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	6022      	str	r2, [r4, #0]
 8001216:	7019      	strb	r1, [r3, #0]
 8001218:	e7c5      	b.n	80011a6 <_puts_r+0x42>
 800121a:	4622      	mov	r2, r4
 800121c:	4628      	mov	r0, r5
 800121e:	f000 f817 	bl	8001250 <__swbuf_r>
 8001222:	3001      	adds	r0, #1
 8001224:	d1bf      	bne.n	80011a6 <_puts_r+0x42>
 8001226:	e7df      	b.n	80011e8 <_puts_r+0x84>
 8001228:	250a      	movs	r5, #10
 800122a:	6823      	ldr	r3, [r4, #0]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	6022      	str	r2, [r4, #0]
 8001230:	701d      	strb	r5, [r3, #0]
 8001232:	e7db      	b.n	80011ec <_puts_r+0x88>
 8001234:	080021c8 	.word	0x080021c8
 8001238:	080021e8 	.word	0x080021e8
 800123c:	080021a8 	.word	0x080021a8

08001240 <puts>:
 8001240:	4b02      	ldr	r3, [pc, #8]	; (800124c <puts+0xc>)
 8001242:	4601      	mov	r1, r0
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	f7ff bf8d 	b.w	8001164 <_puts_r>
 800124a:	bf00      	nop
 800124c:	2000000c 	.word	0x2000000c

08001250 <__swbuf_r>:
 8001250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001252:	460e      	mov	r6, r1
 8001254:	4614      	mov	r4, r2
 8001256:	4605      	mov	r5, r0
 8001258:	b118      	cbz	r0, 8001262 <__swbuf_r+0x12>
 800125a:	6983      	ldr	r3, [r0, #24]
 800125c:	b90b      	cbnz	r3, 8001262 <__swbuf_r+0x12>
 800125e:	f000 f9cd 	bl	80015fc <__sinit>
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <__swbuf_r+0x98>)
 8001264:	429c      	cmp	r4, r3
 8001266:	d12b      	bne.n	80012c0 <__swbuf_r+0x70>
 8001268:	686c      	ldr	r4, [r5, #4]
 800126a:	69a3      	ldr	r3, [r4, #24]
 800126c:	60a3      	str	r3, [r4, #8]
 800126e:	89a3      	ldrh	r3, [r4, #12]
 8001270:	071a      	lsls	r2, r3, #28
 8001272:	d52f      	bpl.n	80012d4 <__swbuf_r+0x84>
 8001274:	6923      	ldr	r3, [r4, #16]
 8001276:	b36b      	cbz	r3, 80012d4 <__swbuf_r+0x84>
 8001278:	6923      	ldr	r3, [r4, #16]
 800127a:	6820      	ldr	r0, [r4, #0]
 800127c:	b2f6      	uxtb	r6, r6
 800127e:	1ac0      	subs	r0, r0, r3
 8001280:	6963      	ldr	r3, [r4, #20]
 8001282:	4637      	mov	r7, r6
 8001284:	4283      	cmp	r3, r0
 8001286:	dc04      	bgt.n	8001292 <__swbuf_r+0x42>
 8001288:	4621      	mov	r1, r4
 800128a:	4628      	mov	r0, r5
 800128c:	f000 f922 	bl	80014d4 <_fflush_r>
 8001290:	bb30      	cbnz	r0, 80012e0 <__swbuf_r+0x90>
 8001292:	68a3      	ldr	r3, [r4, #8]
 8001294:	3001      	adds	r0, #1
 8001296:	3b01      	subs	r3, #1
 8001298:	60a3      	str	r3, [r4, #8]
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	6022      	str	r2, [r4, #0]
 80012a0:	701e      	strb	r6, [r3, #0]
 80012a2:	6963      	ldr	r3, [r4, #20]
 80012a4:	4283      	cmp	r3, r0
 80012a6:	d004      	beq.n	80012b2 <__swbuf_r+0x62>
 80012a8:	89a3      	ldrh	r3, [r4, #12]
 80012aa:	07db      	lsls	r3, r3, #31
 80012ac:	d506      	bpl.n	80012bc <__swbuf_r+0x6c>
 80012ae:	2e0a      	cmp	r6, #10
 80012b0:	d104      	bne.n	80012bc <__swbuf_r+0x6c>
 80012b2:	4621      	mov	r1, r4
 80012b4:	4628      	mov	r0, r5
 80012b6:	f000 f90d 	bl	80014d4 <_fflush_r>
 80012ba:	b988      	cbnz	r0, 80012e0 <__swbuf_r+0x90>
 80012bc:	4638      	mov	r0, r7
 80012be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <__swbuf_r+0x9c>)
 80012c2:	429c      	cmp	r4, r3
 80012c4:	d101      	bne.n	80012ca <__swbuf_r+0x7a>
 80012c6:	68ac      	ldr	r4, [r5, #8]
 80012c8:	e7cf      	b.n	800126a <__swbuf_r+0x1a>
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <__swbuf_r+0xa0>)
 80012cc:	429c      	cmp	r4, r3
 80012ce:	bf08      	it	eq
 80012d0:	68ec      	ldreq	r4, [r5, #12]
 80012d2:	e7ca      	b.n	800126a <__swbuf_r+0x1a>
 80012d4:	4621      	mov	r1, r4
 80012d6:	4628      	mov	r0, r5
 80012d8:	f000 f80c 	bl	80012f4 <__swsetup_r>
 80012dc:	2800      	cmp	r0, #0
 80012de:	d0cb      	beq.n	8001278 <__swbuf_r+0x28>
 80012e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80012e4:	e7ea      	b.n	80012bc <__swbuf_r+0x6c>
 80012e6:	bf00      	nop
 80012e8:	080021c8 	.word	0x080021c8
 80012ec:	080021e8 	.word	0x080021e8
 80012f0:	080021a8 	.word	0x080021a8

080012f4 <__swsetup_r>:
 80012f4:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <__swsetup_r+0xcc>)
 80012f6:	b570      	push	{r4, r5, r6, lr}
 80012f8:	681d      	ldr	r5, [r3, #0]
 80012fa:	4606      	mov	r6, r0
 80012fc:	460c      	mov	r4, r1
 80012fe:	b125      	cbz	r5, 800130a <__swsetup_r+0x16>
 8001300:	69ab      	ldr	r3, [r5, #24]
 8001302:	b913      	cbnz	r3, 800130a <__swsetup_r+0x16>
 8001304:	4628      	mov	r0, r5
 8001306:	f000 f979 	bl	80015fc <__sinit>
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <__swsetup_r+0xd0>)
 800130c:	429c      	cmp	r4, r3
 800130e:	d10f      	bne.n	8001330 <__swsetup_r+0x3c>
 8001310:	686c      	ldr	r4, [r5, #4]
 8001312:	89a3      	ldrh	r3, [r4, #12]
 8001314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001318:	0719      	lsls	r1, r3, #28
 800131a:	d42c      	bmi.n	8001376 <__swsetup_r+0x82>
 800131c:	06dd      	lsls	r5, r3, #27
 800131e:	d411      	bmi.n	8001344 <__swsetup_r+0x50>
 8001320:	2309      	movs	r3, #9
 8001322:	6033      	str	r3, [r6, #0]
 8001324:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800132c:	81a3      	strh	r3, [r4, #12]
 800132e:	e03e      	b.n	80013ae <__swsetup_r+0xba>
 8001330:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <__swsetup_r+0xd4>)
 8001332:	429c      	cmp	r4, r3
 8001334:	d101      	bne.n	800133a <__swsetup_r+0x46>
 8001336:	68ac      	ldr	r4, [r5, #8]
 8001338:	e7eb      	b.n	8001312 <__swsetup_r+0x1e>
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <__swsetup_r+0xd8>)
 800133c:	429c      	cmp	r4, r3
 800133e:	bf08      	it	eq
 8001340:	68ec      	ldreq	r4, [r5, #12]
 8001342:	e7e6      	b.n	8001312 <__swsetup_r+0x1e>
 8001344:	0758      	lsls	r0, r3, #29
 8001346:	d512      	bpl.n	800136e <__swsetup_r+0x7a>
 8001348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800134a:	b141      	cbz	r1, 800135e <__swsetup_r+0x6a>
 800134c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001350:	4299      	cmp	r1, r3
 8001352:	d002      	beq.n	800135a <__swsetup_r+0x66>
 8001354:	4630      	mov	r0, r6
 8001356:	f000 fa57 	bl	8001808 <_free_r>
 800135a:	2300      	movs	r3, #0
 800135c:	6363      	str	r3, [r4, #52]	; 0x34
 800135e:	89a3      	ldrh	r3, [r4, #12]
 8001360:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001364:	81a3      	strh	r3, [r4, #12]
 8001366:	2300      	movs	r3, #0
 8001368:	6063      	str	r3, [r4, #4]
 800136a:	6923      	ldr	r3, [r4, #16]
 800136c:	6023      	str	r3, [r4, #0]
 800136e:	89a3      	ldrh	r3, [r4, #12]
 8001370:	f043 0308 	orr.w	r3, r3, #8
 8001374:	81a3      	strh	r3, [r4, #12]
 8001376:	6923      	ldr	r3, [r4, #16]
 8001378:	b94b      	cbnz	r3, 800138e <__swsetup_r+0x9a>
 800137a:	89a3      	ldrh	r3, [r4, #12]
 800137c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001384:	d003      	beq.n	800138e <__swsetup_r+0x9a>
 8001386:	4621      	mov	r1, r4
 8001388:	4630      	mov	r0, r6
 800138a:	f000 f9fd 	bl	8001788 <__smakebuf_r>
 800138e:	89a0      	ldrh	r0, [r4, #12]
 8001390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001394:	f010 0301 	ands.w	r3, r0, #1
 8001398:	d00a      	beq.n	80013b0 <__swsetup_r+0xbc>
 800139a:	2300      	movs	r3, #0
 800139c:	60a3      	str	r3, [r4, #8]
 800139e:	6963      	ldr	r3, [r4, #20]
 80013a0:	425b      	negs	r3, r3
 80013a2:	61a3      	str	r3, [r4, #24]
 80013a4:	6923      	ldr	r3, [r4, #16]
 80013a6:	b943      	cbnz	r3, 80013ba <__swsetup_r+0xc6>
 80013a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80013ac:	d1ba      	bne.n	8001324 <__swsetup_r+0x30>
 80013ae:	bd70      	pop	{r4, r5, r6, pc}
 80013b0:	0781      	lsls	r1, r0, #30
 80013b2:	bf58      	it	pl
 80013b4:	6963      	ldrpl	r3, [r4, #20]
 80013b6:	60a3      	str	r3, [r4, #8]
 80013b8:	e7f4      	b.n	80013a4 <__swsetup_r+0xb0>
 80013ba:	2000      	movs	r0, #0
 80013bc:	e7f7      	b.n	80013ae <__swsetup_r+0xba>
 80013be:	bf00      	nop
 80013c0:	2000000c 	.word	0x2000000c
 80013c4:	080021c8 	.word	0x080021c8
 80013c8:	080021e8 	.word	0x080021e8
 80013cc:	080021a8 	.word	0x080021a8

080013d0 <__sflush_r>:
 80013d0:	898a      	ldrh	r2, [r1, #12]
 80013d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d4:	4605      	mov	r5, r0
 80013d6:	0710      	lsls	r0, r2, #28
 80013d8:	460c      	mov	r4, r1
 80013da:	d457      	bmi.n	800148c <__sflush_r+0xbc>
 80013dc:	684b      	ldr	r3, [r1, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	dc04      	bgt.n	80013ec <__sflush_r+0x1c>
 80013e2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	dc01      	bgt.n	80013ec <__sflush_r+0x1c>
 80013e8:	2000      	movs	r0, #0
 80013ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013ee:	2e00      	cmp	r6, #0
 80013f0:	d0fa      	beq.n	80013e8 <__sflush_r+0x18>
 80013f2:	2300      	movs	r3, #0
 80013f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80013f8:	682f      	ldr	r7, [r5, #0]
 80013fa:	602b      	str	r3, [r5, #0]
 80013fc:	d032      	beq.n	8001464 <__sflush_r+0x94>
 80013fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001400:	89a3      	ldrh	r3, [r4, #12]
 8001402:	075a      	lsls	r2, r3, #29
 8001404:	d505      	bpl.n	8001412 <__sflush_r+0x42>
 8001406:	6863      	ldr	r3, [r4, #4]
 8001408:	1ac0      	subs	r0, r0, r3
 800140a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800140c:	b10b      	cbz	r3, 8001412 <__sflush_r+0x42>
 800140e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001410:	1ac0      	subs	r0, r0, r3
 8001412:	2300      	movs	r3, #0
 8001414:	4602      	mov	r2, r0
 8001416:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001418:	4628      	mov	r0, r5
 800141a:	6a21      	ldr	r1, [r4, #32]
 800141c:	47b0      	blx	r6
 800141e:	1c43      	adds	r3, r0, #1
 8001420:	89a3      	ldrh	r3, [r4, #12]
 8001422:	d106      	bne.n	8001432 <__sflush_r+0x62>
 8001424:	6829      	ldr	r1, [r5, #0]
 8001426:	291d      	cmp	r1, #29
 8001428:	d82c      	bhi.n	8001484 <__sflush_r+0xb4>
 800142a:	4a29      	ldr	r2, [pc, #164]	; (80014d0 <__sflush_r+0x100>)
 800142c:	40ca      	lsrs	r2, r1
 800142e:	07d6      	lsls	r6, r2, #31
 8001430:	d528      	bpl.n	8001484 <__sflush_r+0xb4>
 8001432:	2200      	movs	r2, #0
 8001434:	6062      	str	r2, [r4, #4]
 8001436:	6922      	ldr	r2, [r4, #16]
 8001438:	04d9      	lsls	r1, r3, #19
 800143a:	6022      	str	r2, [r4, #0]
 800143c:	d504      	bpl.n	8001448 <__sflush_r+0x78>
 800143e:	1c42      	adds	r2, r0, #1
 8001440:	d101      	bne.n	8001446 <__sflush_r+0x76>
 8001442:	682b      	ldr	r3, [r5, #0]
 8001444:	b903      	cbnz	r3, 8001448 <__sflush_r+0x78>
 8001446:	6560      	str	r0, [r4, #84]	; 0x54
 8001448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800144a:	602f      	str	r7, [r5, #0]
 800144c:	2900      	cmp	r1, #0
 800144e:	d0cb      	beq.n	80013e8 <__sflush_r+0x18>
 8001450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001454:	4299      	cmp	r1, r3
 8001456:	d002      	beq.n	800145e <__sflush_r+0x8e>
 8001458:	4628      	mov	r0, r5
 800145a:	f000 f9d5 	bl	8001808 <_free_r>
 800145e:	2000      	movs	r0, #0
 8001460:	6360      	str	r0, [r4, #52]	; 0x34
 8001462:	e7c2      	b.n	80013ea <__sflush_r+0x1a>
 8001464:	6a21      	ldr	r1, [r4, #32]
 8001466:	2301      	movs	r3, #1
 8001468:	4628      	mov	r0, r5
 800146a:	47b0      	blx	r6
 800146c:	1c41      	adds	r1, r0, #1
 800146e:	d1c7      	bne.n	8001400 <__sflush_r+0x30>
 8001470:	682b      	ldr	r3, [r5, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0c4      	beq.n	8001400 <__sflush_r+0x30>
 8001476:	2b1d      	cmp	r3, #29
 8001478:	d001      	beq.n	800147e <__sflush_r+0xae>
 800147a:	2b16      	cmp	r3, #22
 800147c:	d101      	bne.n	8001482 <__sflush_r+0xb2>
 800147e:	602f      	str	r7, [r5, #0]
 8001480:	e7b2      	b.n	80013e8 <__sflush_r+0x18>
 8001482:	89a3      	ldrh	r3, [r4, #12]
 8001484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001488:	81a3      	strh	r3, [r4, #12]
 800148a:	e7ae      	b.n	80013ea <__sflush_r+0x1a>
 800148c:	690f      	ldr	r7, [r1, #16]
 800148e:	2f00      	cmp	r7, #0
 8001490:	d0aa      	beq.n	80013e8 <__sflush_r+0x18>
 8001492:	0793      	lsls	r3, r2, #30
 8001494:	bf18      	it	ne
 8001496:	2300      	movne	r3, #0
 8001498:	680e      	ldr	r6, [r1, #0]
 800149a:	bf08      	it	eq
 800149c:	694b      	ldreq	r3, [r1, #20]
 800149e:	1bf6      	subs	r6, r6, r7
 80014a0:	600f      	str	r7, [r1, #0]
 80014a2:	608b      	str	r3, [r1, #8]
 80014a4:	2e00      	cmp	r6, #0
 80014a6:	dd9f      	ble.n	80013e8 <__sflush_r+0x18>
 80014a8:	4633      	mov	r3, r6
 80014aa:	463a      	mov	r2, r7
 80014ac:	4628      	mov	r0, r5
 80014ae:	6a21      	ldr	r1, [r4, #32]
 80014b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80014b4:	47e0      	blx	ip
 80014b6:	2800      	cmp	r0, #0
 80014b8:	dc06      	bgt.n	80014c8 <__sflush_r+0xf8>
 80014ba:	89a3      	ldrh	r3, [r4, #12]
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c4:	81a3      	strh	r3, [r4, #12]
 80014c6:	e790      	b.n	80013ea <__sflush_r+0x1a>
 80014c8:	4407      	add	r7, r0
 80014ca:	1a36      	subs	r6, r6, r0
 80014cc:	e7ea      	b.n	80014a4 <__sflush_r+0xd4>
 80014ce:	bf00      	nop
 80014d0:	20400001 	.word	0x20400001

080014d4 <_fflush_r>:
 80014d4:	b538      	push	{r3, r4, r5, lr}
 80014d6:	690b      	ldr	r3, [r1, #16]
 80014d8:	4605      	mov	r5, r0
 80014da:	460c      	mov	r4, r1
 80014dc:	b913      	cbnz	r3, 80014e4 <_fflush_r+0x10>
 80014de:	2500      	movs	r5, #0
 80014e0:	4628      	mov	r0, r5
 80014e2:	bd38      	pop	{r3, r4, r5, pc}
 80014e4:	b118      	cbz	r0, 80014ee <_fflush_r+0x1a>
 80014e6:	6983      	ldr	r3, [r0, #24]
 80014e8:	b90b      	cbnz	r3, 80014ee <_fflush_r+0x1a>
 80014ea:	f000 f887 	bl	80015fc <__sinit>
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <_fflush_r+0x6c>)
 80014f0:	429c      	cmp	r4, r3
 80014f2:	d11b      	bne.n	800152c <_fflush_r+0x58>
 80014f4:	686c      	ldr	r4, [r5, #4]
 80014f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0ef      	beq.n	80014de <_fflush_r+0xa>
 80014fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001500:	07d0      	lsls	r0, r2, #31
 8001502:	d404      	bmi.n	800150e <_fflush_r+0x3a>
 8001504:	0599      	lsls	r1, r3, #22
 8001506:	d402      	bmi.n	800150e <_fflush_r+0x3a>
 8001508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800150a:	f000 f915 	bl	8001738 <__retarget_lock_acquire_recursive>
 800150e:	4628      	mov	r0, r5
 8001510:	4621      	mov	r1, r4
 8001512:	f7ff ff5d 	bl	80013d0 <__sflush_r>
 8001516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001518:	4605      	mov	r5, r0
 800151a:	07da      	lsls	r2, r3, #31
 800151c:	d4e0      	bmi.n	80014e0 <_fflush_r+0xc>
 800151e:	89a3      	ldrh	r3, [r4, #12]
 8001520:	059b      	lsls	r3, r3, #22
 8001522:	d4dd      	bmi.n	80014e0 <_fflush_r+0xc>
 8001524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001526:	f000 f908 	bl	800173a <__retarget_lock_release_recursive>
 800152a:	e7d9      	b.n	80014e0 <_fflush_r+0xc>
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <_fflush_r+0x70>)
 800152e:	429c      	cmp	r4, r3
 8001530:	d101      	bne.n	8001536 <_fflush_r+0x62>
 8001532:	68ac      	ldr	r4, [r5, #8]
 8001534:	e7df      	b.n	80014f6 <_fflush_r+0x22>
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <_fflush_r+0x74>)
 8001538:	429c      	cmp	r4, r3
 800153a:	bf08      	it	eq
 800153c:	68ec      	ldreq	r4, [r5, #12]
 800153e:	e7da      	b.n	80014f6 <_fflush_r+0x22>
 8001540:	080021c8 	.word	0x080021c8
 8001544:	080021e8 	.word	0x080021e8
 8001548:	080021a8 	.word	0x080021a8

0800154c <std>:
 800154c:	2300      	movs	r3, #0
 800154e:	b510      	push	{r4, lr}
 8001550:	4604      	mov	r4, r0
 8001552:	e9c0 3300 	strd	r3, r3, [r0]
 8001556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800155a:	6083      	str	r3, [r0, #8]
 800155c:	8181      	strh	r1, [r0, #12]
 800155e:	6643      	str	r3, [r0, #100]	; 0x64
 8001560:	81c2      	strh	r2, [r0, #14]
 8001562:	6183      	str	r3, [r0, #24]
 8001564:	4619      	mov	r1, r3
 8001566:	2208      	movs	r2, #8
 8001568:	305c      	adds	r0, #92	; 0x5c
 800156a:	f7ff fddb 	bl	8001124 <memset>
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <std+0x38>)
 8001570:	6224      	str	r4, [r4, #32]
 8001572:	6263      	str	r3, [r4, #36]	; 0x24
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <std+0x3c>)
 8001576:	62a3      	str	r3, [r4, #40]	; 0x28
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <std+0x40>)
 800157a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <std+0x44>)
 800157e:	6323      	str	r3, [r4, #48]	; 0x30
 8001580:	bd10      	pop	{r4, pc}
 8001582:	bf00      	nop
 8001584:	08001fbd 	.word	0x08001fbd
 8001588:	08001fdf 	.word	0x08001fdf
 800158c:	08002017 	.word	0x08002017
 8001590:	0800203b 	.word	0x0800203b

08001594 <_cleanup_r>:
 8001594:	4901      	ldr	r1, [pc, #4]	; (800159c <_cleanup_r+0x8>)
 8001596:	f000 b8af 	b.w	80016f8 <_fwalk_reent>
 800159a:	bf00      	nop
 800159c:	080014d5 	.word	0x080014d5

080015a0 <__sfmoreglue>:
 80015a0:	2268      	movs	r2, #104	; 0x68
 80015a2:	b570      	push	{r4, r5, r6, lr}
 80015a4:	1e4d      	subs	r5, r1, #1
 80015a6:	4355      	muls	r5, r2
 80015a8:	460e      	mov	r6, r1
 80015aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80015ae:	f000 f993 	bl	80018d8 <_malloc_r>
 80015b2:	4604      	mov	r4, r0
 80015b4:	b140      	cbz	r0, 80015c8 <__sfmoreglue+0x28>
 80015b6:	2100      	movs	r1, #0
 80015b8:	e9c0 1600 	strd	r1, r6, [r0]
 80015bc:	300c      	adds	r0, #12
 80015be:	60a0      	str	r0, [r4, #8]
 80015c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80015c4:	f7ff fdae 	bl	8001124 <memset>
 80015c8:	4620      	mov	r0, r4
 80015ca:	bd70      	pop	{r4, r5, r6, pc}

080015cc <__sfp_lock_acquire>:
 80015cc:	4801      	ldr	r0, [pc, #4]	; (80015d4 <__sfp_lock_acquire+0x8>)
 80015ce:	f000 b8b3 	b.w	8001738 <__retarget_lock_acquire_recursive>
 80015d2:	bf00      	nop
 80015d4:	20000095 	.word	0x20000095

080015d8 <__sfp_lock_release>:
 80015d8:	4801      	ldr	r0, [pc, #4]	; (80015e0 <__sfp_lock_release+0x8>)
 80015da:	f000 b8ae 	b.w	800173a <__retarget_lock_release_recursive>
 80015de:	bf00      	nop
 80015e0:	20000095 	.word	0x20000095

080015e4 <__sinit_lock_acquire>:
 80015e4:	4801      	ldr	r0, [pc, #4]	; (80015ec <__sinit_lock_acquire+0x8>)
 80015e6:	f000 b8a7 	b.w	8001738 <__retarget_lock_acquire_recursive>
 80015ea:	bf00      	nop
 80015ec:	20000096 	.word	0x20000096

080015f0 <__sinit_lock_release>:
 80015f0:	4801      	ldr	r0, [pc, #4]	; (80015f8 <__sinit_lock_release+0x8>)
 80015f2:	f000 b8a2 	b.w	800173a <__retarget_lock_release_recursive>
 80015f6:	bf00      	nop
 80015f8:	20000096 	.word	0x20000096

080015fc <__sinit>:
 80015fc:	b510      	push	{r4, lr}
 80015fe:	4604      	mov	r4, r0
 8001600:	f7ff fff0 	bl	80015e4 <__sinit_lock_acquire>
 8001604:	69a3      	ldr	r3, [r4, #24]
 8001606:	b11b      	cbz	r3, 8001610 <__sinit+0x14>
 8001608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800160c:	f7ff bff0 	b.w	80015f0 <__sinit_lock_release>
 8001610:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001614:	6523      	str	r3, [r4, #80]	; 0x50
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <__sinit+0x68>)
 8001618:	4a13      	ldr	r2, [pc, #76]	; (8001668 <__sinit+0x6c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	62a2      	str	r2, [r4, #40]	; 0x28
 800161e:	42a3      	cmp	r3, r4
 8001620:	bf08      	it	eq
 8001622:	2301      	moveq	r3, #1
 8001624:	4620      	mov	r0, r4
 8001626:	bf08      	it	eq
 8001628:	61a3      	streq	r3, [r4, #24]
 800162a:	f000 f81f 	bl	800166c <__sfp>
 800162e:	6060      	str	r0, [r4, #4]
 8001630:	4620      	mov	r0, r4
 8001632:	f000 f81b 	bl	800166c <__sfp>
 8001636:	60a0      	str	r0, [r4, #8]
 8001638:	4620      	mov	r0, r4
 800163a:	f000 f817 	bl	800166c <__sfp>
 800163e:	2200      	movs	r2, #0
 8001640:	2104      	movs	r1, #4
 8001642:	60e0      	str	r0, [r4, #12]
 8001644:	6860      	ldr	r0, [r4, #4]
 8001646:	f7ff ff81 	bl	800154c <std>
 800164a:	2201      	movs	r2, #1
 800164c:	2109      	movs	r1, #9
 800164e:	68a0      	ldr	r0, [r4, #8]
 8001650:	f7ff ff7c 	bl	800154c <std>
 8001654:	2202      	movs	r2, #2
 8001656:	2112      	movs	r1, #18
 8001658:	68e0      	ldr	r0, [r4, #12]
 800165a:	f7ff ff77 	bl	800154c <std>
 800165e:	2301      	movs	r3, #1
 8001660:	61a3      	str	r3, [r4, #24]
 8001662:	e7d1      	b.n	8001608 <__sinit+0xc>
 8001664:	080021a4 	.word	0x080021a4
 8001668:	08001595 	.word	0x08001595

0800166c <__sfp>:
 800166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800166e:	4607      	mov	r7, r0
 8001670:	f7ff ffac 	bl	80015cc <__sfp_lock_acquire>
 8001674:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <__sfp+0x84>)
 8001676:	681e      	ldr	r6, [r3, #0]
 8001678:	69b3      	ldr	r3, [r6, #24]
 800167a:	b913      	cbnz	r3, 8001682 <__sfp+0x16>
 800167c:	4630      	mov	r0, r6
 800167e:	f7ff ffbd 	bl	80015fc <__sinit>
 8001682:	3648      	adds	r6, #72	; 0x48
 8001684:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001688:	3b01      	subs	r3, #1
 800168a:	d503      	bpl.n	8001694 <__sfp+0x28>
 800168c:	6833      	ldr	r3, [r6, #0]
 800168e:	b30b      	cbz	r3, 80016d4 <__sfp+0x68>
 8001690:	6836      	ldr	r6, [r6, #0]
 8001692:	e7f7      	b.n	8001684 <__sfp+0x18>
 8001694:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001698:	b9d5      	cbnz	r5, 80016d0 <__sfp+0x64>
 800169a:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <__sfp+0x88>)
 800169c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80016a0:	60e3      	str	r3, [r4, #12]
 80016a2:	6665      	str	r5, [r4, #100]	; 0x64
 80016a4:	f000 f847 	bl	8001736 <__retarget_lock_init_recursive>
 80016a8:	f7ff ff96 	bl	80015d8 <__sfp_lock_release>
 80016ac:	2208      	movs	r2, #8
 80016ae:	4629      	mov	r1, r5
 80016b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80016b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80016b8:	6025      	str	r5, [r4, #0]
 80016ba:	61a5      	str	r5, [r4, #24]
 80016bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80016c0:	f7ff fd30 	bl	8001124 <memset>
 80016c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80016c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80016cc:	4620      	mov	r0, r4
 80016ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016d0:	3468      	adds	r4, #104	; 0x68
 80016d2:	e7d9      	b.n	8001688 <__sfp+0x1c>
 80016d4:	2104      	movs	r1, #4
 80016d6:	4638      	mov	r0, r7
 80016d8:	f7ff ff62 	bl	80015a0 <__sfmoreglue>
 80016dc:	4604      	mov	r4, r0
 80016de:	6030      	str	r0, [r6, #0]
 80016e0:	2800      	cmp	r0, #0
 80016e2:	d1d5      	bne.n	8001690 <__sfp+0x24>
 80016e4:	f7ff ff78 	bl	80015d8 <__sfp_lock_release>
 80016e8:	230c      	movs	r3, #12
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	e7ee      	b.n	80016cc <__sfp+0x60>
 80016ee:	bf00      	nop
 80016f0:	080021a4 	.word	0x080021a4
 80016f4:	ffff0001 	.word	0xffff0001

080016f8 <_fwalk_reent>:
 80016f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016fc:	4606      	mov	r6, r0
 80016fe:	4688      	mov	r8, r1
 8001700:	2700      	movs	r7, #0
 8001702:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001706:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800170a:	f1b9 0901 	subs.w	r9, r9, #1
 800170e:	d505      	bpl.n	800171c <_fwalk_reent+0x24>
 8001710:	6824      	ldr	r4, [r4, #0]
 8001712:	2c00      	cmp	r4, #0
 8001714:	d1f7      	bne.n	8001706 <_fwalk_reent+0xe>
 8001716:	4638      	mov	r0, r7
 8001718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800171c:	89ab      	ldrh	r3, [r5, #12]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d907      	bls.n	8001732 <_fwalk_reent+0x3a>
 8001722:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001726:	3301      	adds	r3, #1
 8001728:	d003      	beq.n	8001732 <_fwalk_reent+0x3a>
 800172a:	4629      	mov	r1, r5
 800172c:	4630      	mov	r0, r6
 800172e:	47c0      	blx	r8
 8001730:	4307      	orrs	r7, r0
 8001732:	3568      	adds	r5, #104	; 0x68
 8001734:	e7e9      	b.n	800170a <_fwalk_reent+0x12>

08001736 <__retarget_lock_init_recursive>:
 8001736:	4770      	bx	lr

08001738 <__retarget_lock_acquire_recursive>:
 8001738:	4770      	bx	lr

0800173a <__retarget_lock_release_recursive>:
 800173a:	4770      	bx	lr

0800173c <__swhatbuf_r>:
 800173c:	b570      	push	{r4, r5, r6, lr}
 800173e:	460e      	mov	r6, r1
 8001740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001744:	4614      	mov	r4, r2
 8001746:	2900      	cmp	r1, #0
 8001748:	461d      	mov	r5, r3
 800174a:	b096      	sub	sp, #88	; 0x58
 800174c:	da08      	bge.n	8001760 <__swhatbuf_r+0x24>
 800174e:	2200      	movs	r2, #0
 8001750:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001754:	602a      	str	r2, [r5, #0]
 8001756:	061a      	lsls	r2, r3, #24
 8001758:	d410      	bmi.n	800177c <__swhatbuf_r+0x40>
 800175a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800175e:	e00e      	b.n	800177e <__swhatbuf_r+0x42>
 8001760:	466a      	mov	r2, sp
 8001762:	f000 fc91 	bl	8002088 <_fstat_r>
 8001766:	2800      	cmp	r0, #0
 8001768:	dbf1      	blt.n	800174e <__swhatbuf_r+0x12>
 800176a:	9a01      	ldr	r2, [sp, #4]
 800176c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001770:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001774:	425a      	negs	r2, r3
 8001776:	415a      	adcs	r2, r3
 8001778:	602a      	str	r2, [r5, #0]
 800177a:	e7ee      	b.n	800175a <__swhatbuf_r+0x1e>
 800177c:	2340      	movs	r3, #64	; 0x40
 800177e:	2000      	movs	r0, #0
 8001780:	6023      	str	r3, [r4, #0]
 8001782:	b016      	add	sp, #88	; 0x58
 8001784:	bd70      	pop	{r4, r5, r6, pc}
	...

08001788 <__smakebuf_r>:
 8001788:	898b      	ldrh	r3, [r1, #12]
 800178a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800178c:	079d      	lsls	r5, r3, #30
 800178e:	4606      	mov	r6, r0
 8001790:	460c      	mov	r4, r1
 8001792:	d507      	bpl.n	80017a4 <__smakebuf_r+0x1c>
 8001794:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001798:	6023      	str	r3, [r4, #0]
 800179a:	6123      	str	r3, [r4, #16]
 800179c:	2301      	movs	r3, #1
 800179e:	6163      	str	r3, [r4, #20]
 80017a0:	b002      	add	sp, #8
 80017a2:	bd70      	pop	{r4, r5, r6, pc}
 80017a4:	466a      	mov	r2, sp
 80017a6:	ab01      	add	r3, sp, #4
 80017a8:	f7ff ffc8 	bl	800173c <__swhatbuf_r>
 80017ac:	9900      	ldr	r1, [sp, #0]
 80017ae:	4605      	mov	r5, r0
 80017b0:	4630      	mov	r0, r6
 80017b2:	f000 f891 	bl	80018d8 <_malloc_r>
 80017b6:	b948      	cbnz	r0, 80017cc <__smakebuf_r+0x44>
 80017b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017bc:	059a      	lsls	r2, r3, #22
 80017be:	d4ef      	bmi.n	80017a0 <__smakebuf_r+0x18>
 80017c0:	f023 0303 	bic.w	r3, r3, #3
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	81a3      	strh	r3, [r4, #12]
 80017ca:	e7e3      	b.n	8001794 <__smakebuf_r+0xc>
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <__smakebuf_r+0x7c>)
 80017ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80017d0:	89a3      	ldrh	r3, [r4, #12]
 80017d2:	6020      	str	r0, [r4, #0]
 80017d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d8:	81a3      	strh	r3, [r4, #12]
 80017da:	9b00      	ldr	r3, [sp, #0]
 80017dc:	6120      	str	r0, [r4, #16]
 80017de:	6163      	str	r3, [r4, #20]
 80017e0:	9b01      	ldr	r3, [sp, #4]
 80017e2:	b15b      	cbz	r3, 80017fc <__smakebuf_r+0x74>
 80017e4:	4630      	mov	r0, r6
 80017e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017ea:	f000 fc5f 	bl	80020ac <_isatty_r>
 80017ee:	b128      	cbz	r0, 80017fc <__smakebuf_r+0x74>
 80017f0:	89a3      	ldrh	r3, [r4, #12]
 80017f2:	f023 0303 	bic.w	r3, r3, #3
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	81a3      	strh	r3, [r4, #12]
 80017fc:	89a0      	ldrh	r0, [r4, #12]
 80017fe:	4305      	orrs	r5, r0
 8001800:	81a5      	strh	r5, [r4, #12]
 8001802:	e7cd      	b.n	80017a0 <__smakebuf_r+0x18>
 8001804:	08001595 	.word	0x08001595

08001808 <_free_r>:
 8001808:	b538      	push	{r3, r4, r5, lr}
 800180a:	4605      	mov	r5, r0
 800180c:	2900      	cmp	r1, #0
 800180e:	d040      	beq.n	8001892 <_free_r+0x8a>
 8001810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001814:	1f0c      	subs	r4, r1, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	bfb8      	it	lt
 800181a:	18e4      	addlt	r4, r4, r3
 800181c:	f000 fc76 	bl	800210c <__malloc_lock>
 8001820:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <_free_r+0x8c>)
 8001822:	6813      	ldr	r3, [r2, #0]
 8001824:	b933      	cbnz	r3, 8001834 <_free_r+0x2c>
 8001826:	6063      	str	r3, [r4, #4]
 8001828:	6014      	str	r4, [r2, #0]
 800182a:	4628      	mov	r0, r5
 800182c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001830:	f000 bc72 	b.w	8002118 <__malloc_unlock>
 8001834:	42a3      	cmp	r3, r4
 8001836:	d908      	bls.n	800184a <_free_r+0x42>
 8001838:	6820      	ldr	r0, [r4, #0]
 800183a:	1821      	adds	r1, r4, r0
 800183c:	428b      	cmp	r3, r1
 800183e:	bf01      	itttt	eq
 8001840:	6819      	ldreq	r1, [r3, #0]
 8001842:	685b      	ldreq	r3, [r3, #4]
 8001844:	1809      	addeq	r1, r1, r0
 8001846:	6021      	streq	r1, [r4, #0]
 8001848:	e7ed      	b.n	8001826 <_free_r+0x1e>
 800184a:	461a      	mov	r2, r3
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	b10b      	cbz	r3, 8001854 <_free_r+0x4c>
 8001850:	42a3      	cmp	r3, r4
 8001852:	d9fa      	bls.n	800184a <_free_r+0x42>
 8001854:	6811      	ldr	r1, [r2, #0]
 8001856:	1850      	adds	r0, r2, r1
 8001858:	42a0      	cmp	r0, r4
 800185a:	d10b      	bne.n	8001874 <_free_r+0x6c>
 800185c:	6820      	ldr	r0, [r4, #0]
 800185e:	4401      	add	r1, r0
 8001860:	1850      	adds	r0, r2, r1
 8001862:	4283      	cmp	r3, r0
 8001864:	6011      	str	r1, [r2, #0]
 8001866:	d1e0      	bne.n	800182a <_free_r+0x22>
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4401      	add	r1, r0
 800186e:	6011      	str	r1, [r2, #0]
 8001870:	6053      	str	r3, [r2, #4]
 8001872:	e7da      	b.n	800182a <_free_r+0x22>
 8001874:	d902      	bls.n	800187c <_free_r+0x74>
 8001876:	230c      	movs	r3, #12
 8001878:	602b      	str	r3, [r5, #0]
 800187a:	e7d6      	b.n	800182a <_free_r+0x22>
 800187c:	6820      	ldr	r0, [r4, #0]
 800187e:	1821      	adds	r1, r4, r0
 8001880:	428b      	cmp	r3, r1
 8001882:	bf01      	itttt	eq
 8001884:	6819      	ldreq	r1, [r3, #0]
 8001886:	685b      	ldreq	r3, [r3, #4]
 8001888:	1809      	addeq	r1, r1, r0
 800188a:	6021      	streq	r1, [r4, #0]
 800188c:	6063      	str	r3, [r4, #4]
 800188e:	6054      	str	r4, [r2, #4]
 8001890:	e7cb      	b.n	800182a <_free_r+0x22>
 8001892:	bd38      	pop	{r3, r4, r5, pc}
 8001894:	20000098 	.word	0x20000098

08001898 <sbrk_aligned>:
 8001898:	b570      	push	{r4, r5, r6, lr}
 800189a:	4e0e      	ldr	r6, [pc, #56]	; (80018d4 <sbrk_aligned+0x3c>)
 800189c:	460c      	mov	r4, r1
 800189e:	6831      	ldr	r1, [r6, #0]
 80018a0:	4605      	mov	r5, r0
 80018a2:	b911      	cbnz	r1, 80018aa <sbrk_aligned+0x12>
 80018a4:	f000 fb7a 	bl	8001f9c <_sbrk_r>
 80018a8:	6030      	str	r0, [r6, #0]
 80018aa:	4621      	mov	r1, r4
 80018ac:	4628      	mov	r0, r5
 80018ae:	f000 fb75 	bl	8001f9c <_sbrk_r>
 80018b2:	1c43      	adds	r3, r0, #1
 80018b4:	d00a      	beq.n	80018cc <sbrk_aligned+0x34>
 80018b6:	1cc4      	adds	r4, r0, #3
 80018b8:	f024 0403 	bic.w	r4, r4, #3
 80018bc:	42a0      	cmp	r0, r4
 80018be:	d007      	beq.n	80018d0 <sbrk_aligned+0x38>
 80018c0:	1a21      	subs	r1, r4, r0
 80018c2:	4628      	mov	r0, r5
 80018c4:	f000 fb6a 	bl	8001f9c <_sbrk_r>
 80018c8:	3001      	adds	r0, #1
 80018ca:	d101      	bne.n	80018d0 <sbrk_aligned+0x38>
 80018cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80018d0:	4620      	mov	r0, r4
 80018d2:	bd70      	pop	{r4, r5, r6, pc}
 80018d4:	2000009c 	.word	0x2000009c

080018d8 <_malloc_r>:
 80018d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018dc:	1ccd      	adds	r5, r1, #3
 80018de:	f025 0503 	bic.w	r5, r5, #3
 80018e2:	3508      	adds	r5, #8
 80018e4:	2d0c      	cmp	r5, #12
 80018e6:	bf38      	it	cc
 80018e8:	250c      	movcc	r5, #12
 80018ea:	2d00      	cmp	r5, #0
 80018ec:	4607      	mov	r7, r0
 80018ee:	db01      	blt.n	80018f4 <_malloc_r+0x1c>
 80018f0:	42a9      	cmp	r1, r5
 80018f2:	d905      	bls.n	8001900 <_malloc_r+0x28>
 80018f4:	230c      	movs	r3, #12
 80018f6:	2600      	movs	r6, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4630      	mov	r0, r6
 80018fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001900:	4e2e      	ldr	r6, [pc, #184]	; (80019bc <_malloc_r+0xe4>)
 8001902:	f000 fc03 	bl	800210c <__malloc_lock>
 8001906:	6833      	ldr	r3, [r6, #0]
 8001908:	461c      	mov	r4, r3
 800190a:	bb34      	cbnz	r4, 800195a <_malloc_r+0x82>
 800190c:	4629      	mov	r1, r5
 800190e:	4638      	mov	r0, r7
 8001910:	f7ff ffc2 	bl	8001898 <sbrk_aligned>
 8001914:	1c43      	adds	r3, r0, #1
 8001916:	4604      	mov	r4, r0
 8001918:	d14d      	bne.n	80019b6 <_malloc_r+0xde>
 800191a:	6834      	ldr	r4, [r6, #0]
 800191c:	4626      	mov	r6, r4
 800191e:	2e00      	cmp	r6, #0
 8001920:	d140      	bne.n	80019a4 <_malloc_r+0xcc>
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	4631      	mov	r1, r6
 8001926:	4638      	mov	r0, r7
 8001928:	eb04 0803 	add.w	r8, r4, r3
 800192c:	f000 fb36 	bl	8001f9c <_sbrk_r>
 8001930:	4580      	cmp	r8, r0
 8001932:	d13a      	bne.n	80019aa <_malloc_r+0xd2>
 8001934:	6821      	ldr	r1, [r4, #0]
 8001936:	3503      	adds	r5, #3
 8001938:	1a6d      	subs	r5, r5, r1
 800193a:	f025 0503 	bic.w	r5, r5, #3
 800193e:	3508      	adds	r5, #8
 8001940:	2d0c      	cmp	r5, #12
 8001942:	bf38      	it	cc
 8001944:	250c      	movcc	r5, #12
 8001946:	4638      	mov	r0, r7
 8001948:	4629      	mov	r1, r5
 800194a:	f7ff ffa5 	bl	8001898 <sbrk_aligned>
 800194e:	3001      	adds	r0, #1
 8001950:	d02b      	beq.n	80019aa <_malloc_r+0xd2>
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	442b      	add	r3, r5
 8001956:	6023      	str	r3, [r4, #0]
 8001958:	e00e      	b.n	8001978 <_malloc_r+0xa0>
 800195a:	6822      	ldr	r2, [r4, #0]
 800195c:	1b52      	subs	r2, r2, r5
 800195e:	d41e      	bmi.n	800199e <_malloc_r+0xc6>
 8001960:	2a0b      	cmp	r2, #11
 8001962:	d916      	bls.n	8001992 <_malloc_r+0xba>
 8001964:	1961      	adds	r1, r4, r5
 8001966:	42a3      	cmp	r3, r4
 8001968:	6025      	str	r5, [r4, #0]
 800196a:	bf18      	it	ne
 800196c:	6059      	strne	r1, [r3, #4]
 800196e:	6863      	ldr	r3, [r4, #4]
 8001970:	bf08      	it	eq
 8001972:	6031      	streq	r1, [r6, #0]
 8001974:	5162      	str	r2, [r4, r5]
 8001976:	604b      	str	r3, [r1, #4]
 8001978:	4638      	mov	r0, r7
 800197a:	f104 060b 	add.w	r6, r4, #11
 800197e:	f000 fbcb 	bl	8002118 <__malloc_unlock>
 8001982:	f026 0607 	bic.w	r6, r6, #7
 8001986:	1d23      	adds	r3, r4, #4
 8001988:	1af2      	subs	r2, r6, r3
 800198a:	d0b6      	beq.n	80018fa <_malloc_r+0x22>
 800198c:	1b9b      	subs	r3, r3, r6
 800198e:	50a3      	str	r3, [r4, r2]
 8001990:	e7b3      	b.n	80018fa <_malloc_r+0x22>
 8001992:	6862      	ldr	r2, [r4, #4]
 8001994:	42a3      	cmp	r3, r4
 8001996:	bf0c      	ite	eq
 8001998:	6032      	streq	r2, [r6, #0]
 800199a:	605a      	strne	r2, [r3, #4]
 800199c:	e7ec      	b.n	8001978 <_malloc_r+0xa0>
 800199e:	4623      	mov	r3, r4
 80019a0:	6864      	ldr	r4, [r4, #4]
 80019a2:	e7b2      	b.n	800190a <_malloc_r+0x32>
 80019a4:	4634      	mov	r4, r6
 80019a6:	6876      	ldr	r6, [r6, #4]
 80019a8:	e7b9      	b.n	800191e <_malloc_r+0x46>
 80019aa:	230c      	movs	r3, #12
 80019ac:	4638      	mov	r0, r7
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	f000 fbb2 	bl	8002118 <__malloc_unlock>
 80019b4:	e7a1      	b.n	80018fa <_malloc_r+0x22>
 80019b6:	6025      	str	r5, [r4, #0]
 80019b8:	e7de      	b.n	8001978 <_malloc_r+0xa0>
 80019ba:	bf00      	nop
 80019bc:	20000098 	.word	0x20000098

080019c0 <__sfputc_r>:
 80019c0:	6893      	ldr	r3, [r2, #8]
 80019c2:	b410      	push	{r4}
 80019c4:	3b01      	subs	r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	6093      	str	r3, [r2, #8]
 80019ca:	da07      	bge.n	80019dc <__sfputc_r+0x1c>
 80019cc:	6994      	ldr	r4, [r2, #24]
 80019ce:	42a3      	cmp	r3, r4
 80019d0:	db01      	blt.n	80019d6 <__sfputc_r+0x16>
 80019d2:	290a      	cmp	r1, #10
 80019d4:	d102      	bne.n	80019dc <__sfputc_r+0x1c>
 80019d6:	bc10      	pop	{r4}
 80019d8:	f7ff bc3a 	b.w	8001250 <__swbuf_r>
 80019dc:	6813      	ldr	r3, [r2, #0]
 80019de:	1c58      	adds	r0, r3, #1
 80019e0:	6010      	str	r0, [r2, #0]
 80019e2:	7019      	strb	r1, [r3, #0]
 80019e4:	4608      	mov	r0, r1
 80019e6:	bc10      	pop	{r4}
 80019e8:	4770      	bx	lr

080019ea <__sfputs_r>:
 80019ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ec:	4606      	mov	r6, r0
 80019ee:	460f      	mov	r7, r1
 80019f0:	4614      	mov	r4, r2
 80019f2:	18d5      	adds	r5, r2, r3
 80019f4:	42ac      	cmp	r4, r5
 80019f6:	d101      	bne.n	80019fc <__sfputs_r+0x12>
 80019f8:	2000      	movs	r0, #0
 80019fa:	e007      	b.n	8001a0c <__sfputs_r+0x22>
 80019fc:	463a      	mov	r2, r7
 80019fe:	4630      	mov	r0, r6
 8001a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a04:	f7ff ffdc 	bl	80019c0 <__sfputc_r>
 8001a08:	1c43      	adds	r3, r0, #1
 8001a0a:	d1f3      	bne.n	80019f4 <__sfputs_r+0xa>
 8001a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001a10 <_vfiprintf_r>:
 8001a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a14:	460d      	mov	r5, r1
 8001a16:	4614      	mov	r4, r2
 8001a18:	4698      	mov	r8, r3
 8001a1a:	4606      	mov	r6, r0
 8001a1c:	b09d      	sub	sp, #116	; 0x74
 8001a1e:	b118      	cbz	r0, 8001a28 <_vfiprintf_r+0x18>
 8001a20:	6983      	ldr	r3, [r0, #24]
 8001a22:	b90b      	cbnz	r3, 8001a28 <_vfiprintf_r+0x18>
 8001a24:	f7ff fdea 	bl	80015fc <__sinit>
 8001a28:	4b89      	ldr	r3, [pc, #548]	; (8001c50 <_vfiprintf_r+0x240>)
 8001a2a:	429d      	cmp	r5, r3
 8001a2c:	d11b      	bne.n	8001a66 <_vfiprintf_r+0x56>
 8001a2e:	6875      	ldr	r5, [r6, #4]
 8001a30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a32:	07d9      	lsls	r1, r3, #31
 8001a34:	d405      	bmi.n	8001a42 <_vfiprintf_r+0x32>
 8001a36:	89ab      	ldrh	r3, [r5, #12]
 8001a38:	059a      	lsls	r2, r3, #22
 8001a3a:	d402      	bmi.n	8001a42 <_vfiprintf_r+0x32>
 8001a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a3e:	f7ff fe7b 	bl	8001738 <__retarget_lock_acquire_recursive>
 8001a42:	89ab      	ldrh	r3, [r5, #12]
 8001a44:	071b      	lsls	r3, r3, #28
 8001a46:	d501      	bpl.n	8001a4c <_vfiprintf_r+0x3c>
 8001a48:	692b      	ldr	r3, [r5, #16]
 8001a4a:	b9eb      	cbnz	r3, 8001a88 <_vfiprintf_r+0x78>
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	4630      	mov	r0, r6
 8001a50:	f7ff fc50 	bl	80012f4 <__swsetup_r>
 8001a54:	b1c0      	cbz	r0, 8001a88 <_vfiprintf_r+0x78>
 8001a56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a58:	07dc      	lsls	r4, r3, #31
 8001a5a:	d50e      	bpl.n	8001a7a <_vfiprintf_r+0x6a>
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a60:	b01d      	add	sp, #116	; 0x74
 8001a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a66:	4b7b      	ldr	r3, [pc, #492]	; (8001c54 <_vfiprintf_r+0x244>)
 8001a68:	429d      	cmp	r5, r3
 8001a6a:	d101      	bne.n	8001a70 <_vfiprintf_r+0x60>
 8001a6c:	68b5      	ldr	r5, [r6, #8]
 8001a6e:	e7df      	b.n	8001a30 <_vfiprintf_r+0x20>
 8001a70:	4b79      	ldr	r3, [pc, #484]	; (8001c58 <_vfiprintf_r+0x248>)
 8001a72:	429d      	cmp	r5, r3
 8001a74:	bf08      	it	eq
 8001a76:	68f5      	ldreq	r5, [r6, #12]
 8001a78:	e7da      	b.n	8001a30 <_vfiprintf_r+0x20>
 8001a7a:	89ab      	ldrh	r3, [r5, #12]
 8001a7c:	0598      	lsls	r0, r3, #22
 8001a7e:	d4ed      	bmi.n	8001a5c <_vfiprintf_r+0x4c>
 8001a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a82:	f7ff fe5a 	bl	800173a <__retarget_lock_release_recursive>
 8001a86:	e7e9      	b.n	8001a5c <_vfiprintf_r+0x4c>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8001a8c:	2320      	movs	r3, #32
 8001a8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001a92:	2330      	movs	r3, #48	; 0x30
 8001a94:	f04f 0901 	mov.w	r9, #1
 8001a98:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a9c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001c5c <_vfiprintf_r+0x24c>
 8001aa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001aa4:	4623      	mov	r3, r4
 8001aa6:	469a      	mov	sl, r3
 8001aa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001aac:	b10a      	cbz	r2, 8001ab2 <_vfiprintf_r+0xa2>
 8001aae:	2a25      	cmp	r2, #37	; 0x25
 8001ab0:	d1f9      	bne.n	8001aa6 <_vfiprintf_r+0x96>
 8001ab2:	ebba 0b04 	subs.w	fp, sl, r4
 8001ab6:	d00b      	beq.n	8001ad0 <_vfiprintf_r+0xc0>
 8001ab8:	465b      	mov	r3, fp
 8001aba:	4622      	mov	r2, r4
 8001abc:	4629      	mov	r1, r5
 8001abe:	4630      	mov	r0, r6
 8001ac0:	f7ff ff93 	bl	80019ea <__sfputs_r>
 8001ac4:	3001      	adds	r0, #1
 8001ac6:	f000 80aa 	beq.w	8001c1e <_vfiprintf_r+0x20e>
 8001aca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001acc:	445a      	add	r2, fp
 8001ace:	9209      	str	r2, [sp, #36]	; 0x24
 8001ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80a2 	beq.w	8001c1e <_vfiprintf_r+0x20e>
 8001ada:	2300      	movs	r3, #0
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ae4:	f10a 0a01 	add.w	sl, sl, #1
 8001ae8:	9304      	str	r3, [sp, #16]
 8001aea:	9307      	str	r3, [sp, #28]
 8001aec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001af0:	931a      	str	r3, [sp, #104]	; 0x68
 8001af2:	4654      	mov	r4, sl
 8001af4:	2205      	movs	r2, #5
 8001af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001afa:	4858      	ldr	r0, [pc, #352]	; (8001c5c <_vfiprintf_r+0x24c>)
 8001afc:	f000 faf8 	bl	80020f0 <memchr>
 8001b00:	9a04      	ldr	r2, [sp, #16]
 8001b02:	b9d8      	cbnz	r0, 8001b3c <_vfiprintf_r+0x12c>
 8001b04:	06d1      	lsls	r1, r2, #27
 8001b06:	bf44      	itt	mi
 8001b08:	2320      	movmi	r3, #32
 8001b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b0e:	0713      	lsls	r3, r2, #28
 8001b10:	bf44      	itt	mi
 8001b12:	232b      	movmi	r3, #43	; 0x2b
 8001b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b18:	f89a 3000 	ldrb.w	r3, [sl]
 8001b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8001b1e:	d015      	beq.n	8001b4c <_vfiprintf_r+0x13c>
 8001b20:	4654      	mov	r4, sl
 8001b22:	2000      	movs	r0, #0
 8001b24:	f04f 0c0a 	mov.w	ip, #10
 8001b28:	9a07      	ldr	r2, [sp, #28]
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b30:	3b30      	subs	r3, #48	; 0x30
 8001b32:	2b09      	cmp	r3, #9
 8001b34:	d94e      	bls.n	8001bd4 <_vfiprintf_r+0x1c4>
 8001b36:	b1b0      	cbz	r0, 8001b66 <_vfiprintf_r+0x156>
 8001b38:	9207      	str	r2, [sp, #28]
 8001b3a:	e014      	b.n	8001b66 <_vfiprintf_r+0x156>
 8001b3c:	eba0 0308 	sub.w	r3, r0, r8
 8001b40:	fa09 f303 	lsl.w	r3, r9, r3
 8001b44:	4313      	orrs	r3, r2
 8001b46:	46a2      	mov	sl, r4
 8001b48:	9304      	str	r3, [sp, #16]
 8001b4a:	e7d2      	b.n	8001af2 <_vfiprintf_r+0xe2>
 8001b4c:	9b03      	ldr	r3, [sp, #12]
 8001b4e:	1d19      	adds	r1, r3, #4
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	9103      	str	r1, [sp, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bfbb      	ittet	lt
 8001b58:	425b      	neglt	r3, r3
 8001b5a:	f042 0202 	orrlt.w	r2, r2, #2
 8001b5e:	9307      	strge	r3, [sp, #28]
 8001b60:	9307      	strlt	r3, [sp, #28]
 8001b62:	bfb8      	it	lt
 8001b64:	9204      	strlt	r2, [sp, #16]
 8001b66:	7823      	ldrb	r3, [r4, #0]
 8001b68:	2b2e      	cmp	r3, #46	; 0x2e
 8001b6a:	d10c      	bne.n	8001b86 <_vfiprintf_r+0x176>
 8001b6c:	7863      	ldrb	r3, [r4, #1]
 8001b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8001b70:	d135      	bne.n	8001bde <_vfiprintf_r+0x1ce>
 8001b72:	9b03      	ldr	r3, [sp, #12]
 8001b74:	3402      	adds	r4, #2
 8001b76:	1d1a      	adds	r2, r3, #4
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	9203      	str	r2, [sp, #12]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bfb8      	it	lt
 8001b80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001b84:	9305      	str	r3, [sp, #20]
 8001b86:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001c60 <_vfiprintf_r+0x250>
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	4650      	mov	r0, sl
 8001b8e:	7821      	ldrb	r1, [r4, #0]
 8001b90:	f000 faae 	bl	80020f0 <memchr>
 8001b94:	b140      	cbz	r0, 8001ba8 <_vfiprintf_r+0x198>
 8001b96:	2340      	movs	r3, #64	; 0x40
 8001b98:	eba0 000a 	sub.w	r0, r0, sl
 8001b9c:	fa03 f000 	lsl.w	r0, r3, r0
 8001ba0:	9b04      	ldr	r3, [sp, #16]
 8001ba2:	3401      	adds	r4, #1
 8001ba4:	4303      	orrs	r3, r0
 8001ba6:	9304      	str	r3, [sp, #16]
 8001ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bac:	2206      	movs	r2, #6
 8001bae:	482d      	ldr	r0, [pc, #180]	; (8001c64 <_vfiprintf_r+0x254>)
 8001bb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001bb4:	f000 fa9c 	bl	80020f0 <memchr>
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	d03f      	beq.n	8001c3c <_vfiprintf_r+0x22c>
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <_vfiprintf_r+0x258>)
 8001bbe:	bb1b      	cbnz	r3, 8001c08 <_vfiprintf_r+0x1f8>
 8001bc0:	9b03      	ldr	r3, [sp, #12]
 8001bc2:	3307      	adds	r3, #7
 8001bc4:	f023 0307 	bic.w	r3, r3, #7
 8001bc8:	3308      	adds	r3, #8
 8001bca:	9303      	str	r3, [sp, #12]
 8001bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bce:	443b      	add	r3, r7
 8001bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8001bd2:	e767      	b.n	8001aa4 <_vfiprintf_r+0x94>
 8001bd4:	460c      	mov	r4, r1
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8001bdc:	e7a5      	b.n	8001b2a <_vfiprintf_r+0x11a>
 8001bde:	2300      	movs	r3, #0
 8001be0:	f04f 0c0a 	mov.w	ip, #10
 8001be4:	4619      	mov	r1, r3
 8001be6:	3401      	adds	r4, #1
 8001be8:	9305      	str	r3, [sp, #20]
 8001bea:	4620      	mov	r0, r4
 8001bec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001bf0:	3a30      	subs	r2, #48	; 0x30
 8001bf2:	2a09      	cmp	r2, #9
 8001bf4:	d903      	bls.n	8001bfe <_vfiprintf_r+0x1ee>
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0c5      	beq.n	8001b86 <_vfiprintf_r+0x176>
 8001bfa:	9105      	str	r1, [sp, #20]
 8001bfc:	e7c3      	b.n	8001b86 <_vfiprintf_r+0x176>
 8001bfe:	4604      	mov	r4, r0
 8001c00:	2301      	movs	r3, #1
 8001c02:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c06:	e7f0      	b.n	8001bea <_vfiprintf_r+0x1da>
 8001c08:	ab03      	add	r3, sp, #12
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	462a      	mov	r2, r5
 8001c0e:	4630      	mov	r0, r6
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <_vfiprintf_r+0x25c>)
 8001c12:	a904      	add	r1, sp, #16
 8001c14:	f3af 8000 	nop.w
 8001c18:	4607      	mov	r7, r0
 8001c1a:	1c78      	adds	r0, r7, #1
 8001c1c:	d1d6      	bne.n	8001bcc <_vfiprintf_r+0x1bc>
 8001c1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c20:	07d9      	lsls	r1, r3, #31
 8001c22:	d405      	bmi.n	8001c30 <_vfiprintf_r+0x220>
 8001c24:	89ab      	ldrh	r3, [r5, #12]
 8001c26:	059a      	lsls	r2, r3, #22
 8001c28:	d402      	bmi.n	8001c30 <_vfiprintf_r+0x220>
 8001c2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c2c:	f7ff fd85 	bl	800173a <__retarget_lock_release_recursive>
 8001c30:	89ab      	ldrh	r3, [r5, #12]
 8001c32:	065b      	lsls	r3, r3, #25
 8001c34:	f53f af12 	bmi.w	8001a5c <_vfiprintf_r+0x4c>
 8001c38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c3a:	e711      	b.n	8001a60 <_vfiprintf_r+0x50>
 8001c3c:	ab03      	add	r3, sp, #12
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	462a      	mov	r2, r5
 8001c42:	4630      	mov	r0, r6
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <_vfiprintf_r+0x25c>)
 8001c46:	a904      	add	r1, sp, #16
 8001c48:	f000 f882 	bl	8001d50 <_printf_i>
 8001c4c:	e7e4      	b.n	8001c18 <_vfiprintf_r+0x208>
 8001c4e:	bf00      	nop
 8001c50:	080021c8 	.word	0x080021c8
 8001c54:	080021e8 	.word	0x080021e8
 8001c58:	080021a8 	.word	0x080021a8
 8001c5c:	08002208 	.word	0x08002208
 8001c60:	0800220e 	.word	0x0800220e
 8001c64:	08002212 	.word	0x08002212
 8001c68:	00000000 	.word	0x00000000
 8001c6c:	080019eb 	.word	0x080019eb

08001c70 <_printf_common>:
 8001c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c74:	4616      	mov	r6, r2
 8001c76:	4699      	mov	r9, r3
 8001c78:	688a      	ldr	r2, [r1, #8]
 8001c7a:	690b      	ldr	r3, [r1, #16]
 8001c7c:	4607      	mov	r7, r0
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	bfb8      	it	lt
 8001c82:	4613      	movlt	r3, r2
 8001c84:	6033      	str	r3, [r6, #0]
 8001c86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c8a:	460c      	mov	r4, r1
 8001c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c90:	b10a      	cbz	r2, 8001c96 <_printf_common+0x26>
 8001c92:	3301      	adds	r3, #1
 8001c94:	6033      	str	r3, [r6, #0]
 8001c96:	6823      	ldr	r3, [r4, #0]
 8001c98:	0699      	lsls	r1, r3, #26
 8001c9a:	bf42      	ittt	mi
 8001c9c:	6833      	ldrmi	r3, [r6, #0]
 8001c9e:	3302      	addmi	r3, #2
 8001ca0:	6033      	strmi	r3, [r6, #0]
 8001ca2:	6825      	ldr	r5, [r4, #0]
 8001ca4:	f015 0506 	ands.w	r5, r5, #6
 8001ca8:	d106      	bne.n	8001cb8 <_printf_common+0x48>
 8001caa:	f104 0a19 	add.w	sl, r4, #25
 8001cae:	68e3      	ldr	r3, [r4, #12]
 8001cb0:	6832      	ldr	r2, [r6, #0]
 8001cb2:	1a9b      	subs	r3, r3, r2
 8001cb4:	42ab      	cmp	r3, r5
 8001cb6:	dc28      	bgt.n	8001d0a <_printf_common+0x9a>
 8001cb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001cbc:	1e13      	subs	r3, r2, #0
 8001cbe:	6822      	ldr	r2, [r4, #0]
 8001cc0:	bf18      	it	ne
 8001cc2:	2301      	movne	r3, #1
 8001cc4:	0692      	lsls	r2, r2, #26
 8001cc6:	d42d      	bmi.n	8001d24 <_printf_common+0xb4>
 8001cc8:	4649      	mov	r1, r9
 8001cca:	4638      	mov	r0, r7
 8001ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001cd0:	47c0      	blx	r8
 8001cd2:	3001      	adds	r0, #1
 8001cd4:	d020      	beq.n	8001d18 <_printf_common+0xa8>
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	68e5      	ldr	r5, [r4, #12]
 8001cda:	f003 0306 	and.w	r3, r3, #6
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	bf18      	it	ne
 8001ce2:	2500      	movne	r5, #0
 8001ce4:	6832      	ldr	r2, [r6, #0]
 8001ce6:	f04f 0600 	mov.w	r6, #0
 8001cea:	68a3      	ldr	r3, [r4, #8]
 8001cec:	bf08      	it	eq
 8001cee:	1aad      	subeq	r5, r5, r2
 8001cf0:	6922      	ldr	r2, [r4, #16]
 8001cf2:	bf08      	it	eq
 8001cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	bfc4      	itt	gt
 8001cfc:	1a9b      	subgt	r3, r3, r2
 8001cfe:	18ed      	addgt	r5, r5, r3
 8001d00:	341a      	adds	r4, #26
 8001d02:	42b5      	cmp	r5, r6
 8001d04:	d11a      	bne.n	8001d3c <_printf_common+0xcc>
 8001d06:	2000      	movs	r0, #0
 8001d08:	e008      	b.n	8001d1c <_printf_common+0xac>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	4652      	mov	r2, sl
 8001d0e:	4649      	mov	r1, r9
 8001d10:	4638      	mov	r0, r7
 8001d12:	47c0      	blx	r8
 8001d14:	3001      	adds	r0, #1
 8001d16:	d103      	bne.n	8001d20 <_printf_common+0xb0>
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d20:	3501      	adds	r5, #1
 8001d22:	e7c4      	b.n	8001cae <_printf_common+0x3e>
 8001d24:	2030      	movs	r0, #48	; 0x30
 8001d26:	18e1      	adds	r1, r4, r3
 8001d28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001d32:	4422      	add	r2, r4
 8001d34:	3302      	adds	r3, #2
 8001d36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001d3a:	e7c5      	b.n	8001cc8 <_printf_common+0x58>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	4622      	mov	r2, r4
 8001d40:	4649      	mov	r1, r9
 8001d42:	4638      	mov	r0, r7
 8001d44:	47c0      	blx	r8
 8001d46:	3001      	adds	r0, #1
 8001d48:	d0e6      	beq.n	8001d18 <_printf_common+0xa8>
 8001d4a:	3601      	adds	r6, #1
 8001d4c:	e7d9      	b.n	8001d02 <_printf_common+0x92>
	...

08001d50 <_printf_i>:
 8001d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d54:	7e0f      	ldrb	r7, [r1, #24]
 8001d56:	4691      	mov	r9, r2
 8001d58:	2f78      	cmp	r7, #120	; 0x78
 8001d5a:	4680      	mov	r8, r0
 8001d5c:	460c      	mov	r4, r1
 8001d5e:	469a      	mov	sl, r3
 8001d60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001d62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001d66:	d807      	bhi.n	8001d78 <_printf_i+0x28>
 8001d68:	2f62      	cmp	r7, #98	; 0x62
 8001d6a:	d80a      	bhi.n	8001d82 <_printf_i+0x32>
 8001d6c:	2f00      	cmp	r7, #0
 8001d6e:	f000 80d9 	beq.w	8001f24 <_printf_i+0x1d4>
 8001d72:	2f58      	cmp	r7, #88	; 0x58
 8001d74:	f000 80a4 	beq.w	8001ec0 <_printf_i+0x170>
 8001d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001d80:	e03a      	b.n	8001df8 <_printf_i+0xa8>
 8001d82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001d86:	2b15      	cmp	r3, #21
 8001d88:	d8f6      	bhi.n	8001d78 <_printf_i+0x28>
 8001d8a:	a101      	add	r1, pc, #4	; (adr r1, 8001d90 <_printf_i+0x40>)
 8001d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d90:	08001de9 	.word	0x08001de9
 8001d94:	08001dfd 	.word	0x08001dfd
 8001d98:	08001d79 	.word	0x08001d79
 8001d9c:	08001d79 	.word	0x08001d79
 8001da0:	08001d79 	.word	0x08001d79
 8001da4:	08001d79 	.word	0x08001d79
 8001da8:	08001dfd 	.word	0x08001dfd
 8001dac:	08001d79 	.word	0x08001d79
 8001db0:	08001d79 	.word	0x08001d79
 8001db4:	08001d79 	.word	0x08001d79
 8001db8:	08001d79 	.word	0x08001d79
 8001dbc:	08001f0b 	.word	0x08001f0b
 8001dc0:	08001e2d 	.word	0x08001e2d
 8001dc4:	08001eed 	.word	0x08001eed
 8001dc8:	08001d79 	.word	0x08001d79
 8001dcc:	08001d79 	.word	0x08001d79
 8001dd0:	08001f2d 	.word	0x08001f2d
 8001dd4:	08001d79 	.word	0x08001d79
 8001dd8:	08001e2d 	.word	0x08001e2d
 8001ddc:	08001d79 	.word	0x08001d79
 8001de0:	08001d79 	.word	0x08001d79
 8001de4:	08001ef5 	.word	0x08001ef5
 8001de8:	682b      	ldr	r3, [r5, #0]
 8001dea:	1d1a      	adds	r2, r3, #4
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	602a      	str	r2, [r5, #0]
 8001df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0a4      	b.n	8001f46 <_printf_i+0x1f6>
 8001dfc:	6820      	ldr	r0, [r4, #0]
 8001dfe:	6829      	ldr	r1, [r5, #0]
 8001e00:	0606      	lsls	r6, r0, #24
 8001e02:	f101 0304 	add.w	r3, r1, #4
 8001e06:	d50a      	bpl.n	8001e1e <_printf_i+0xce>
 8001e08:	680e      	ldr	r6, [r1, #0]
 8001e0a:	602b      	str	r3, [r5, #0]
 8001e0c:	2e00      	cmp	r6, #0
 8001e0e:	da03      	bge.n	8001e18 <_printf_i+0xc8>
 8001e10:	232d      	movs	r3, #45	; 0x2d
 8001e12:	4276      	negs	r6, r6
 8001e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e18:	230a      	movs	r3, #10
 8001e1a:	485e      	ldr	r0, [pc, #376]	; (8001f94 <_printf_i+0x244>)
 8001e1c:	e019      	b.n	8001e52 <_printf_i+0x102>
 8001e1e:	680e      	ldr	r6, [r1, #0]
 8001e20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e24:	602b      	str	r3, [r5, #0]
 8001e26:	bf18      	it	ne
 8001e28:	b236      	sxthne	r6, r6
 8001e2a:	e7ef      	b.n	8001e0c <_printf_i+0xbc>
 8001e2c:	682b      	ldr	r3, [r5, #0]
 8001e2e:	6820      	ldr	r0, [r4, #0]
 8001e30:	1d19      	adds	r1, r3, #4
 8001e32:	6029      	str	r1, [r5, #0]
 8001e34:	0601      	lsls	r1, r0, #24
 8001e36:	d501      	bpl.n	8001e3c <_printf_i+0xec>
 8001e38:	681e      	ldr	r6, [r3, #0]
 8001e3a:	e002      	b.n	8001e42 <_printf_i+0xf2>
 8001e3c:	0646      	lsls	r6, r0, #25
 8001e3e:	d5fb      	bpl.n	8001e38 <_printf_i+0xe8>
 8001e40:	881e      	ldrh	r6, [r3, #0]
 8001e42:	2f6f      	cmp	r7, #111	; 0x6f
 8001e44:	bf0c      	ite	eq
 8001e46:	2308      	moveq	r3, #8
 8001e48:	230a      	movne	r3, #10
 8001e4a:	4852      	ldr	r0, [pc, #328]	; (8001f94 <_printf_i+0x244>)
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001e52:	6865      	ldr	r5, [r4, #4]
 8001e54:	2d00      	cmp	r5, #0
 8001e56:	bfa8      	it	ge
 8001e58:	6821      	ldrge	r1, [r4, #0]
 8001e5a:	60a5      	str	r5, [r4, #8]
 8001e5c:	bfa4      	itt	ge
 8001e5e:	f021 0104 	bicge.w	r1, r1, #4
 8001e62:	6021      	strge	r1, [r4, #0]
 8001e64:	b90e      	cbnz	r6, 8001e6a <_printf_i+0x11a>
 8001e66:	2d00      	cmp	r5, #0
 8001e68:	d04d      	beq.n	8001f06 <_printf_i+0x1b6>
 8001e6a:	4615      	mov	r5, r2
 8001e6c:	fbb6 f1f3 	udiv	r1, r6, r3
 8001e70:	fb03 6711 	mls	r7, r3, r1, r6
 8001e74:	5dc7      	ldrb	r7, [r0, r7]
 8001e76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001e7a:	4637      	mov	r7, r6
 8001e7c:	42bb      	cmp	r3, r7
 8001e7e:	460e      	mov	r6, r1
 8001e80:	d9f4      	bls.n	8001e6c <_printf_i+0x11c>
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d10b      	bne.n	8001e9e <_printf_i+0x14e>
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	07de      	lsls	r6, r3, #31
 8001e8a:	d508      	bpl.n	8001e9e <_printf_i+0x14e>
 8001e8c:	6923      	ldr	r3, [r4, #16]
 8001e8e:	6861      	ldr	r1, [r4, #4]
 8001e90:	4299      	cmp	r1, r3
 8001e92:	bfde      	ittt	le
 8001e94:	2330      	movle	r3, #48	; 0x30
 8001e96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001e9a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001e9e:	1b52      	subs	r2, r2, r5
 8001ea0:	6122      	str	r2, [r4, #16]
 8001ea2:	464b      	mov	r3, r9
 8001ea4:	4621      	mov	r1, r4
 8001ea6:	4640      	mov	r0, r8
 8001ea8:	f8cd a000 	str.w	sl, [sp]
 8001eac:	aa03      	add	r2, sp, #12
 8001eae:	f7ff fedf 	bl	8001c70 <_printf_common>
 8001eb2:	3001      	adds	r0, #1
 8001eb4:	d14c      	bne.n	8001f50 <_printf_i+0x200>
 8001eb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eba:	b004      	add	sp, #16
 8001ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ec0:	4834      	ldr	r0, [pc, #208]	; (8001f94 <_printf_i+0x244>)
 8001ec2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001ec6:	6829      	ldr	r1, [r5, #0]
 8001ec8:	6823      	ldr	r3, [r4, #0]
 8001eca:	f851 6b04 	ldr.w	r6, [r1], #4
 8001ece:	6029      	str	r1, [r5, #0]
 8001ed0:	061d      	lsls	r5, r3, #24
 8001ed2:	d514      	bpl.n	8001efe <_printf_i+0x1ae>
 8001ed4:	07df      	lsls	r7, r3, #31
 8001ed6:	bf44      	itt	mi
 8001ed8:	f043 0320 	orrmi.w	r3, r3, #32
 8001edc:	6023      	strmi	r3, [r4, #0]
 8001ede:	b91e      	cbnz	r6, 8001ee8 <_printf_i+0x198>
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	f023 0320 	bic.w	r3, r3, #32
 8001ee6:	6023      	str	r3, [r4, #0]
 8001ee8:	2310      	movs	r3, #16
 8001eea:	e7af      	b.n	8001e4c <_printf_i+0xfc>
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	f043 0320 	orr.w	r3, r3, #32
 8001ef2:	6023      	str	r3, [r4, #0]
 8001ef4:	2378      	movs	r3, #120	; 0x78
 8001ef6:	4828      	ldr	r0, [pc, #160]	; (8001f98 <_printf_i+0x248>)
 8001ef8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001efc:	e7e3      	b.n	8001ec6 <_printf_i+0x176>
 8001efe:	0659      	lsls	r1, r3, #25
 8001f00:	bf48      	it	mi
 8001f02:	b2b6      	uxthmi	r6, r6
 8001f04:	e7e6      	b.n	8001ed4 <_printf_i+0x184>
 8001f06:	4615      	mov	r5, r2
 8001f08:	e7bb      	b.n	8001e82 <_printf_i+0x132>
 8001f0a:	682b      	ldr	r3, [r5, #0]
 8001f0c:	6826      	ldr	r6, [r4, #0]
 8001f0e:	1d18      	adds	r0, r3, #4
 8001f10:	6961      	ldr	r1, [r4, #20]
 8001f12:	6028      	str	r0, [r5, #0]
 8001f14:	0635      	lsls	r5, r6, #24
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	d501      	bpl.n	8001f1e <_printf_i+0x1ce>
 8001f1a:	6019      	str	r1, [r3, #0]
 8001f1c:	e002      	b.n	8001f24 <_printf_i+0x1d4>
 8001f1e:	0670      	lsls	r0, r6, #25
 8001f20:	d5fb      	bpl.n	8001f1a <_printf_i+0x1ca>
 8001f22:	8019      	strh	r1, [r3, #0]
 8001f24:	2300      	movs	r3, #0
 8001f26:	4615      	mov	r5, r2
 8001f28:	6123      	str	r3, [r4, #16]
 8001f2a:	e7ba      	b.n	8001ea2 <_printf_i+0x152>
 8001f2c:	682b      	ldr	r3, [r5, #0]
 8001f2e:	2100      	movs	r1, #0
 8001f30:	1d1a      	adds	r2, r3, #4
 8001f32:	602a      	str	r2, [r5, #0]
 8001f34:	681d      	ldr	r5, [r3, #0]
 8001f36:	6862      	ldr	r2, [r4, #4]
 8001f38:	4628      	mov	r0, r5
 8001f3a:	f000 f8d9 	bl	80020f0 <memchr>
 8001f3e:	b108      	cbz	r0, 8001f44 <_printf_i+0x1f4>
 8001f40:	1b40      	subs	r0, r0, r5
 8001f42:	6060      	str	r0, [r4, #4]
 8001f44:	6863      	ldr	r3, [r4, #4]
 8001f46:	6123      	str	r3, [r4, #16]
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f4e:	e7a8      	b.n	8001ea2 <_printf_i+0x152>
 8001f50:	462a      	mov	r2, r5
 8001f52:	4649      	mov	r1, r9
 8001f54:	4640      	mov	r0, r8
 8001f56:	6923      	ldr	r3, [r4, #16]
 8001f58:	47d0      	blx	sl
 8001f5a:	3001      	adds	r0, #1
 8001f5c:	d0ab      	beq.n	8001eb6 <_printf_i+0x166>
 8001f5e:	6823      	ldr	r3, [r4, #0]
 8001f60:	079b      	lsls	r3, r3, #30
 8001f62:	d413      	bmi.n	8001f8c <_printf_i+0x23c>
 8001f64:	68e0      	ldr	r0, [r4, #12]
 8001f66:	9b03      	ldr	r3, [sp, #12]
 8001f68:	4298      	cmp	r0, r3
 8001f6a:	bfb8      	it	lt
 8001f6c:	4618      	movlt	r0, r3
 8001f6e:	e7a4      	b.n	8001eba <_printf_i+0x16a>
 8001f70:	2301      	movs	r3, #1
 8001f72:	4632      	mov	r2, r6
 8001f74:	4649      	mov	r1, r9
 8001f76:	4640      	mov	r0, r8
 8001f78:	47d0      	blx	sl
 8001f7a:	3001      	adds	r0, #1
 8001f7c:	d09b      	beq.n	8001eb6 <_printf_i+0x166>
 8001f7e:	3501      	adds	r5, #1
 8001f80:	68e3      	ldr	r3, [r4, #12]
 8001f82:	9903      	ldr	r1, [sp, #12]
 8001f84:	1a5b      	subs	r3, r3, r1
 8001f86:	42ab      	cmp	r3, r5
 8001f88:	dcf2      	bgt.n	8001f70 <_printf_i+0x220>
 8001f8a:	e7eb      	b.n	8001f64 <_printf_i+0x214>
 8001f8c:	2500      	movs	r5, #0
 8001f8e:	f104 0619 	add.w	r6, r4, #25
 8001f92:	e7f5      	b.n	8001f80 <_printf_i+0x230>
 8001f94:	08002219 	.word	0x08002219
 8001f98:	0800222a 	.word	0x0800222a

08001f9c <_sbrk_r>:
 8001f9c:	b538      	push	{r3, r4, r5, lr}
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	4d05      	ldr	r5, [pc, #20]	; (8001fb8 <_sbrk_r+0x1c>)
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	4608      	mov	r0, r1
 8001fa6:	602b      	str	r3, [r5, #0]
 8001fa8:	f7fe fade 	bl	8000568 <_sbrk>
 8001fac:	1c43      	adds	r3, r0, #1
 8001fae:	d102      	bne.n	8001fb6 <_sbrk_r+0x1a>
 8001fb0:	682b      	ldr	r3, [r5, #0]
 8001fb2:	b103      	cbz	r3, 8001fb6 <_sbrk_r+0x1a>
 8001fb4:	6023      	str	r3, [r4, #0]
 8001fb6:	bd38      	pop	{r3, r4, r5, pc}
 8001fb8:	200000a0 	.word	0x200000a0

08001fbc <__sread>:
 8001fbc:	b510      	push	{r4, lr}
 8001fbe:	460c      	mov	r4, r1
 8001fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fc4:	f000 f8ae 	bl	8002124 <_read_r>
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	bfab      	itete	ge
 8001fcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001fce:	89a3      	ldrhlt	r3, [r4, #12]
 8001fd0:	181b      	addge	r3, r3, r0
 8001fd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001fd6:	bfac      	ite	ge
 8001fd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001fda:	81a3      	strhlt	r3, [r4, #12]
 8001fdc:	bd10      	pop	{r4, pc}

08001fde <__swrite>:
 8001fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fe2:	461f      	mov	r7, r3
 8001fe4:	898b      	ldrh	r3, [r1, #12]
 8001fe6:	4605      	mov	r5, r0
 8001fe8:	05db      	lsls	r3, r3, #23
 8001fea:	460c      	mov	r4, r1
 8001fec:	4616      	mov	r6, r2
 8001fee:	d505      	bpl.n	8001ffc <__swrite+0x1e>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ff8:	f000 f868 	bl	80020cc <_lseek_r>
 8001ffc:	89a3      	ldrh	r3, [r4, #12]
 8001ffe:	4632      	mov	r2, r6
 8002000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002004:	81a3      	strh	r3, [r4, #12]
 8002006:	4628      	mov	r0, r5
 8002008:	463b      	mov	r3, r7
 800200a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800200e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002012:	f000 b817 	b.w	8002044 <_write_r>

08002016 <__sseek>:
 8002016:	b510      	push	{r4, lr}
 8002018:	460c      	mov	r4, r1
 800201a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800201e:	f000 f855 	bl	80020cc <_lseek_r>
 8002022:	1c43      	adds	r3, r0, #1
 8002024:	89a3      	ldrh	r3, [r4, #12]
 8002026:	bf15      	itete	ne
 8002028:	6560      	strne	r0, [r4, #84]	; 0x54
 800202a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800202e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002032:	81a3      	strheq	r3, [r4, #12]
 8002034:	bf18      	it	ne
 8002036:	81a3      	strhne	r3, [r4, #12]
 8002038:	bd10      	pop	{r4, pc}

0800203a <__sclose>:
 800203a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800203e:	f000 b813 	b.w	8002068 <_close_r>
	...

08002044 <_write_r>:
 8002044:	b538      	push	{r3, r4, r5, lr}
 8002046:	4604      	mov	r4, r0
 8002048:	4608      	mov	r0, r1
 800204a:	4611      	mov	r1, r2
 800204c:	2200      	movs	r2, #0
 800204e:	4d05      	ldr	r5, [pc, #20]	; (8002064 <_write_r+0x20>)
 8002050:	602a      	str	r2, [r5, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	f7fe f9bc 	bl	80003d0 <_write>
 8002058:	1c43      	adds	r3, r0, #1
 800205a:	d102      	bne.n	8002062 <_write_r+0x1e>
 800205c:	682b      	ldr	r3, [r5, #0]
 800205e:	b103      	cbz	r3, 8002062 <_write_r+0x1e>
 8002060:	6023      	str	r3, [r4, #0]
 8002062:	bd38      	pop	{r3, r4, r5, pc}
 8002064:	200000a0 	.word	0x200000a0

08002068 <_close_r>:
 8002068:	b538      	push	{r3, r4, r5, lr}
 800206a:	2300      	movs	r3, #0
 800206c:	4d05      	ldr	r5, [pc, #20]	; (8002084 <_close_r+0x1c>)
 800206e:	4604      	mov	r4, r0
 8002070:	4608      	mov	r0, r1
 8002072:	602b      	str	r3, [r5, #0]
 8002074:	f7fe fa48 	bl	8000508 <_close>
 8002078:	1c43      	adds	r3, r0, #1
 800207a:	d102      	bne.n	8002082 <_close_r+0x1a>
 800207c:	682b      	ldr	r3, [r5, #0]
 800207e:	b103      	cbz	r3, 8002082 <_close_r+0x1a>
 8002080:	6023      	str	r3, [r4, #0]
 8002082:	bd38      	pop	{r3, r4, r5, pc}
 8002084:	200000a0 	.word	0x200000a0

08002088 <_fstat_r>:
 8002088:	b538      	push	{r3, r4, r5, lr}
 800208a:	2300      	movs	r3, #0
 800208c:	4d06      	ldr	r5, [pc, #24]	; (80020a8 <_fstat_r+0x20>)
 800208e:	4604      	mov	r4, r0
 8002090:	4608      	mov	r0, r1
 8002092:	4611      	mov	r1, r2
 8002094:	602b      	str	r3, [r5, #0]
 8002096:	f7fe fa42 	bl	800051e <_fstat>
 800209a:	1c43      	adds	r3, r0, #1
 800209c:	d102      	bne.n	80020a4 <_fstat_r+0x1c>
 800209e:	682b      	ldr	r3, [r5, #0]
 80020a0:	b103      	cbz	r3, 80020a4 <_fstat_r+0x1c>
 80020a2:	6023      	str	r3, [r4, #0]
 80020a4:	bd38      	pop	{r3, r4, r5, pc}
 80020a6:	bf00      	nop
 80020a8:	200000a0 	.word	0x200000a0

080020ac <_isatty_r>:
 80020ac:	b538      	push	{r3, r4, r5, lr}
 80020ae:	2300      	movs	r3, #0
 80020b0:	4d05      	ldr	r5, [pc, #20]	; (80020c8 <_isatty_r+0x1c>)
 80020b2:	4604      	mov	r4, r0
 80020b4:	4608      	mov	r0, r1
 80020b6:	602b      	str	r3, [r5, #0]
 80020b8:	f7fe fa40 	bl	800053c <_isatty>
 80020bc:	1c43      	adds	r3, r0, #1
 80020be:	d102      	bne.n	80020c6 <_isatty_r+0x1a>
 80020c0:	682b      	ldr	r3, [r5, #0]
 80020c2:	b103      	cbz	r3, 80020c6 <_isatty_r+0x1a>
 80020c4:	6023      	str	r3, [r4, #0]
 80020c6:	bd38      	pop	{r3, r4, r5, pc}
 80020c8:	200000a0 	.word	0x200000a0

080020cc <_lseek_r>:
 80020cc:	b538      	push	{r3, r4, r5, lr}
 80020ce:	4604      	mov	r4, r0
 80020d0:	4608      	mov	r0, r1
 80020d2:	4611      	mov	r1, r2
 80020d4:	2200      	movs	r2, #0
 80020d6:	4d05      	ldr	r5, [pc, #20]	; (80020ec <_lseek_r+0x20>)
 80020d8:	602a      	str	r2, [r5, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	f7fe fa38 	bl	8000550 <_lseek>
 80020e0:	1c43      	adds	r3, r0, #1
 80020e2:	d102      	bne.n	80020ea <_lseek_r+0x1e>
 80020e4:	682b      	ldr	r3, [r5, #0]
 80020e6:	b103      	cbz	r3, 80020ea <_lseek_r+0x1e>
 80020e8:	6023      	str	r3, [r4, #0]
 80020ea:	bd38      	pop	{r3, r4, r5, pc}
 80020ec:	200000a0 	.word	0x200000a0

080020f0 <memchr>:
 80020f0:	4603      	mov	r3, r0
 80020f2:	b510      	push	{r4, lr}
 80020f4:	b2c9      	uxtb	r1, r1
 80020f6:	4402      	add	r2, r0
 80020f8:	4293      	cmp	r3, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	d101      	bne.n	8002102 <memchr+0x12>
 80020fe:	2000      	movs	r0, #0
 8002100:	e003      	b.n	800210a <memchr+0x1a>
 8002102:	7804      	ldrb	r4, [r0, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	428c      	cmp	r4, r1
 8002108:	d1f6      	bne.n	80020f8 <memchr+0x8>
 800210a:	bd10      	pop	{r4, pc}

0800210c <__malloc_lock>:
 800210c:	4801      	ldr	r0, [pc, #4]	; (8002114 <__malloc_lock+0x8>)
 800210e:	f7ff bb13 	b.w	8001738 <__retarget_lock_acquire_recursive>
 8002112:	bf00      	nop
 8002114:	20000094 	.word	0x20000094

08002118 <__malloc_unlock>:
 8002118:	4801      	ldr	r0, [pc, #4]	; (8002120 <__malloc_unlock+0x8>)
 800211a:	f7ff bb0e 	b.w	800173a <__retarget_lock_release_recursive>
 800211e:	bf00      	nop
 8002120:	20000094 	.word	0x20000094

08002124 <_read_r>:
 8002124:	b538      	push	{r3, r4, r5, lr}
 8002126:	4604      	mov	r4, r0
 8002128:	4608      	mov	r0, r1
 800212a:	4611      	mov	r1, r2
 800212c:	2200      	movs	r2, #0
 800212e:	4d05      	ldr	r5, [pc, #20]	; (8002144 <_read_r+0x20>)
 8002130:	602a      	str	r2, [r5, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	f7fe f9cb 	bl	80004ce <_read>
 8002138:	1c43      	adds	r3, r0, #1
 800213a:	d102      	bne.n	8002142 <_read_r+0x1e>
 800213c:	682b      	ldr	r3, [r5, #0]
 800213e:	b103      	cbz	r3, 8002142 <_read_r+0x1e>
 8002140:	6023      	str	r3, [r4, #0]
 8002142:	bd38      	pop	{r3, r4, r5, pc}
 8002144:	200000a0 	.word	0x200000a0

08002148 <_init>:
 8002148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214a:	bf00      	nop
 800214c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800214e:	bc08      	pop	{r3}
 8002150:	469e      	mov	lr, r3
 8002152:	4770      	bx	lr

08002154 <_fini>:
 8002154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002156:	bf00      	nop
 8002158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800215a:	bc08      	pop	{r3}
 800215c:	469e      	mov	lr, r3
 800215e:	4770      	bx	lr
