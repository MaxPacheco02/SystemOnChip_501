
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a80  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08002b90  08002b90  00012b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c54  08002c54  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002c54  08002c54  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c54  08002c54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c54  08002c54  00012c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08002ccc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002ccc  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003179  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ff7  00000000  00000000  00023212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a0  00000000  00000000  00024210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f8  00000000  00000000  000246b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017572  00000000  00000000  00024aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000054a9  00000000  00000000  0003c01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080c95  00000000  00000000  000414c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2158  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001998  00000000  00000000  000c21a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08002b78 	.word	0x08002b78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08002b78 	.word	0x08002b78

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_f2iz>:
 8000af4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000af8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000afc:	d30f      	bcc.n	8000b1e <__aeabi_f2iz+0x2a>
 8000afe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b06:	d90d      	bls.n	8000b24 <__aeabi_f2iz+0x30>
 8000b08:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b10:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b14:	fa23 f002 	lsr.w	r0, r3, r2
 8000b18:	bf18      	it	ne
 8000b1a:	4240      	negne	r0, r0
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	4770      	bx	lr
 8000b24:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b28:	d101      	bne.n	8000b2e <__aeabi_f2iz+0x3a>
 8000b2a:	0242      	lsls	r2, r0, #9
 8000b2c:	d105      	bne.n	8000b3a <__aeabi_f2iz+0x46>
 8000b2e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b32:	bf08      	it	eq
 8000b34:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_f2uiz>:
 8000b40:	0042      	lsls	r2, r0, #1
 8000b42:	d20e      	bcs.n	8000b62 <__aeabi_f2uiz+0x22>
 8000b44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b48:	d30b      	bcc.n	8000b62 <__aeabi_f2uiz+0x22>
 8000b4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b52:	d409      	bmi.n	8000b68 <__aeabi_f2uiz+0x28>
 8000b54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr
 8000b68:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b6c:	d101      	bne.n	8000b72 <__aeabi_f2uiz+0x32>
 8000b6e:	0242      	lsls	r2, r0, #9
 8000b70:	d102      	bne.n	8000b78 <__aeabi_f2uiz+0x38>
 8000b72:	f04f 30ff 	mov.w	r0, #4294967295
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b86:	f000 fadf 	bl	8001148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8a:	f000 f867 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8e:	f000 f8a7 	bl	8000ce0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init();
 8000b92:	f000 f8df 	bl	8000d54 <USER_RCC_Init>
  USER_GPIO_Init();
 8000b96:	f000 f8f7 	bl	8000d88 <USER_GPIO_Init>
  USER_ADC_Init();
 8000b9a:	f000 f91b 	bl	8000dd4 <USER_ADC_Init>
  USER_ADC_Calibration();
 8000b9e:	f000 f94d 	bl	8000e3c <USER_ADC_Calibration>
  USER_USART2_Init();
 8000ba2:	f000 f973 	bl	8000e8c <USER_USART2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ADC1->CR2	|=	 ADC_CR2_ADON;//	starts the conversion
 8000ba6:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <main+0xc8>)
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	4a27      	ldr	r2, [pc, #156]	; (8000c48 <main+0xc8>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6093      	str	r3, [r2, #8]
  while (1)
  {
      dataADC = USER_ADC_Read( );
 8000bb2:	f000 f959 	bl	8000e68 <USER_ADC_Read>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	81fb      	strh	r3, [r7, #14]
      //v = (uint8_t)(dataADC*3.3/4096);
      v = (float)(dataADC*3.3/4096);
 8000bba:	89fb      	ldrh	r3, [r7, #14]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fccd 	bl	800055c <__aeabi_i2d>
 8000bc2:	a31f      	add	r3, pc, #124	; (adr r3, 8000c40 <main+0xc0>)
 8000bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc8:	f7ff fd32 	bl	8000630 <__aeabi_dmul>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f04f 0200 	mov.w	r2, #0
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <main+0xcc>)
 8000bda:	f7ff fe53 	bl	8000884 <__aeabi_ddiv>
 8000bde:	4602      	mov	r2, r0
 8000be0:	460b      	mov	r3, r1
 8000be2:	4610      	mov	r0, r2
 8000be4:	4619      	mov	r1, r3
 8000be6:	f7ff ff35 	bl	8000a54 <__aeabi_d2f>
 8000bea:	4603      	mov	r3, r0
 8000bec:	60bb      	str	r3, [r7, #8]
      a = v;
 8000bee:	68b8      	ldr	r0, [r7, #8]
 8000bf0:	f7ff ffa6 	bl	8000b40 <__aeabi_f2uiz>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	71fb      	strb	r3, [r7, #7]
      b = (int8_t)(v* 1000)%1000;
 8000bf8:	4915      	ldr	r1, [pc, #84]	; (8000c50 <main+0xd0>)
 8000bfa:	68b8      	ldr	r0, [r7, #8]
 8000bfc:	f7ff faa8 	bl	8000150 <__aeabi_fmul>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff76 	bl	8000af4 <__aeabi_f2iz>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	b25b      	sxtb	r3, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <main+0xd4>)
 8000c10:	fb83 1302 	smull	r1, r3, r3, r2
 8000c14:	1199      	asrs	r1, r3, #6
 8000c16:	17d3      	asrs	r3, r2, #31
 8000c18:	1acb      	subs	r3, r1, r3
 8000c1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c1e:	fb01 f303 	mul.w	r3, r1, r3
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	71bb      	strb	r3, [r7, #6]
      printf("%d.%3d\r\n",a,b);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	79ba      	ldrb	r2, [r7, #6]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480a      	ldr	r0, [pc, #40]	; (8000c58 <main+0xd8>)
 8000c2e:	f001 f80f 	bl	8001c50 <iprintf>
	  HAL_Delay(1000);
 8000c32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c36:	f000 fae9 	bl	800120c <HAL_Delay>
      dataADC = USER_ADC_Read( );
 8000c3a:	e7ba      	b.n	8000bb2 <main+0x32>
 8000c3c:	f3af 8000 	nop.w
 8000c40:	66666666 	.word	0x66666666
 8000c44:	400a6666 	.word	0x400a6666
 8000c48:	40012400 	.word	0x40012400
 8000c4c:	40b00000 	.word	0x40b00000
 8000c50:	447a0000 	.word	0x447a0000
 8000c54:	10624dd3 	.word	0x10624dd3
 8000c58:	08002b90 	.word	0x08002b90

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b090      	sub	sp, #64	; 0x40
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 0318 	add.w	r3, r7, #24
 8000c66:	2228      	movs	r2, #40	; 0x28
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 ffe8 	bl	8001c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c82:	2301      	movs	r3, #1
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c86:	2310      	movs	r3, #16
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c92:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c98:	f107 0318 	add.w	r3, r7, #24
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 fbbd 	bl	800141c <HAL_RCC_OscConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ca8:	f000 f91a 	bl	8000ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cac:	230f      	movs	r3, #15
 8000cae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 fe2a 	bl	8001920 <HAL_RCC_ClockConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000cd2:	f000 f905 	bl	8000ee0 <Error_Handler>
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	3740      	adds	r7, #64	; 0x40
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	4a19      	ldr	r2, [pc, #100]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000cec:	f043 0310 	orr.w	r3, r3, #16
 8000cf0:	6193      	str	r3, [r2, #24]
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000d04:	f043 0320 	orr.w	r3, r3, #32
 8000d08:	6193      	str	r3, [r2, #24]
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	f003 0320 	and.w	r3, r3, #32
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	6193      	str	r3, [r2, #24]
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	40021000 	.word	0x40021000

08000d54 <USER_RCC_Init>:

/* USER CODE BEGIN 4 */
void USER_RCC_Init(void){
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
	RCC->APB2ENR	|=	 RCC_APB2ENR_IOPAEN//	I/O port A clock enable
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <USER_RCC_Init+0x30>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <USER_RCC_Init+0x30>)
 8000d5e:	f443 7301 	orr.w	r3, r3, #516	; 0x204
 8000d62:	6193      	str	r3, [r2, #24]
		      	|	 RCC_APB2ENR_ADC1EN;//	ADC 1 clock enable
	RCC->CFGR	|=	 RCC_CFGR_ADCPRE;//	ADC prescaler 1:8 for 8 MHz
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <USER_RCC_Init+0x30>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <USER_RCC_Init+0x30>)
 8000d6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d6e:	6053      	str	r3, [r2, #4]

	RCC->APB1ENR	|=	 RCC_APB1ENR_USART2EN;//  	USART2 clock enable
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <USER_RCC_Init+0x30>)
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	4a03      	ldr	r2, [pc, #12]	; (8000d84 <USER_RCC_Init+0x30>)
 8000d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7a:	61d3      	str	r3, [r2, #28]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40021000 	.word	0x40021000

08000d88 <USER_GPIO_Init>:

void USER_GPIO_Init(void){
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
	//PA0 (ADC12_IN0) as analog
	GPIOA->CRL	&=	~GPIO_CRL_CNF0 & ~GPIO_CRL_MODE0;
 8000d8c:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <USER_GPIO_Init+0x48>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <USER_GPIO_Init+0x48>)
 8000d92:	f023 030f 	bic.w	r3, r3, #15
 8000d96:	6013      	str	r3, [r2, #0]

	//pin PA2 (USART2_TX) as alternate function output push-pull, max speed 10MHz
	GPIOA->CRL	&=	~GPIO_CRL_CNF2_0 & ~GPIO_CRL_MODE2_1;
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <USER_GPIO_Init+0x48>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <USER_GPIO_Init+0x48>)
 8000d9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000da2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF2_1 | GPIO_CRL_MODE2_0;
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <USER_GPIO_Init+0x48>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a09      	ldr	r2, [pc, #36]	; (8000dd0 <USER_GPIO_Init+0x48>)
 8000daa:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
 8000dae:	6013      	str	r3, [r2, #0]

	//pin PA3 (USART_RX) as input pull-up
	GPIOA->CRL	&=	~GPIO_CRL_CNF3_0 & ~GPIO_CRL_MODE3;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <USER_GPIO_Init+0x48>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <USER_GPIO_Init+0x48>)
 8000db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000dba:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF3_1;
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <USER_GPIO_Init+0x48>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <USER_GPIO_Init+0x48>)
 8000dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	40010800 	.word	0x40010800

08000dd4 <USER_ADC_Init>:
void USER_ADC_Init(void){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	ADC1->CR1	&=	~ADC_CR1_DUALMOD;//	independent mode
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <USER_ADC_Init+0x64>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <USER_ADC_Init+0x64>)
 8000dde:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000de2:	6053      	str	r3, [r2, #4]
	ADC1->CR2	&=	~ADC_CR2_ALIGN;//	right alignment for the result
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <USER_ADC_Init+0x64>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <USER_ADC_Init+0x64>)
 8000dea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dee:	6093      	str	r3, [r2, #8]
	ADC1->CR2	|=	 ADC_CR2_CONT;//	continuous conversion mode
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <USER_ADC_Init+0x64>)
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <USER_ADC_Init+0x64>)
 8000df6:	f043 0302 	orr.w	r3, r3, #2
 8000dfa:	6093      	str	r3, [r2, #8]
	ADC1->SMPR2	&=	~ADC_SMPR2_SMP0;//	1.5 cycles channel sample time
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <USER_ADC_Init+0x64>)
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <USER_ADC_Init+0x64>)
 8000e02:	f023 0307 	bic.w	r3, r3, #7
 8000e06:	6113      	str	r3, [r2, #16]
	ADC1->SQR1	&=	~ADC_SQR1_L;//		1 conversion on regular channels
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <USER_ADC_Init+0x64>)
 8000e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <USER_ADC_Init+0x64>)
 8000e0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000e12:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR3 	&=	~ADC_SQR3_SQ1;//	first and only conversion in Ch0
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <USER_ADC_Init+0x64>)
 8000e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e18:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <USER_ADC_Init+0x64>)
 8000e1a:	f023 031f 	bic.w	r3, r3, #31
 8000e1e:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->CR2	|=	 ADC_CR2_ADON;//	ADC enabled
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <USER_ADC_Init+0x64>)
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <USER_ADC_Init+0x64>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6093      	str	r3, [r2, #8]
	HAL_Delay(1);//					tstab(1us) after ADC enabled, real 1ms
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f000 f9ed 	bl	800120c <HAL_Delay>
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40012400 	.word	0x40012400

08000e3c <USER_ADC_Calibration>:
void USER_ADC_Calibration(void){
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
	ADC1->CR2	|=	 ADC_CR2_CAL;//		start calibration
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <USER_ADC_Calibration+0x28>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <USER_ADC_Calibration+0x28>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	6093      	str	r3, [r2, #8]
	while( ADC1->CR2 & ADC_CR2_CAL );//		wait until calibration is done
 8000e4c:	bf00      	nop
 8000e4e:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <USER_ADC_Calibration+0x28>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f9      	bne.n	8000e4e <USER_ADC_Calibration+0x12>
}
 8000e5a:	bf00      	nop
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	40012400 	.word	0x40012400

08000e68 <USER_ADC_Read>:
uint16_t USER_ADC_Read( void ){
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
	while( !( ADC1->SR & ADC_SR_EOC ) );//		wait until conversion is done
 8000e6c:	bf00      	nop
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <USER_ADC_Read+0x20>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0f9      	beq.n	8000e6e <USER_ADC_Read+0x6>
	return (uint16_t)ADC1->DR;//			return ADC data
 8000e7a:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <USER_ADC_Read+0x20>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	b29b      	uxth	r3, r3
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	40012400 	.word	0x40012400

08000e8c <USER_USART2_Init>:

void USER_USART2_Init(void){
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
	USART2->CR1	|=	 USART_CR1_UE;//		USART enabled
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <USER_USART2_Init+0x50>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	4a11      	ldr	r2, [pc, #68]	; (8000edc <USER_USART2_Init+0x50>)
 8000e96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e9a:	60d3      	str	r3, [r2, #12]
	USART2->CR1	&=	~USART_CR1_M//		  	1 start bit, 8 data bits
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <USER_USART2_Init+0x50>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <USER_USART2_Init+0x50>)
 8000ea2:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 8000ea6:	60d3      	str	r3, [r2, #12]
			&	~USART_CR1_PCE;//		parity control disabled
	USART2->CR2	&=	~USART_CR2_STOP;//  		1 stop bit
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <USER_USART2_Init+0x50>)
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <USER_USART2_Init+0x50>)
 8000eae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000eb2:	6113      	str	r3, [r2, #16]
	//USART2->BRR	 =	 0xD05;//			9600 bps -> 208.33,
	//USARTDIV = 32*10^6/(16*9600)
	//NEW USARTDIV = 32*10^6/(16*115200)=17.361
	//BRR = [17->HEX=11][.361*16->HEX=6]=116
	USART2->BRR = 0x116;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <USER_USART2_Init+0x50>)
 8000eb6:	f44f 728b 	mov.w	r2, #278	; 0x116
 8000eba:	609a      	str	r2, [r3, #8]


	USART2->CR1	|=	 USART_CR1_TE;//		        transmitter enabled
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <USER_USART2_Init+0x50>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <USER_USART2_Init+0x50>)
 8000ec2:	f043 0308 	orr.w	r3, r3, #8
 8000ec6:	60d3      	str	r3, [r2, #12]
	USART2->CR1	|=	 USART_CR1_RE;//		        receiver enabled
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <USER_USART2_Init+0x50>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	4a03      	ldr	r2, [pc, #12]	; (8000edc <USER_USART2_Init+0x50>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	40004400 	.word	0x40004400

08000ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
}
 8000ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <Error_Handler+0x8>
	...

08000eec <_write>:
 */

#include "myprintf.h"
#include "main.h"

int _write(int file, char *ptr, int len){
 8000eec:	b480      	push	{r7}
 8000eee:	b087      	sub	sp, #28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	e00f      	b.n	8000f1e <_write+0x32>
		while( ( USART2->SR & USART_SR_TXE ) == 0 ){}
 8000efe:	bf00      	nop
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <_write+0x48>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0f9      	beq.n	8000f00 <_write+0x14>
		USART2->DR = *ptr++;
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	60ba      	str	r2, [r7, #8]
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <_write+0x48>)
 8000f16:	605a      	str	r2, [r3, #4]
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	dbeb      	blt.n	8000efe <_write+0x12>
	}
	return len;
 8000f26:	687b      	ldr	r3, [r7, #4]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	371c      	adds	r7, #28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40004400 	.word	0x40004400

08000f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_MspInit+0x5c>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <HAL_MspInit+0x5c>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6193      	str	r3, [r2, #24]
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_MspInit+0x5c>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <HAL_MspInit+0x5c>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <HAL_MspInit+0x5c>)
 8000f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f60:	61d3      	str	r3, [r2, #28]
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <HAL_MspInit+0x5c>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_MspInit+0x60>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_MspInit+0x60>)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40010000 	.word	0x40010000

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <MemManage_Handler+0x4>

08000fae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr

08000fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe2:	f000 f8f7 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	e00a      	b.n	8001012 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ffc:	f3af 8000 	nop.w
 8001000:	4601      	mov	r1, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	60ba      	str	r2, [r7, #8]
 8001008:	b2ca      	uxtb	r2, r1
 800100a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3301      	adds	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	429a      	cmp	r2, r3
 8001018:	dbf0      	blt.n	8000ffc <_read+0x12>
  }

  return len;
 800101a:	687b      	ldr	r3, [r7, #4]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr

0800103a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800104a:	605a      	str	r2, [r3, #4]
  return 0;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <_isatty>:

int _isatty(int file)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001060:	2301      	movs	r3, #1
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800108c:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <_sbrk+0x5c>)
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <_sbrk+0x60>)
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <_sbrk+0x64>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	; (80010ec <_sbrk+0x68>)
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d207      	bcs.n	80010c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b4:	f000 fd9a 	bl	8001bec <__errno>
 80010b8:	4603      	mov	r3, r0
 80010ba:	220c      	movs	r2, #12
 80010bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	e009      	b.n	80010d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <_sbrk+0x64>)
 80010d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20005000 	.word	0x20005000
 80010e4:	00000400 	.word	0x00000400
 80010e8:	2000008c 	.word	0x2000008c
 80010ec:	200000a8 	.word	0x200000a8

080010f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010fe:	490d      	ldr	r1, [pc, #52]	; (8001134 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001104:	e002      	b.n	800110c <LoopCopyDataInit>

08001106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110a:	3304      	adds	r3, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800110c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001110:	d3f9      	bcc.n	8001106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001114:	4c0a      	ldr	r4, [pc, #40]	; (8001140 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001118:	e001      	b.n	800111e <LoopFillZerobss>

0800111a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800111c:	3204      	adds	r2, #4

0800111e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001120:	d3fb      	bcc.n	800111a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001122:	f7ff ffe5 	bl	80010f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001126:	f000 fd67 	bl	8001bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800112a:	f7ff fd29 	bl	8000b80 <main>
  bx lr
 800112e:	4770      	bx	lr
  ldr r0, =_sdata
 8001130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001134:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001138:	08002c5c 	.word	0x08002c5c
  ldr r2, =_sbss
 800113c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001140:	200000a4 	.word	0x200000a4

08001144 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC1_2_IRQHandler>
	...

08001148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_Init+0x28>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_Init+0x28>)
 8001152:	f043 0310 	orr.w	r3, r3, #16
 8001156:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001158:	2003      	movs	r0, #3
 800115a:	f000 f92b 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115e:	2000      	movs	r0, #0
 8001160:	f000 f808 	bl	8001174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001164:	f7ff fee8 	bl	8000f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40022000 	.word	0x40022000

08001174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_InitTick+0x54>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_InitTick+0x58>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f935 	bl	8001402 <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e00e      	b.n	80011c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d80a      	bhi.n	80011be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f000 f90b 	bl	80013ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b4:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <HAL_InitTick+0x5c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e000      	b.n	80011c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_IncTick+0x1c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <HAL_IncTick+0x20>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a03      	ldr	r2, [pc, #12]	; (80011f4 <HAL_IncTick+0x20>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000090 	.word	0x20000090

080011f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b02      	ldr	r3, [pc, #8]	; (8001208 <HAL_GetTick+0x10>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	20000090 	.word	0x20000090

0800120c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff fff0 	bl	80011f8 <HAL_GetTick>
 8001218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001224:	d005      	beq.n	8001232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_Delay+0x44>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001232:	bf00      	nop
 8001234:	f7ff ffe0 	bl	80011f8 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d8f7      	bhi.n	8001234 <HAL_Delay+0x28>
  {
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000008 	.word	0x20000008

08001254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001270:	4013      	ands	r3, r2
 8001272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800127c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001286:	4a04      	ldr	r2, [pc, #16]	; (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	60d3      	str	r3, [r2, #12]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <__NVIC_GetPriorityGrouping+0x18>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	f003 0307 	and.w	r3, r3, #7
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	; (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	; (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
         );
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001380:	d301      	bcc.n	8001386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <SysTick_Config+0x40>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138e:	210f      	movs	r1, #15
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f7ff ff90 	bl	80012b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <SysTick_Config+0x40>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SysTick_Config+0x40>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff49 	bl	8001254 <__NVIC_SetPriorityGrouping>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013dc:	f7ff ff5e 	bl	800129c <__NVIC_GetPriorityGrouping>
 80013e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	6978      	ldr	r0, [r7, #20]
 80013e8:	f7ff ff90 	bl	800130c <NVIC_EncodePriority>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff5f 	bl	80012b8 <__NVIC_SetPriority>
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffb0 	bl	8001370 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e272      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 8087 	beq.w	800154a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800143c:	4b92      	ldr	r3, [pc, #584]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	2b04      	cmp	r3, #4
 8001446:	d00c      	beq.n	8001462 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001448:	4b8f      	ldr	r3, [pc, #572]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	2b08      	cmp	r3, #8
 8001452:	d112      	bne.n	800147a <HAL_RCC_OscConfig+0x5e>
 8001454:	4b8c      	ldr	r3, [pc, #560]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001460:	d10b      	bne.n	800147a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001462:	4b89      	ldr	r3, [pc, #548]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d06c      	beq.n	8001548 <HAL_RCC_OscConfig+0x12c>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d168      	bne.n	8001548 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e24c      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001482:	d106      	bne.n	8001492 <HAL_RCC_OscConfig+0x76>
 8001484:	4b80      	ldr	r3, [pc, #512]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a7f      	ldr	r2, [pc, #508]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 800148a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	e02e      	b.n	80014f0 <HAL_RCC_OscConfig+0xd4>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x98>
 800149a:	4b7b      	ldr	r3, [pc, #492]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a7a      	ldr	r2, [pc, #488]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b78      	ldr	r3, [pc, #480]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a77      	ldr	r2, [pc, #476]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e01d      	b.n	80014f0 <HAL_RCC_OscConfig+0xd4>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0xbc>
 80014be:	4b72      	ldr	r3, [pc, #456]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a71      	ldr	r2, [pc, #452]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b6f      	ldr	r3, [pc, #444]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a6e      	ldr	r2, [pc, #440]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e00b      	b.n	80014f0 <HAL_RCC_OscConfig+0xd4>
 80014d8:	4b6b      	ldr	r3, [pc, #428]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a6a      	ldr	r2, [pc, #424]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b68      	ldr	r3, [pc, #416]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a67      	ldr	r2, [pc, #412]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fe7e 	bl	80011f8 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fe7a 	bl	80011f8 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e200      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	4b5d      	ldr	r3, [pc, #372]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0xe4>
 800151e:	e014      	b.n	800154a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fe6a 	bl	80011f8 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001528:	f7ff fe66 	bl	80011f8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	; 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e1ec      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153a:	4b53      	ldr	r3, [pc, #332]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x10c>
 8001546:	e000      	b.n	800154a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d063      	beq.n	800161e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001556:	4b4c      	ldr	r3, [pc, #304]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00b      	beq.n	800157a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001562:	4b49      	ldr	r3, [pc, #292]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	2b08      	cmp	r3, #8
 800156c:	d11c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x18c>
 800156e:	4b46      	ldr	r3, [pc, #280]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d116      	bne.n	80015a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157a:	4b43      	ldr	r3, [pc, #268]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <HAL_RCC_OscConfig+0x176>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d001      	beq.n	8001592 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e1c0      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001592:	4b3d      	ldr	r3, [pc, #244]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4939      	ldr	r1, [pc, #228]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a6:	e03a      	b.n	800161e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b0:	4b36      	ldr	r3, [pc, #216]	; (800168c <HAL_RCC_OscConfig+0x270>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b6:	f7ff fe1f 	bl	80011f8 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015be:	f7ff fe1b 	bl	80011f8 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e1a1      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d0:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015dc:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4927      	ldr	r1, [pc, #156]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]
 80015f0:	e015      	b.n	800161e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <HAL_RCC_OscConfig+0x270>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fdfe 	bl	80011f8 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001600:	f7ff fdfa 	bl	80011f8 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e180      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d03a      	beq.n	80016a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d019      	beq.n	8001666 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_RCC_OscConfig+0x274>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001638:	f7ff fdde 	bl	80011f8 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001640:	f7ff fdda 	bl	80011f8 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e160      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <HAL_RCC_OscConfig+0x26c>)
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800165e:	2001      	movs	r0, #1
 8001660:	f000 faa6 	bl	8001bb0 <RCC_Delay>
 8001664:	e01c      	b.n	80016a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_RCC_OscConfig+0x274>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166c:	f7ff fdc4 	bl	80011f8 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001672:	e00f      	b.n	8001694 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001674:	f7ff fdc0 	bl	80011f8 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d908      	bls.n	8001694 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e146      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000
 800168c:	42420000 	.word	0x42420000
 8001690:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001694:	4b92      	ldr	r3, [pc, #584]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1e9      	bne.n	8001674 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80a6 	beq.w	80017fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016b2:	4b8b      	ldr	r3, [pc, #556]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10d      	bne.n	80016da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016be:	4b88      	ldr	r3, [pc, #544]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	4a87      	ldr	r2, [pc, #540]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c8:	61d3      	str	r3, [r2, #28]
 80016ca:	4b85      	ldr	r3, [pc, #532]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d6:	2301      	movs	r3, #1
 80016d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016da:	4b82      	ldr	r3, [pc, #520]	; (80018e4 <HAL_RCC_OscConfig+0x4c8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d118      	bne.n	8001718 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016e6:	4b7f      	ldr	r3, [pc, #508]	; (80018e4 <HAL_RCC_OscConfig+0x4c8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a7e      	ldr	r2, [pc, #504]	; (80018e4 <HAL_RCC_OscConfig+0x4c8>)
 80016ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f2:	f7ff fd81 	bl	80011f8 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016fa:	f7ff fd7d 	bl	80011f8 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b64      	cmp	r3, #100	; 0x64
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e103      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170c:	4b75      	ldr	r3, [pc, #468]	; (80018e4 <HAL_RCC_OscConfig+0x4c8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d106      	bne.n	800172e <HAL_RCC_OscConfig+0x312>
 8001720:	4b6f      	ldr	r3, [pc, #444]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4a6e      	ldr	r2, [pc, #440]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6213      	str	r3, [r2, #32]
 800172c:	e02d      	b.n	800178a <HAL_RCC_OscConfig+0x36e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0x334>
 8001736:	4b6a      	ldr	r3, [pc, #424]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4a69      	ldr	r2, [pc, #420]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	6213      	str	r3, [r2, #32]
 8001742:	4b67      	ldr	r3, [pc, #412]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4a66      	ldr	r2, [pc, #408]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	f023 0304 	bic.w	r3, r3, #4
 800174c:	6213      	str	r3, [r2, #32]
 800174e:	e01c      	b.n	800178a <HAL_RCC_OscConfig+0x36e>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b05      	cmp	r3, #5
 8001756:	d10c      	bne.n	8001772 <HAL_RCC_OscConfig+0x356>
 8001758:	4b61      	ldr	r3, [pc, #388]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4a60      	ldr	r2, [pc, #384]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	6213      	str	r3, [r2, #32]
 8001764:	4b5e      	ldr	r3, [pc, #376]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4a5d      	ldr	r2, [pc, #372]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6213      	str	r3, [r2, #32]
 8001770:	e00b      	b.n	800178a <HAL_RCC_OscConfig+0x36e>
 8001772:	4b5b      	ldr	r3, [pc, #364]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	4a5a      	ldr	r2, [pc, #360]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	6213      	str	r3, [r2, #32]
 800177e:	4b58      	ldr	r3, [pc, #352]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4a57      	ldr	r2, [pc, #348]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	f023 0304 	bic.w	r3, r3, #4
 8001788:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d015      	beq.n	80017be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001792:	f7ff fd31 	bl	80011f8 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001798:	e00a      	b.n	80017b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179a:	f7ff fd2d 	bl	80011f8 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e0b1      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b0:	4b4b      	ldr	r3, [pc, #300]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0ee      	beq.n	800179a <HAL_RCC_OscConfig+0x37e>
 80017bc:	e014      	b.n	80017e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017be:	f7ff fd1b 	bl	80011f8 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c4:	e00a      	b.n	80017dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c6:	f7ff fd17 	bl	80011f8 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e09b      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017dc:	4b40      	ldr	r3, [pc, #256]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1ee      	bne.n	80017c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d105      	bne.n	80017fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ee:	4b3c      	ldr	r3, [pc, #240]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4a3b      	ldr	r2, [pc, #236]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 8087 	beq.w	8001912 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001804:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 030c 	and.w	r3, r3, #12
 800180c:	2b08      	cmp	r3, #8
 800180e:	d061      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d146      	bne.n	80018a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001818:	4b33      	ldr	r3, [pc, #204]	; (80018e8 <HAL_RCC_OscConfig+0x4cc>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff fceb 	bl	80011f8 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001826:	f7ff fce7 	bl	80011f8 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e06d      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f0      	bne.n	8001826 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800184c:	d108      	bne.n	8001860 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800184e:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	4921      	ldr	r1, [pc, #132]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a19      	ldr	r1, [r3, #32]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	430b      	orrs	r3, r1
 8001872:	491b      	ldr	r1, [pc, #108]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_RCC_OscConfig+0x4cc>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7ff fcbb 	bl	80011f8 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001886:	f7ff fcb7 	bl	80011f8 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e03d      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x46a>
 80018a4:	e035      	b.n	8001912 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_RCC_OscConfig+0x4cc>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff fca4 	bl	80011f8 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff fca0 	bl	80011f8 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e026      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x498>
 80018d2:	e01e      	b.n	8001912 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d107      	bne.n	80018ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e019      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40007000 	.word	0x40007000
 80018e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_RCC_OscConfig+0x500>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d106      	bne.n	800190e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d001      	beq.n	8001912 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40021000 	.word	0x40021000

08001920 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0d0      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001934:	4b6a      	ldr	r3, [pc, #424]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d910      	bls.n	8001964 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b67      	ldr	r3, [pc, #412]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 0207 	bic.w	r2, r3, #7
 800194a:	4965      	ldr	r1, [pc, #404]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b63      	ldr	r3, [pc, #396]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0b8      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d020      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800197c:	4b59      	ldr	r3, [pc, #356]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	4a58      	ldr	r2, [pc, #352]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001986:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001994:	4b53      	ldr	r3, [pc, #332]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4a52      	ldr	r2, [pc, #328]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800199e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a0:	4b50      	ldr	r3, [pc, #320]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	494d      	ldr	r1, [pc, #308]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d040      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d115      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e07f      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019de:	4b41      	ldr	r3, [pc, #260]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d109      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e073      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ee:	4b3d      	ldr	r3, [pc, #244]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e06b      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019fe:	4b39      	ldr	r3, [pc, #228]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f023 0203 	bic.w	r2, r3, #3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4936      	ldr	r1, [pc, #216]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a10:	f7ff fbf2 	bl	80011f8 <HAL_GetTick>
 8001a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	e00a      	b.n	8001a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a18:	f7ff fbee 	bl	80011f8 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e053      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 020c 	and.w	r2, r3, #12
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d1eb      	bne.n	8001a18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a40:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d210      	bcs.n	8001a70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 0207 	bic.w	r2, r3, #7
 8001a56:	4922      	ldr	r1, [pc, #136]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e032      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4916      	ldr	r1, [pc, #88]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d009      	beq.n	8001aae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aae:	f000 f821 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	490a      	ldr	r1, [pc, #40]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac0:	5ccb      	ldrb	r3, [r1, r3]
 8001ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac6:	4a09      	ldr	r2, [pc, #36]	; (8001aec <HAL_RCC_ClockConfig+0x1cc>)
 8001ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_RCC_ClockConfig+0x1d0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fb50 	bl	8001174 <HAL_InitTick>

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40022000 	.word	0x40022000
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	08002bac 	.word	0x08002bac
 8001aec:	20000000 	.word	0x20000000
 8001af0:	20000004 	.word	0x20000004

08001af4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af4:	b490      	push	{r4, r7}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001afa:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001afc:	1d3c      	adds	r4, r7, #4
 8001afe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b04:	f240 2301 	movw	r3, #513	; 0x201
 8001b08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b1e:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d002      	beq.n	8001b34 <HAL_RCC_GetSysClockFreq+0x40>
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d003      	beq.n	8001b3a <HAL_RCC_GetSysClockFreq+0x46>
 8001b32:	e02b      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b34:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b36:	623b      	str	r3, [r7, #32]
      break;
 8001b38:	e02b      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	0c9b      	lsrs	r3, r3, #18
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	3328      	adds	r3, #40	; 0x28
 8001b44:	443b      	add	r3, r7
 8001b46:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b4a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d012      	beq.n	8001b7c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	0c5b      	lsrs	r3, r3, #17
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	3328      	adds	r3, #40	; 0x28
 8001b62:	443b      	add	r3, r7
 8001b64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b6e:	fb03 f202 	mul.w	r2, r3, r2
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7a:	e004      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	623b      	str	r3, [r7, #32]
      break;
 8001b8a:	e002      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b8e:	623b      	str	r3, [r7, #32]
      break;
 8001b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b92:	6a3b      	ldr	r3, [r7, #32]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3728      	adds	r7, #40	; 0x28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc90      	pop	{r4, r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	08002b9c 	.word	0x08002b9c
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	007a1200 	.word	0x007a1200
 8001bac:	003d0900 	.word	0x003d0900

08001bb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <RCC_Delay+0x34>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <RCC_Delay+0x38>)
 8001bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc2:	0a5b      	lsrs	r3, r3, #9
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	fb02 f303 	mul.w	r3, r2, r3
 8001bca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bcc:	bf00      	nop
  }
  while (Delay --);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1e5a      	subs	r2, r3, #1
 8001bd2:	60fa      	str	r2, [r7, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f9      	bne.n	8001bcc <RCC_Delay+0x1c>
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	20000000 	.word	0x20000000
 8001be8:	10624dd3 	.word	0x10624dd3

08001bec <__errno>:
 8001bec:	4b01      	ldr	r3, [pc, #4]	; (8001bf4 <__errno+0x8>)
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	2000000c 	.word	0x2000000c

08001bf8 <__libc_init_array>:
 8001bf8:	b570      	push	{r4, r5, r6, lr}
 8001bfa:	2600      	movs	r6, #0
 8001bfc:	4d0c      	ldr	r5, [pc, #48]	; (8001c30 <__libc_init_array+0x38>)
 8001bfe:	4c0d      	ldr	r4, [pc, #52]	; (8001c34 <__libc_init_array+0x3c>)
 8001c00:	1b64      	subs	r4, r4, r5
 8001c02:	10a4      	asrs	r4, r4, #2
 8001c04:	42a6      	cmp	r6, r4
 8001c06:	d109      	bne.n	8001c1c <__libc_init_array+0x24>
 8001c08:	f000 ffb6 	bl	8002b78 <_init>
 8001c0c:	2600      	movs	r6, #0
 8001c0e:	4d0a      	ldr	r5, [pc, #40]	; (8001c38 <__libc_init_array+0x40>)
 8001c10:	4c0a      	ldr	r4, [pc, #40]	; (8001c3c <__libc_init_array+0x44>)
 8001c12:	1b64      	subs	r4, r4, r5
 8001c14:	10a4      	asrs	r4, r4, #2
 8001c16:	42a6      	cmp	r6, r4
 8001c18:	d105      	bne.n	8001c26 <__libc_init_array+0x2e>
 8001c1a:	bd70      	pop	{r4, r5, r6, pc}
 8001c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c20:	4798      	blx	r3
 8001c22:	3601      	adds	r6, #1
 8001c24:	e7ee      	b.n	8001c04 <__libc_init_array+0xc>
 8001c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c2a:	4798      	blx	r3
 8001c2c:	3601      	adds	r6, #1
 8001c2e:	e7f2      	b.n	8001c16 <__libc_init_array+0x1e>
 8001c30:	08002c54 	.word	0x08002c54
 8001c34:	08002c54 	.word	0x08002c54
 8001c38:	08002c54 	.word	0x08002c54
 8001c3c:	08002c58 	.word	0x08002c58

08001c40 <memset>:
 8001c40:	4603      	mov	r3, r0
 8001c42:	4402      	add	r2, r0
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d100      	bne.n	8001c4a <memset+0xa>
 8001c48:	4770      	bx	lr
 8001c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8001c4e:	e7f9      	b.n	8001c44 <memset+0x4>

08001c50 <iprintf>:
 8001c50:	b40f      	push	{r0, r1, r2, r3}
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <iprintf+0x2c>)
 8001c54:	b513      	push	{r0, r1, r4, lr}
 8001c56:	681c      	ldr	r4, [r3, #0]
 8001c58:	b124      	cbz	r4, 8001c64 <iprintf+0x14>
 8001c5a:	69a3      	ldr	r3, [r4, #24]
 8001c5c:	b913      	cbnz	r3, 8001c64 <iprintf+0x14>
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f000 f866 	bl	8001d30 <__sinit>
 8001c64:	ab05      	add	r3, sp, #20
 8001c66:	4620      	mov	r0, r4
 8001c68:	9a04      	ldr	r2, [sp, #16]
 8001c6a:	68a1      	ldr	r1, [r4, #8]
 8001c6c:	9301      	str	r3, [sp, #4]
 8001c6e:	f000 f9bb 	bl	8001fe8 <_vfiprintf_r>
 8001c72:	b002      	add	sp, #8
 8001c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c78:	b004      	add	sp, #16
 8001c7a:	4770      	bx	lr
 8001c7c:	2000000c 	.word	0x2000000c

08001c80 <std>:
 8001c80:	2300      	movs	r3, #0
 8001c82:	b510      	push	{r4, lr}
 8001c84:	4604      	mov	r4, r0
 8001c86:	e9c0 3300 	strd	r3, r3, [r0]
 8001c8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c8e:	6083      	str	r3, [r0, #8]
 8001c90:	8181      	strh	r1, [r0, #12]
 8001c92:	6643      	str	r3, [r0, #100]	; 0x64
 8001c94:	81c2      	strh	r2, [r0, #14]
 8001c96:	6183      	str	r3, [r0, #24]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	2208      	movs	r2, #8
 8001c9c:	305c      	adds	r0, #92	; 0x5c
 8001c9e:	f7ff ffcf 	bl	8001c40 <memset>
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <std+0x38>)
 8001ca4:	6224      	str	r4, [r4, #32]
 8001ca6:	6263      	str	r3, [r4, #36]	; 0x24
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <std+0x3c>)
 8001caa:	62a3      	str	r3, [r4, #40]	; 0x28
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <std+0x40>)
 8001cae:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <std+0x44>)
 8001cb2:	6323      	str	r3, [r4, #48]	; 0x30
 8001cb4:	bd10      	pop	{r4, pc}
 8001cb6:	bf00      	nop
 8001cb8:	08002595 	.word	0x08002595
 8001cbc:	080025b7 	.word	0x080025b7
 8001cc0:	080025ef 	.word	0x080025ef
 8001cc4:	08002613 	.word	0x08002613

08001cc8 <_cleanup_r>:
 8001cc8:	4901      	ldr	r1, [pc, #4]	; (8001cd0 <_cleanup_r+0x8>)
 8001cca:	f000 b8af 	b.w	8001e2c <_fwalk_reent>
 8001cce:	bf00      	nop
 8001cd0:	080028e5 	.word	0x080028e5

08001cd4 <__sfmoreglue>:
 8001cd4:	2268      	movs	r2, #104	; 0x68
 8001cd6:	b570      	push	{r4, r5, r6, lr}
 8001cd8:	1e4d      	subs	r5, r1, #1
 8001cda:	4355      	muls	r5, r2
 8001cdc:	460e      	mov	r6, r1
 8001cde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001ce2:	f000 f8e5 	bl	8001eb0 <_malloc_r>
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	b140      	cbz	r0, 8001cfc <__sfmoreglue+0x28>
 8001cea:	2100      	movs	r1, #0
 8001cec:	e9c0 1600 	strd	r1, r6, [r0]
 8001cf0:	300c      	adds	r0, #12
 8001cf2:	60a0      	str	r0, [r4, #8]
 8001cf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001cf8:	f7ff ffa2 	bl	8001c40 <memset>
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	bd70      	pop	{r4, r5, r6, pc}

08001d00 <__sfp_lock_acquire>:
 8001d00:	4801      	ldr	r0, [pc, #4]	; (8001d08 <__sfp_lock_acquire+0x8>)
 8001d02:	f000 b8b3 	b.w	8001e6c <__retarget_lock_acquire_recursive>
 8001d06:	bf00      	nop
 8001d08:	20000095 	.word	0x20000095

08001d0c <__sfp_lock_release>:
 8001d0c:	4801      	ldr	r0, [pc, #4]	; (8001d14 <__sfp_lock_release+0x8>)
 8001d0e:	f000 b8ae 	b.w	8001e6e <__retarget_lock_release_recursive>
 8001d12:	bf00      	nop
 8001d14:	20000095 	.word	0x20000095

08001d18 <__sinit_lock_acquire>:
 8001d18:	4801      	ldr	r0, [pc, #4]	; (8001d20 <__sinit_lock_acquire+0x8>)
 8001d1a:	f000 b8a7 	b.w	8001e6c <__retarget_lock_acquire_recursive>
 8001d1e:	bf00      	nop
 8001d20:	20000096 	.word	0x20000096

08001d24 <__sinit_lock_release>:
 8001d24:	4801      	ldr	r0, [pc, #4]	; (8001d2c <__sinit_lock_release+0x8>)
 8001d26:	f000 b8a2 	b.w	8001e6e <__retarget_lock_release_recursive>
 8001d2a:	bf00      	nop
 8001d2c:	20000096 	.word	0x20000096

08001d30 <__sinit>:
 8001d30:	b510      	push	{r4, lr}
 8001d32:	4604      	mov	r4, r0
 8001d34:	f7ff fff0 	bl	8001d18 <__sinit_lock_acquire>
 8001d38:	69a3      	ldr	r3, [r4, #24]
 8001d3a:	b11b      	cbz	r3, 8001d44 <__sinit+0x14>
 8001d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d40:	f7ff bff0 	b.w	8001d24 <__sinit_lock_release>
 8001d44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001d48:	6523      	str	r3, [r4, #80]	; 0x50
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <__sinit+0x68>)
 8001d4c:	4a13      	ldr	r2, [pc, #76]	; (8001d9c <__sinit+0x6c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	62a2      	str	r2, [r4, #40]	; 0x28
 8001d52:	42a3      	cmp	r3, r4
 8001d54:	bf08      	it	eq
 8001d56:	2301      	moveq	r3, #1
 8001d58:	4620      	mov	r0, r4
 8001d5a:	bf08      	it	eq
 8001d5c:	61a3      	streq	r3, [r4, #24]
 8001d5e:	f000 f81f 	bl	8001da0 <__sfp>
 8001d62:	6060      	str	r0, [r4, #4]
 8001d64:	4620      	mov	r0, r4
 8001d66:	f000 f81b 	bl	8001da0 <__sfp>
 8001d6a:	60a0      	str	r0, [r4, #8]
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f000 f817 	bl	8001da0 <__sfp>
 8001d72:	2200      	movs	r2, #0
 8001d74:	2104      	movs	r1, #4
 8001d76:	60e0      	str	r0, [r4, #12]
 8001d78:	6860      	ldr	r0, [r4, #4]
 8001d7a:	f7ff ff81 	bl	8001c80 <std>
 8001d7e:	2201      	movs	r2, #1
 8001d80:	2109      	movs	r1, #9
 8001d82:	68a0      	ldr	r0, [r4, #8]
 8001d84:	f7ff ff7c 	bl	8001c80 <std>
 8001d88:	2202      	movs	r2, #2
 8001d8a:	2112      	movs	r1, #18
 8001d8c:	68e0      	ldr	r0, [r4, #12]
 8001d8e:	f7ff ff77 	bl	8001c80 <std>
 8001d92:	2301      	movs	r3, #1
 8001d94:	61a3      	str	r3, [r4, #24]
 8001d96:	e7d1      	b.n	8001d3c <__sinit+0xc>
 8001d98:	08002bbc 	.word	0x08002bbc
 8001d9c:	08001cc9 	.word	0x08001cc9

08001da0 <__sfp>:
 8001da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001da2:	4607      	mov	r7, r0
 8001da4:	f7ff ffac 	bl	8001d00 <__sfp_lock_acquire>
 8001da8:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <__sfp+0x84>)
 8001daa:	681e      	ldr	r6, [r3, #0]
 8001dac:	69b3      	ldr	r3, [r6, #24]
 8001dae:	b913      	cbnz	r3, 8001db6 <__sfp+0x16>
 8001db0:	4630      	mov	r0, r6
 8001db2:	f7ff ffbd 	bl	8001d30 <__sinit>
 8001db6:	3648      	adds	r6, #72	; 0x48
 8001db8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	d503      	bpl.n	8001dc8 <__sfp+0x28>
 8001dc0:	6833      	ldr	r3, [r6, #0]
 8001dc2:	b30b      	cbz	r3, 8001e08 <__sfp+0x68>
 8001dc4:	6836      	ldr	r6, [r6, #0]
 8001dc6:	e7f7      	b.n	8001db8 <__sfp+0x18>
 8001dc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001dcc:	b9d5      	cbnz	r5, 8001e04 <__sfp+0x64>
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <__sfp+0x88>)
 8001dd0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001dd4:	60e3      	str	r3, [r4, #12]
 8001dd6:	6665      	str	r5, [r4, #100]	; 0x64
 8001dd8:	f000 f847 	bl	8001e6a <__retarget_lock_init_recursive>
 8001ddc:	f7ff ff96 	bl	8001d0c <__sfp_lock_release>
 8001de0:	2208      	movs	r2, #8
 8001de2:	4629      	mov	r1, r5
 8001de4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001de8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001dec:	6025      	str	r5, [r4, #0]
 8001dee:	61a5      	str	r5, [r4, #24]
 8001df0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001df4:	f7ff ff24 	bl	8001c40 <memset>
 8001df8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001dfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001e00:	4620      	mov	r0, r4
 8001e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e04:	3468      	adds	r4, #104	; 0x68
 8001e06:	e7d9      	b.n	8001dbc <__sfp+0x1c>
 8001e08:	2104      	movs	r1, #4
 8001e0a:	4638      	mov	r0, r7
 8001e0c:	f7ff ff62 	bl	8001cd4 <__sfmoreglue>
 8001e10:	4604      	mov	r4, r0
 8001e12:	6030      	str	r0, [r6, #0]
 8001e14:	2800      	cmp	r0, #0
 8001e16:	d1d5      	bne.n	8001dc4 <__sfp+0x24>
 8001e18:	f7ff ff78 	bl	8001d0c <__sfp_lock_release>
 8001e1c:	230c      	movs	r3, #12
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	e7ee      	b.n	8001e00 <__sfp+0x60>
 8001e22:	bf00      	nop
 8001e24:	08002bbc 	.word	0x08002bbc
 8001e28:	ffff0001 	.word	0xffff0001

08001e2c <_fwalk_reent>:
 8001e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e30:	4606      	mov	r6, r0
 8001e32:	4688      	mov	r8, r1
 8001e34:	2700      	movs	r7, #0
 8001e36:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001e3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001e3e:	f1b9 0901 	subs.w	r9, r9, #1
 8001e42:	d505      	bpl.n	8001e50 <_fwalk_reent+0x24>
 8001e44:	6824      	ldr	r4, [r4, #0]
 8001e46:	2c00      	cmp	r4, #0
 8001e48:	d1f7      	bne.n	8001e3a <_fwalk_reent+0xe>
 8001e4a:	4638      	mov	r0, r7
 8001e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e50:	89ab      	ldrh	r3, [r5, #12]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d907      	bls.n	8001e66 <_fwalk_reent+0x3a>
 8001e56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	d003      	beq.n	8001e66 <_fwalk_reent+0x3a>
 8001e5e:	4629      	mov	r1, r5
 8001e60:	4630      	mov	r0, r6
 8001e62:	47c0      	blx	r8
 8001e64:	4307      	orrs	r7, r0
 8001e66:	3568      	adds	r5, #104	; 0x68
 8001e68:	e7e9      	b.n	8001e3e <_fwalk_reent+0x12>

08001e6a <__retarget_lock_init_recursive>:
 8001e6a:	4770      	bx	lr

08001e6c <__retarget_lock_acquire_recursive>:
 8001e6c:	4770      	bx	lr

08001e6e <__retarget_lock_release_recursive>:
 8001e6e:	4770      	bx	lr

08001e70 <sbrk_aligned>:
 8001e70:	b570      	push	{r4, r5, r6, lr}
 8001e72:	4e0e      	ldr	r6, [pc, #56]	; (8001eac <sbrk_aligned+0x3c>)
 8001e74:	460c      	mov	r4, r1
 8001e76:	6831      	ldr	r1, [r6, #0]
 8001e78:	4605      	mov	r5, r0
 8001e7a:	b911      	cbnz	r1, 8001e82 <sbrk_aligned+0x12>
 8001e7c:	f000 fb7a 	bl	8002574 <_sbrk_r>
 8001e80:	6030      	str	r0, [r6, #0]
 8001e82:	4621      	mov	r1, r4
 8001e84:	4628      	mov	r0, r5
 8001e86:	f000 fb75 	bl	8002574 <_sbrk_r>
 8001e8a:	1c43      	adds	r3, r0, #1
 8001e8c:	d00a      	beq.n	8001ea4 <sbrk_aligned+0x34>
 8001e8e:	1cc4      	adds	r4, r0, #3
 8001e90:	f024 0403 	bic.w	r4, r4, #3
 8001e94:	42a0      	cmp	r0, r4
 8001e96:	d007      	beq.n	8001ea8 <sbrk_aligned+0x38>
 8001e98:	1a21      	subs	r1, r4, r0
 8001e9a:	4628      	mov	r0, r5
 8001e9c:	f000 fb6a 	bl	8002574 <_sbrk_r>
 8001ea0:	3001      	adds	r0, #1
 8001ea2:	d101      	bne.n	8001ea8 <sbrk_aligned+0x38>
 8001ea4:	f04f 34ff 	mov.w	r4, #4294967295
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
 8001eac:	2000009c 	.word	0x2000009c

08001eb0 <_malloc_r>:
 8001eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eb4:	1ccd      	adds	r5, r1, #3
 8001eb6:	f025 0503 	bic.w	r5, r5, #3
 8001eba:	3508      	adds	r5, #8
 8001ebc:	2d0c      	cmp	r5, #12
 8001ebe:	bf38      	it	cc
 8001ec0:	250c      	movcc	r5, #12
 8001ec2:	2d00      	cmp	r5, #0
 8001ec4:	4607      	mov	r7, r0
 8001ec6:	db01      	blt.n	8001ecc <_malloc_r+0x1c>
 8001ec8:	42a9      	cmp	r1, r5
 8001eca:	d905      	bls.n	8001ed8 <_malloc_r+0x28>
 8001ecc:	230c      	movs	r3, #12
 8001ece:	2600      	movs	r6, #0
 8001ed0:	603b      	str	r3, [r7, #0]
 8001ed2:	4630      	mov	r0, r6
 8001ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ed8:	4e2e      	ldr	r6, [pc, #184]	; (8001f94 <_malloc_r+0xe4>)
 8001eda:	f000 fdc5 	bl	8002a68 <__malloc_lock>
 8001ede:	6833      	ldr	r3, [r6, #0]
 8001ee0:	461c      	mov	r4, r3
 8001ee2:	bb34      	cbnz	r4, 8001f32 <_malloc_r+0x82>
 8001ee4:	4629      	mov	r1, r5
 8001ee6:	4638      	mov	r0, r7
 8001ee8:	f7ff ffc2 	bl	8001e70 <sbrk_aligned>
 8001eec:	1c43      	adds	r3, r0, #1
 8001eee:	4604      	mov	r4, r0
 8001ef0:	d14d      	bne.n	8001f8e <_malloc_r+0xde>
 8001ef2:	6834      	ldr	r4, [r6, #0]
 8001ef4:	4626      	mov	r6, r4
 8001ef6:	2e00      	cmp	r6, #0
 8001ef8:	d140      	bne.n	8001f7c <_malloc_r+0xcc>
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	4631      	mov	r1, r6
 8001efe:	4638      	mov	r0, r7
 8001f00:	eb04 0803 	add.w	r8, r4, r3
 8001f04:	f000 fb36 	bl	8002574 <_sbrk_r>
 8001f08:	4580      	cmp	r8, r0
 8001f0a:	d13a      	bne.n	8001f82 <_malloc_r+0xd2>
 8001f0c:	6821      	ldr	r1, [r4, #0]
 8001f0e:	3503      	adds	r5, #3
 8001f10:	1a6d      	subs	r5, r5, r1
 8001f12:	f025 0503 	bic.w	r5, r5, #3
 8001f16:	3508      	adds	r5, #8
 8001f18:	2d0c      	cmp	r5, #12
 8001f1a:	bf38      	it	cc
 8001f1c:	250c      	movcc	r5, #12
 8001f1e:	4638      	mov	r0, r7
 8001f20:	4629      	mov	r1, r5
 8001f22:	f7ff ffa5 	bl	8001e70 <sbrk_aligned>
 8001f26:	3001      	adds	r0, #1
 8001f28:	d02b      	beq.n	8001f82 <_malloc_r+0xd2>
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	442b      	add	r3, r5
 8001f2e:	6023      	str	r3, [r4, #0]
 8001f30:	e00e      	b.n	8001f50 <_malloc_r+0xa0>
 8001f32:	6822      	ldr	r2, [r4, #0]
 8001f34:	1b52      	subs	r2, r2, r5
 8001f36:	d41e      	bmi.n	8001f76 <_malloc_r+0xc6>
 8001f38:	2a0b      	cmp	r2, #11
 8001f3a:	d916      	bls.n	8001f6a <_malloc_r+0xba>
 8001f3c:	1961      	adds	r1, r4, r5
 8001f3e:	42a3      	cmp	r3, r4
 8001f40:	6025      	str	r5, [r4, #0]
 8001f42:	bf18      	it	ne
 8001f44:	6059      	strne	r1, [r3, #4]
 8001f46:	6863      	ldr	r3, [r4, #4]
 8001f48:	bf08      	it	eq
 8001f4a:	6031      	streq	r1, [r6, #0]
 8001f4c:	5162      	str	r2, [r4, r5]
 8001f4e:	604b      	str	r3, [r1, #4]
 8001f50:	4638      	mov	r0, r7
 8001f52:	f104 060b 	add.w	r6, r4, #11
 8001f56:	f000 fd8d 	bl	8002a74 <__malloc_unlock>
 8001f5a:	f026 0607 	bic.w	r6, r6, #7
 8001f5e:	1d23      	adds	r3, r4, #4
 8001f60:	1af2      	subs	r2, r6, r3
 8001f62:	d0b6      	beq.n	8001ed2 <_malloc_r+0x22>
 8001f64:	1b9b      	subs	r3, r3, r6
 8001f66:	50a3      	str	r3, [r4, r2]
 8001f68:	e7b3      	b.n	8001ed2 <_malloc_r+0x22>
 8001f6a:	6862      	ldr	r2, [r4, #4]
 8001f6c:	42a3      	cmp	r3, r4
 8001f6e:	bf0c      	ite	eq
 8001f70:	6032      	streq	r2, [r6, #0]
 8001f72:	605a      	strne	r2, [r3, #4]
 8001f74:	e7ec      	b.n	8001f50 <_malloc_r+0xa0>
 8001f76:	4623      	mov	r3, r4
 8001f78:	6864      	ldr	r4, [r4, #4]
 8001f7a:	e7b2      	b.n	8001ee2 <_malloc_r+0x32>
 8001f7c:	4634      	mov	r4, r6
 8001f7e:	6876      	ldr	r6, [r6, #4]
 8001f80:	e7b9      	b.n	8001ef6 <_malloc_r+0x46>
 8001f82:	230c      	movs	r3, #12
 8001f84:	4638      	mov	r0, r7
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	f000 fd74 	bl	8002a74 <__malloc_unlock>
 8001f8c:	e7a1      	b.n	8001ed2 <_malloc_r+0x22>
 8001f8e:	6025      	str	r5, [r4, #0]
 8001f90:	e7de      	b.n	8001f50 <_malloc_r+0xa0>
 8001f92:	bf00      	nop
 8001f94:	20000098 	.word	0x20000098

08001f98 <__sfputc_r>:
 8001f98:	6893      	ldr	r3, [r2, #8]
 8001f9a:	b410      	push	{r4}
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	6093      	str	r3, [r2, #8]
 8001fa2:	da07      	bge.n	8001fb4 <__sfputc_r+0x1c>
 8001fa4:	6994      	ldr	r4, [r2, #24]
 8001fa6:	42a3      	cmp	r3, r4
 8001fa8:	db01      	blt.n	8001fae <__sfputc_r+0x16>
 8001faa:	290a      	cmp	r1, #10
 8001fac:	d102      	bne.n	8001fb4 <__sfputc_r+0x1c>
 8001fae:	bc10      	pop	{r4}
 8001fb0:	f000 bb34 	b.w	800261c <__swbuf_r>
 8001fb4:	6813      	ldr	r3, [r2, #0]
 8001fb6:	1c58      	adds	r0, r3, #1
 8001fb8:	6010      	str	r0, [r2, #0]
 8001fba:	7019      	strb	r1, [r3, #0]
 8001fbc:	4608      	mov	r0, r1
 8001fbe:	bc10      	pop	{r4}
 8001fc0:	4770      	bx	lr

08001fc2 <__sfputs_r>:
 8001fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fc4:	4606      	mov	r6, r0
 8001fc6:	460f      	mov	r7, r1
 8001fc8:	4614      	mov	r4, r2
 8001fca:	18d5      	adds	r5, r2, r3
 8001fcc:	42ac      	cmp	r4, r5
 8001fce:	d101      	bne.n	8001fd4 <__sfputs_r+0x12>
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	e007      	b.n	8001fe4 <__sfputs_r+0x22>
 8001fd4:	463a      	mov	r2, r7
 8001fd6:	4630      	mov	r0, r6
 8001fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fdc:	f7ff ffdc 	bl	8001f98 <__sfputc_r>
 8001fe0:	1c43      	adds	r3, r0, #1
 8001fe2:	d1f3      	bne.n	8001fcc <__sfputs_r+0xa>
 8001fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001fe8 <_vfiprintf_r>:
 8001fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fec:	460d      	mov	r5, r1
 8001fee:	4614      	mov	r4, r2
 8001ff0:	4698      	mov	r8, r3
 8001ff2:	4606      	mov	r6, r0
 8001ff4:	b09d      	sub	sp, #116	; 0x74
 8001ff6:	b118      	cbz	r0, 8002000 <_vfiprintf_r+0x18>
 8001ff8:	6983      	ldr	r3, [r0, #24]
 8001ffa:	b90b      	cbnz	r3, 8002000 <_vfiprintf_r+0x18>
 8001ffc:	f7ff fe98 	bl	8001d30 <__sinit>
 8002000:	4b89      	ldr	r3, [pc, #548]	; (8002228 <_vfiprintf_r+0x240>)
 8002002:	429d      	cmp	r5, r3
 8002004:	d11b      	bne.n	800203e <_vfiprintf_r+0x56>
 8002006:	6875      	ldr	r5, [r6, #4]
 8002008:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800200a:	07d9      	lsls	r1, r3, #31
 800200c:	d405      	bmi.n	800201a <_vfiprintf_r+0x32>
 800200e:	89ab      	ldrh	r3, [r5, #12]
 8002010:	059a      	lsls	r2, r3, #22
 8002012:	d402      	bmi.n	800201a <_vfiprintf_r+0x32>
 8002014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002016:	f7ff ff29 	bl	8001e6c <__retarget_lock_acquire_recursive>
 800201a:	89ab      	ldrh	r3, [r5, #12]
 800201c:	071b      	lsls	r3, r3, #28
 800201e:	d501      	bpl.n	8002024 <_vfiprintf_r+0x3c>
 8002020:	692b      	ldr	r3, [r5, #16]
 8002022:	b9eb      	cbnz	r3, 8002060 <_vfiprintf_r+0x78>
 8002024:	4629      	mov	r1, r5
 8002026:	4630      	mov	r0, r6
 8002028:	f000 fb5c 	bl	80026e4 <__swsetup_r>
 800202c:	b1c0      	cbz	r0, 8002060 <_vfiprintf_r+0x78>
 800202e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002030:	07dc      	lsls	r4, r3, #31
 8002032:	d50e      	bpl.n	8002052 <_vfiprintf_r+0x6a>
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	b01d      	add	sp, #116	; 0x74
 800203a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800203e:	4b7b      	ldr	r3, [pc, #492]	; (800222c <_vfiprintf_r+0x244>)
 8002040:	429d      	cmp	r5, r3
 8002042:	d101      	bne.n	8002048 <_vfiprintf_r+0x60>
 8002044:	68b5      	ldr	r5, [r6, #8]
 8002046:	e7df      	b.n	8002008 <_vfiprintf_r+0x20>
 8002048:	4b79      	ldr	r3, [pc, #484]	; (8002230 <_vfiprintf_r+0x248>)
 800204a:	429d      	cmp	r5, r3
 800204c:	bf08      	it	eq
 800204e:	68f5      	ldreq	r5, [r6, #12]
 8002050:	e7da      	b.n	8002008 <_vfiprintf_r+0x20>
 8002052:	89ab      	ldrh	r3, [r5, #12]
 8002054:	0598      	lsls	r0, r3, #22
 8002056:	d4ed      	bmi.n	8002034 <_vfiprintf_r+0x4c>
 8002058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800205a:	f7ff ff08 	bl	8001e6e <__retarget_lock_release_recursive>
 800205e:	e7e9      	b.n	8002034 <_vfiprintf_r+0x4c>
 8002060:	2300      	movs	r3, #0
 8002062:	9309      	str	r3, [sp, #36]	; 0x24
 8002064:	2320      	movs	r3, #32
 8002066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800206a:	2330      	movs	r3, #48	; 0x30
 800206c:	f04f 0901 	mov.w	r9, #1
 8002070:	f8cd 800c 	str.w	r8, [sp, #12]
 8002074:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002234 <_vfiprintf_r+0x24c>
 8002078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800207c:	4623      	mov	r3, r4
 800207e:	469a      	mov	sl, r3
 8002080:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002084:	b10a      	cbz	r2, 800208a <_vfiprintf_r+0xa2>
 8002086:	2a25      	cmp	r2, #37	; 0x25
 8002088:	d1f9      	bne.n	800207e <_vfiprintf_r+0x96>
 800208a:	ebba 0b04 	subs.w	fp, sl, r4
 800208e:	d00b      	beq.n	80020a8 <_vfiprintf_r+0xc0>
 8002090:	465b      	mov	r3, fp
 8002092:	4622      	mov	r2, r4
 8002094:	4629      	mov	r1, r5
 8002096:	4630      	mov	r0, r6
 8002098:	f7ff ff93 	bl	8001fc2 <__sfputs_r>
 800209c:	3001      	adds	r0, #1
 800209e:	f000 80aa 	beq.w	80021f6 <_vfiprintf_r+0x20e>
 80020a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020a4:	445a      	add	r2, fp
 80020a6:	9209      	str	r2, [sp, #36]	; 0x24
 80020a8:	f89a 3000 	ldrb.w	r3, [sl]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80a2 	beq.w	80021f6 <_vfiprintf_r+0x20e>
 80020b2:	2300      	movs	r3, #0
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295
 80020b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80020bc:	f10a 0a01 	add.w	sl, sl, #1
 80020c0:	9304      	str	r3, [sp, #16]
 80020c2:	9307      	str	r3, [sp, #28]
 80020c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020c8:	931a      	str	r3, [sp, #104]	; 0x68
 80020ca:	4654      	mov	r4, sl
 80020cc:	2205      	movs	r2, #5
 80020ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020d2:	4858      	ldr	r0, [pc, #352]	; (8002234 <_vfiprintf_r+0x24c>)
 80020d4:	f000 fcba 	bl	8002a4c <memchr>
 80020d8:	9a04      	ldr	r2, [sp, #16]
 80020da:	b9d8      	cbnz	r0, 8002114 <_vfiprintf_r+0x12c>
 80020dc:	06d1      	lsls	r1, r2, #27
 80020de:	bf44      	itt	mi
 80020e0:	2320      	movmi	r3, #32
 80020e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020e6:	0713      	lsls	r3, r2, #28
 80020e8:	bf44      	itt	mi
 80020ea:	232b      	movmi	r3, #43	; 0x2b
 80020ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020f0:	f89a 3000 	ldrb.w	r3, [sl]
 80020f4:	2b2a      	cmp	r3, #42	; 0x2a
 80020f6:	d015      	beq.n	8002124 <_vfiprintf_r+0x13c>
 80020f8:	4654      	mov	r4, sl
 80020fa:	2000      	movs	r0, #0
 80020fc:	f04f 0c0a 	mov.w	ip, #10
 8002100:	9a07      	ldr	r2, [sp, #28]
 8002102:	4621      	mov	r1, r4
 8002104:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002108:	3b30      	subs	r3, #48	; 0x30
 800210a:	2b09      	cmp	r3, #9
 800210c:	d94e      	bls.n	80021ac <_vfiprintf_r+0x1c4>
 800210e:	b1b0      	cbz	r0, 800213e <_vfiprintf_r+0x156>
 8002110:	9207      	str	r2, [sp, #28]
 8002112:	e014      	b.n	800213e <_vfiprintf_r+0x156>
 8002114:	eba0 0308 	sub.w	r3, r0, r8
 8002118:	fa09 f303 	lsl.w	r3, r9, r3
 800211c:	4313      	orrs	r3, r2
 800211e:	46a2      	mov	sl, r4
 8002120:	9304      	str	r3, [sp, #16]
 8002122:	e7d2      	b.n	80020ca <_vfiprintf_r+0xe2>
 8002124:	9b03      	ldr	r3, [sp, #12]
 8002126:	1d19      	adds	r1, r3, #4
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	9103      	str	r1, [sp, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	bfbb      	ittet	lt
 8002130:	425b      	neglt	r3, r3
 8002132:	f042 0202 	orrlt.w	r2, r2, #2
 8002136:	9307      	strge	r3, [sp, #28]
 8002138:	9307      	strlt	r3, [sp, #28]
 800213a:	bfb8      	it	lt
 800213c:	9204      	strlt	r2, [sp, #16]
 800213e:	7823      	ldrb	r3, [r4, #0]
 8002140:	2b2e      	cmp	r3, #46	; 0x2e
 8002142:	d10c      	bne.n	800215e <_vfiprintf_r+0x176>
 8002144:	7863      	ldrb	r3, [r4, #1]
 8002146:	2b2a      	cmp	r3, #42	; 0x2a
 8002148:	d135      	bne.n	80021b6 <_vfiprintf_r+0x1ce>
 800214a:	9b03      	ldr	r3, [sp, #12]
 800214c:	3402      	adds	r4, #2
 800214e:	1d1a      	adds	r2, r3, #4
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	9203      	str	r2, [sp, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	bfb8      	it	lt
 8002158:	f04f 33ff 	movlt.w	r3, #4294967295
 800215c:	9305      	str	r3, [sp, #20]
 800215e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002238 <_vfiprintf_r+0x250>
 8002162:	2203      	movs	r2, #3
 8002164:	4650      	mov	r0, sl
 8002166:	7821      	ldrb	r1, [r4, #0]
 8002168:	f000 fc70 	bl	8002a4c <memchr>
 800216c:	b140      	cbz	r0, 8002180 <_vfiprintf_r+0x198>
 800216e:	2340      	movs	r3, #64	; 0x40
 8002170:	eba0 000a 	sub.w	r0, r0, sl
 8002174:	fa03 f000 	lsl.w	r0, r3, r0
 8002178:	9b04      	ldr	r3, [sp, #16]
 800217a:	3401      	adds	r4, #1
 800217c:	4303      	orrs	r3, r0
 800217e:	9304      	str	r3, [sp, #16]
 8002180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002184:	2206      	movs	r2, #6
 8002186:	482d      	ldr	r0, [pc, #180]	; (800223c <_vfiprintf_r+0x254>)
 8002188:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800218c:	f000 fc5e 	bl	8002a4c <memchr>
 8002190:	2800      	cmp	r0, #0
 8002192:	d03f      	beq.n	8002214 <_vfiprintf_r+0x22c>
 8002194:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <_vfiprintf_r+0x258>)
 8002196:	bb1b      	cbnz	r3, 80021e0 <_vfiprintf_r+0x1f8>
 8002198:	9b03      	ldr	r3, [sp, #12]
 800219a:	3307      	adds	r3, #7
 800219c:	f023 0307 	bic.w	r3, r3, #7
 80021a0:	3308      	adds	r3, #8
 80021a2:	9303      	str	r3, [sp, #12]
 80021a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021a6:	443b      	add	r3, r7
 80021a8:	9309      	str	r3, [sp, #36]	; 0x24
 80021aa:	e767      	b.n	800207c <_vfiprintf_r+0x94>
 80021ac:	460c      	mov	r4, r1
 80021ae:	2001      	movs	r0, #1
 80021b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80021b4:	e7a5      	b.n	8002102 <_vfiprintf_r+0x11a>
 80021b6:	2300      	movs	r3, #0
 80021b8:	f04f 0c0a 	mov.w	ip, #10
 80021bc:	4619      	mov	r1, r3
 80021be:	3401      	adds	r4, #1
 80021c0:	9305      	str	r3, [sp, #20]
 80021c2:	4620      	mov	r0, r4
 80021c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021c8:	3a30      	subs	r2, #48	; 0x30
 80021ca:	2a09      	cmp	r2, #9
 80021cc:	d903      	bls.n	80021d6 <_vfiprintf_r+0x1ee>
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0c5      	beq.n	800215e <_vfiprintf_r+0x176>
 80021d2:	9105      	str	r1, [sp, #20]
 80021d4:	e7c3      	b.n	800215e <_vfiprintf_r+0x176>
 80021d6:	4604      	mov	r4, r0
 80021d8:	2301      	movs	r3, #1
 80021da:	fb0c 2101 	mla	r1, ip, r1, r2
 80021de:	e7f0      	b.n	80021c2 <_vfiprintf_r+0x1da>
 80021e0:	ab03      	add	r3, sp, #12
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	462a      	mov	r2, r5
 80021e6:	4630      	mov	r0, r6
 80021e8:	4b16      	ldr	r3, [pc, #88]	; (8002244 <_vfiprintf_r+0x25c>)
 80021ea:	a904      	add	r1, sp, #16
 80021ec:	f3af 8000 	nop.w
 80021f0:	4607      	mov	r7, r0
 80021f2:	1c78      	adds	r0, r7, #1
 80021f4:	d1d6      	bne.n	80021a4 <_vfiprintf_r+0x1bc>
 80021f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80021f8:	07d9      	lsls	r1, r3, #31
 80021fa:	d405      	bmi.n	8002208 <_vfiprintf_r+0x220>
 80021fc:	89ab      	ldrh	r3, [r5, #12]
 80021fe:	059a      	lsls	r2, r3, #22
 8002200:	d402      	bmi.n	8002208 <_vfiprintf_r+0x220>
 8002202:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002204:	f7ff fe33 	bl	8001e6e <__retarget_lock_release_recursive>
 8002208:	89ab      	ldrh	r3, [r5, #12]
 800220a:	065b      	lsls	r3, r3, #25
 800220c:	f53f af12 	bmi.w	8002034 <_vfiprintf_r+0x4c>
 8002210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002212:	e711      	b.n	8002038 <_vfiprintf_r+0x50>
 8002214:	ab03      	add	r3, sp, #12
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	462a      	mov	r2, r5
 800221a:	4630      	mov	r0, r6
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <_vfiprintf_r+0x25c>)
 800221e:	a904      	add	r1, sp, #16
 8002220:	f000 f882 	bl	8002328 <_printf_i>
 8002224:	e7e4      	b.n	80021f0 <_vfiprintf_r+0x208>
 8002226:	bf00      	nop
 8002228:	08002be0 	.word	0x08002be0
 800222c:	08002c00 	.word	0x08002c00
 8002230:	08002bc0 	.word	0x08002bc0
 8002234:	08002c20 	.word	0x08002c20
 8002238:	08002c26 	.word	0x08002c26
 800223c:	08002c2a 	.word	0x08002c2a
 8002240:	00000000 	.word	0x00000000
 8002244:	08001fc3 	.word	0x08001fc3

08002248 <_printf_common>:
 8002248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800224c:	4616      	mov	r6, r2
 800224e:	4699      	mov	r9, r3
 8002250:	688a      	ldr	r2, [r1, #8]
 8002252:	690b      	ldr	r3, [r1, #16]
 8002254:	4607      	mov	r7, r0
 8002256:	4293      	cmp	r3, r2
 8002258:	bfb8      	it	lt
 800225a:	4613      	movlt	r3, r2
 800225c:	6033      	str	r3, [r6, #0]
 800225e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002262:	460c      	mov	r4, r1
 8002264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002268:	b10a      	cbz	r2, 800226e <_printf_common+0x26>
 800226a:	3301      	adds	r3, #1
 800226c:	6033      	str	r3, [r6, #0]
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	0699      	lsls	r1, r3, #26
 8002272:	bf42      	ittt	mi
 8002274:	6833      	ldrmi	r3, [r6, #0]
 8002276:	3302      	addmi	r3, #2
 8002278:	6033      	strmi	r3, [r6, #0]
 800227a:	6825      	ldr	r5, [r4, #0]
 800227c:	f015 0506 	ands.w	r5, r5, #6
 8002280:	d106      	bne.n	8002290 <_printf_common+0x48>
 8002282:	f104 0a19 	add.w	sl, r4, #25
 8002286:	68e3      	ldr	r3, [r4, #12]
 8002288:	6832      	ldr	r2, [r6, #0]
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	42ab      	cmp	r3, r5
 800228e:	dc28      	bgt.n	80022e2 <_printf_common+0x9a>
 8002290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002294:	1e13      	subs	r3, r2, #0
 8002296:	6822      	ldr	r2, [r4, #0]
 8002298:	bf18      	it	ne
 800229a:	2301      	movne	r3, #1
 800229c:	0692      	lsls	r2, r2, #26
 800229e:	d42d      	bmi.n	80022fc <_printf_common+0xb4>
 80022a0:	4649      	mov	r1, r9
 80022a2:	4638      	mov	r0, r7
 80022a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80022a8:	47c0      	blx	r8
 80022aa:	3001      	adds	r0, #1
 80022ac:	d020      	beq.n	80022f0 <_printf_common+0xa8>
 80022ae:	6823      	ldr	r3, [r4, #0]
 80022b0:	68e5      	ldr	r5, [r4, #12]
 80022b2:	f003 0306 	and.w	r3, r3, #6
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	bf18      	it	ne
 80022ba:	2500      	movne	r5, #0
 80022bc:	6832      	ldr	r2, [r6, #0]
 80022be:	f04f 0600 	mov.w	r6, #0
 80022c2:	68a3      	ldr	r3, [r4, #8]
 80022c4:	bf08      	it	eq
 80022c6:	1aad      	subeq	r5, r5, r2
 80022c8:	6922      	ldr	r2, [r4, #16]
 80022ca:	bf08      	it	eq
 80022cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022d0:	4293      	cmp	r3, r2
 80022d2:	bfc4      	itt	gt
 80022d4:	1a9b      	subgt	r3, r3, r2
 80022d6:	18ed      	addgt	r5, r5, r3
 80022d8:	341a      	adds	r4, #26
 80022da:	42b5      	cmp	r5, r6
 80022dc:	d11a      	bne.n	8002314 <_printf_common+0xcc>
 80022de:	2000      	movs	r0, #0
 80022e0:	e008      	b.n	80022f4 <_printf_common+0xac>
 80022e2:	2301      	movs	r3, #1
 80022e4:	4652      	mov	r2, sl
 80022e6:	4649      	mov	r1, r9
 80022e8:	4638      	mov	r0, r7
 80022ea:	47c0      	blx	r8
 80022ec:	3001      	adds	r0, #1
 80022ee:	d103      	bne.n	80022f8 <_printf_common+0xb0>
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022f8:	3501      	adds	r5, #1
 80022fa:	e7c4      	b.n	8002286 <_printf_common+0x3e>
 80022fc:	2030      	movs	r0, #48	; 0x30
 80022fe:	18e1      	adds	r1, r4, r3
 8002300:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800230a:	4422      	add	r2, r4
 800230c:	3302      	adds	r3, #2
 800230e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002312:	e7c5      	b.n	80022a0 <_printf_common+0x58>
 8002314:	2301      	movs	r3, #1
 8002316:	4622      	mov	r2, r4
 8002318:	4649      	mov	r1, r9
 800231a:	4638      	mov	r0, r7
 800231c:	47c0      	blx	r8
 800231e:	3001      	adds	r0, #1
 8002320:	d0e6      	beq.n	80022f0 <_printf_common+0xa8>
 8002322:	3601      	adds	r6, #1
 8002324:	e7d9      	b.n	80022da <_printf_common+0x92>
	...

08002328 <_printf_i>:
 8002328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800232c:	7e0f      	ldrb	r7, [r1, #24]
 800232e:	4691      	mov	r9, r2
 8002330:	2f78      	cmp	r7, #120	; 0x78
 8002332:	4680      	mov	r8, r0
 8002334:	460c      	mov	r4, r1
 8002336:	469a      	mov	sl, r3
 8002338:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800233a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800233e:	d807      	bhi.n	8002350 <_printf_i+0x28>
 8002340:	2f62      	cmp	r7, #98	; 0x62
 8002342:	d80a      	bhi.n	800235a <_printf_i+0x32>
 8002344:	2f00      	cmp	r7, #0
 8002346:	f000 80d9 	beq.w	80024fc <_printf_i+0x1d4>
 800234a:	2f58      	cmp	r7, #88	; 0x58
 800234c:	f000 80a4 	beq.w	8002498 <_printf_i+0x170>
 8002350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002354:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002358:	e03a      	b.n	80023d0 <_printf_i+0xa8>
 800235a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800235e:	2b15      	cmp	r3, #21
 8002360:	d8f6      	bhi.n	8002350 <_printf_i+0x28>
 8002362:	a101      	add	r1, pc, #4	; (adr r1, 8002368 <_printf_i+0x40>)
 8002364:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002368:	080023c1 	.word	0x080023c1
 800236c:	080023d5 	.word	0x080023d5
 8002370:	08002351 	.word	0x08002351
 8002374:	08002351 	.word	0x08002351
 8002378:	08002351 	.word	0x08002351
 800237c:	08002351 	.word	0x08002351
 8002380:	080023d5 	.word	0x080023d5
 8002384:	08002351 	.word	0x08002351
 8002388:	08002351 	.word	0x08002351
 800238c:	08002351 	.word	0x08002351
 8002390:	08002351 	.word	0x08002351
 8002394:	080024e3 	.word	0x080024e3
 8002398:	08002405 	.word	0x08002405
 800239c:	080024c5 	.word	0x080024c5
 80023a0:	08002351 	.word	0x08002351
 80023a4:	08002351 	.word	0x08002351
 80023a8:	08002505 	.word	0x08002505
 80023ac:	08002351 	.word	0x08002351
 80023b0:	08002405 	.word	0x08002405
 80023b4:	08002351 	.word	0x08002351
 80023b8:	08002351 	.word	0x08002351
 80023bc:	080024cd 	.word	0x080024cd
 80023c0:	682b      	ldr	r3, [r5, #0]
 80023c2:	1d1a      	adds	r2, r3, #4
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	602a      	str	r2, [r5, #0]
 80023c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0a4      	b.n	800251e <_printf_i+0x1f6>
 80023d4:	6820      	ldr	r0, [r4, #0]
 80023d6:	6829      	ldr	r1, [r5, #0]
 80023d8:	0606      	lsls	r6, r0, #24
 80023da:	f101 0304 	add.w	r3, r1, #4
 80023de:	d50a      	bpl.n	80023f6 <_printf_i+0xce>
 80023e0:	680e      	ldr	r6, [r1, #0]
 80023e2:	602b      	str	r3, [r5, #0]
 80023e4:	2e00      	cmp	r6, #0
 80023e6:	da03      	bge.n	80023f0 <_printf_i+0xc8>
 80023e8:	232d      	movs	r3, #45	; 0x2d
 80023ea:	4276      	negs	r6, r6
 80023ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023f0:	230a      	movs	r3, #10
 80023f2:	485e      	ldr	r0, [pc, #376]	; (800256c <_printf_i+0x244>)
 80023f4:	e019      	b.n	800242a <_printf_i+0x102>
 80023f6:	680e      	ldr	r6, [r1, #0]
 80023f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80023fc:	602b      	str	r3, [r5, #0]
 80023fe:	bf18      	it	ne
 8002400:	b236      	sxthne	r6, r6
 8002402:	e7ef      	b.n	80023e4 <_printf_i+0xbc>
 8002404:	682b      	ldr	r3, [r5, #0]
 8002406:	6820      	ldr	r0, [r4, #0]
 8002408:	1d19      	adds	r1, r3, #4
 800240a:	6029      	str	r1, [r5, #0]
 800240c:	0601      	lsls	r1, r0, #24
 800240e:	d501      	bpl.n	8002414 <_printf_i+0xec>
 8002410:	681e      	ldr	r6, [r3, #0]
 8002412:	e002      	b.n	800241a <_printf_i+0xf2>
 8002414:	0646      	lsls	r6, r0, #25
 8002416:	d5fb      	bpl.n	8002410 <_printf_i+0xe8>
 8002418:	881e      	ldrh	r6, [r3, #0]
 800241a:	2f6f      	cmp	r7, #111	; 0x6f
 800241c:	bf0c      	ite	eq
 800241e:	2308      	moveq	r3, #8
 8002420:	230a      	movne	r3, #10
 8002422:	4852      	ldr	r0, [pc, #328]	; (800256c <_printf_i+0x244>)
 8002424:	2100      	movs	r1, #0
 8002426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800242a:	6865      	ldr	r5, [r4, #4]
 800242c:	2d00      	cmp	r5, #0
 800242e:	bfa8      	it	ge
 8002430:	6821      	ldrge	r1, [r4, #0]
 8002432:	60a5      	str	r5, [r4, #8]
 8002434:	bfa4      	itt	ge
 8002436:	f021 0104 	bicge.w	r1, r1, #4
 800243a:	6021      	strge	r1, [r4, #0]
 800243c:	b90e      	cbnz	r6, 8002442 <_printf_i+0x11a>
 800243e:	2d00      	cmp	r5, #0
 8002440:	d04d      	beq.n	80024de <_printf_i+0x1b6>
 8002442:	4615      	mov	r5, r2
 8002444:	fbb6 f1f3 	udiv	r1, r6, r3
 8002448:	fb03 6711 	mls	r7, r3, r1, r6
 800244c:	5dc7      	ldrb	r7, [r0, r7]
 800244e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002452:	4637      	mov	r7, r6
 8002454:	42bb      	cmp	r3, r7
 8002456:	460e      	mov	r6, r1
 8002458:	d9f4      	bls.n	8002444 <_printf_i+0x11c>
 800245a:	2b08      	cmp	r3, #8
 800245c:	d10b      	bne.n	8002476 <_printf_i+0x14e>
 800245e:	6823      	ldr	r3, [r4, #0]
 8002460:	07de      	lsls	r6, r3, #31
 8002462:	d508      	bpl.n	8002476 <_printf_i+0x14e>
 8002464:	6923      	ldr	r3, [r4, #16]
 8002466:	6861      	ldr	r1, [r4, #4]
 8002468:	4299      	cmp	r1, r3
 800246a:	bfde      	ittt	le
 800246c:	2330      	movle	r3, #48	; 0x30
 800246e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002472:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002476:	1b52      	subs	r2, r2, r5
 8002478:	6122      	str	r2, [r4, #16]
 800247a:	464b      	mov	r3, r9
 800247c:	4621      	mov	r1, r4
 800247e:	4640      	mov	r0, r8
 8002480:	f8cd a000 	str.w	sl, [sp]
 8002484:	aa03      	add	r2, sp, #12
 8002486:	f7ff fedf 	bl	8002248 <_printf_common>
 800248a:	3001      	adds	r0, #1
 800248c:	d14c      	bne.n	8002528 <_printf_i+0x200>
 800248e:	f04f 30ff 	mov.w	r0, #4294967295
 8002492:	b004      	add	sp, #16
 8002494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002498:	4834      	ldr	r0, [pc, #208]	; (800256c <_printf_i+0x244>)
 800249a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800249e:	6829      	ldr	r1, [r5, #0]
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80024a6:	6029      	str	r1, [r5, #0]
 80024a8:	061d      	lsls	r5, r3, #24
 80024aa:	d514      	bpl.n	80024d6 <_printf_i+0x1ae>
 80024ac:	07df      	lsls	r7, r3, #31
 80024ae:	bf44      	itt	mi
 80024b0:	f043 0320 	orrmi.w	r3, r3, #32
 80024b4:	6023      	strmi	r3, [r4, #0]
 80024b6:	b91e      	cbnz	r6, 80024c0 <_printf_i+0x198>
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	f023 0320 	bic.w	r3, r3, #32
 80024be:	6023      	str	r3, [r4, #0]
 80024c0:	2310      	movs	r3, #16
 80024c2:	e7af      	b.n	8002424 <_printf_i+0xfc>
 80024c4:	6823      	ldr	r3, [r4, #0]
 80024c6:	f043 0320 	orr.w	r3, r3, #32
 80024ca:	6023      	str	r3, [r4, #0]
 80024cc:	2378      	movs	r3, #120	; 0x78
 80024ce:	4828      	ldr	r0, [pc, #160]	; (8002570 <_printf_i+0x248>)
 80024d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80024d4:	e7e3      	b.n	800249e <_printf_i+0x176>
 80024d6:	0659      	lsls	r1, r3, #25
 80024d8:	bf48      	it	mi
 80024da:	b2b6      	uxthmi	r6, r6
 80024dc:	e7e6      	b.n	80024ac <_printf_i+0x184>
 80024de:	4615      	mov	r5, r2
 80024e0:	e7bb      	b.n	800245a <_printf_i+0x132>
 80024e2:	682b      	ldr	r3, [r5, #0]
 80024e4:	6826      	ldr	r6, [r4, #0]
 80024e6:	1d18      	adds	r0, r3, #4
 80024e8:	6961      	ldr	r1, [r4, #20]
 80024ea:	6028      	str	r0, [r5, #0]
 80024ec:	0635      	lsls	r5, r6, #24
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	d501      	bpl.n	80024f6 <_printf_i+0x1ce>
 80024f2:	6019      	str	r1, [r3, #0]
 80024f4:	e002      	b.n	80024fc <_printf_i+0x1d4>
 80024f6:	0670      	lsls	r0, r6, #25
 80024f8:	d5fb      	bpl.n	80024f2 <_printf_i+0x1ca>
 80024fa:	8019      	strh	r1, [r3, #0]
 80024fc:	2300      	movs	r3, #0
 80024fe:	4615      	mov	r5, r2
 8002500:	6123      	str	r3, [r4, #16]
 8002502:	e7ba      	b.n	800247a <_printf_i+0x152>
 8002504:	682b      	ldr	r3, [r5, #0]
 8002506:	2100      	movs	r1, #0
 8002508:	1d1a      	adds	r2, r3, #4
 800250a:	602a      	str	r2, [r5, #0]
 800250c:	681d      	ldr	r5, [r3, #0]
 800250e:	6862      	ldr	r2, [r4, #4]
 8002510:	4628      	mov	r0, r5
 8002512:	f000 fa9b 	bl	8002a4c <memchr>
 8002516:	b108      	cbz	r0, 800251c <_printf_i+0x1f4>
 8002518:	1b40      	subs	r0, r0, r5
 800251a:	6060      	str	r0, [r4, #4]
 800251c:	6863      	ldr	r3, [r4, #4]
 800251e:	6123      	str	r3, [r4, #16]
 8002520:	2300      	movs	r3, #0
 8002522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002526:	e7a8      	b.n	800247a <_printf_i+0x152>
 8002528:	462a      	mov	r2, r5
 800252a:	4649      	mov	r1, r9
 800252c:	4640      	mov	r0, r8
 800252e:	6923      	ldr	r3, [r4, #16]
 8002530:	47d0      	blx	sl
 8002532:	3001      	adds	r0, #1
 8002534:	d0ab      	beq.n	800248e <_printf_i+0x166>
 8002536:	6823      	ldr	r3, [r4, #0]
 8002538:	079b      	lsls	r3, r3, #30
 800253a:	d413      	bmi.n	8002564 <_printf_i+0x23c>
 800253c:	68e0      	ldr	r0, [r4, #12]
 800253e:	9b03      	ldr	r3, [sp, #12]
 8002540:	4298      	cmp	r0, r3
 8002542:	bfb8      	it	lt
 8002544:	4618      	movlt	r0, r3
 8002546:	e7a4      	b.n	8002492 <_printf_i+0x16a>
 8002548:	2301      	movs	r3, #1
 800254a:	4632      	mov	r2, r6
 800254c:	4649      	mov	r1, r9
 800254e:	4640      	mov	r0, r8
 8002550:	47d0      	blx	sl
 8002552:	3001      	adds	r0, #1
 8002554:	d09b      	beq.n	800248e <_printf_i+0x166>
 8002556:	3501      	adds	r5, #1
 8002558:	68e3      	ldr	r3, [r4, #12]
 800255a:	9903      	ldr	r1, [sp, #12]
 800255c:	1a5b      	subs	r3, r3, r1
 800255e:	42ab      	cmp	r3, r5
 8002560:	dcf2      	bgt.n	8002548 <_printf_i+0x220>
 8002562:	e7eb      	b.n	800253c <_printf_i+0x214>
 8002564:	2500      	movs	r5, #0
 8002566:	f104 0619 	add.w	r6, r4, #25
 800256a:	e7f5      	b.n	8002558 <_printf_i+0x230>
 800256c:	08002c31 	.word	0x08002c31
 8002570:	08002c42 	.word	0x08002c42

08002574 <_sbrk_r>:
 8002574:	b538      	push	{r3, r4, r5, lr}
 8002576:	2300      	movs	r3, #0
 8002578:	4d05      	ldr	r5, [pc, #20]	; (8002590 <_sbrk_r+0x1c>)
 800257a:	4604      	mov	r4, r0
 800257c:	4608      	mov	r0, r1
 800257e:	602b      	str	r3, [r5, #0]
 8002580:	f7fe fd80 	bl	8001084 <_sbrk>
 8002584:	1c43      	adds	r3, r0, #1
 8002586:	d102      	bne.n	800258e <_sbrk_r+0x1a>
 8002588:	682b      	ldr	r3, [r5, #0]
 800258a:	b103      	cbz	r3, 800258e <_sbrk_r+0x1a>
 800258c:	6023      	str	r3, [r4, #0]
 800258e:	bd38      	pop	{r3, r4, r5, pc}
 8002590:	200000a0 	.word	0x200000a0

08002594 <__sread>:
 8002594:	b510      	push	{r4, lr}
 8002596:	460c      	mov	r4, r1
 8002598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800259c:	f000 fab8 	bl	8002b10 <_read_r>
 80025a0:	2800      	cmp	r0, #0
 80025a2:	bfab      	itete	ge
 80025a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80025a6:	89a3      	ldrhlt	r3, [r4, #12]
 80025a8:	181b      	addge	r3, r3, r0
 80025aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80025ae:	bfac      	ite	ge
 80025b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80025b2:	81a3      	strhlt	r3, [r4, #12]
 80025b4:	bd10      	pop	{r4, pc}

080025b6 <__swrite>:
 80025b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025ba:	461f      	mov	r7, r3
 80025bc:	898b      	ldrh	r3, [r1, #12]
 80025be:	4605      	mov	r5, r0
 80025c0:	05db      	lsls	r3, r3, #23
 80025c2:	460c      	mov	r4, r1
 80025c4:	4616      	mov	r6, r2
 80025c6:	d505      	bpl.n	80025d4 <__swrite+0x1e>
 80025c8:	2302      	movs	r3, #2
 80025ca:	2200      	movs	r2, #0
 80025cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025d0:	f000 f9c4 	bl	800295c <_lseek_r>
 80025d4:	89a3      	ldrh	r3, [r4, #12]
 80025d6:	4632      	mov	r2, r6
 80025d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025dc:	81a3      	strh	r3, [r4, #12]
 80025de:	4628      	mov	r0, r5
 80025e0:	463b      	mov	r3, r7
 80025e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025ea:	f000 b869 	b.w	80026c0 <_write_r>

080025ee <__sseek>:
 80025ee:	b510      	push	{r4, lr}
 80025f0:	460c      	mov	r4, r1
 80025f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025f6:	f000 f9b1 	bl	800295c <_lseek_r>
 80025fa:	1c43      	adds	r3, r0, #1
 80025fc:	89a3      	ldrh	r3, [r4, #12]
 80025fe:	bf15      	itete	ne
 8002600:	6560      	strne	r0, [r4, #84]	; 0x54
 8002602:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002606:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800260a:	81a3      	strheq	r3, [r4, #12]
 800260c:	bf18      	it	ne
 800260e:	81a3      	strhne	r3, [r4, #12]
 8002610:	bd10      	pop	{r4, pc}

08002612 <__sclose>:
 8002612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002616:	f000 b8d3 	b.w	80027c0 <_close_r>
	...

0800261c <__swbuf_r>:
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261e:	460e      	mov	r6, r1
 8002620:	4614      	mov	r4, r2
 8002622:	4605      	mov	r5, r0
 8002624:	b118      	cbz	r0, 800262e <__swbuf_r+0x12>
 8002626:	6983      	ldr	r3, [r0, #24]
 8002628:	b90b      	cbnz	r3, 800262e <__swbuf_r+0x12>
 800262a:	f7ff fb81 	bl	8001d30 <__sinit>
 800262e:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <__swbuf_r+0x98>)
 8002630:	429c      	cmp	r4, r3
 8002632:	d12b      	bne.n	800268c <__swbuf_r+0x70>
 8002634:	686c      	ldr	r4, [r5, #4]
 8002636:	69a3      	ldr	r3, [r4, #24]
 8002638:	60a3      	str	r3, [r4, #8]
 800263a:	89a3      	ldrh	r3, [r4, #12]
 800263c:	071a      	lsls	r2, r3, #28
 800263e:	d52f      	bpl.n	80026a0 <__swbuf_r+0x84>
 8002640:	6923      	ldr	r3, [r4, #16]
 8002642:	b36b      	cbz	r3, 80026a0 <__swbuf_r+0x84>
 8002644:	6923      	ldr	r3, [r4, #16]
 8002646:	6820      	ldr	r0, [r4, #0]
 8002648:	b2f6      	uxtb	r6, r6
 800264a:	1ac0      	subs	r0, r0, r3
 800264c:	6963      	ldr	r3, [r4, #20]
 800264e:	4637      	mov	r7, r6
 8002650:	4283      	cmp	r3, r0
 8002652:	dc04      	bgt.n	800265e <__swbuf_r+0x42>
 8002654:	4621      	mov	r1, r4
 8002656:	4628      	mov	r0, r5
 8002658:	f000 f944 	bl	80028e4 <_fflush_r>
 800265c:	bb30      	cbnz	r0, 80026ac <__swbuf_r+0x90>
 800265e:	68a3      	ldr	r3, [r4, #8]
 8002660:	3001      	adds	r0, #1
 8002662:	3b01      	subs	r3, #1
 8002664:	60a3      	str	r3, [r4, #8]
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	6022      	str	r2, [r4, #0]
 800266c:	701e      	strb	r6, [r3, #0]
 800266e:	6963      	ldr	r3, [r4, #20]
 8002670:	4283      	cmp	r3, r0
 8002672:	d004      	beq.n	800267e <__swbuf_r+0x62>
 8002674:	89a3      	ldrh	r3, [r4, #12]
 8002676:	07db      	lsls	r3, r3, #31
 8002678:	d506      	bpl.n	8002688 <__swbuf_r+0x6c>
 800267a:	2e0a      	cmp	r6, #10
 800267c:	d104      	bne.n	8002688 <__swbuf_r+0x6c>
 800267e:	4621      	mov	r1, r4
 8002680:	4628      	mov	r0, r5
 8002682:	f000 f92f 	bl	80028e4 <_fflush_r>
 8002686:	b988      	cbnz	r0, 80026ac <__swbuf_r+0x90>
 8002688:	4638      	mov	r0, r7
 800268a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800268c:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <__swbuf_r+0x9c>)
 800268e:	429c      	cmp	r4, r3
 8002690:	d101      	bne.n	8002696 <__swbuf_r+0x7a>
 8002692:	68ac      	ldr	r4, [r5, #8]
 8002694:	e7cf      	b.n	8002636 <__swbuf_r+0x1a>
 8002696:	4b09      	ldr	r3, [pc, #36]	; (80026bc <__swbuf_r+0xa0>)
 8002698:	429c      	cmp	r4, r3
 800269a:	bf08      	it	eq
 800269c:	68ec      	ldreq	r4, [r5, #12]
 800269e:	e7ca      	b.n	8002636 <__swbuf_r+0x1a>
 80026a0:	4621      	mov	r1, r4
 80026a2:	4628      	mov	r0, r5
 80026a4:	f000 f81e 	bl	80026e4 <__swsetup_r>
 80026a8:	2800      	cmp	r0, #0
 80026aa:	d0cb      	beq.n	8002644 <__swbuf_r+0x28>
 80026ac:	f04f 37ff 	mov.w	r7, #4294967295
 80026b0:	e7ea      	b.n	8002688 <__swbuf_r+0x6c>
 80026b2:	bf00      	nop
 80026b4:	08002be0 	.word	0x08002be0
 80026b8:	08002c00 	.word	0x08002c00
 80026bc:	08002bc0 	.word	0x08002bc0

080026c0 <_write_r>:
 80026c0:	b538      	push	{r3, r4, r5, lr}
 80026c2:	4604      	mov	r4, r0
 80026c4:	4608      	mov	r0, r1
 80026c6:	4611      	mov	r1, r2
 80026c8:	2200      	movs	r2, #0
 80026ca:	4d05      	ldr	r5, [pc, #20]	; (80026e0 <_write_r+0x20>)
 80026cc:	602a      	str	r2, [r5, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	f7fe fc0c 	bl	8000eec <_write>
 80026d4:	1c43      	adds	r3, r0, #1
 80026d6:	d102      	bne.n	80026de <_write_r+0x1e>
 80026d8:	682b      	ldr	r3, [r5, #0]
 80026da:	b103      	cbz	r3, 80026de <_write_r+0x1e>
 80026dc:	6023      	str	r3, [r4, #0]
 80026de:	bd38      	pop	{r3, r4, r5, pc}
 80026e0:	200000a0 	.word	0x200000a0

080026e4 <__swsetup_r>:
 80026e4:	4b32      	ldr	r3, [pc, #200]	; (80027b0 <__swsetup_r+0xcc>)
 80026e6:	b570      	push	{r4, r5, r6, lr}
 80026e8:	681d      	ldr	r5, [r3, #0]
 80026ea:	4606      	mov	r6, r0
 80026ec:	460c      	mov	r4, r1
 80026ee:	b125      	cbz	r5, 80026fa <__swsetup_r+0x16>
 80026f0:	69ab      	ldr	r3, [r5, #24]
 80026f2:	b913      	cbnz	r3, 80026fa <__swsetup_r+0x16>
 80026f4:	4628      	mov	r0, r5
 80026f6:	f7ff fb1b 	bl	8001d30 <__sinit>
 80026fa:	4b2e      	ldr	r3, [pc, #184]	; (80027b4 <__swsetup_r+0xd0>)
 80026fc:	429c      	cmp	r4, r3
 80026fe:	d10f      	bne.n	8002720 <__swsetup_r+0x3c>
 8002700:	686c      	ldr	r4, [r5, #4]
 8002702:	89a3      	ldrh	r3, [r4, #12]
 8002704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002708:	0719      	lsls	r1, r3, #28
 800270a:	d42c      	bmi.n	8002766 <__swsetup_r+0x82>
 800270c:	06dd      	lsls	r5, r3, #27
 800270e:	d411      	bmi.n	8002734 <__swsetup_r+0x50>
 8002710:	2309      	movs	r3, #9
 8002712:	6033      	str	r3, [r6, #0]
 8002714:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	81a3      	strh	r3, [r4, #12]
 800271e:	e03e      	b.n	800279e <__swsetup_r+0xba>
 8002720:	4b25      	ldr	r3, [pc, #148]	; (80027b8 <__swsetup_r+0xd4>)
 8002722:	429c      	cmp	r4, r3
 8002724:	d101      	bne.n	800272a <__swsetup_r+0x46>
 8002726:	68ac      	ldr	r4, [r5, #8]
 8002728:	e7eb      	b.n	8002702 <__swsetup_r+0x1e>
 800272a:	4b24      	ldr	r3, [pc, #144]	; (80027bc <__swsetup_r+0xd8>)
 800272c:	429c      	cmp	r4, r3
 800272e:	bf08      	it	eq
 8002730:	68ec      	ldreq	r4, [r5, #12]
 8002732:	e7e6      	b.n	8002702 <__swsetup_r+0x1e>
 8002734:	0758      	lsls	r0, r3, #29
 8002736:	d512      	bpl.n	800275e <__swsetup_r+0x7a>
 8002738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800273a:	b141      	cbz	r1, 800274e <__swsetup_r+0x6a>
 800273c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002740:	4299      	cmp	r1, r3
 8002742:	d002      	beq.n	800274a <__swsetup_r+0x66>
 8002744:	4630      	mov	r0, r6
 8002746:	f000 f99b 	bl	8002a80 <_free_r>
 800274a:	2300      	movs	r3, #0
 800274c:	6363      	str	r3, [r4, #52]	; 0x34
 800274e:	89a3      	ldrh	r3, [r4, #12]
 8002750:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002754:	81a3      	strh	r3, [r4, #12]
 8002756:	2300      	movs	r3, #0
 8002758:	6063      	str	r3, [r4, #4]
 800275a:	6923      	ldr	r3, [r4, #16]
 800275c:	6023      	str	r3, [r4, #0]
 800275e:	89a3      	ldrh	r3, [r4, #12]
 8002760:	f043 0308 	orr.w	r3, r3, #8
 8002764:	81a3      	strh	r3, [r4, #12]
 8002766:	6923      	ldr	r3, [r4, #16]
 8002768:	b94b      	cbnz	r3, 800277e <__swsetup_r+0x9a>
 800276a:	89a3      	ldrh	r3, [r4, #12]
 800276c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002774:	d003      	beq.n	800277e <__swsetup_r+0x9a>
 8002776:	4621      	mov	r1, r4
 8002778:	4630      	mov	r0, r6
 800277a:	f000 f927 	bl	80029cc <__smakebuf_r>
 800277e:	89a0      	ldrh	r0, [r4, #12]
 8002780:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002784:	f010 0301 	ands.w	r3, r0, #1
 8002788:	d00a      	beq.n	80027a0 <__swsetup_r+0xbc>
 800278a:	2300      	movs	r3, #0
 800278c:	60a3      	str	r3, [r4, #8]
 800278e:	6963      	ldr	r3, [r4, #20]
 8002790:	425b      	negs	r3, r3
 8002792:	61a3      	str	r3, [r4, #24]
 8002794:	6923      	ldr	r3, [r4, #16]
 8002796:	b943      	cbnz	r3, 80027aa <__swsetup_r+0xc6>
 8002798:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800279c:	d1ba      	bne.n	8002714 <__swsetup_r+0x30>
 800279e:	bd70      	pop	{r4, r5, r6, pc}
 80027a0:	0781      	lsls	r1, r0, #30
 80027a2:	bf58      	it	pl
 80027a4:	6963      	ldrpl	r3, [r4, #20]
 80027a6:	60a3      	str	r3, [r4, #8]
 80027a8:	e7f4      	b.n	8002794 <__swsetup_r+0xb0>
 80027aa:	2000      	movs	r0, #0
 80027ac:	e7f7      	b.n	800279e <__swsetup_r+0xba>
 80027ae:	bf00      	nop
 80027b0:	2000000c 	.word	0x2000000c
 80027b4:	08002be0 	.word	0x08002be0
 80027b8:	08002c00 	.word	0x08002c00
 80027bc:	08002bc0 	.word	0x08002bc0

080027c0 <_close_r>:
 80027c0:	b538      	push	{r3, r4, r5, lr}
 80027c2:	2300      	movs	r3, #0
 80027c4:	4d05      	ldr	r5, [pc, #20]	; (80027dc <_close_r+0x1c>)
 80027c6:	4604      	mov	r4, r0
 80027c8:	4608      	mov	r0, r1
 80027ca:	602b      	str	r3, [r5, #0]
 80027cc:	f7fe fc2a 	bl	8001024 <_close>
 80027d0:	1c43      	adds	r3, r0, #1
 80027d2:	d102      	bne.n	80027da <_close_r+0x1a>
 80027d4:	682b      	ldr	r3, [r5, #0]
 80027d6:	b103      	cbz	r3, 80027da <_close_r+0x1a>
 80027d8:	6023      	str	r3, [r4, #0]
 80027da:	bd38      	pop	{r3, r4, r5, pc}
 80027dc:	200000a0 	.word	0x200000a0

080027e0 <__sflush_r>:
 80027e0:	898a      	ldrh	r2, [r1, #12]
 80027e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e4:	4605      	mov	r5, r0
 80027e6:	0710      	lsls	r0, r2, #28
 80027e8:	460c      	mov	r4, r1
 80027ea:	d457      	bmi.n	800289c <__sflush_r+0xbc>
 80027ec:	684b      	ldr	r3, [r1, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	dc04      	bgt.n	80027fc <__sflush_r+0x1c>
 80027f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	dc01      	bgt.n	80027fc <__sflush_r+0x1c>
 80027f8:	2000      	movs	r0, #0
 80027fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80027fe:	2e00      	cmp	r6, #0
 8002800:	d0fa      	beq.n	80027f8 <__sflush_r+0x18>
 8002802:	2300      	movs	r3, #0
 8002804:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002808:	682f      	ldr	r7, [r5, #0]
 800280a:	602b      	str	r3, [r5, #0]
 800280c:	d032      	beq.n	8002874 <__sflush_r+0x94>
 800280e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002810:	89a3      	ldrh	r3, [r4, #12]
 8002812:	075a      	lsls	r2, r3, #29
 8002814:	d505      	bpl.n	8002822 <__sflush_r+0x42>
 8002816:	6863      	ldr	r3, [r4, #4]
 8002818:	1ac0      	subs	r0, r0, r3
 800281a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800281c:	b10b      	cbz	r3, 8002822 <__sflush_r+0x42>
 800281e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002820:	1ac0      	subs	r0, r0, r3
 8002822:	2300      	movs	r3, #0
 8002824:	4602      	mov	r2, r0
 8002826:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002828:	4628      	mov	r0, r5
 800282a:	6a21      	ldr	r1, [r4, #32]
 800282c:	47b0      	blx	r6
 800282e:	1c43      	adds	r3, r0, #1
 8002830:	89a3      	ldrh	r3, [r4, #12]
 8002832:	d106      	bne.n	8002842 <__sflush_r+0x62>
 8002834:	6829      	ldr	r1, [r5, #0]
 8002836:	291d      	cmp	r1, #29
 8002838:	d82c      	bhi.n	8002894 <__sflush_r+0xb4>
 800283a:	4a29      	ldr	r2, [pc, #164]	; (80028e0 <__sflush_r+0x100>)
 800283c:	40ca      	lsrs	r2, r1
 800283e:	07d6      	lsls	r6, r2, #31
 8002840:	d528      	bpl.n	8002894 <__sflush_r+0xb4>
 8002842:	2200      	movs	r2, #0
 8002844:	6062      	str	r2, [r4, #4]
 8002846:	6922      	ldr	r2, [r4, #16]
 8002848:	04d9      	lsls	r1, r3, #19
 800284a:	6022      	str	r2, [r4, #0]
 800284c:	d504      	bpl.n	8002858 <__sflush_r+0x78>
 800284e:	1c42      	adds	r2, r0, #1
 8002850:	d101      	bne.n	8002856 <__sflush_r+0x76>
 8002852:	682b      	ldr	r3, [r5, #0]
 8002854:	b903      	cbnz	r3, 8002858 <__sflush_r+0x78>
 8002856:	6560      	str	r0, [r4, #84]	; 0x54
 8002858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800285a:	602f      	str	r7, [r5, #0]
 800285c:	2900      	cmp	r1, #0
 800285e:	d0cb      	beq.n	80027f8 <__sflush_r+0x18>
 8002860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002864:	4299      	cmp	r1, r3
 8002866:	d002      	beq.n	800286e <__sflush_r+0x8e>
 8002868:	4628      	mov	r0, r5
 800286a:	f000 f909 	bl	8002a80 <_free_r>
 800286e:	2000      	movs	r0, #0
 8002870:	6360      	str	r0, [r4, #52]	; 0x34
 8002872:	e7c2      	b.n	80027fa <__sflush_r+0x1a>
 8002874:	6a21      	ldr	r1, [r4, #32]
 8002876:	2301      	movs	r3, #1
 8002878:	4628      	mov	r0, r5
 800287a:	47b0      	blx	r6
 800287c:	1c41      	adds	r1, r0, #1
 800287e:	d1c7      	bne.n	8002810 <__sflush_r+0x30>
 8002880:	682b      	ldr	r3, [r5, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0c4      	beq.n	8002810 <__sflush_r+0x30>
 8002886:	2b1d      	cmp	r3, #29
 8002888:	d001      	beq.n	800288e <__sflush_r+0xae>
 800288a:	2b16      	cmp	r3, #22
 800288c:	d101      	bne.n	8002892 <__sflush_r+0xb2>
 800288e:	602f      	str	r7, [r5, #0]
 8002890:	e7b2      	b.n	80027f8 <__sflush_r+0x18>
 8002892:	89a3      	ldrh	r3, [r4, #12]
 8002894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002898:	81a3      	strh	r3, [r4, #12]
 800289a:	e7ae      	b.n	80027fa <__sflush_r+0x1a>
 800289c:	690f      	ldr	r7, [r1, #16]
 800289e:	2f00      	cmp	r7, #0
 80028a0:	d0aa      	beq.n	80027f8 <__sflush_r+0x18>
 80028a2:	0793      	lsls	r3, r2, #30
 80028a4:	bf18      	it	ne
 80028a6:	2300      	movne	r3, #0
 80028a8:	680e      	ldr	r6, [r1, #0]
 80028aa:	bf08      	it	eq
 80028ac:	694b      	ldreq	r3, [r1, #20]
 80028ae:	1bf6      	subs	r6, r6, r7
 80028b0:	600f      	str	r7, [r1, #0]
 80028b2:	608b      	str	r3, [r1, #8]
 80028b4:	2e00      	cmp	r6, #0
 80028b6:	dd9f      	ble.n	80027f8 <__sflush_r+0x18>
 80028b8:	4633      	mov	r3, r6
 80028ba:	463a      	mov	r2, r7
 80028bc:	4628      	mov	r0, r5
 80028be:	6a21      	ldr	r1, [r4, #32]
 80028c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80028c4:	47e0      	blx	ip
 80028c6:	2800      	cmp	r0, #0
 80028c8:	dc06      	bgt.n	80028d8 <__sflush_r+0xf8>
 80028ca:	89a3      	ldrh	r3, [r4, #12]
 80028cc:	f04f 30ff 	mov.w	r0, #4294967295
 80028d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028d4:	81a3      	strh	r3, [r4, #12]
 80028d6:	e790      	b.n	80027fa <__sflush_r+0x1a>
 80028d8:	4407      	add	r7, r0
 80028da:	1a36      	subs	r6, r6, r0
 80028dc:	e7ea      	b.n	80028b4 <__sflush_r+0xd4>
 80028de:	bf00      	nop
 80028e0:	20400001 	.word	0x20400001

080028e4 <_fflush_r>:
 80028e4:	b538      	push	{r3, r4, r5, lr}
 80028e6:	690b      	ldr	r3, [r1, #16]
 80028e8:	4605      	mov	r5, r0
 80028ea:	460c      	mov	r4, r1
 80028ec:	b913      	cbnz	r3, 80028f4 <_fflush_r+0x10>
 80028ee:	2500      	movs	r5, #0
 80028f0:	4628      	mov	r0, r5
 80028f2:	bd38      	pop	{r3, r4, r5, pc}
 80028f4:	b118      	cbz	r0, 80028fe <_fflush_r+0x1a>
 80028f6:	6983      	ldr	r3, [r0, #24]
 80028f8:	b90b      	cbnz	r3, 80028fe <_fflush_r+0x1a>
 80028fa:	f7ff fa19 	bl	8001d30 <__sinit>
 80028fe:	4b14      	ldr	r3, [pc, #80]	; (8002950 <_fflush_r+0x6c>)
 8002900:	429c      	cmp	r4, r3
 8002902:	d11b      	bne.n	800293c <_fflush_r+0x58>
 8002904:	686c      	ldr	r4, [r5, #4]
 8002906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0ef      	beq.n	80028ee <_fflush_r+0xa>
 800290e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002910:	07d0      	lsls	r0, r2, #31
 8002912:	d404      	bmi.n	800291e <_fflush_r+0x3a>
 8002914:	0599      	lsls	r1, r3, #22
 8002916:	d402      	bmi.n	800291e <_fflush_r+0x3a>
 8002918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800291a:	f7ff faa7 	bl	8001e6c <__retarget_lock_acquire_recursive>
 800291e:	4628      	mov	r0, r5
 8002920:	4621      	mov	r1, r4
 8002922:	f7ff ff5d 	bl	80027e0 <__sflush_r>
 8002926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002928:	4605      	mov	r5, r0
 800292a:	07da      	lsls	r2, r3, #31
 800292c:	d4e0      	bmi.n	80028f0 <_fflush_r+0xc>
 800292e:	89a3      	ldrh	r3, [r4, #12]
 8002930:	059b      	lsls	r3, r3, #22
 8002932:	d4dd      	bmi.n	80028f0 <_fflush_r+0xc>
 8002934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002936:	f7ff fa9a 	bl	8001e6e <__retarget_lock_release_recursive>
 800293a:	e7d9      	b.n	80028f0 <_fflush_r+0xc>
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <_fflush_r+0x70>)
 800293e:	429c      	cmp	r4, r3
 8002940:	d101      	bne.n	8002946 <_fflush_r+0x62>
 8002942:	68ac      	ldr	r4, [r5, #8]
 8002944:	e7df      	b.n	8002906 <_fflush_r+0x22>
 8002946:	4b04      	ldr	r3, [pc, #16]	; (8002958 <_fflush_r+0x74>)
 8002948:	429c      	cmp	r4, r3
 800294a:	bf08      	it	eq
 800294c:	68ec      	ldreq	r4, [r5, #12]
 800294e:	e7da      	b.n	8002906 <_fflush_r+0x22>
 8002950:	08002be0 	.word	0x08002be0
 8002954:	08002c00 	.word	0x08002c00
 8002958:	08002bc0 	.word	0x08002bc0

0800295c <_lseek_r>:
 800295c:	b538      	push	{r3, r4, r5, lr}
 800295e:	4604      	mov	r4, r0
 8002960:	4608      	mov	r0, r1
 8002962:	4611      	mov	r1, r2
 8002964:	2200      	movs	r2, #0
 8002966:	4d05      	ldr	r5, [pc, #20]	; (800297c <_lseek_r+0x20>)
 8002968:	602a      	str	r2, [r5, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	f7fe fb7e 	bl	800106c <_lseek>
 8002970:	1c43      	adds	r3, r0, #1
 8002972:	d102      	bne.n	800297a <_lseek_r+0x1e>
 8002974:	682b      	ldr	r3, [r5, #0]
 8002976:	b103      	cbz	r3, 800297a <_lseek_r+0x1e>
 8002978:	6023      	str	r3, [r4, #0]
 800297a:	bd38      	pop	{r3, r4, r5, pc}
 800297c:	200000a0 	.word	0x200000a0

08002980 <__swhatbuf_r>:
 8002980:	b570      	push	{r4, r5, r6, lr}
 8002982:	460e      	mov	r6, r1
 8002984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002988:	4614      	mov	r4, r2
 800298a:	2900      	cmp	r1, #0
 800298c:	461d      	mov	r5, r3
 800298e:	b096      	sub	sp, #88	; 0x58
 8002990:	da08      	bge.n	80029a4 <__swhatbuf_r+0x24>
 8002992:	2200      	movs	r2, #0
 8002994:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002998:	602a      	str	r2, [r5, #0]
 800299a:	061a      	lsls	r2, r3, #24
 800299c:	d410      	bmi.n	80029c0 <__swhatbuf_r+0x40>
 800299e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029a2:	e00e      	b.n	80029c2 <__swhatbuf_r+0x42>
 80029a4:	466a      	mov	r2, sp
 80029a6:	f000 f8c5 	bl	8002b34 <_fstat_r>
 80029aa:	2800      	cmp	r0, #0
 80029ac:	dbf1      	blt.n	8002992 <__swhatbuf_r+0x12>
 80029ae:	9a01      	ldr	r2, [sp, #4]
 80029b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80029b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80029b8:	425a      	negs	r2, r3
 80029ba:	415a      	adcs	r2, r3
 80029bc:	602a      	str	r2, [r5, #0]
 80029be:	e7ee      	b.n	800299e <__swhatbuf_r+0x1e>
 80029c0:	2340      	movs	r3, #64	; 0x40
 80029c2:	2000      	movs	r0, #0
 80029c4:	6023      	str	r3, [r4, #0]
 80029c6:	b016      	add	sp, #88	; 0x58
 80029c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080029cc <__smakebuf_r>:
 80029cc:	898b      	ldrh	r3, [r1, #12]
 80029ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80029d0:	079d      	lsls	r5, r3, #30
 80029d2:	4606      	mov	r6, r0
 80029d4:	460c      	mov	r4, r1
 80029d6:	d507      	bpl.n	80029e8 <__smakebuf_r+0x1c>
 80029d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80029dc:	6023      	str	r3, [r4, #0]
 80029de:	6123      	str	r3, [r4, #16]
 80029e0:	2301      	movs	r3, #1
 80029e2:	6163      	str	r3, [r4, #20]
 80029e4:	b002      	add	sp, #8
 80029e6:	bd70      	pop	{r4, r5, r6, pc}
 80029e8:	466a      	mov	r2, sp
 80029ea:	ab01      	add	r3, sp, #4
 80029ec:	f7ff ffc8 	bl	8002980 <__swhatbuf_r>
 80029f0:	9900      	ldr	r1, [sp, #0]
 80029f2:	4605      	mov	r5, r0
 80029f4:	4630      	mov	r0, r6
 80029f6:	f7ff fa5b 	bl	8001eb0 <_malloc_r>
 80029fa:	b948      	cbnz	r0, 8002a10 <__smakebuf_r+0x44>
 80029fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a00:	059a      	lsls	r2, r3, #22
 8002a02:	d4ef      	bmi.n	80029e4 <__smakebuf_r+0x18>
 8002a04:	f023 0303 	bic.w	r3, r3, #3
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	81a3      	strh	r3, [r4, #12]
 8002a0e:	e7e3      	b.n	80029d8 <__smakebuf_r+0xc>
 8002a10:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <__smakebuf_r+0x7c>)
 8002a12:	62b3      	str	r3, [r6, #40]	; 0x28
 8002a14:	89a3      	ldrh	r3, [r4, #12]
 8002a16:	6020      	str	r0, [r4, #0]
 8002a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a1c:	81a3      	strh	r3, [r4, #12]
 8002a1e:	9b00      	ldr	r3, [sp, #0]
 8002a20:	6120      	str	r0, [r4, #16]
 8002a22:	6163      	str	r3, [r4, #20]
 8002a24:	9b01      	ldr	r3, [sp, #4]
 8002a26:	b15b      	cbz	r3, 8002a40 <__smakebuf_r+0x74>
 8002a28:	4630      	mov	r0, r6
 8002a2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a2e:	f000 f893 	bl	8002b58 <_isatty_r>
 8002a32:	b128      	cbz	r0, 8002a40 <__smakebuf_r+0x74>
 8002a34:	89a3      	ldrh	r3, [r4, #12]
 8002a36:	f023 0303 	bic.w	r3, r3, #3
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	81a3      	strh	r3, [r4, #12]
 8002a40:	89a0      	ldrh	r0, [r4, #12]
 8002a42:	4305      	orrs	r5, r0
 8002a44:	81a5      	strh	r5, [r4, #12]
 8002a46:	e7cd      	b.n	80029e4 <__smakebuf_r+0x18>
 8002a48:	08001cc9 	.word	0x08001cc9

08002a4c <memchr>:
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	b510      	push	{r4, lr}
 8002a50:	b2c9      	uxtb	r1, r1
 8002a52:	4402      	add	r2, r0
 8002a54:	4293      	cmp	r3, r2
 8002a56:	4618      	mov	r0, r3
 8002a58:	d101      	bne.n	8002a5e <memchr+0x12>
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	e003      	b.n	8002a66 <memchr+0x1a>
 8002a5e:	7804      	ldrb	r4, [r0, #0]
 8002a60:	3301      	adds	r3, #1
 8002a62:	428c      	cmp	r4, r1
 8002a64:	d1f6      	bne.n	8002a54 <memchr+0x8>
 8002a66:	bd10      	pop	{r4, pc}

08002a68 <__malloc_lock>:
 8002a68:	4801      	ldr	r0, [pc, #4]	; (8002a70 <__malloc_lock+0x8>)
 8002a6a:	f7ff b9ff 	b.w	8001e6c <__retarget_lock_acquire_recursive>
 8002a6e:	bf00      	nop
 8002a70:	20000094 	.word	0x20000094

08002a74 <__malloc_unlock>:
 8002a74:	4801      	ldr	r0, [pc, #4]	; (8002a7c <__malloc_unlock+0x8>)
 8002a76:	f7ff b9fa 	b.w	8001e6e <__retarget_lock_release_recursive>
 8002a7a:	bf00      	nop
 8002a7c:	20000094 	.word	0x20000094

08002a80 <_free_r>:
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	4605      	mov	r5, r0
 8002a84:	2900      	cmp	r1, #0
 8002a86:	d040      	beq.n	8002b0a <_free_r+0x8a>
 8002a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a8c:	1f0c      	subs	r4, r1, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bfb8      	it	lt
 8002a92:	18e4      	addlt	r4, r4, r3
 8002a94:	f7ff ffe8 	bl	8002a68 <__malloc_lock>
 8002a98:	4a1c      	ldr	r2, [pc, #112]	; (8002b0c <_free_r+0x8c>)
 8002a9a:	6813      	ldr	r3, [r2, #0]
 8002a9c:	b933      	cbnz	r3, 8002aac <_free_r+0x2c>
 8002a9e:	6063      	str	r3, [r4, #4]
 8002aa0:	6014      	str	r4, [r2, #0]
 8002aa2:	4628      	mov	r0, r5
 8002aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002aa8:	f7ff bfe4 	b.w	8002a74 <__malloc_unlock>
 8002aac:	42a3      	cmp	r3, r4
 8002aae:	d908      	bls.n	8002ac2 <_free_r+0x42>
 8002ab0:	6820      	ldr	r0, [r4, #0]
 8002ab2:	1821      	adds	r1, r4, r0
 8002ab4:	428b      	cmp	r3, r1
 8002ab6:	bf01      	itttt	eq
 8002ab8:	6819      	ldreq	r1, [r3, #0]
 8002aba:	685b      	ldreq	r3, [r3, #4]
 8002abc:	1809      	addeq	r1, r1, r0
 8002abe:	6021      	streq	r1, [r4, #0]
 8002ac0:	e7ed      	b.n	8002a9e <_free_r+0x1e>
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	b10b      	cbz	r3, 8002acc <_free_r+0x4c>
 8002ac8:	42a3      	cmp	r3, r4
 8002aca:	d9fa      	bls.n	8002ac2 <_free_r+0x42>
 8002acc:	6811      	ldr	r1, [r2, #0]
 8002ace:	1850      	adds	r0, r2, r1
 8002ad0:	42a0      	cmp	r0, r4
 8002ad2:	d10b      	bne.n	8002aec <_free_r+0x6c>
 8002ad4:	6820      	ldr	r0, [r4, #0]
 8002ad6:	4401      	add	r1, r0
 8002ad8:	1850      	adds	r0, r2, r1
 8002ada:	4283      	cmp	r3, r0
 8002adc:	6011      	str	r1, [r2, #0]
 8002ade:	d1e0      	bne.n	8002aa2 <_free_r+0x22>
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4401      	add	r1, r0
 8002ae6:	6011      	str	r1, [r2, #0]
 8002ae8:	6053      	str	r3, [r2, #4]
 8002aea:	e7da      	b.n	8002aa2 <_free_r+0x22>
 8002aec:	d902      	bls.n	8002af4 <_free_r+0x74>
 8002aee:	230c      	movs	r3, #12
 8002af0:	602b      	str	r3, [r5, #0]
 8002af2:	e7d6      	b.n	8002aa2 <_free_r+0x22>
 8002af4:	6820      	ldr	r0, [r4, #0]
 8002af6:	1821      	adds	r1, r4, r0
 8002af8:	428b      	cmp	r3, r1
 8002afa:	bf01      	itttt	eq
 8002afc:	6819      	ldreq	r1, [r3, #0]
 8002afe:	685b      	ldreq	r3, [r3, #4]
 8002b00:	1809      	addeq	r1, r1, r0
 8002b02:	6021      	streq	r1, [r4, #0]
 8002b04:	6063      	str	r3, [r4, #4]
 8002b06:	6054      	str	r4, [r2, #4]
 8002b08:	e7cb      	b.n	8002aa2 <_free_r+0x22>
 8002b0a:	bd38      	pop	{r3, r4, r5, pc}
 8002b0c:	20000098 	.word	0x20000098

08002b10 <_read_r>:
 8002b10:	b538      	push	{r3, r4, r5, lr}
 8002b12:	4604      	mov	r4, r0
 8002b14:	4608      	mov	r0, r1
 8002b16:	4611      	mov	r1, r2
 8002b18:	2200      	movs	r2, #0
 8002b1a:	4d05      	ldr	r5, [pc, #20]	; (8002b30 <_read_r+0x20>)
 8002b1c:	602a      	str	r2, [r5, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f7fe fa63 	bl	8000fea <_read>
 8002b24:	1c43      	adds	r3, r0, #1
 8002b26:	d102      	bne.n	8002b2e <_read_r+0x1e>
 8002b28:	682b      	ldr	r3, [r5, #0]
 8002b2a:	b103      	cbz	r3, 8002b2e <_read_r+0x1e>
 8002b2c:	6023      	str	r3, [r4, #0]
 8002b2e:	bd38      	pop	{r3, r4, r5, pc}
 8002b30:	200000a0 	.word	0x200000a0

08002b34 <_fstat_r>:
 8002b34:	b538      	push	{r3, r4, r5, lr}
 8002b36:	2300      	movs	r3, #0
 8002b38:	4d06      	ldr	r5, [pc, #24]	; (8002b54 <_fstat_r+0x20>)
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	602b      	str	r3, [r5, #0]
 8002b42:	f7fe fa7a 	bl	800103a <_fstat>
 8002b46:	1c43      	adds	r3, r0, #1
 8002b48:	d102      	bne.n	8002b50 <_fstat_r+0x1c>
 8002b4a:	682b      	ldr	r3, [r5, #0]
 8002b4c:	b103      	cbz	r3, 8002b50 <_fstat_r+0x1c>
 8002b4e:	6023      	str	r3, [r4, #0]
 8002b50:	bd38      	pop	{r3, r4, r5, pc}
 8002b52:	bf00      	nop
 8002b54:	200000a0 	.word	0x200000a0

08002b58 <_isatty_r>:
 8002b58:	b538      	push	{r3, r4, r5, lr}
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	4d05      	ldr	r5, [pc, #20]	; (8002b74 <_isatty_r+0x1c>)
 8002b5e:	4604      	mov	r4, r0
 8002b60:	4608      	mov	r0, r1
 8002b62:	602b      	str	r3, [r5, #0]
 8002b64:	f7fe fa78 	bl	8001058 <_isatty>
 8002b68:	1c43      	adds	r3, r0, #1
 8002b6a:	d102      	bne.n	8002b72 <_isatty_r+0x1a>
 8002b6c:	682b      	ldr	r3, [r5, #0]
 8002b6e:	b103      	cbz	r3, 8002b72 <_isatty_r+0x1a>
 8002b70:	6023      	str	r3, [r4, #0]
 8002b72:	bd38      	pop	{r3, r4, r5, pc}
 8002b74:	200000a0 	.word	0x200000a0

08002b78 <_init>:
 8002b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7a:	bf00      	nop
 8002b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b7e:	bc08      	pop	{r3}
 8002b80:	469e      	mov	lr, r3
 8002b82:	4770      	bx	lr

08002b84 <_fini>:
 8002b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b86:	bf00      	nop
 8002b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b8a:	bc08      	pop	{r3}
 8002b8c:	469e      	mov	lr, r3
 8002b8e:	4770      	bx	lr
