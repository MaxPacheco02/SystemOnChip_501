
LAB4_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080036c0  080036c0  000136c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f4  080037f4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080037f4  080037f4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037f4  080037f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037f4  080037f4  000137f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037f8  080037f8  000137f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080037fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001088  20000074  08003870  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010fc  08003870  000210fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eda5  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002700  00000000  00000000  0002ee42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00031548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  000323f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019efb  00000000  00000000  00033170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8c8  00000000  00000000  0004d06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009182d  00000000  00000000  0005c933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee160  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041fc  00000000  00000000  000ee1b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080036a8 	.word	0x080036a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080036a8 	.word	0x080036a8

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b096      	sub	sp, #88	; 0x58
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fb65 	bl	8000854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f853 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f893 	bl	80002b8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init();
 8000192:	f000 f8cb 	bl	800032c <USER_RCC_Init>
  USER_GPIO_Init();
 8000196:	f000 f8dd 	bl	8000354 <USER_GPIO_Init>
  USER_USART2_Init();
 800019a:	f000 f90b 	bl	80003b4 <USER_USART2_Init>
  //osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
  //defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(task1, Task1, osPriorityRealtime, 0, 128);
 800019e:	4b1e      	ldr	r3, [pc, #120]	; (8000218 <main+0x98>)
 80001a0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80001a4:	461d      	mov	r5, r3
 80001a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskHandle1 = osThreadCreate(osThread(task1), NULL);
 80001b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001b6:	2100      	movs	r1, #0
 80001b8:	4618      	mov	r0, r3
 80001ba:	f001 fafb 	bl	80017b4 <osThreadCreate>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a16      	ldr	r2, [pc, #88]	; (800021c <main+0x9c>)
 80001c2:	6013      	str	r3, [r2, #0]

  osThreadDef(task2, Task2, osPriorityLow, 0, 128);
 80001c4:	4b16      	ldr	r3, [pc, #88]	; (8000220 <main+0xa0>)
 80001c6:	f107 0420 	add.w	r4, r7, #32
 80001ca:	461d      	mov	r5, r3
 80001cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskHandle2 = osThreadCreate(osThread(task2), NULL);
 80001d8:	f107 0320 	add.w	r3, r7, #32
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f001 fae8 	bl	80017b4 <osThreadCreate>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4a0f      	ldr	r2, [pc, #60]	; (8000224 <main+0xa4>)
 80001e8:	6013      	str	r3, [r2, #0]

  osThreadDef(task3, Task3, osPriorityNormal, 0, 128);
 80001ea:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <main+0xa8>)
 80001ec:	1d3c      	adds	r4, r7, #4
 80001ee:	461d      	mov	r5, r3
 80001f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskHandle3 = osThreadCreate(osThread(task3), NULL);
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2100      	movs	r1, #0
 8000200:	4618      	mov	r0, r3
 8000202:	f001 fad7 	bl	80017b4 <osThreadCreate>
 8000206:	4603      	mov	r3, r0
 8000208:	4a08      	ldr	r2, [pc, #32]	; (800022c <main+0xac>)
 800020a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nStarting...\r\n");
 800020c:	4808      	ldr	r0, [pc, #32]	; (8000230 <main+0xb0>)
 800020e:	f002 fee5 	bl	8002fdc <puts>
  osKernelStart();
 8000212:	f001 fac8 	bl	80017a6 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000216:	e7fe      	b.n	8000216 <main+0x96>
 8000218:	080036fc 	.word	0x080036fc
 800021c:	20000344 	.word	0x20000344
 8000220:	08003718 	.word	0x08003718
 8000224:	20000348 	.word	0x20000348
 8000228:	08003734 	.word	0x08003734
 800022c:	2000034c 	.word	0x2000034c
 8000230:	080036d8 	.word	0x080036d8

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b090      	sub	sp, #64	; 0x40
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	2228      	movs	r2, #40	; 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f002 fdbf 	bl	8002dc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000256:	2302      	movs	r3, #2
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025a:	2301      	movs	r3, #1
 800025c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025e:	2310      	movs	r3, #16
 8000260:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000262:	2302      	movs	r3, #2
 8000264:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000266:	2300      	movs	r3, #0
 8000268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800026a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800026e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000270:	f107 0318 	add.w	r3, r7, #24
 8000274:	4618      	mov	r0, r3
 8000276:	f000 fbff 	bl	8000a78 <HAL_RCC_OscConfig>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000280:	f000 f936 	bl	80004f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000284:	230f      	movs	r3, #15
 8000286:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000288:	2302      	movs	r3, #2
 800028a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000294:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2102      	movs	r1, #2
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fe6c 	bl	8000f7c <HAL_RCC_ClockConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002aa:	f000 f921 	bl	80004f0 <Error_Handler>
  }
}
 80002ae:	bf00      	nop
 80002b0:	3740      	adds	r7, #64	; 0x40
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002be:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <MX_GPIO_Init+0x70>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	4a19      	ldr	r2, [pc, #100]	; (8000328 <MX_GPIO_Init+0x70>)
 80002c4:	f043 0310 	orr.w	r3, r3, #16
 80002c8:	6193      	str	r3, [r2, #24]
 80002ca:	4b17      	ldr	r3, [pc, #92]	; (8000328 <MX_GPIO_Init+0x70>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	f003 0310 	and.w	r3, r3, #16
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d6:	4b14      	ldr	r3, [pc, #80]	; (8000328 <MX_GPIO_Init+0x70>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	4a13      	ldr	r2, [pc, #76]	; (8000328 <MX_GPIO_Init+0x70>)
 80002dc:	f043 0320 	orr.w	r3, r3, #32
 80002e0:	6193      	str	r3, [r2, #24]
 80002e2:	4b11      	ldr	r3, [pc, #68]	; (8000328 <MX_GPIO_Init+0x70>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	f003 0320 	and.w	r3, r3, #32
 80002ea:	60bb      	str	r3, [r7, #8]
 80002ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <MX_GPIO_Init+0x70>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <MX_GPIO_Init+0x70>)
 80002f4:	f043 0304 	orr.w	r3, r3, #4
 80002f8:	6193      	str	r3, [r2, #24]
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <MX_GPIO_Init+0x70>)
 80002fc:	699b      	ldr	r3, [r3, #24]
 80002fe:	f003 0304 	and.w	r3, r3, #4
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <MX_GPIO_Init+0x70>)
 8000308:	699b      	ldr	r3, [r3, #24]
 800030a:	4a07      	ldr	r2, [pc, #28]	; (8000328 <MX_GPIO_Init+0x70>)
 800030c:	f043 0308 	orr.w	r3, r3, #8
 8000310:	6193      	str	r3, [r2, #24]
 8000312:	4b05      	ldr	r3, [pc, #20]	; (8000328 <MX_GPIO_Init+0x70>)
 8000314:	699b      	ldr	r3, [r3, #24]
 8000316:	f003 0308 	and.w	r3, r3, #8
 800031a:	603b      	str	r3, [r7, #0]
 800031c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800031e:	bf00      	nop
 8000320:	3714      	adds	r7, #20
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr
 8000328:	40021000 	.word	0x40021000

0800032c <USER_RCC_Init>:

/* USER CODE BEGIN 4 */

void USER_RCC_Init(void){
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	RCC->APB1ENR	|=	 RCC_APB1ENR_USART2EN;//  	USART2 clock enable
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <USER_RCC_Init+0x24>)
 8000332:	69db      	ldr	r3, [r3, #28]
 8000334:	4a06      	ldr	r2, [pc, #24]	; (8000350 <USER_RCC_Init+0x24>)
 8000336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800033a:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR	|=	 RCC_APB2ENR_IOPAEN;//    	I/O port A clock enable
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <USER_RCC_Init+0x24>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a03      	ldr	r2, [pc, #12]	; (8000350 <USER_RCC_Init+0x24>)
 8000342:	f043 0304 	orr.w	r3, r3, #4
 8000346:	6193      	str	r3, [r2, #24]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr
 8000350:	40021000 	.word	0x40021000

08000354 <USER_GPIO_Init>:

void USER_GPIO_Init(void){
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BR5;//			PA5 -> 0, LD2 OFF
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <USER_GPIO_Init+0x5c>)
 800035a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800035e:	611a      	str	r2, [r3, #16]
	//pin PA5 as output push-pull max speed 10MHz
	GPIOA->CRL &= ~GPIO_CRL_CNF5 & ~GPIO_CRL_MODE5_1;
 8000360:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <USER_GPIO_Init+0x5c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a12      	ldr	r2, [pc, #72]	; (80003b0 <USER_GPIO_Init+0x5c>)
 8000366:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800036a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE5_0;
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <USER_GPIO_Init+0x5c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a0f      	ldr	r2, [pc, #60]	; (80003b0 <USER_GPIO_Init+0x5c>)
 8000372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000376:	6013      	str	r3, [r2, #0]

	//pin PA2 (USART2_TX) as alternate function output push-pull, max speed 10MHz
	GPIOA->CRL	&=	~GPIO_CRL_CNF2_0 & ~GPIO_CRL_MODE2_1;
 8000378:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <USER_GPIO_Init+0x5c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a0c      	ldr	r2, [pc, #48]	; (80003b0 <USER_GPIO_Init+0x5c>)
 800037e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000382:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF2_1 | GPIO_CRL_MODE2_0;
 8000384:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <USER_GPIO_Init+0x5c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a09      	ldr	r2, [pc, #36]	; (80003b0 <USER_GPIO_Init+0x5c>)
 800038a:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
 800038e:	6013      	str	r3, [r2, #0]

	//pin PA3 (USART_RX) as input pull-up
	GPIOA->CRL	&=	~GPIO_CRL_CNF3_0 & ~GPIO_CRL_MODE3;
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <USER_GPIO_Init+0x5c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a06      	ldr	r2, [pc, #24]	; (80003b0 <USER_GPIO_Init+0x5c>)
 8000396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800039a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF3_1;
 800039c:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <USER_GPIO_Init+0x5c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a03      	ldr	r2, [pc, #12]	; (80003b0 <USER_GPIO_Init+0x5c>)
 80003a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003a6:	6013      	str	r3, [r2, #0]
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	40010800 	.word	0x40010800

080003b4 <USER_USART2_Init>:

void USER_USART2_Init(void){
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
	USART2->CR1	|=	 USART_CR1_UE;//		USART enabled
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <USER_USART2_Init+0x50>)
 80003ba:	68db      	ldr	r3, [r3, #12]
 80003bc:	4a11      	ldr	r2, [pc, #68]	; (8000404 <USER_USART2_Init+0x50>)
 80003be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003c2:	60d3      	str	r3, [r2, #12]
	USART2->CR1	&=	~USART_CR1_M//		  	1 start bit, 8 data bits
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <USER_USART2_Init+0x50>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	4a0e      	ldr	r2, [pc, #56]	; (8000404 <USER_USART2_Init+0x50>)
 80003ca:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 80003ce:	60d3      	str	r3, [r2, #12]
			&	~USART_CR1_PCE;//		parity control disabled
	USART2->CR2	&=	~USART_CR2_STOP;//  		1 stop bit
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <USER_USART2_Init+0x50>)
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	4a0b      	ldr	r2, [pc, #44]	; (8000404 <USER_USART2_Init+0x50>)
 80003d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003da:	6113      	str	r3, [r2, #16]
	USART2->BRR	 =	 0xD05;//			9600 bps -> 208.33,
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <USER_USART2_Init+0x50>)
 80003de:	f640 5205 	movw	r2, #3333	; 0xd05
 80003e2:	609a      	str	r2, [r3, #8]
	//NEW USARTDIV = 32*10^6/(16*115200)=17.361
	//BRR = [17->HEX=11][.361*16->HEX=6]=116
	//USART2->BRR = 0x116;


	USART2->CR1	|=	 USART_CR1_TE;//		        transmitter enabled
 80003e4:	4b07      	ldr	r3, [pc, #28]	; (8000404 <USER_USART2_Init+0x50>)
 80003e6:	68db      	ldr	r3, [r3, #12]
 80003e8:	4a06      	ldr	r2, [pc, #24]	; (8000404 <USER_USART2_Init+0x50>)
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	60d3      	str	r3, [r2, #12]
	USART2->CR1	|=	 USART_CR1_RE;//		        receiver enabled
 80003f0:	4b04      	ldr	r3, [pc, #16]	; (8000404 <USER_USART2_Init+0x50>)
 80003f2:	68db      	ldr	r3, [r3, #12]
 80003f4:	4a03      	ldr	r2, [pc, #12]	; (8000404 <USER_USART2_Init+0x50>)
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	60d3      	str	r3, [r2, #12]
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40004400 	.word	0x40004400

08000408 <USER_USART2_Transmit>:

void USER_USART2_Transmit(uint8_t *pData, uint16_t size ){
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	460b      	mov	r3, r1
 8000412:	807b      	strh	r3, [r7, #2]
	for( int i = 0; i < size; i++ ){
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	e00f      	b.n	800043a <USER_USART2_Transmit+0x32>
		while( ( USART2->SR & USART_SR_TXE ) == 0 ){}//	wait until transmit reg is empty
 800041a:	bf00      	nop
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <USER_USART2_Transmit+0x48>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000424:	2b00      	cmp	r3, #0
 8000426:	d0f9      	beq.n	800041c <USER_USART2_Transmit+0x14>
		USART2->DR = *pData++;//			transmit data
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	1c5a      	adds	r2, r3, #1
 800042c:	607a      	str	r2, [r7, #4]
 800042e:	781a      	ldrb	r2, [r3, #0]
 8000430:	4b07      	ldr	r3, [pc, #28]	; (8000450 <USER_USART2_Transmit+0x48>)
 8000432:	605a      	str	r2, [r3, #4]
	for( int i = 0; i < size; i++ ){
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3301      	adds	r3, #1
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	887b      	ldrh	r3, [r7, #2]
 800043c:	68fa      	ldr	r2, [r7, #12]
 800043e:	429a      	cmp	r2, r3
 8000440:	dbeb      	blt.n	800041a <USER_USART2_Transmit+0x12>
	}
}
 8000442:	bf00      	nop
 8000444:	bf00      	nop
 8000446:	3714      	adds	r7, #20
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	40004400 	.word	0x40004400

08000454 <Task1>:
	while((USART2->SR & USART_SR_RXNE) == 0){}
	return USART2->DR;
}

void Task1(void const * argument)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  USER_USART2_Transmit("T1", 2);
 800045c:	2102      	movs	r1, #2
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <Task1+0x20>)
 8000460:	f7ff ffd2 	bl	8000408 <USER_USART2_Transmit>
	  printf("\r\n");
 8000464:	4804      	ldr	r0, [pc, #16]	; (8000478 <Task1+0x24>)
 8000466:	f002 fdb9 	bl	8002fdc <puts>
	  osDelay(1000);
 800046a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800046e:	f001 f9ed 	bl	800184c <osDelay>
	  USER_USART2_Transmit("T1", 2);
 8000472:	e7f3      	b.n	800045c <Task1+0x8>
 8000474:	08003750 	.word	0x08003750
 8000478:	08003754 	.word	0x08003754

0800047c <Task2>:
  }
}

void Task2(void const * argument)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  USER_USART2_Transmit("T2", 2);
 8000484:	2102      	movs	r1, #2
 8000486:	4805      	ldr	r0, [pc, #20]	; (800049c <Task2+0x20>)
 8000488:	f7ff ffbe 	bl	8000408 <USER_USART2_Transmit>
	  printf("\r\n");
 800048c:	4804      	ldr	r0, [pc, #16]	; (80004a0 <Task2+0x24>)
 800048e:	f002 fda5 	bl	8002fdc <puts>
	  osDelay(4000);
 8000492:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000496:	f001 f9d9 	bl	800184c <osDelay>
	  USER_USART2_Transmit("T2", 2);
 800049a:	e7f3      	b.n	8000484 <Task2+0x8>
 800049c:	08003758 	.word	0x08003758
 80004a0:	08003754 	.word	0x08003754

080004a4 <Task3>:
  }
}

void Task3(void const * argument)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  USER_USART2_Transmit("T3", 2);
 80004ac:	2102      	movs	r1, #2
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <Task3+0x20>)
 80004b0:	f7ff ffaa 	bl	8000408 <USER_USART2_Transmit>
	  printf("\r\n");
 80004b4:	4804      	ldr	r0, [pc, #16]	; (80004c8 <Task3+0x24>)
 80004b6:	f002 fd91 	bl	8002fdc <puts>
	  osDelay(2000);
 80004ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004be:	f001 f9c5 	bl	800184c <osDelay>
	  USER_USART2_Transmit("T3", 2);
 80004c2:	e7f3      	b.n	80004ac <Task3+0x8>
 80004c4:	0800375c 	.word	0x0800375c
 80004c8:	08003754 	.word	0x08003754

080004cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d101      	bne.n	80004e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004de:	f000 f9cf 	bl	8000880 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40000800 	.word	0x40000800

080004f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <Error_Handler+0x8>
	...

080004fc <_write>:
 */

#include "myprintf.h"
#include "main.h"

int _write(int file, char *ptr, int len){
 80004fc:	b480      	push	{r7}
 80004fe:	b087      	sub	sp, #28
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	e00f      	b.n	800052e <_write+0x32>
		while( ( USART2->SR & USART_SR_TXE ) == 0 ){}
 800050e:	bf00      	nop
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <_write+0x48>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000518:	2b00      	cmp	r3, #0
 800051a:	d0f9      	beq.n	8000510 <_write+0x14>
		USART2->DR = *ptr++;
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	1c5a      	adds	r2, r3, #1
 8000520:	60ba      	str	r2, [r7, #8]
 8000522:	781a      	ldrb	r2, [r3, #0]
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <_write+0x48>)
 8000526:	605a      	str	r2, [r3, #4]
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	3301      	adds	r3, #1
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	697a      	ldr	r2, [r7, #20]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	429a      	cmp	r2, r3
 8000534:	dbeb      	blt.n	800050e <_write+0x12>
	}
	return len;
 8000536:	687b      	ldr	r3, [r7, #4]
}
 8000538:	4618      	mov	r0, r3
 800053a:	371c      	adds	r7, #28
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40004400 	.word	0x40004400

08000548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800054e:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <HAL_MspInit+0x68>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4a17      	ldr	r2, [pc, #92]	; (80005b0 <HAL_MspInit+0x68>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6193      	str	r3, [r2, #24]
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <HAL_MspInit+0x68>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000566:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_MspInit+0x68>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	4a11      	ldr	r2, [pc, #68]	; (80005b0 <HAL_MspInit+0x68>)
 800056c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000570:	61d3      	str	r3, [r2, #28]
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <HAL_MspInit+0x68>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	210f      	movs	r1, #15
 8000582:	f06f 0001 	mvn.w	r0, #1
 8000586:	f000 fa4c 	bl	8000a22 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <HAL_MspInit+0x6c>)
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_MspInit+0x6c>)
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40021000 	.word	0x40021000
 80005b4:	40010000 	.word	0x40010000

080005b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08e      	sub	sp, #56	; 0x38
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80005c0:	2300      	movs	r3, #0
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80005c4:	2300      	movs	r3, #0
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80005c8:	2300      	movs	r3, #0
 80005ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80005ce:	4b34      	ldr	r3, [pc, #208]	; (80006a0 <HAL_InitTick+0xe8>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a33      	ldr	r2, [pc, #204]	; (80006a0 <HAL_InitTick+0xe8>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b31      	ldr	r3, [pc, #196]	; (80006a0 <HAL_InitTick+0xe8>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005e6:	f107 0210 	add.w	r2, r7, #16
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4611      	mov	r1, r2
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fe29 	bl	8001248 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80005f6:	6a3b      	ldr	r3, [r7, #32]
 80005f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80005fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d103      	bne.n	8000608 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000600:	f000 fe0e 	bl	8001220 <HAL_RCC_GetPCLK1Freq>
 8000604:	6378      	str	r0, [r7, #52]	; 0x34
 8000606:	e004      	b.n	8000612 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000608:	f000 fe0a 	bl	8001220 <HAL_RCC_GetPCLK1Freq>
 800060c:	4603      	mov	r3, r0
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000614:	4a23      	ldr	r2, [pc, #140]	; (80006a4 <HAL_InitTick+0xec>)
 8000616:	fba2 2303 	umull	r2, r3, r2, r3
 800061a:	0c9b      	lsrs	r3, r3, #18
 800061c:	3b01      	subs	r3, #1
 800061e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000620:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <HAL_InitTick+0xf0>)
 8000622:	4a22      	ldr	r2, [pc, #136]	; (80006ac <HAL_InitTick+0xf4>)
 8000624:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <HAL_InitTick+0xf0>)
 8000628:	f240 32e7 	movw	r2, #999	; 0x3e7
 800062c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800062e:	4a1e      	ldr	r2, [pc, #120]	; (80006a8 <HAL_InitTick+0xf0>)
 8000630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000632:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <HAL_InitTick+0xf0>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063a:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <HAL_InitTick+0xf0>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <HAL_InitTick+0xf0>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000646:	4818      	ldr	r0, [pc, #96]	; (80006a8 <HAL_InitTick+0xf0>)
 8000648:	f000 fe4c 	bl	80012e4 <HAL_TIM_Base_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000652:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000656:	2b00      	cmp	r3, #0
 8000658:	d11b      	bne.n	8000692 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800065a:	4813      	ldr	r0, [pc, #76]	; (80006a8 <HAL_InitTick+0xf0>)
 800065c:	f000 fe9a 	bl	8001394 <HAL_TIM_Base_Start_IT>
 8000660:	4603      	mov	r3, r0
 8000662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000666:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800066a:	2b00      	cmp	r3, #0
 800066c:	d111      	bne.n	8000692 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800066e:	201e      	movs	r0, #30
 8000670:	f000 f9f3 	bl	8000a5a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b0f      	cmp	r3, #15
 8000678:	d808      	bhi.n	800068c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800067a:	2200      	movs	r2, #0
 800067c:	6879      	ldr	r1, [r7, #4]
 800067e:	201e      	movs	r0, #30
 8000680:	f000 f9cf 	bl	8000a22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000684:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <HAL_InitTick+0xf8>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6013      	str	r3, [r2, #0]
 800068a:	e002      	b.n	8000692 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800068c:	2301      	movs	r3, #1
 800068e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000692:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000696:	4618      	mov	r0, r3
 8000698:	3738      	adds	r7, #56	; 0x38
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000
 80006a4:	431bde83 	.word	0x431bde83
 80006a8:	20000350 	.word	0x20000350
 80006ac:	40000800 	.word	0x40000800
 80006b0:	20000004 	.word	0x20000004

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <NMI_Handler+0x4>

080006ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <HardFault_Handler+0x4>

080006c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <MemManage_Handler+0x4>

080006c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <BusFault_Handler+0x4>

080006cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <UsageFault_Handler+0x4>

080006d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
	...

080006e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80006e4:	4802      	ldr	r0, [pc, #8]	; (80006f0 <TIM4_IRQHandler+0x10>)
 80006e6:	f000 fea7 	bl	8001438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000350 	.word	0x20000350

080006f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	e00a      	b.n	800071c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000706:	f3af 8000 	nop.w
 800070a:	4601      	mov	r1, r0
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	60ba      	str	r2, [r7, #8]
 8000712:	b2ca      	uxtb	r2, r1
 8000714:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	3301      	adds	r3, #1
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	429a      	cmp	r2, r3
 8000722:	dbf0      	blt.n	8000706 <_read+0x12>
  }

  return len;
 8000724:	687b      	ldr	r3, [r7, #4]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <_close>:
  }
  return len;
}

int _close(int file)
{
 800072e:	b480      	push	{r7}
 8000730:	b083      	sub	sp, #12
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800073a:	4618      	mov	r0, r3
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000754:	605a      	str	r2, [r3, #4]
  return 0;
 8000756:	2300      	movs	r3, #0
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <_isatty>:

int _isatty(int file)
{
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800076a:	2301      	movs	r3, #1
}
 800076c:	4618      	mov	r0, r3
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr

08000776 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000776:	b480      	push	{r7}
 8000778:	b085      	sub	sp, #20
 800077a:	af00      	add	r7, sp, #0
 800077c:	60f8      	str	r0, [r7, #12]
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000782:	2300      	movs	r3, #0
}
 8000784:	4618      	mov	r0, r3
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
	...

08000790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000798:	4a14      	ldr	r2, [pc, #80]	; (80007ec <_sbrk+0x5c>)
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <_sbrk+0x60>)
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <_sbrk+0x64>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d102      	bne.n	80007b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <_sbrk+0x64>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <_sbrk+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <_sbrk+0x64>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	693a      	ldr	r2, [r7, #16]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d207      	bcs.n	80007d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c0:	f002 f9de 	bl	8002b80 <__errno>
 80007c4:	4603      	mov	r3, r0
 80007c6:	220c      	movs	r2, #12
 80007c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ce:	e009      	b.n	80007e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <_sbrk+0x64>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <_sbrk+0x64>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <_sbrk+0x64>)
 80007e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007e2:	68fb      	ldr	r3, [r7, #12]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20005000 	.word	0x20005000
 80007f0:	00000400 	.word	0x00000400
 80007f4:	20000398 	.word	0x20000398
 80007f8:	20001100 	.word	0x20001100

080007fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800080a:	490d      	ldr	r1, [pc, #52]	; (8000840 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000810:	e002      	b.n	8000818 <LoopCopyDataInit>

08000812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000816:	3304      	adds	r3, #4

08000818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800081c:	d3f9      	bcc.n	8000812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000820:	4c0a      	ldr	r4, [pc, #40]	; (800084c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000824:	e001      	b.n	800082a <LoopFillZerobss>

08000826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000828:	3204      	adds	r2, #4

0800082a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800082c:	d3fb      	bcc.n	8000826 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800082e:	f7ff ffe5 	bl	80007fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000832:	f002 faa1 	bl	8002d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000836:	f7ff fca3 	bl	8000180 <main>
  bx lr
 800083a:	4770      	bx	lr
  ldr r0, =_sdata
 800083c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000840:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000844:	080037fc 	.word	0x080037fc
  ldr r2, =_sbss
 8000848:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800084c:	200010fc 	.word	0x200010fc

08000850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC1_2_IRQHandler>
	...

08000854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_Init+0x28>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a07      	ldr	r2, [pc, #28]	; (800087c <HAL_Init+0x28>)
 800085e:	f043 0310 	orr.w	r3, r3, #16
 8000862:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000864:	2003      	movs	r0, #3
 8000866:	f000 f8d1 	bl	8000a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086a:	200f      	movs	r0, #15
 800086c:	f7ff fea4 	bl	80005b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000870:	f7ff fe6a 	bl	8000548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40022000 	.word	0x40022000

08000880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <HAL_IncTick+0x1c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_IncTick+0x20>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4413      	add	r3, r2
 8000890:	4a03      	ldr	r2, [pc, #12]	; (80008a0 <HAL_IncTick+0x20>)
 8000892:	6013      	str	r3, [r2, #0]
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	20000008 	.word	0x20000008
 80008a0:	2000039c 	.word	0x2000039c

080008a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return uwTick;
 80008a8:	4b02      	ldr	r3, [pc, #8]	; (80008b4 <HAL_GetTick+0x10>)
 80008aa:	681b      	ldr	r3, [r3, #0]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	2000039c 	.word	0x2000039c

080008b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008d4:	4013      	ands	r3, r2
 80008d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ea:	4a04      	ldr	r2, [pc, #16]	; (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	60d3      	str	r3, [r2, #12]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <__NVIC_GetPriorityGrouping+0x18>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	f003 0307 	and.w	r3, r3, #7
}
 800090e:	4618      	mov	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	2b00      	cmp	r3, #0
 800092c:	db0b      	blt.n	8000946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	f003 021f 	and.w	r2, r3, #31
 8000934:	4906      	ldr	r1, [pc, #24]	; (8000950 <__NVIC_EnableIRQ+0x34>)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	095b      	lsrs	r3, r3, #5
 800093c:	2001      	movs	r0, #1
 800093e:	fa00 f202 	lsl.w	r2, r0, r2
 8000942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	e000e100 	.word	0xe000e100

08000954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	db0a      	blt.n	800097e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	490c      	ldr	r1, [pc, #48]	; (80009a0 <__NVIC_SetPriority+0x4c>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	0112      	lsls	r2, r2, #4
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	440b      	add	r3, r1
 8000978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800097c:	e00a      	b.n	8000994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4908      	ldr	r1, [pc, #32]	; (80009a4 <__NVIC_SetPriority+0x50>)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	3b04      	subs	r3, #4
 800098c:	0112      	lsls	r2, r2, #4
 800098e:	b2d2      	uxtb	r2, r2
 8000990:	440b      	add	r3, r1
 8000992:	761a      	strb	r2, [r3, #24]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000e100 	.word	0xe000e100
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b089      	sub	sp, #36	; 0x24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	f1c3 0307 	rsb	r3, r3, #7
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	bf28      	it	cs
 80009c6:	2304      	movcs	r3, #4
 80009c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3304      	adds	r3, #4
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	d902      	bls.n	80009d8 <NVIC_EncodePriority+0x30>
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3b03      	subs	r3, #3
 80009d6:	e000      	b.n	80009da <NVIC_EncodePriority+0x32>
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43da      	mvns	r2, r3
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	401a      	ands	r2, r3
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	43d9      	mvns	r1, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	4313      	orrs	r3, r2
         );
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3724      	adds	r7, #36	; 0x24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ff4f 	bl	80008b8 <__NVIC_SetPriorityGrouping>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b086      	sub	sp, #24
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	4603      	mov	r3, r0
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	607a      	str	r2, [r7, #4]
 8000a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a34:	f7ff ff64 	bl	8000900 <__NVIC_GetPriorityGrouping>
 8000a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	68b9      	ldr	r1, [r7, #8]
 8000a3e:	6978      	ldr	r0, [r7, #20]
 8000a40:	f7ff ffb2 	bl	80009a8 <NVIC_EncodePriority>
 8000a44:	4602      	mov	r2, r0
 8000a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff81 	bl	8000954 <__NVIC_SetPriority>
}
 8000a52:	bf00      	nop
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	4603      	mov	r3, r0
 8000a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff57 	bl	800091c <__NVIC_EnableIRQ>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d101      	bne.n	8000a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e272      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f000 8087 	beq.w	8000ba6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a98:	4b92      	ldr	r3, [pc, #584]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f003 030c 	and.w	r3, r3, #12
 8000aa0:	2b04      	cmp	r3, #4
 8000aa2:	d00c      	beq.n	8000abe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000aa4:	4b8f      	ldr	r3, [pc, #572]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f003 030c 	and.w	r3, r3, #12
 8000aac:	2b08      	cmp	r3, #8
 8000aae:	d112      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x5e>
 8000ab0:	4b8c      	ldr	r3, [pc, #560]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000abc:	d10b      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000abe:	4b89      	ldr	r3, [pc, #548]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d06c      	beq.n	8000ba4 <HAL_RCC_OscConfig+0x12c>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d168      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e24c      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ade:	d106      	bne.n	8000aee <HAL_RCC_OscConfig+0x76>
 8000ae0:	4b80      	ldr	r3, [pc, #512]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a7f      	ldr	r2, [pc, #508]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	e02e      	b.n	8000b4c <HAL_RCC_OscConfig+0xd4>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d10c      	bne.n	8000b10 <HAL_RCC_OscConfig+0x98>
 8000af6:	4b7b      	ldr	r3, [pc, #492]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a7a      	ldr	r2, [pc, #488]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	4b78      	ldr	r3, [pc, #480]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a77      	ldr	r2, [pc, #476]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e01d      	b.n	8000b4c <HAL_RCC_OscConfig+0xd4>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b18:	d10c      	bne.n	8000b34 <HAL_RCC_OscConfig+0xbc>
 8000b1a:	4b72      	ldr	r3, [pc, #456]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a71      	ldr	r2, [pc, #452]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	4b6f      	ldr	r3, [pc, #444]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a6e      	ldr	r2, [pc, #440]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b30:	6013      	str	r3, [r2, #0]
 8000b32:	e00b      	b.n	8000b4c <HAL_RCC_OscConfig+0xd4>
 8000b34:	4b6b      	ldr	r3, [pc, #428]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a6a      	ldr	r2, [pc, #424]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	4b68      	ldr	r3, [pc, #416]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a67      	ldr	r2, [pc, #412]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b54:	f7ff fea6 	bl	80008a4 <HAL_GetTick>
 8000b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b5a:	e008      	b.n	8000b6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b5c:	f7ff fea2 	bl	80008a4 <HAL_GetTick>
 8000b60:	4602      	mov	r2, r0
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	2b64      	cmp	r3, #100	; 0x64
 8000b68:	d901      	bls.n	8000b6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	e200      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b6e:	4b5d      	ldr	r3, [pc, #372]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0f0      	beq.n	8000b5c <HAL_RCC_OscConfig+0xe4>
 8000b7a:	e014      	b.n	8000ba6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b7c:	f7ff fe92 	bl	80008a4 <HAL_GetTick>
 8000b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b82:	e008      	b.n	8000b96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b84:	f7ff fe8e 	bl	80008a4 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b64      	cmp	r3, #100	; 0x64
 8000b90:	d901      	bls.n	8000b96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e1ec      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b96:	4b53      	ldr	r3, [pc, #332]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1f0      	bne.n	8000b84 <HAL_RCC_OscConfig+0x10c>
 8000ba2:	e000      	b.n	8000ba6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d063      	beq.n	8000c7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bb2:	4b4c      	ldr	r3, [pc, #304]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 030c 	and.w	r3, r3, #12
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d00b      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000bbe:	4b49      	ldr	r3, [pc, #292]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 030c 	and.w	r3, r3, #12
 8000bc6:	2b08      	cmp	r3, #8
 8000bc8:	d11c      	bne.n	8000c04 <HAL_RCC_OscConfig+0x18c>
 8000bca:	4b46      	ldr	r3, [pc, #280]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d116      	bne.n	8000c04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bd6:	4b43      	ldr	r3, [pc, #268]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d005      	beq.n	8000bee <HAL_RCC_OscConfig+0x176>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d001      	beq.n	8000bee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e1c0      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bee:	4b3d      	ldr	r3, [pc, #244]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	4939      	ldr	r1, [pc, #228]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c02:	e03a      	b.n	8000c7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	691b      	ldr	r3, [r3, #16]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d020      	beq.n	8000c4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c0c:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <HAL_RCC_OscConfig+0x270>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c12:	f7ff fe47 	bl	80008a4 <HAL_GetTick>
 8000c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c18:	e008      	b.n	8000c2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c1a:	f7ff fe43 	bl	80008a4 <HAL_GetTick>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d901      	bls.n	8000c2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	e1a1      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0f0      	beq.n	8000c1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c38:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	4927      	ldr	r1, [pc, #156]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	600b      	str	r3, [r1, #0]
 8000c4c:	e015      	b.n	8000c7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c4e:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <HAL_RCC_OscConfig+0x270>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c54:	f7ff fe26 	bl	80008a4 <HAL_GetTick>
 8000c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c5a:	e008      	b.n	8000c6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c5c:	f7ff fe22 	bl	80008a4 <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d901      	bls.n	8000c6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e180      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1f0      	bne.n	8000c5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d03a      	beq.n	8000cfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d019      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_RCC_OscConfig+0x274>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c94:	f7ff fe06 	bl	80008a4 <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c9c:	f7ff fe02 	bl	80008a4 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e160      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cae:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f0      	beq.n	8000c9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f000 faf4 	bl	80012a8 <RCC_Delay>
 8000cc0:	e01c      	b.n	8000cfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_RCC_OscConfig+0x274>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cc8:	f7ff fdec 	bl	80008a4 <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cce:	e00f      	b.n	8000cf0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cd0:	f7ff fde8 	bl	80008a4 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d908      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e146      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	42420000 	.word	0x42420000
 8000cec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cf0:	4b92      	ldr	r3, [pc, #584]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1e9      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 80a6 	beq.w	8000e56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d0e:	4b8b      	ldr	r3, [pc, #556]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10d      	bne.n	8000d36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4b88      	ldr	r3, [pc, #544]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	4a87      	ldr	r2, [pc, #540]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	61d3      	str	r3, [r2, #28]
 8000d26:	4b85      	ldr	r3, [pc, #532]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d32:	2301      	movs	r3, #1
 8000d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d36:	4b82      	ldr	r3, [pc, #520]	; (8000f40 <HAL_RCC_OscConfig+0x4c8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d118      	bne.n	8000d74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d42:	4b7f      	ldr	r3, [pc, #508]	; (8000f40 <HAL_RCC_OscConfig+0x4c8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a7e      	ldr	r2, [pc, #504]	; (8000f40 <HAL_RCC_OscConfig+0x4c8>)
 8000d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d4e:	f7ff fda9 	bl	80008a4 <HAL_GetTick>
 8000d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d54:	e008      	b.n	8000d68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d56:	f7ff fda5 	bl	80008a4 <HAL_GetTick>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	2b64      	cmp	r3, #100	; 0x64
 8000d62:	d901      	bls.n	8000d68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d64:	2303      	movs	r3, #3
 8000d66:	e103      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d68:	4b75      	ldr	r3, [pc, #468]	; (8000f40 <HAL_RCC_OscConfig+0x4c8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0f0      	beq.n	8000d56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d106      	bne.n	8000d8a <HAL_RCC_OscConfig+0x312>
 8000d7c:	4b6f      	ldr	r3, [pc, #444]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000d7e:	6a1b      	ldr	r3, [r3, #32]
 8000d80:	4a6e      	ldr	r2, [pc, #440]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6213      	str	r3, [r2, #32]
 8000d88:	e02d      	b.n	8000de6 <HAL_RCC_OscConfig+0x36e>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10c      	bne.n	8000dac <HAL_RCC_OscConfig+0x334>
 8000d92:	4b6a      	ldr	r3, [pc, #424]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000d94:	6a1b      	ldr	r3, [r3, #32]
 8000d96:	4a69      	ldr	r2, [pc, #420]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000d98:	f023 0301 	bic.w	r3, r3, #1
 8000d9c:	6213      	str	r3, [r2, #32]
 8000d9e:	4b67      	ldr	r3, [pc, #412]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000da0:	6a1b      	ldr	r3, [r3, #32]
 8000da2:	4a66      	ldr	r2, [pc, #408]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000da4:	f023 0304 	bic.w	r3, r3, #4
 8000da8:	6213      	str	r3, [r2, #32]
 8000daa:	e01c      	b.n	8000de6 <HAL_RCC_OscConfig+0x36e>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	2b05      	cmp	r3, #5
 8000db2:	d10c      	bne.n	8000dce <HAL_RCC_OscConfig+0x356>
 8000db4:	4b61      	ldr	r3, [pc, #388]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000db6:	6a1b      	ldr	r3, [r3, #32]
 8000db8:	4a60      	ldr	r2, [pc, #384]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000dba:	f043 0304 	orr.w	r3, r3, #4
 8000dbe:	6213      	str	r3, [r2, #32]
 8000dc0:	4b5e      	ldr	r3, [pc, #376]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000dc2:	6a1b      	ldr	r3, [r3, #32]
 8000dc4:	4a5d      	ldr	r2, [pc, #372]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6213      	str	r3, [r2, #32]
 8000dcc:	e00b      	b.n	8000de6 <HAL_RCC_OscConfig+0x36e>
 8000dce:	4b5b      	ldr	r3, [pc, #364]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000dd0:	6a1b      	ldr	r3, [r3, #32]
 8000dd2:	4a5a      	ldr	r2, [pc, #360]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000dd4:	f023 0301 	bic.w	r3, r3, #1
 8000dd8:	6213      	str	r3, [r2, #32]
 8000dda:	4b58      	ldr	r3, [pc, #352]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000ddc:	6a1b      	ldr	r3, [r3, #32]
 8000dde:	4a57      	ldr	r2, [pc, #348]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000de0:	f023 0304 	bic.w	r3, r3, #4
 8000de4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d015      	beq.n	8000e1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dee:	f7ff fd59 	bl	80008a4 <HAL_GetTick>
 8000df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000df4:	e00a      	b.n	8000e0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000df6:	f7ff fd55 	bl	80008a4 <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d901      	bls.n	8000e0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e0b1      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e0c:	4b4b      	ldr	r3, [pc, #300]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000e0e:	6a1b      	ldr	r3, [r3, #32]
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0ee      	beq.n	8000df6 <HAL_RCC_OscConfig+0x37e>
 8000e18:	e014      	b.n	8000e44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e1a:	f7ff fd43 	bl	80008a4 <HAL_GetTick>
 8000e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e20:	e00a      	b.n	8000e38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e22:	f7ff fd3f 	bl	80008a4 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d901      	bls.n	8000e38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	e09b      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e38:	4b40      	ldr	r3, [pc, #256]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000e3a:	6a1b      	ldr	r3, [r3, #32]
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1ee      	bne.n	8000e22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d105      	bne.n	8000e56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e4a:	4b3c      	ldr	r3, [pc, #240]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a3b      	ldr	r2, [pc, #236]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 8087 	beq.w	8000f6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e60:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 030c 	and.w	r3, r3, #12
 8000e68:	2b08      	cmp	r3, #8
 8000e6a:	d061      	beq.n	8000f30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d146      	bne.n	8000f02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e74:	4b33      	ldr	r3, [pc, #204]	; (8000f44 <HAL_RCC_OscConfig+0x4cc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7a:	f7ff fd13 	bl	80008a4 <HAL_GetTick>
 8000e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e80:	e008      	b.n	8000e94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e82:	f7ff fd0f 	bl	80008a4 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d901      	bls.n	8000e94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e06d      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e94:	4b29      	ldr	r3, [pc, #164]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1f0      	bne.n	8000e82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea8:	d108      	bne.n	8000ebc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000eaa:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	4921      	ldr	r1, [pc, #132]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a19      	ldr	r1, [r3, #32]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ecc:	430b      	orrs	r3, r1
 8000ece:	491b      	ldr	r1, [pc, #108]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <HAL_RCC_OscConfig+0x4cc>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eda:	f7ff fce3 	bl	80008a4 <HAL_GetTick>
 8000ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ee0:	e008      	b.n	8000ef4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ee2:	f7ff fcdf 	bl	80008a4 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d901      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e03d      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d0f0      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x46a>
 8000f00:	e035      	b.n	8000f6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <HAL_RCC_OscConfig+0x4cc>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f08:	f7ff fccc 	bl	80008a4 <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f10:	f7ff fcc8 	bl	80008a4 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e026      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f0      	bne.n	8000f10 <HAL_RCC_OscConfig+0x498>
 8000f2e:	e01e      	b.n	8000f6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69db      	ldr	r3, [r3, #28]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d107      	bne.n	8000f48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e019      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40007000 	.word	0x40007000
 8000f44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_RCC_OscConfig+0x500>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d106      	bne.n	8000f6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d001      	beq.n	8000f6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e0d0      	b.n	8001132 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f90:	4b6a      	ldr	r3, [pc, #424]	; (800113c <HAL_RCC_ClockConfig+0x1c0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d910      	bls.n	8000fc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f9e:	4b67      	ldr	r3, [pc, #412]	; (800113c <HAL_RCC_ClockConfig+0x1c0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f023 0207 	bic.w	r2, r3, #7
 8000fa6:	4965      	ldr	r1, [pc, #404]	; (800113c <HAL_RCC_ClockConfig+0x1c0>)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fae:	4b63      	ldr	r3, [pc, #396]	; (800113c <HAL_RCC_ClockConfig+0x1c0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d001      	beq.n	8000fc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e0b8      	b.n	8001132 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d020      	beq.n	800100e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0304 	and.w	r3, r3, #4
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d005      	beq.n	8000fe4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fd8:	4b59      	ldr	r3, [pc, #356]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	4a58      	ldr	r2, [pc, #352]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 8000fde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000fe2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0308 	and.w	r3, r3, #8
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d005      	beq.n	8000ffc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ff0:	4b53      	ldr	r3, [pc, #332]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	4a52      	ldr	r2, [pc, #328]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000ffa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ffc:	4b50      	ldr	r3, [pc, #320]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	494d      	ldr	r1, [pc, #308]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 800100a:	4313      	orrs	r3, r2
 800100c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	2b00      	cmp	r3, #0
 8001018:	d040      	beq.n	800109c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d107      	bne.n	8001032 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001022:	4b47      	ldr	r3, [pc, #284]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d115      	bne.n	800105a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e07f      	b.n	8001132 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b02      	cmp	r3, #2
 8001038:	d107      	bne.n	800104a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800103a:	4b41      	ldr	r3, [pc, #260]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d109      	bne.n	800105a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e073      	b.n	8001132 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104a:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e06b      	b.n	8001132 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800105a:	4b39      	ldr	r3, [pc, #228]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f023 0203 	bic.w	r2, r3, #3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	4936      	ldr	r1, [pc, #216]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 8001068:	4313      	orrs	r3, r2
 800106a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800106c:	f7ff fc1a 	bl	80008a4 <HAL_GetTick>
 8001070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001072:	e00a      	b.n	800108a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001074:	f7ff fc16 	bl	80008a4 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001082:	4293      	cmp	r3, r2
 8001084:	d901      	bls.n	800108a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e053      	b.n	8001132 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800108a:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 020c 	and.w	r2, r3, #12
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	429a      	cmp	r2, r3
 800109a:	d1eb      	bne.n	8001074 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800109c:	4b27      	ldr	r3, [pc, #156]	; (800113c <HAL_RCC_ClockConfig+0x1c0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d210      	bcs.n	80010cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010aa:	4b24      	ldr	r3, [pc, #144]	; (800113c <HAL_RCC_ClockConfig+0x1c0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 0207 	bic.w	r2, r3, #7
 80010b2:	4922      	ldr	r1, [pc, #136]	; (800113c <HAL_RCC_ClockConfig+0x1c0>)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ba:	4b20      	ldr	r3, [pc, #128]	; (800113c <HAL_RCC_ClockConfig+0x1c0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d001      	beq.n	80010cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e032      	b.n	8001132 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d008      	beq.n	80010ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	4916      	ldr	r1, [pc, #88]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d009      	beq.n	800110a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	490e      	ldr	r1, [pc, #56]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 8001106:	4313      	orrs	r3, r2
 8001108:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800110a:	f000 f821 	bl	8001150 <HAL_RCC_GetSysClockFreq>
 800110e:	4602      	mov	r2, r0
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	490a      	ldr	r1, [pc, #40]	; (8001144 <HAL_RCC_ClockConfig+0x1c8>)
 800111c:	5ccb      	ldrb	r3, [r1, r3]
 800111e:	fa22 f303 	lsr.w	r3, r2, r3
 8001122:	4a09      	ldr	r2, [pc, #36]	; (8001148 <HAL_RCC_ClockConfig+0x1cc>)
 8001124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_RCC_ClockConfig+0x1d0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fa44 	bl	80005b8 <HAL_InitTick>

  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40022000 	.word	0x40022000
 8001140:	40021000 	.word	0x40021000
 8001144:	08003778 	.word	0x08003778
 8001148:	20000000 	.word	0x20000000
 800114c:	20000004 	.word	0x20000004

08001150 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001150:	b490      	push	{r4, r7}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001156:	4b29      	ldr	r3, [pc, #164]	; (80011fc <HAL_RCC_GetSysClockFreq+0xac>)
 8001158:	1d3c      	adds	r4, r7, #4
 800115a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800115c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001160:	f240 2301 	movw	r3, #513	; 0x201
 8001164:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800117a:	4b21      	ldr	r3, [pc, #132]	; (8001200 <HAL_RCC_GetSysClockFreq+0xb0>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b04      	cmp	r3, #4
 8001188:	d002      	beq.n	8001190 <HAL_RCC_GetSysClockFreq+0x40>
 800118a:	2b08      	cmp	r3, #8
 800118c:	d003      	beq.n	8001196 <HAL_RCC_GetSysClockFreq+0x46>
 800118e:	e02b      	b.n	80011e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001192:	623b      	str	r3, [r7, #32]
      break;
 8001194:	e02b      	b.n	80011ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	0c9b      	lsrs	r3, r3, #18
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3328      	adds	r3, #40	; 0x28
 80011a0:	443b      	add	r3, r7
 80011a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d012      	beq.n	80011d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <HAL_RCC_GetSysClockFreq+0xb0>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	0c5b      	lsrs	r3, r3, #17
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	3328      	adds	r3, #40	; 0x28
 80011be:	443b      	add	r3, r7
 80011c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80011c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <HAL_RCC_GetSysClockFreq+0xb4>)
 80011ca:	fb03 f202 	mul.w	r2, r3, r2
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
 80011d6:	e004      	b.n	80011e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <HAL_RCC_GetSysClockFreq+0xb8>)
 80011dc:	fb02 f303 	mul.w	r3, r2, r3
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	623b      	str	r3, [r7, #32]
      break;
 80011e6:	e002      	b.n	80011ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_RCC_GetSysClockFreq+0xb4>)
 80011ea:	623b      	str	r3, [r7, #32]
      break;
 80011ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011ee:	6a3b      	ldr	r3, [r7, #32]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc90      	pop	{r4, r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	08003760 	.word	0x08003760
 8001200:	40021000 	.word	0x40021000
 8001204:	007a1200 	.word	0x007a1200
 8001208:	003d0900 	.word	0x003d0900

0800120c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001210:	4b02      	ldr	r3, [pc, #8]	; (800121c <HAL_RCC_GetHCLKFreq+0x10>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	20000000 	.word	0x20000000

08001220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001224:	f7ff fff2 	bl	800120c <HAL_RCC_GetHCLKFreq>
 8001228:	4602      	mov	r2, r0
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	0a1b      	lsrs	r3, r3, #8
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	4903      	ldr	r1, [pc, #12]	; (8001244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001236:	5ccb      	ldrb	r3, [r1, r3]
 8001238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800123c:	4618      	mov	r0, r3
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40021000 	.word	0x40021000
 8001244:	08003788 	.word	0x08003788

08001248 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	220f      	movs	r2, #15
 8001256:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_RCC_GetClockConfig+0x58>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0203 	and.w	r2, r3, #3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_RCC_GetClockConfig+0x58>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_RCC_GetClockConfig+0x58>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_RCC_GetClockConfig+0x58>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	08db      	lsrs	r3, r3, #3
 8001282:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_RCC_GetClockConfig+0x5c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0207 	and.w	r2, r3, #7
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40022000 	.word	0x40022000

080012a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <RCC_Delay+0x34>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <RCC_Delay+0x38>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0a5b      	lsrs	r3, r3, #9
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	fb02 f303 	mul.w	r3, r2, r3
 80012c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012c4:	bf00      	nop
  }
  while (Delay --);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1e5a      	subs	r2, r3, #1
 80012ca:	60fa      	str	r2, [r7, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f9      	bne.n	80012c4 <RCC_Delay+0x1c>
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	20000000 	.word	0x20000000
 80012e0:	10624dd3 	.word	0x10624dd3

080012e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e041      	b.n	800137a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d106      	bne.n	8001310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f839 	bl	8001382 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2202      	movs	r2, #2
 8001314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3304      	adds	r3, #4
 8001320:	4619      	mov	r1, r3
 8001322:	4610      	mov	r0, r2
 8001324:	f000 f9b4 	bl	8001690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2201      	movs	r2, #1
 800133c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d001      	beq.n	80013ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e03a      	b.n	8001422 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2202      	movs	r2, #2
 80013b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0201 	orr.w	r2, r2, #1
 80013c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a18      	ldr	r2, [pc, #96]	; (800142c <HAL_TIM_Base_Start_IT+0x98>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00e      	beq.n	80013ec <HAL_TIM_Base_Start_IT+0x58>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d6:	d009      	beq.n	80013ec <HAL_TIM_Base_Start_IT+0x58>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a14      	ldr	r2, [pc, #80]	; (8001430 <HAL_TIM_Base_Start_IT+0x9c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d004      	beq.n	80013ec <HAL_TIM_Base_Start_IT+0x58>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a13      	ldr	r2, [pc, #76]	; (8001434 <HAL_TIM_Base_Start_IT+0xa0>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d111      	bne.n	8001410 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b06      	cmp	r3, #6
 80013fc:	d010      	beq.n	8001420 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f042 0201 	orr.w	r2, r2, #1
 800140c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800140e:	e007      	b.n	8001420 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0201 	orr.w	r2, r2, #1
 800141e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	40012c00 	.word	0x40012c00
 8001430:	40000400 	.word	0x40000400
 8001434:	40000800 	.word	0x40000800

08001438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b02      	cmp	r3, #2
 800144c:	d122      	bne.n	8001494 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b02      	cmp	r3, #2
 800145a:	d11b      	bne.n	8001494 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f06f 0202 	mvn.w	r2, #2
 8001464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2201      	movs	r2, #1
 800146a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f8ed 	bl	800165a <HAL_TIM_IC_CaptureCallback>
 8001480:	e005      	b.n	800148e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 f8e0 	bl	8001648 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f8ef 	bl	800166c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	2b04      	cmp	r3, #4
 80014a0:	d122      	bne.n	80014e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	d11b      	bne.n	80014e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f06f 0204 	mvn.w	r2, #4
 80014b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2202      	movs	r2, #2
 80014be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 f8c3 	bl	800165a <HAL_TIM_IC_CaptureCallback>
 80014d4:	e005      	b.n	80014e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f8b6 	bl	8001648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f8c5 	bl	800166c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d122      	bne.n	800153c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	2b08      	cmp	r3, #8
 8001502:	d11b      	bne.n	800153c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f06f 0208 	mvn.w	r2, #8
 800150c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2204      	movs	r2, #4
 8001512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f899 	bl	800165a <HAL_TIM_IC_CaptureCallback>
 8001528:	e005      	b.n	8001536 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f88c 	bl	8001648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f89b 	bl	800166c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	f003 0310 	and.w	r3, r3, #16
 8001546:	2b10      	cmp	r3, #16
 8001548:	d122      	bne.n	8001590 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	2b10      	cmp	r3, #16
 8001556:	d11b      	bne.n	8001590 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f06f 0210 	mvn.w	r2, #16
 8001560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2208      	movs	r2, #8
 8001566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f86f 	bl	800165a <HAL_TIM_IC_CaptureCallback>
 800157c:	e005      	b.n	800158a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f862 	bl	8001648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f871 	bl	800166c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b01      	cmp	r3, #1
 800159c:	d10e      	bne.n	80015bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d107      	bne.n	80015bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f06f 0201 	mvn.w	r2, #1
 80015b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7fe ff88 	bl	80004cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c6:	2b80      	cmp	r3, #128	; 0x80
 80015c8:	d10e      	bne.n	80015e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d4:	2b80      	cmp	r3, #128	; 0x80
 80015d6:	d107      	bne.n	80015e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80015e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f8bf 	bl	8001766 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f2:	2b40      	cmp	r3, #64	; 0x40
 80015f4:	d10e      	bne.n	8001614 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001600:	2b40      	cmp	r3, #64	; 0x40
 8001602:	d107      	bne.n	8001614 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800160c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f835 	bl	800167e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	f003 0320 	and.w	r3, r3, #32
 800161e:	2b20      	cmp	r3, #32
 8001620:	d10e      	bne.n	8001640 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	f003 0320 	and.w	r3, r3, #32
 800162c:	2b20      	cmp	r3, #32
 800162e:	d107      	bne.n	8001640 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f06f 0220 	mvn.w	r2, #32
 8001638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f88a 	bl	8001754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr

0800165a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a29      	ldr	r2, [pc, #164]	; (8001748 <TIM_Base_SetConfig+0xb8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00b      	beq.n	80016c0 <TIM_Base_SetConfig+0x30>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ae:	d007      	beq.n	80016c0 <TIM_Base_SetConfig+0x30>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a26      	ldr	r2, [pc, #152]	; (800174c <TIM_Base_SetConfig+0xbc>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d003      	beq.n	80016c0 <TIM_Base_SetConfig+0x30>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a25      	ldr	r2, [pc, #148]	; (8001750 <TIM_Base_SetConfig+0xc0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d108      	bne.n	80016d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a1c      	ldr	r2, [pc, #112]	; (8001748 <TIM_Base_SetConfig+0xb8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d00b      	beq.n	80016f2 <TIM_Base_SetConfig+0x62>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e0:	d007      	beq.n	80016f2 <TIM_Base_SetConfig+0x62>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a19      	ldr	r2, [pc, #100]	; (800174c <TIM_Base_SetConfig+0xbc>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d003      	beq.n	80016f2 <TIM_Base_SetConfig+0x62>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a18      	ldr	r2, [pc, #96]	; (8001750 <TIM_Base_SetConfig+0xc0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d108      	bne.n	8001704 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4313      	orrs	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	4313      	orrs	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a07      	ldr	r2, [pc, #28]	; (8001748 <TIM_Base_SetConfig+0xb8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d103      	bne.n	8001738 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	615a      	str	r2, [r3, #20]
}
 800173e:	bf00      	nop
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	40012c00 	.word	0x40012c00
 800174c:	40000400 	.word	0x40000400
 8001750:	40000800 	.word	0x40000800

08001754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178a:	2b84      	cmp	r3, #132	; 0x84
 800178c:	d005      	beq.n	800179a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800178e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4413      	add	r3, r2
 8001796:	3303      	adds	r3, #3
 8001798:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80017aa:	f000 fae7 	bl	8001d7c <vTaskStartScheduler>
  
  return osOK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af04      	add	r7, sp, #16
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d020      	beq.n	8001808 <osThreadCreate+0x54>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d01c      	beq.n	8001808 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685c      	ldr	r4, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681d      	ldr	r5, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691e      	ldr	r6, [r3, #16]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ffc9 	bl	8001778 <makeFreeRtosPriority>
 80017e6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017f0:	9202      	str	r2, [sp, #8]
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	9100      	str	r1, [sp, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	4632      	mov	r2, r6
 80017fa:	4629      	mov	r1, r5
 80017fc:	4620      	mov	r0, r4
 80017fe:	f000 f8e8 	bl	80019d2 <xTaskCreateStatic>
 8001802:	4603      	mov	r3, r0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e01c      	b.n	8001842 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685c      	ldr	r4, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001814:	b29e      	uxth	r6, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ffab 	bl	8001778 <makeFreeRtosPriority>
 8001822:	4602      	mov	r2, r0
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	9200      	str	r2, [sp, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	4632      	mov	r2, r6
 8001830:	4629      	mov	r1, r5
 8001832:	4620      	mov	r0, r4
 8001834:	f000 f929 	bl	8001a8a <xTaskCreate>
 8001838:	4603      	mov	r3, r0
 800183a:	2b01      	cmp	r3, #1
 800183c:	d001      	beq.n	8001842 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800183e:	2300      	movs	r3, #0
 8001840:	e000      	b.n	8001844 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001842:	68fb      	ldr	r3, [r7, #12]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800184c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <osDelay+0x16>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	e000      	b.n	8001864 <osDelay+0x18>
 8001862:	2301      	movs	r3, #1
 8001864:	4618      	mov	r0, r3
 8001866:	f000 fa55 	bl	8001d14 <vTaskDelay>
  
  return osOK;
 800186a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f103 0208 	add.w	r2, r3, #8
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800188c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f103 0208 	add.w	r2, r3, #8
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f103 0208 	add.w	r2, r3, #8
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr

080018ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018ca:	b480      	push	{r7}
 80018cc:	b085      	sub	sp, #20
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	601a      	str	r2, [r3, #0]
}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001926:	d103      	bne.n	8001930 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	e00c      	b.n	800194a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3308      	adds	r3, #8
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	e002      	b.n	800193e <vListInsert+0x2e>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	429a      	cmp	r2, r3
 8001948:	d2f6      	bcs.n	8001938 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	601a      	str	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6892      	ldr	r2, [r2, #8]
 8001996:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6852      	ldr	r2, [r2, #4]
 80019a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d103      	bne.n	80019b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	1e5a      	subs	r2, r3, #1
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b08e      	sub	sp, #56	; 0x38
 80019d6:	af04      	add	r7, sp, #16
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80019e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10a      	bne.n	80019fc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ea:	f383 8811 	msr	BASEPRI, r3
 80019ee:	f3bf 8f6f 	isb	sy
 80019f2:	f3bf 8f4f 	dsb	sy
 80019f6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80019f8:	bf00      	nop
 80019fa:	e7fe      	b.n	80019fa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80019fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10a      	bne.n	8001a18 <xTaskCreateStatic+0x46>
	__asm volatile
 8001a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a06:	f383 8811 	msr	BASEPRI, r3
 8001a0a:	f3bf 8f6f 	isb	sy
 8001a0e:	f3bf 8f4f 	dsb	sy
 8001a12:	61fb      	str	r3, [r7, #28]
}
 8001a14:	bf00      	nop
 8001a16:	e7fe      	b.n	8001a16 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001a18:	23b4      	movs	r3, #180	; 0xb4
 8001a1a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	2bb4      	cmp	r3, #180	; 0xb4
 8001a20:	d00a      	beq.n	8001a38 <xTaskCreateStatic+0x66>
	__asm volatile
 8001a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a26:	f383 8811 	msr	BASEPRI, r3
 8001a2a:	f3bf 8f6f 	isb	sy
 8001a2e:	f3bf 8f4f 	dsb	sy
 8001a32:	61bb      	str	r3, [r7, #24]
}
 8001a34:	bf00      	nop
 8001a36:	e7fe      	b.n	8001a36 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d01e      	beq.n	8001a7c <xTaskCreateStatic+0xaa>
 8001a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01b      	beq.n	8001a7c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	2202      	movs	r2, #2
 8001a52:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001a56:	2300      	movs	r3, #0
 8001a58:	9303      	str	r3, [sp, #12]
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	9302      	str	r3, [sp, #8]
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 f850 	bl	8001b14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001a74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a76:	f000 f8e3 	bl	8001c40 <prvAddNewTaskToReadyList>
 8001a7a:	e001      	b.n	8001a80 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001a80:	697b      	ldr	r3, [r7, #20]
	}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3728      	adds	r7, #40	; 0x28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b08c      	sub	sp, #48	; 0x30
 8001a8e:	af04      	add	r7, sp, #16
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	603b      	str	r3, [r7, #0]
 8001a96:	4613      	mov	r3, r2
 8001a98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 fe96 	bl	80027d0 <pvPortMalloc>
 8001aa4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00e      	beq.n	8001aca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001aac:	20b4      	movs	r0, #180	; 0xb4
 8001aae:	f000 fe8f 	bl	80027d0 <pvPortMalloc>
 8001ab2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	631a      	str	r2, [r3, #48]	; 0x30
 8001ac0:	e005      	b.n	8001ace <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f000 ff48 	bl	8002958 <vPortFree>
 8001ac8:	e001      	b.n	8001ace <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d017      	beq.n	8001b04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001adc:	88fa      	ldrh	r2, [r7, #6]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	9303      	str	r3, [sp, #12]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	9302      	str	r3, [sp, #8]
 8001ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 f80e 	bl	8001b14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001af8:	69f8      	ldr	r0, [r7, #28]
 8001afa:	f000 f8a1 	bl	8001c40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001afe:	2301      	movs	r3, #1
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	e002      	b.n	8001b0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001b0a:	69bb      	ldr	r3, [r7, #24]
	}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	f023 0307 	bic.w	r3, r3, #7
 8001b3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00a      	beq.n	8001b5c <prvInitialiseNewTask+0x48>
	__asm volatile
 8001b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b4a:	f383 8811 	msr	BASEPRI, r3
 8001b4e:	f3bf 8f6f 	isb	sy
 8001b52:	f3bf 8f4f 	dsb	sy
 8001b56:	617b      	str	r3, [r7, #20]
}
 8001b58:	bf00      	nop
 8001b5a:	e7fe      	b.n	8001b5a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	e012      	b.n	8001b88 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	4413      	add	r3, r2
 8001b68:	7819      	ldrb	r1, [r3, #0]
 8001b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	4413      	add	r3, r2
 8001b70:	3334      	adds	r3, #52	; 0x34
 8001b72:	460a      	mov	r2, r1
 8001b74:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d006      	beq.n	8001b90 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3301      	adds	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	2b0f      	cmp	r3, #15
 8001b8c:	d9e9      	bls.n	8001b62 <prvInitialiseNewTask+0x4e>
 8001b8e:	e000      	b.n	8001b92 <prvInitialiseNewTask+0x7e>
		{
			break;
 8001b90:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9c:	2b06      	cmp	r3, #6
 8001b9e:	d901      	bls.n	8001ba4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001ba0:	2306      	movs	r3, #6
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ba8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb8:	3304      	adds	r3, #4
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fe79 	bl	80018b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc2:	3318      	adds	r3, #24
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fe74 	bl	80018b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd2:	f1c3 0207 	rsb	r2, r3, #7
 8001bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be2:	2200      	movs	r2, #0
 8001be4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf2:	334c      	adds	r3, #76	; 0x4c
 8001bf4:	2260      	movs	r2, #96	; 0x60
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f001 f8e4 	bl	8002dc6 <memset>
 8001bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c00:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <prvInitialiseNewTask+0x120>)
 8001c02:	651a      	str	r2, [r3, #80]	; 0x50
 8001c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c06:	4a0c      	ldr	r2, [pc, #48]	; (8001c38 <prvInitialiseNewTask+0x124>)
 8001c08:	655a      	str	r2, [r3, #84]	; 0x54
 8001c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0c:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <prvInitialiseNewTask+0x128>)
 8001c0e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	68f9      	ldr	r1, [r7, #12]
 8001c14:	69b8      	ldr	r0, [r7, #24]
 8001c16:	f000 fc29 	bl	800246c <pxPortInitialiseStack>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c1e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001c2c:	bf00      	nop
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	080037b0 	.word	0x080037b0
 8001c38:	080037d0 	.word	0x080037d0
 8001c3c:	08003790 	.word	0x08003790

08001c40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001c48:	f000 fd00 	bl	800264c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001c4c:	4b2a      	ldr	r3, [pc, #168]	; (8001cf8 <prvAddNewTaskToReadyList+0xb8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	4a29      	ldr	r2, [pc, #164]	; (8001cf8 <prvAddNewTaskToReadyList+0xb8>)
 8001c54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001c56:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <prvAddNewTaskToReadyList+0xbc>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001c5e:	4a27      	ldr	r2, [pc, #156]	; (8001cfc <prvAddNewTaskToReadyList+0xbc>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c64:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <prvAddNewTaskToReadyList+0xb8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d110      	bne.n	8001c8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001c6c:	f000 fad2 	bl	8002214 <prvInitialiseTaskLists>
 8001c70:	e00d      	b.n	8001c8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001c72:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <prvAddNewTaskToReadyList+0xc0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c7a:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <prvAddNewTaskToReadyList+0xbc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d802      	bhi.n	8001c8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001c88:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <prvAddNewTaskToReadyList+0xbc>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <prvAddNewTaskToReadyList+0xc4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	4a1b      	ldr	r2, [pc, #108]	; (8001d04 <prvAddNewTaskToReadyList+0xc4>)
 8001c96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <prvAddNewTaskToReadyList+0xc8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	4a18      	ldr	r2, [pc, #96]	; (8001d08 <prvAddNewTaskToReadyList+0xc8>)
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4a15      	ldr	r2, [pc, #84]	; (8001d0c <prvAddNewTaskToReadyList+0xcc>)
 8001cb8:	441a      	add	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	f7ff fe02 	bl	80018ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001cc6:	f000 fcf1 	bl	80026ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <prvAddNewTaskToReadyList+0xc0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00e      	beq.n	8001cf0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <prvAddNewTaskToReadyList+0xbc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d207      	bcs.n	8001cf0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <prvAddNewTaskToReadyList+0xd0>)
 8001ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	f3bf 8f4f 	dsb	sy
 8001cec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200004a0 	.word	0x200004a0
 8001cfc:	200003a0 	.word	0x200003a0
 8001d00:	200004ac 	.word	0x200004ac
 8001d04:	200004bc 	.word	0x200004bc
 8001d08:	200004a8 	.word	0x200004a8
 8001d0c:	200003a4 	.word	0x200003a4
 8001d10:	e000ed04 	.word	0xe000ed04

08001d14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d017      	beq.n	8001d56 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <vTaskDelay+0x60>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00a      	beq.n	8001d44 <vTaskDelay+0x30>
	__asm volatile
 8001d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d32:	f383 8811 	msr	BASEPRI, r3
 8001d36:	f3bf 8f6f 	isb	sy
 8001d3a:	f3bf 8f4f 	dsb	sy
 8001d3e:	60bb      	str	r3, [r7, #8]
}
 8001d40:	bf00      	nop
 8001d42:	e7fe      	b.n	8001d42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001d44:	f000 f884 	bl	8001e50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001d48:	2100      	movs	r1, #0
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fb28 	bl	80023a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001d50:	f000 f88c 	bl	8001e6c <xTaskResumeAll>
 8001d54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d107      	bne.n	8001d6c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <vTaskDelay+0x64>)
 8001d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	f3bf 8f4f 	dsb	sy
 8001d68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	200004c8 	.word	0x200004c8
 8001d78:	e000ed04 	.word	0xe000ed04

08001d7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001d8a:	463a      	mov	r2, r7
 8001d8c:	1d39      	adds	r1, r7, #4
 8001d8e:	f107 0308 	add.w	r3, r7, #8
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe f9dc 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001d98:	6839      	ldr	r1, [r7, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	9202      	str	r2, [sp, #8]
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	2300      	movs	r3, #0
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	2300      	movs	r3, #0
 8001da8:	460a      	mov	r2, r1
 8001daa:	4921      	ldr	r1, [pc, #132]	; (8001e30 <vTaskStartScheduler+0xb4>)
 8001dac:	4821      	ldr	r0, [pc, #132]	; (8001e34 <vTaskStartScheduler+0xb8>)
 8001dae:	f7ff fe10 	bl	80019d2 <xTaskCreateStatic>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4a20      	ldr	r2, [pc, #128]	; (8001e38 <vTaskStartScheduler+0xbc>)
 8001db6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <vTaskStartScheduler+0xbc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	e001      	b.n	8001dca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d11b      	bne.n	8001e08 <vTaskStartScheduler+0x8c>
	__asm volatile
 8001dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd4:	f383 8811 	msr	BASEPRI, r3
 8001dd8:	f3bf 8f6f 	isb	sy
 8001ddc:	f3bf 8f4f 	dsb	sy
 8001de0:	613b      	str	r3, [r7, #16]
}
 8001de2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001de4:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <vTaskStartScheduler+0xc0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	334c      	adds	r3, #76	; 0x4c
 8001dea:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <vTaskStartScheduler+0xc4>)
 8001dec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <vTaskStartScheduler+0xc8>)
 8001df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001df4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001df6:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <vTaskStartScheduler+0xcc>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <vTaskStartScheduler+0xd0>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001e02:	f000 fbb1 	bl	8002568 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001e06:	e00e      	b.n	8001e26 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e0e:	d10a      	bne.n	8001e26 <vTaskStartScheduler+0xaa>
	__asm volatile
 8001e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e14:	f383 8811 	msr	BASEPRI, r3
 8001e18:	f3bf 8f6f 	isb	sy
 8001e1c:	f3bf 8f4f 	dsb	sy
 8001e20:	60fb      	str	r3, [r7, #12]
}
 8001e22:	bf00      	nop
 8001e24:	e7fe      	b.n	8001e24 <vTaskStartScheduler+0xa8>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	08003770 	.word	0x08003770
 8001e34:	080021e5 	.word	0x080021e5
 8001e38:	200004c4 	.word	0x200004c4
 8001e3c:	200003a0 	.word	0x200003a0
 8001e40:	20000010 	.word	0x20000010
 8001e44:	200004c0 	.word	0x200004c0
 8001e48:	200004ac 	.word	0x200004ac
 8001e4c:	200004a4 	.word	0x200004a4

08001e50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <vTaskSuspendAll+0x18>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	4a03      	ldr	r2, [pc, #12]	; (8001e68 <vTaskSuspendAll+0x18>)
 8001e5c:	6013      	str	r3, [r2, #0]
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	200004c8 	.word	0x200004c8

08001e6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001e7a:	4b41      	ldr	r3, [pc, #260]	; (8001f80 <xTaskResumeAll+0x114>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10a      	bne.n	8001e98 <xTaskResumeAll+0x2c>
	__asm volatile
 8001e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e86:	f383 8811 	msr	BASEPRI, r3
 8001e8a:	f3bf 8f6f 	isb	sy
 8001e8e:	f3bf 8f4f 	dsb	sy
 8001e92:	603b      	str	r3, [r7, #0]
}
 8001e94:	bf00      	nop
 8001e96:	e7fe      	b.n	8001e96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001e98:	f000 fbd8 	bl	800264c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001e9c:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <xTaskResumeAll+0x114>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	4a37      	ldr	r2, [pc, #220]	; (8001f80 <xTaskResumeAll+0x114>)
 8001ea4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ea6:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <xTaskResumeAll+0x114>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d161      	bne.n	8001f72 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001eae:	4b35      	ldr	r3, [pc, #212]	; (8001f84 <xTaskResumeAll+0x118>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d05d      	beq.n	8001f72 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001eb6:	e02e      	b.n	8001f16 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001eb8:	4b33      	ldr	r3, [pc, #204]	; (8001f88 <xTaskResumeAll+0x11c>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3318      	adds	r3, #24
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fd5b 	bl	8001980 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fd56 	bl	8001980 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	2201      	movs	r2, #1
 8001eda:	409a      	lsls	r2, r3
 8001edc:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <xTaskResumeAll+0x120>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	4a2a      	ldr	r2, [pc, #168]	; (8001f8c <xTaskResumeAll+0x120>)
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4a27      	ldr	r2, [pc, #156]	; (8001f90 <xTaskResumeAll+0x124>)
 8001ef4:	441a      	add	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	4619      	mov	r1, r3
 8001efc:	4610      	mov	r0, r2
 8001efe:	f7ff fce4 	bl	80018ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f06:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <xTaskResumeAll+0x128>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d302      	bcc.n	8001f16 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8001f10:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <xTaskResumeAll+0x12c>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <xTaskResumeAll+0x11c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1cc      	bne.n	8001eb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001f24:	f000 fa18 	bl	8002358 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001f28:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <xTaskResumeAll+0x130>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d010      	beq.n	8001f56 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001f34:	f000 f836 	bl	8001fa4 <xTaskIncrementTick>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8001f3e:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <xTaskResumeAll+0x12c>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f1      	bne.n	8001f34 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <xTaskResumeAll+0x130>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <xTaskResumeAll+0x12c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d009      	beq.n	8001f72 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <xTaskResumeAll+0x134>)
 8001f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	f3bf 8f4f 	dsb	sy
 8001f6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001f72:	f000 fb9b 	bl	80026ac <vPortExitCritical>

	return xAlreadyYielded;
 8001f76:	68bb      	ldr	r3, [r7, #8]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	200004c8 	.word	0x200004c8
 8001f84:	200004a0 	.word	0x200004a0
 8001f88:	20000460 	.word	0x20000460
 8001f8c:	200004a8 	.word	0x200004a8
 8001f90:	200003a4 	.word	0x200003a4
 8001f94:	200003a0 	.word	0x200003a0
 8001f98:	200004b4 	.word	0x200004b4
 8001f9c:	200004b0 	.word	0x200004b0
 8001fa0:	e000ed04 	.word	0xe000ed04

08001fa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fae:	4b51      	ldr	r3, [pc, #324]	; (80020f4 <xTaskIncrementTick+0x150>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f040 808d 	bne.w	80020d2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001fb8:	4b4f      	ldr	r3, [pc, #316]	; (80020f8 <xTaskIncrementTick+0x154>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001fc0:	4a4d      	ldr	r2, [pc, #308]	; (80020f8 <xTaskIncrementTick+0x154>)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d120      	bne.n	800200e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001fcc:	4b4b      	ldr	r3, [pc, #300]	; (80020fc <xTaskIncrementTick+0x158>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <xTaskIncrementTick+0x48>
	__asm volatile
 8001fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fda:	f383 8811 	msr	BASEPRI, r3
 8001fde:	f3bf 8f6f 	isb	sy
 8001fe2:	f3bf 8f4f 	dsb	sy
 8001fe6:	603b      	str	r3, [r7, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	e7fe      	b.n	8001fea <xTaskIncrementTick+0x46>
 8001fec:	4b43      	ldr	r3, [pc, #268]	; (80020fc <xTaskIncrementTick+0x158>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	4b43      	ldr	r3, [pc, #268]	; (8002100 <xTaskIncrementTick+0x15c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a41      	ldr	r2, [pc, #260]	; (80020fc <xTaskIncrementTick+0x158>)
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	4a41      	ldr	r2, [pc, #260]	; (8002100 <xTaskIncrementTick+0x15c>)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b40      	ldr	r3, [pc, #256]	; (8002104 <xTaskIncrementTick+0x160>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3301      	adds	r3, #1
 8002006:	4a3f      	ldr	r2, [pc, #252]	; (8002104 <xTaskIncrementTick+0x160>)
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	f000 f9a5 	bl	8002358 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800200e:	4b3e      	ldr	r3, [pc, #248]	; (8002108 <xTaskIncrementTick+0x164>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	429a      	cmp	r2, r3
 8002016:	d34d      	bcc.n	80020b4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002018:	4b38      	ldr	r3, [pc, #224]	; (80020fc <xTaskIncrementTick+0x158>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <xTaskIncrementTick+0x82>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <xTaskIncrementTick+0x84>
 8002026:	2300      	movs	r3, #0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d004      	beq.n	8002036 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800202c:	4b36      	ldr	r3, [pc, #216]	; (8002108 <xTaskIncrementTick+0x164>)
 800202e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002032:	601a      	str	r2, [r3, #0]
					break;
 8002034:	e03e      	b.n	80020b4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002036:	4b31      	ldr	r3, [pc, #196]	; (80020fc <xTaskIncrementTick+0x158>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	429a      	cmp	r2, r3
 800204c:	d203      	bcs.n	8002056 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800204e:	4a2e      	ldr	r2, [pc, #184]	; (8002108 <xTaskIncrementTick+0x164>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6013      	str	r3, [r2, #0]
						break;
 8002054:	e02e      	b.n	80020b4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	3304      	adds	r3, #4
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fc90 	bl	8001980 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	2b00      	cmp	r3, #0
 8002066:	d004      	beq.n	8002072 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	3318      	adds	r3, #24
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fc87 	bl	8001980 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002076:	2201      	movs	r2, #1
 8002078:	409a      	lsls	r2, r3
 800207a:	4b24      	ldr	r3, [pc, #144]	; (800210c <xTaskIncrementTick+0x168>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	4a22      	ldr	r2, [pc, #136]	; (800210c <xTaskIncrementTick+0x168>)
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4a1f      	ldr	r2, [pc, #124]	; (8002110 <xTaskIncrementTick+0x16c>)
 8002092:	441a      	add	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	3304      	adds	r3, #4
 8002098:	4619      	mov	r1, r3
 800209a:	4610      	mov	r0, r2
 800209c:	f7ff fc15 	bl	80018ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <xTaskIncrementTick+0x170>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d3b4      	bcc.n	8002018 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80020ae:	2301      	movs	r3, #1
 80020b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020b2:	e7b1      	b.n	8002018 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80020b4:	4b17      	ldr	r3, [pc, #92]	; (8002114 <xTaskIncrementTick+0x170>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ba:	4915      	ldr	r1, [pc, #84]	; (8002110 <xTaskIncrementTick+0x16c>)
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d907      	bls.n	80020dc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80020cc:	2301      	movs	r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e004      	b.n	80020dc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <xTaskIncrementTick+0x174>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	3301      	adds	r3, #1
 80020d8:	4a0f      	ldr	r2, [pc, #60]	; (8002118 <xTaskIncrementTick+0x174>)
 80020da:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <xTaskIncrementTick+0x178>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80020e4:	2301      	movs	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80020e8:	697b      	ldr	r3, [r7, #20]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200004c8 	.word	0x200004c8
 80020f8:	200004a4 	.word	0x200004a4
 80020fc:	20000458 	.word	0x20000458
 8002100:	2000045c 	.word	0x2000045c
 8002104:	200004b8 	.word	0x200004b8
 8002108:	200004c0 	.word	0x200004c0
 800210c:	200004a8 	.word	0x200004a8
 8002110:	200003a4 	.word	0x200003a4
 8002114:	200003a0 	.word	0x200003a0
 8002118:	200004b0 	.word	0x200004b0
 800211c:	200004b4 	.word	0x200004b4

08002120 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002120:	b480      	push	{r7}
 8002122:	b087      	sub	sp, #28
 8002124:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002126:	4b29      	ldr	r3, [pc, #164]	; (80021cc <vTaskSwitchContext+0xac>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800212e:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <vTaskSwitchContext+0xb0>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002134:	e044      	b.n	80021c0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002136:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <vTaskSwitchContext+0xb0>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800213c:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <vTaskSwitchContext+0xb4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	fab3 f383 	clz	r3, r3
 8002148:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800214a:	7afb      	ldrb	r3, [r7, #11]
 800214c:	f1c3 031f 	rsb	r3, r3, #31
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	4921      	ldr	r1, [pc, #132]	; (80021d8 <vTaskSwitchContext+0xb8>)
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10a      	bne.n	800217c <vTaskSwitchContext+0x5c>
	__asm volatile
 8002166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800216a:	f383 8811 	msr	BASEPRI, r3
 800216e:	f3bf 8f6f 	isb	sy
 8002172:	f3bf 8f4f 	dsb	sy
 8002176:	607b      	str	r3, [r7, #4]
}
 8002178:	bf00      	nop
 800217a:	e7fe      	b.n	800217a <vTaskSwitchContext+0x5a>
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <vTaskSwitchContext+0xb8>)
 8002188:	4413      	add	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	3308      	adds	r3, #8
 800219e:	429a      	cmp	r2, r3
 80021a0:	d104      	bne.n	80021ac <vTaskSwitchContext+0x8c>
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <vTaskSwitchContext+0xbc>)
 80021b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <vTaskSwitchContext+0xbc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	334c      	adds	r3, #76	; 0x4c
 80021bc:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <vTaskSwitchContext+0xc0>)
 80021be:	6013      	str	r3, [r2, #0]
}
 80021c0:	bf00      	nop
 80021c2:	371c      	adds	r7, #28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	200004c8 	.word	0x200004c8
 80021d0:	200004b4 	.word	0x200004b4
 80021d4:	200004a8 	.word	0x200004a8
 80021d8:	200003a4 	.word	0x200003a4
 80021dc:	200003a0 	.word	0x200003a0
 80021e0:	20000010 	.word	0x20000010

080021e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80021ec:	f000 f852 	bl	8002294 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <prvIdleTask+0x28>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d9f9      	bls.n	80021ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <prvIdleTask+0x2c>)
 80021fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	f3bf 8f4f 	dsb	sy
 8002204:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002208:	e7f0      	b.n	80021ec <prvIdleTask+0x8>
 800220a:	bf00      	nop
 800220c:	200003a4 	.word	0x200003a4
 8002210:	e000ed04 	.word	0xe000ed04

08002214 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	e00c      	b.n	800223a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <prvInitialiseTaskLists+0x60>)
 800222c:	4413      	add	r3, r2
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fb20 	bl	8001874 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3301      	adds	r3, #1
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b06      	cmp	r3, #6
 800223e:	d9ef      	bls.n	8002220 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002240:	480d      	ldr	r0, [pc, #52]	; (8002278 <prvInitialiseTaskLists+0x64>)
 8002242:	f7ff fb17 	bl	8001874 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002246:	480d      	ldr	r0, [pc, #52]	; (800227c <prvInitialiseTaskLists+0x68>)
 8002248:	f7ff fb14 	bl	8001874 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800224c:	480c      	ldr	r0, [pc, #48]	; (8002280 <prvInitialiseTaskLists+0x6c>)
 800224e:	f7ff fb11 	bl	8001874 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002252:	480c      	ldr	r0, [pc, #48]	; (8002284 <prvInitialiseTaskLists+0x70>)
 8002254:	f7ff fb0e 	bl	8001874 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002258:	480b      	ldr	r0, [pc, #44]	; (8002288 <prvInitialiseTaskLists+0x74>)
 800225a:	f7ff fb0b 	bl	8001874 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <prvInitialiseTaskLists+0x78>)
 8002260:	4a05      	ldr	r2, [pc, #20]	; (8002278 <prvInitialiseTaskLists+0x64>)
 8002262:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <prvInitialiseTaskLists+0x7c>)
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <prvInitialiseTaskLists+0x68>)
 8002268:	601a      	str	r2, [r3, #0]
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200003a4 	.word	0x200003a4
 8002278:	20000430 	.word	0x20000430
 800227c:	20000444 	.word	0x20000444
 8002280:	20000460 	.word	0x20000460
 8002284:	20000474 	.word	0x20000474
 8002288:	2000048c 	.word	0x2000048c
 800228c:	20000458 	.word	0x20000458
 8002290:	2000045c 	.word	0x2000045c

08002294 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800229a:	e019      	b.n	80022d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800229c:	f000 f9d6 	bl	800264c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80022a0:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <prvCheckTasksWaitingTermination+0x50>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3304      	adds	r3, #4
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fb67 	bl	8001980 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <prvCheckTasksWaitingTermination+0x54>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	4a0b      	ldr	r2, [pc, #44]	; (80022e8 <prvCheckTasksWaitingTermination+0x54>)
 80022ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <prvCheckTasksWaitingTermination+0x58>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <prvCheckTasksWaitingTermination+0x58>)
 80022c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80022c6:	f000 f9f1 	bl	80026ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f810 	bl	80022f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <prvCheckTasksWaitingTermination+0x58>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1e1      	bne.n	800229c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000474 	.word	0x20000474
 80022e8:	200004a0 	.word	0x200004a0
 80022ec:	20000488 	.word	0x20000488

080022f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	334c      	adds	r3, #76	; 0x4c
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 fe83 	bl	8003008 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d108      	bne.n	800231e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fb21 	bl	8002958 <vPortFree>
				vPortFree( pxTCB );
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fb1e 	bl	8002958 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800231c:	e018      	b.n	8002350 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002324:	2b01      	cmp	r3, #1
 8002326:	d103      	bne.n	8002330 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 fb15 	bl	8002958 <vPortFree>
	}
 800232e:	e00f      	b.n	8002350 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002336:	2b02      	cmp	r3, #2
 8002338:	d00a      	beq.n	8002350 <prvDeleteTCB+0x60>
	__asm volatile
 800233a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233e:	f383 8811 	msr	BASEPRI, r3
 8002342:	f3bf 8f6f 	isb	sy
 8002346:	f3bf 8f4f 	dsb	sy
 800234a:	60fb      	str	r3, [r7, #12]
}
 800234c:	bf00      	nop
 800234e:	e7fe      	b.n	800234e <prvDeleteTCB+0x5e>
	}
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <prvResetNextTaskUnblockTime+0x40>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <prvResetNextTaskUnblockTime+0x14>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <prvResetNextTaskUnblockTime+0x16>
 800236c:	2300      	movs	r3, #0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d004      	beq.n	800237c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <prvResetNextTaskUnblockTime+0x44>)
 8002374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002378:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800237a:	e008      	b.n	800238e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <prvResetNextTaskUnblockTime+0x40>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4a04      	ldr	r2, [pc, #16]	; (800239c <prvResetNextTaskUnblockTime+0x44>)
 800238c:	6013      	str	r3, [r2, #0]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	20000458 	.word	0x20000458
 800239c:	200004c0 	.word	0x200004c0

080023a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80023aa:	4b29      	ldr	r3, [pc, #164]	; (8002450 <prvAddCurrentTaskToDelayedList+0xb0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80023b0:	4b28      	ldr	r3, [pc, #160]	; (8002454 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	3304      	adds	r3, #4
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fae2 	bl	8001980 <uxListRemove>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10b      	bne.n	80023da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80023c2:	4b24      	ldr	r3, [pc, #144]	; (8002454 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	2201      	movs	r2, #1
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43da      	mvns	r2, r3
 80023d0:	4b21      	ldr	r3, [pc, #132]	; (8002458 <prvAddCurrentTaskToDelayedList+0xb8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4013      	ands	r3, r2
 80023d6:	4a20      	ldr	r2, [pc, #128]	; (8002458 <prvAddCurrentTaskToDelayedList+0xb8>)
 80023d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023e0:	d10a      	bne.n	80023f8 <prvAddCurrentTaskToDelayedList+0x58>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d007      	beq.n	80023f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023e8:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3304      	adds	r3, #4
 80023ee:	4619      	mov	r1, r3
 80023f0:	481a      	ldr	r0, [pc, #104]	; (800245c <prvAddCurrentTaskToDelayedList+0xbc>)
 80023f2:	f7ff fa6a 	bl	80018ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80023f6:	e026      	b.n	8002446 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002400:	4b14      	ldr	r3, [pc, #80]	; (8002454 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	429a      	cmp	r2, r3
 800240e:	d209      	bcs.n	8002424 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	3304      	adds	r3, #4
 800241a:	4619      	mov	r1, r3
 800241c:	4610      	mov	r0, r2
 800241e:	f7ff fa77 	bl	8001910 <vListInsert>
}
 8002422:	e010      	b.n	8002446 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	3304      	adds	r3, #4
 800242e:	4619      	mov	r1, r3
 8002430:	4610      	mov	r0, r2
 8002432:	f7ff fa6d 	bl	8001910 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002436:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	429a      	cmp	r2, r3
 800243e:	d202      	bcs.n	8002446 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002440:	4a09      	ldr	r2, [pc, #36]	; (8002468 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	6013      	str	r3, [r2, #0]
}
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200004a4 	.word	0x200004a4
 8002454:	200003a0 	.word	0x200003a0
 8002458:	200004a8 	.word	0x200004a8
 800245c:	2000048c 	.word	0x2000048c
 8002460:	2000045c 	.word	0x2000045c
 8002464:	20000458 	.word	0x20000458
 8002468:	200004c0 	.word	0x200004c0

0800246c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3b04      	subs	r3, #4
 800247c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002484:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	3b04      	subs	r3, #4
 800248a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f023 0201 	bic.w	r2, r3, #1
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3b04      	subs	r3, #4
 800249a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800249c:	4a08      	ldr	r2, [pc, #32]	; (80024c0 <pxPortInitialiseStack+0x54>)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	3b14      	subs	r3, #20
 80024a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	3b20      	subs	r3, #32
 80024b2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80024b4:	68fb      	ldr	r3, [r7, #12]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	080024c5 	.word	0x080024c5

080024c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <prvTaskExitError+0x54>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024d6:	d00a      	beq.n	80024ee <prvTaskExitError+0x2a>
	__asm volatile
 80024d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	60fb      	str	r3, [r7, #12]
}
 80024ea:	bf00      	nop
 80024ec:	e7fe      	b.n	80024ec <prvTaskExitError+0x28>
	__asm volatile
 80024ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f2:	f383 8811 	msr	BASEPRI, r3
 80024f6:	f3bf 8f6f 	isb	sy
 80024fa:	f3bf 8f4f 	dsb	sy
 80024fe:	60bb      	str	r3, [r7, #8]
}
 8002500:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002502:	bf00      	nop
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0fc      	beq.n	8002504 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800250a:	bf00      	nop
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	2000000c 	.word	0x2000000c
 800251c:	00000000 	.word	0x00000000

08002520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002520:	4b07      	ldr	r3, [pc, #28]	; (8002540 <pxCurrentTCBConst2>)
 8002522:	6819      	ldr	r1, [r3, #0]
 8002524:	6808      	ldr	r0, [r1, #0]
 8002526:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800252a:	f380 8809 	msr	PSP, r0
 800252e:	f3bf 8f6f 	isb	sy
 8002532:	f04f 0000 	mov.w	r0, #0
 8002536:	f380 8811 	msr	BASEPRI, r0
 800253a:	f04e 0e0d 	orr.w	lr, lr, #13
 800253e:	4770      	bx	lr

08002540 <pxCurrentTCBConst2>:
 8002540:	200003a0 	.word	0x200003a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop

08002548 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002548:	4806      	ldr	r0, [pc, #24]	; (8002564 <prvPortStartFirstTask+0x1c>)
 800254a:	6800      	ldr	r0, [r0, #0]
 800254c:	6800      	ldr	r0, [r0, #0]
 800254e:	f380 8808 	msr	MSP, r0
 8002552:	b662      	cpsie	i
 8002554:	b661      	cpsie	f
 8002556:	f3bf 8f4f 	dsb	sy
 800255a:	f3bf 8f6f 	isb	sy
 800255e:	df00      	svc	0
 8002560:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002562:	bf00      	nop
 8002564:	e000ed08 	.word	0xe000ed08

08002568 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800256e:	4b32      	ldr	r3, [pc, #200]	; (8002638 <xPortStartScheduler+0xd0>)
 8002570:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	22ff      	movs	r2, #255	; 0xff
 800257e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b2a      	ldr	r3, [pc, #168]	; (800263c <xPortStartScheduler+0xd4>)
 8002594:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002596:	4b2a      	ldr	r3, [pc, #168]	; (8002640 <xPortStartScheduler+0xd8>)
 8002598:	2207      	movs	r2, #7
 800259a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800259c:	e009      	b.n	80025b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800259e:	4b28      	ldr	r3, [pc, #160]	; (8002640 <xPortStartScheduler+0xd8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	4a26      	ldr	r2, [pc, #152]	; (8002640 <xPortStartScheduler+0xd8>)
 80025a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ba:	2b80      	cmp	r3, #128	; 0x80
 80025bc:	d0ef      	beq.n	800259e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80025be:	4b20      	ldr	r3, [pc, #128]	; (8002640 <xPortStartScheduler+0xd8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f1c3 0307 	rsb	r3, r3, #7
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d00a      	beq.n	80025e0 <xPortStartScheduler+0x78>
	__asm volatile
 80025ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ce:	f383 8811 	msr	BASEPRI, r3
 80025d2:	f3bf 8f6f 	isb	sy
 80025d6:	f3bf 8f4f 	dsb	sy
 80025da:	60bb      	str	r3, [r7, #8]
}
 80025dc:	bf00      	nop
 80025de:	e7fe      	b.n	80025de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80025e0:	4b17      	ldr	r3, [pc, #92]	; (8002640 <xPortStartScheduler+0xd8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	021b      	lsls	r3, r3, #8
 80025e6:	4a16      	ldr	r2, [pc, #88]	; (8002640 <xPortStartScheduler+0xd8>)
 80025e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <xPortStartScheduler+0xd8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025f2:	4a13      	ldr	r2, [pc, #76]	; (8002640 <xPortStartScheduler+0xd8>)
 80025f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <xPortStartScheduler+0xdc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a10      	ldr	r2, [pc, #64]	; (8002644 <xPortStartScheduler+0xdc>)
 8002604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002608:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <xPortStartScheduler+0xdc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a0d      	ldr	r2, [pc, #52]	; (8002644 <xPortStartScheduler+0xdc>)
 8002610:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002614:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002616:	f000 f8b9 	bl	800278c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <xPortStartScheduler+0xe0>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002620:	f7ff ff92 	bl	8002548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002624:	f7ff fd7c 	bl	8002120 <vTaskSwitchContext>
	prvTaskExitError();
 8002628:	f7ff ff4c 	bl	80024c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	e000e400 	.word	0xe000e400
 800263c:	200004cc 	.word	0x200004cc
 8002640:	200004d0 	.word	0x200004d0
 8002644:	e000ed20 	.word	0xe000ed20
 8002648:	2000000c 	.word	0x2000000c

0800264c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
	__asm volatile
 8002652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002656:	f383 8811 	msr	BASEPRI, r3
 800265a:	f3bf 8f6f 	isb	sy
 800265e:	f3bf 8f4f 	dsb	sy
 8002662:	607b      	str	r3, [r7, #4]
}
 8002664:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002666:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <vPortEnterCritical+0x58>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	4a0d      	ldr	r2, [pc, #52]	; (80026a4 <vPortEnterCritical+0x58>)
 800266e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <vPortEnterCritical+0x58>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d10f      	bne.n	8002698 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <vPortEnterCritical+0x5c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <vPortEnterCritical+0x4c>
	__asm volatile
 8002682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002686:	f383 8811 	msr	BASEPRI, r3
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	603b      	str	r3, [r7, #0]
}
 8002694:	bf00      	nop
 8002696:	e7fe      	b.n	8002696 <vPortEnterCritical+0x4a>
	}
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	2000000c 	.word	0x2000000c
 80026a8:	e000ed04 	.word	0xe000ed04

080026ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <vPortExitCritical+0x4c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10a      	bne.n	80026d0 <vPortExitCritical+0x24>
	__asm volatile
 80026ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026be:	f383 8811 	msr	BASEPRI, r3
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	607b      	str	r3, [r7, #4]
}
 80026cc:	bf00      	nop
 80026ce:	e7fe      	b.n	80026ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <vPortExitCritical+0x4c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	4a08      	ldr	r2, [pc, #32]	; (80026f8 <vPortExitCritical+0x4c>)
 80026d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <vPortExitCritical+0x4c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d105      	bne.n	80026ee <vPortExitCritical+0x42>
 80026e2:	2300      	movs	r3, #0
 80026e4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80026ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	2000000c 	.word	0x2000000c
 80026fc:	00000000 	.word	0x00000000

08002700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002700:	f3ef 8009 	mrs	r0, PSP
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <pxCurrentTCBConst>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002710:	6010      	str	r0, [r2, #0]
 8002712:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002716:	f04f 0050 	mov.w	r0, #80	; 0x50
 800271a:	f380 8811 	msr	BASEPRI, r0
 800271e:	f7ff fcff 	bl	8002120 <vTaskSwitchContext>
 8002722:	f04f 0000 	mov.w	r0, #0
 8002726:	f380 8811 	msr	BASEPRI, r0
 800272a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800272e:	6819      	ldr	r1, [r3, #0]
 8002730:	6808      	ldr	r0, [r1, #0]
 8002732:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002736:	f380 8809 	msr	PSP, r0
 800273a:	f3bf 8f6f 	isb	sy
 800273e:	4770      	bx	lr

08002740 <pxCurrentTCBConst>:
 8002740:	200003a0 	.word	0x200003a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop

08002748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
	__asm volatile
 800274e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002752:	f383 8811 	msr	BASEPRI, r3
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	607b      	str	r3, [r7, #4]
}
 8002760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002762:	f7ff fc1f 	bl	8001fa4 <xTaskIncrementTick>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <SysTick_Handler+0x40>)
 800276e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	2300      	movs	r3, #0
 8002776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	f383 8811 	msr	BASEPRI, r3
}
 800277e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	e000ed04 	.word	0xe000ed04

0800278c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002790:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <vPortSetupTimerInterrupt+0x30>)
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <vPortSetupTimerInterrupt+0x34>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <vPortSetupTimerInterrupt+0x38>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <vPortSetupTimerInterrupt+0x3c>)
 80027a2:	fba2 2303 	umull	r2, r3, r2, r3
 80027a6:	099b      	lsrs	r3, r3, #6
 80027a8:	4a08      	ldr	r2, [pc, #32]	; (80027cc <vPortSetupTimerInterrupt+0x40>)
 80027aa:	3b01      	subs	r3, #1
 80027ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80027ae:	4b03      	ldr	r3, [pc, #12]	; (80027bc <vPortSetupTimerInterrupt+0x30>)
 80027b0:	2207      	movs	r2, #7
 80027b2:	601a      	str	r2, [r3, #0]
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	e000e010 	.word	0xe000e010
 80027c0:	e000e018 	.word	0xe000e018
 80027c4:	20000000 	.word	0x20000000
 80027c8:	10624dd3 	.word	0x10624dd3
 80027cc:	e000e014 	.word	0xe000e014

080027d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80027dc:	f7ff fb38 	bl	8001e50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80027e0:	4b58      	ldr	r3, [pc, #352]	; (8002944 <pvPortMalloc+0x174>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80027e8:	f000 f910 	bl	8002a0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80027ec:	4b56      	ldr	r3, [pc, #344]	; (8002948 <pvPortMalloc+0x178>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f040 808e 	bne.w	8002916 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d01d      	beq.n	800283c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002800:	2208      	movs	r2, #8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	2b00      	cmp	r3, #0
 8002810:	d014      	beq.n	800283c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f023 0307 	bic.w	r3, r3, #7
 8002818:	3308      	adds	r3, #8
 800281a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00a      	beq.n	800283c <pvPortMalloc+0x6c>
	__asm volatile
 8002826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282a:	f383 8811 	msr	BASEPRI, r3
 800282e:	f3bf 8f6f 	isb	sy
 8002832:	f3bf 8f4f 	dsb	sy
 8002836:	617b      	str	r3, [r7, #20]
}
 8002838:	bf00      	nop
 800283a:	e7fe      	b.n	800283a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d069      	beq.n	8002916 <pvPortMalloc+0x146>
 8002842:	4b42      	ldr	r3, [pc, #264]	; (800294c <pvPortMalloc+0x17c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	429a      	cmp	r2, r3
 800284a:	d864      	bhi.n	8002916 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800284c:	4b40      	ldr	r3, [pc, #256]	; (8002950 <pvPortMalloc+0x180>)
 800284e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002850:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <pvPortMalloc+0x180>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002856:	e004      	b.n	8002862 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	429a      	cmp	r2, r3
 800286a:	d903      	bls.n	8002874 <pvPortMalloc+0xa4>
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f1      	bne.n	8002858 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002874:	4b33      	ldr	r3, [pc, #204]	; (8002944 <pvPortMalloc+0x174>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287a:	429a      	cmp	r2, r3
 800287c:	d04b      	beq.n	8002916 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2208      	movs	r2, #8
 8002884:	4413      	add	r3, r2
 8002886:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	1ad2      	subs	r2, r2, r3
 8002898:	2308      	movs	r3, #8
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	429a      	cmp	r2, r3
 800289e:	d91f      	bls.n	80028e0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80028a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <pvPortMalloc+0xf8>
	__asm volatile
 80028b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	613b      	str	r3, [r7, #16]
}
 80028c4:	bf00      	nop
 80028c6:	e7fe      	b.n	80028c6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	1ad2      	subs	r2, r2, r3
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80028da:	69b8      	ldr	r0, [r7, #24]
 80028dc:	f000 f8f8 	bl	8002ad0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80028e0:	4b1a      	ldr	r3, [pc, #104]	; (800294c <pvPortMalloc+0x17c>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	4a18      	ldr	r2, [pc, #96]	; (800294c <pvPortMalloc+0x17c>)
 80028ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80028ee:	4b17      	ldr	r3, [pc, #92]	; (800294c <pvPortMalloc+0x17c>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	4b18      	ldr	r3, [pc, #96]	; (8002954 <pvPortMalloc+0x184>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d203      	bcs.n	8002902 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80028fa:	4b14      	ldr	r3, [pc, #80]	; (800294c <pvPortMalloc+0x17c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a15      	ldr	r2, [pc, #84]	; (8002954 <pvPortMalloc+0x184>)
 8002900:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <pvPortMalloc+0x178>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	431a      	orrs	r2, r3
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002916:	f7ff faa9 	bl	8001e6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <pvPortMalloc+0x16a>
	__asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	60fb      	str	r3, [r7, #12]
}
 8002936:	bf00      	nop
 8002938:	e7fe      	b.n	8002938 <pvPortMalloc+0x168>
	return pvReturn;
 800293a:	69fb      	ldr	r3, [r7, #28]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3728      	adds	r7, #40	; 0x28
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	200010dc 	.word	0x200010dc
 8002948:	200010e8 	.word	0x200010e8
 800294c:	200010e0 	.word	0x200010e0
 8002950:	200010d4 	.word	0x200010d4
 8002954:	200010e4 	.word	0x200010e4

08002958 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d048      	beq.n	80029fc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800296a:	2308      	movs	r3, #8
 800296c:	425b      	negs	r3, r3
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4413      	add	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <vPortFree+0xac>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10a      	bne.n	800299c <vPortFree+0x44>
	__asm volatile
 8002986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	60fb      	str	r3, [r7, #12]
}
 8002998:	bf00      	nop
 800299a:	e7fe      	b.n	800299a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <vPortFree+0x62>
	__asm volatile
 80029a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a8:	f383 8811 	msr	BASEPRI, r3
 80029ac:	f3bf 8f6f 	isb	sy
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	60bb      	str	r3, [r7, #8]
}
 80029b6:	bf00      	nop
 80029b8:	e7fe      	b.n	80029b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <vPortFree+0xac>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d019      	beq.n	80029fc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d115      	bne.n	80029fc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <vPortFree+0xac>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	43db      	mvns	r3, r3
 80029da:	401a      	ands	r2, r3
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80029e0:	f7ff fa36 	bl	8001e50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <vPortFree+0xb0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4413      	add	r3, r2
 80029ee:	4a06      	ldr	r2, [pc, #24]	; (8002a08 <vPortFree+0xb0>)
 80029f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80029f2:	6938      	ldr	r0, [r7, #16]
 80029f4:	f000 f86c 	bl	8002ad0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80029f8:	f7ff fa38 	bl	8001e6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80029fc:	bf00      	nop
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	200010e8 	.word	0x200010e8
 8002a08:	200010e0 	.word	0x200010e0

08002a0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002a12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002a18:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <prvHeapInit+0xac>)
 8002a1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00c      	beq.n	8002a40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3307      	adds	r3, #7
 8002a2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f023 0307 	bic.w	r3, r3, #7
 8002a32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <prvHeapInit+0xac>)
 8002a3c:	4413      	add	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a44:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <prvHeapInit+0xb0>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002a4a:	4b1c      	ldr	r3, [pc, #112]	; (8002abc <prvHeapInit+0xb0>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	4413      	add	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002a58:	2208      	movs	r2, #8
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f023 0307 	bic.w	r3, r3, #7
 8002a66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <prvHeapInit+0xb4>)
 8002a6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002a6e:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <prvHeapInit+0xb4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2200      	movs	r2, #0
 8002a74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002a76:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <prvHeapInit+0xb4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	1ad2      	subs	r2, r2, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <prvHeapInit+0xb4>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <prvHeapInit+0xb8>)
 8002a9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <prvHeapInit+0xbc>)
 8002aa2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <prvHeapInit+0xc0>)
 8002aa6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002aaa:	601a      	str	r2, [r3, #0]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	200004d4 	.word	0x200004d4
 8002abc:	200010d4 	.word	0x200010d4
 8002ac0:	200010dc 	.word	0x200010dc
 8002ac4:	200010e4 	.word	0x200010e4
 8002ac8:	200010e0 	.word	0x200010e0
 8002acc:	200010e8 	.word	0x200010e8

08002ad0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002ad8:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <prvInsertBlockIntoFreeList+0xa8>)
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	e002      	b.n	8002ae4 <prvInsertBlockIntoFreeList+0x14>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d8f7      	bhi.n	8002ade <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	4413      	add	r3, r2
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d108      	bne.n	8002b12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	441a      	add	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	441a      	add	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d118      	bne.n	8002b58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <prvInsertBlockIntoFreeList+0xac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d00d      	beq.n	8002b4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	441a      	add	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	e008      	b.n	8002b60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <prvInsertBlockIntoFreeList+0xac>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	e003      	b.n	8002b60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d002      	beq.n	8002b6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b6e:	bf00      	nop
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	200010d4 	.word	0x200010d4
 8002b7c:	200010dc 	.word	0x200010dc

08002b80 <__errno>:
 8002b80:	4b01      	ldr	r3, [pc, #4]	; (8002b88 <__errno+0x8>)
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000010 	.word	0x20000010

08002b8c <std>:
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	b510      	push	{r4, lr}
 8002b90:	4604      	mov	r4, r0
 8002b92:	e9c0 3300 	strd	r3, r3, [r0]
 8002b96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b9a:	6083      	str	r3, [r0, #8]
 8002b9c:	8181      	strh	r1, [r0, #12]
 8002b9e:	6643      	str	r3, [r0, #100]	; 0x64
 8002ba0:	81c2      	strh	r2, [r0, #14]
 8002ba2:	6183      	str	r3, [r0, #24]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	2208      	movs	r2, #8
 8002ba8:	305c      	adds	r0, #92	; 0x5c
 8002baa:	f000 f90c 	bl	8002dc6 <memset>
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <std+0x38>)
 8002bb0:	6224      	str	r4, [r4, #32]
 8002bb2:	6263      	str	r3, [r4, #36]	; 0x24
 8002bb4:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <std+0x3c>)
 8002bb6:	62a3      	str	r3, [r4, #40]	; 0x28
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <std+0x40>)
 8002bba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002bbc:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <std+0x44>)
 8002bbe:	6323      	str	r3, [r4, #48]	; 0x30
 8002bc0:	bd10      	pop	{r4, pc}
 8002bc2:	bf00      	nop
 8002bc4:	080030e1 	.word	0x080030e1
 8002bc8:	08003103 	.word	0x08003103
 8002bcc:	0800313b 	.word	0x0800313b
 8002bd0:	0800315f 	.word	0x0800315f

08002bd4 <_cleanup_r>:
 8002bd4:	4901      	ldr	r1, [pc, #4]	; (8002bdc <_cleanup_r+0x8>)
 8002bd6:	f000 b8af 	b.w	8002d38 <_fwalk_reent>
 8002bda:	bf00      	nop
 8002bdc:	08003431 	.word	0x08003431

08002be0 <__sfmoreglue>:
 8002be0:	2268      	movs	r2, #104	; 0x68
 8002be2:	b570      	push	{r4, r5, r6, lr}
 8002be4:	1e4d      	subs	r5, r1, #1
 8002be6:	4355      	muls	r5, r2
 8002be8:	460e      	mov	r6, r1
 8002bea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002bee:	f000 f913 	bl	8002e18 <_malloc_r>
 8002bf2:	4604      	mov	r4, r0
 8002bf4:	b140      	cbz	r0, 8002c08 <__sfmoreglue+0x28>
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	e9c0 1600 	strd	r1, r6, [r0]
 8002bfc:	300c      	adds	r0, #12
 8002bfe:	60a0      	str	r0, [r4, #8]
 8002c00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002c04:	f000 f8df 	bl	8002dc6 <memset>
 8002c08:	4620      	mov	r0, r4
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}

08002c0c <__sfp_lock_acquire>:
 8002c0c:	4801      	ldr	r0, [pc, #4]	; (8002c14 <__sfp_lock_acquire+0x8>)
 8002c0e:	f000 b8d8 	b.w	8002dc2 <__retarget_lock_acquire_recursive>
 8002c12:	bf00      	nop
 8002c14:	200010ed 	.word	0x200010ed

08002c18 <__sfp_lock_release>:
 8002c18:	4801      	ldr	r0, [pc, #4]	; (8002c20 <__sfp_lock_release+0x8>)
 8002c1a:	f000 b8d3 	b.w	8002dc4 <__retarget_lock_release_recursive>
 8002c1e:	bf00      	nop
 8002c20:	200010ed 	.word	0x200010ed

08002c24 <__sinit_lock_acquire>:
 8002c24:	4801      	ldr	r0, [pc, #4]	; (8002c2c <__sinit_lock_acquire+0x8>)
 8002c26:	f000 b8cc 	b.w	8002dc2 <__retarget_lock_acquire_recursive>
 8002c2a:	bf00      	nop
 8002c2c:	200010ee 	.word	0x200010ee

08002c30 <__sinit_lock_release>:
 8002c30:	4801      	ldr	r0, [pc, #4]	; (8002c38 <__sinit_lock_release+0x8>)
 8002c32:	f000 b8c7 	b.w	8002dc4 <__retarget_lock_release_recursive>
 8002c36:	bf00      	nop
 8002c38:	200010ee 	.word	0x200010ee

08002c3c <__sinit>:
 8002c3c:	b510      	push	{r4, lr}
 8002c3e:	4604      	mov	r4, r0
 8002c40:	f7ff fff0 	bl	8002c24 <__sinit_lock_acquire>
 8002c44:	69a3      	ldr	r3, [r4, #24]
 8002c46:	b11b      	cbz	r3, 8002c50 <__sinit+0x14>
 8002c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c4c:	f7ff bff0 	b.w	8002c30 <__sinit_lock_release>
 8002c50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002c54:	6523      	str	r3, [r4, #80]	; 0x50
 8002c56:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <__sinit+0x68>)
 8002c58:	4a13      	ldr	r2, [pc, #76]	; (8002ca8 <__sinit+0x6c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002c5e:	42a3      	cmp	r3, r4
 8002c60:	bf08      	it	eq
 8002c62:	2301      	moveq	r3, #1
 8002c64:	4620      	mov	r0, r4
 8002c66:	bf08      	it	eq
 8002c68:	61a3      	streq	r3, [r4, #24]
 8002c6a:	f000 f81f 	bl	8002cac <__sfp>
 8002c6e:	6060      	str	r0, [r4, #4]
 8002c70:	4620      	mov	r0, r4
 8002c72:	f000 f81b 	bl	8002cac <__sfp>
 8002c76:	60a0      	str	r0, [r4, #8]
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f000 f817 	bl	8002cac <__sfp>
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2104      	movs	r1, #4
 8002c82:	60e0      	str	r0, [r4, #12]
 8002c84:	6860      	ldr	r0, [r4, #4]
 8002c86:	f7ff ff81 	bl	8002b8c <std>
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	2109      	movs	r1, #9
 8002c8e:	68a0      	ldr	r0, [r4, #8]
 8002c90:	f7ff ff7c 	bl	8002b8c <std>
 8002c94:	2202      	movs	r2, #2
 8002c96:	2112      	movs	r1, #18
 8002c98:	68e0      	ldr	r0, [r4, #12]
 8002c9a:	f7ff ff77 	bl	8002b8c <std>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	61a3      	str	r3, [r4, #24]
 8002ca2:	e7d1      	b.n	8002c48 <__sinit+0xc>
 8002ca4:	080037f0 	.word	0x080037f0
 8002ca8:	08002bd5 	.word	0x08002bd5

08002cac <__sfp>:
 8002cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cae:	4607      	mov	r7, r0
 8002cb0:	f7ff ffac 	bl	8002c0c <__sfp_lock_acquire>
 8002cb4:	4b1e      	ldr	r3, [pc, #120]	; (8002d30 <__sfp+0x84>)
 8002cb6:	681e      	ldr	r6, [r3, #0]
 8002cb8:	69b3      	ldr	r3, [r6, #24]
 8002cba:	b913      	cbnz	r3, 8002cc2 <__sfp+0x16>
 8002cbc:	4630      	mov	r0, r6
 8002cbe:	f7ff ffbd 	bl	8002c3c <__sinit>
 8002cc2:	3648      	adds	r6, #72	; 0x48
 8002cc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	d503      	bpl.n	8002cd4 <__sfp+0x28>
 8002ccc:	6833      	ldr	r3, [r6, #0]
 8002cce:	b30b      	cbz	r3, 8002d14 <__sfp+0x68>
 8002cd0:	6836      	ldr	r6, [r6, #0]
 8002cd2:	e7f7      	b.n	8002cc4 <__sfp+0x18>
 8002cd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002cd8:	b9d5      	cbnz	r5, 8002d10 <__sfp+0x64>
 8002cda:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <__sfp+0x88>)
 8002cdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ce0:	60e3      	str	r3, [r4, #12]
 8002ce2:	6665      	str	r5, [r4, #100]	; 0x64
 8002ce4:	f000 f86c 	bl	8002dc0 <__retarget_lock_init_recursive>
 8002ce8:	f7ff ff96 	bl	8002c18 <__sfp_lock_release>
 8002cec:	2208      	movs	r2, #8
 8002cee:	4629      	mov	r1, r5
 8002cf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002cf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002cf8:	6025      	str	r5, [r4, #0]
 8002cfa:	61a5      	str	r5, [r4, #24]
 8002cfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002d00:	f000 f861 	bl	8002dc6 <memset>
 8002d04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002d08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d10:	3468      	adds	r4, #104	; 0x68
 8002d12:	e7d9      	b.n	8002cc8 <__sfp+0x1c>
 8002d14:	2104      	movs	r1, #4
 8002d16:	4638      	mov	r0, r7
 8002d18:	f7ff ff62 	bl	8002be0 <__sfmoreglue>
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	6030      	str	r0, [r6, #0]
 8002d20:	2800      	cmp	r0, #0
 8002d22:	d1d5      	bne.n	8002cd0 <__sfp+0x24>
 8002d24:	f7ff ff78 	bl	8002c18 <__sfp_lock_release>
 8002d28:	230c      	movs	r3, #12
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	e7ee      	b.n	8002d0c <__sfp+0x60>
 8002d2e:	bf00      	nop
 8002d30:	080037f0 	.word	0x080037f0
 8002d34:	ffff0001 	.word	0xffff0001

08002d38 <_fwalk_reent>:
 8002d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d3c:	4606      	mov	r6, r0
 8002d3e:	4688      	mov	r8, r1
 8002d40:	2700      	movs	r7, #0
 8002d42:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002d46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d4a:	f1b9 0901 	subs.w	r9, r9, #1
 8002d4e:	d505      	bpl.n	8002d5c <_fwalk_reent+0x24>
 8002d50:	6824      	ldr	r4, [r4, #0]
 8002d52:	2c00      	cmp	r4, #0
 8002d54:	d1f7      	bne.n	8002d46 <_fwalk_reent+0xe>
 8002d56:	4638      	mov	r0, r7
 8002d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d5c:	89ab      	ldrh	r3, [r5, #12]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d907      	bls.n	8002d72 <_fwalk_reent+0x3a>
 8002d62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d66:	3301      	adds	r3, #1
 8002d68:	d003      	beq.n	8002d72 <_fwalk_reent+0x3a>
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	4630      	mov	r0, r6
 8002d6e:	47c0      	blx	r8
 8002d70:	4307      	orrs	r7, r0
 8002d72:	3568      	adds	r5, #104	; 0x68
 8002d74:	e7e9      	b.n	8002d4a <_fwalk_reent+0x12>
	...

08002d78 <__libc_init_array>:
 8002d78:	b570      	push	{r4, r5, r6, lr}
 8002d7a:	2600      	movs	r6, #0
 8002d7c:	4d0c      	ldr	r5, [pc, #48]	; (8002db0 <__libc_init_array+0x38>)
 8002d7e:	4c0d      	ldr	r4, [pc, #52]	; (8002db4 <__libc_init_array+0x3c>)
 8002d80:	1b64      	subs	r4, r4, r5
 8002d82:	10a4      	asrs	r4, r4, #2
 8002d84:	42a6      	cmp	r6, r4
 8002d86:	d109      	bne.n	8002d9c <__libc_init_array+0x24>
 8002d88:	f000 fc8e 	bl	80036a8 <_init>
 8002d8c:	2600      	movs	r6, #0
 8002d8e:	4d0a      	ldr	r5, [pc, #40]	; (8002db8 <__libc_init_array+0x40>)
 8002d90:	4c0a      	ldr	r4, [pc, #40]	; (8002dbc <__libc_init_array+0x44>)
 8002d92:	1b64      	subs	r4, r4, r5
 8002d94:	10a4      	asrs	r4, r4, #2
 8002d96:	42a6      	cmp	r6, r4
 8002d98:	d105      	bne.n	8002da6 <__libc_init_array+0x2e>
 8002d9a:	bd70      	pop	{r4, r5, r6, pc}
 8002d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da0:	4798      	blx	r3
 8002da2:	3601      	adds	r6, #1
 8002da4:	e7ee      	b.n	8002d84 <__libc_init_array+0xc>
 8002da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002daa:	4798      	blx	r3
 8002dac:	3601      	adds	r6, #1
 8002dae:	e7f2      	b.n	8002d96 <__libc_init_array+0x1e>
 8002db0:	080037f4 	.word	0x080037f4
 8002db4:	080037f4 	.word	0x080037f4
 8002db8:	080037f4 	.word	0x080037f4
 8002dbc:	080037f8 	.word	0x080037f8

08002dc0 <__retarget_lock_init_recursive>:
 8002dc0:	4770      	bx	lr

08002dc2 <__retarget_lock_acquire_recursive>:
 8002dc2:	4770      	bx	lr

08002dc4 <__retarget_lock_release_recursive>:
 8002dc4:	4770      	bx	lr

08002dc6 <memset>:
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	4402      	add	r2, r0
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d100      	bne.n	8002dd0 <memset+0xa>
 8002dce:	4770      	bx	lr
 8002dd0:	f803 1b01 	strb.w	r1, [r3], #1
 8002dd4:	e7f9      	b.n	8002dca <memset+0x4>
	...

08002dd8 <sbrk_aligned>:
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	4e0e      	ldr	r6, [pc, #56]	; (8002e14 <sbrk_aligned+0x3c>)
 8002ddc:	460c      	mov	r4, r1
 8002dde:	6831      	ldr	r1, [r6, #0]
 8002de0:	4605      	mov	r5, r0
 8002de2:	b911      	cbnz	r1, 8002dea <sbrk_aligned+0x12>
 8002de4:	f000 f96c 	bl	80030c0 <_sbrk_r>
 8002de8:	6030      	str	r0, [r6, #0]
 8002dea:	4621      	mov	r1, r4
 8002dec:	4628      	mov	r0, r5
 8002dee:	f000 f967 	bl	80030c0 <_sbrk_r>
 8002df2:	1c43      	adds	r3, r0, #1
 8002df4:	d00a      	beq.n	8002e0c <sbrk_aligned+0x34>
 8002df6:	1cc4      	adds	r4, r0, #3
 8002df8:	f024 0403 	bic.w	r4, r4, #3
 8002dfc:	42a0      	cmp	r0, r4
 8002dfe:	d007      	beq.n	8002e10 <sbrk_aligned+0x38>
 8002e00:	1a21      	subs	r1, r4, r0
 8002e02:	4628      	mov	r0, r5
 8002e04:	f000 f95c 	bl	80030c0 <_sbrk_r>
 8002e08:	3001      	adds	r0, #1
 8002e0a:	d101      	bne.n	8002e10 <sbrk_aligned+0x38>
 8002e0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002e10:	4620      	mov	r0, r4
 8002e12:	bd70      	pop	{r4, r5, r6, pc}
 8002e14:	200010f4 	.word	0x200010f4

08002e18 <_malloc_r>:
 8002e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e1c:	1ccd      	adds	r5, r1, #3
 8002e1e:	f025 0503 	bic.w	r5, r5, #3
 8002e22:	3508      	adds	r5, #8
 8002e24:	2d0c      	cmp	r5, #12
 8002e26:	bf38      	it	cc
 8002e28:	250c      	movcc	r5, #12
 8002e2a:	2d00      	cmp	r5, #0
 8002e2c:	4607      	mov	r7, r0
 8002e2e:	db01      	blt.n	8002e34 <_malloc_r+0x1c>
 8002e30:	42a9      	cmp	r1, r5
 8002e32:	d905      	bls.n	8002e40 <_malloc_r+0x28>
 8002e34:	230c      	movs	r3, #12
 8002e36:	2600      	movs	r6, #0
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e40:	4e2e      	ldr	r6, [pc, #184]	; (8002efc <_malloc_r+0xe4>)
 8002e42:	f000 fba9 	bl	8003598 <__malloc_lock>
 8002e46:	6833      	ldr	r3, [r6, #0]
 8002e48:	461c      	mov	r4, r3
 8002e4a:	bb34      	cbnz	r4, 8002e9a <_malloc_r+0x82>
 8002e4c:	4629      	mov	r1, r5
 8002e4e:	4638      	mov	r0, r7
 8002e50:	f7ff ffc2 	bl	8002dd8 <sbrk_aligned>
 8002e54:	1c43      	adds	r3, r0, #1
 8002e56:	4604      	mov	r4, r0
 8002e58:	d14d      	bne.n	8002ef6 <_malloc_r+0xde>
 8002e5a:	6834      	ldr	r4, [r6, #0]
 8002e5c:	4626      	mov	r6, r4
 8002e5e:	2e00      	cmp	r6, #0
 8002e60:	d140      	bne.n	8002ee4 <_malloc_r+0xcc>
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	4631      	mov	r1, r6
 8002e66:	4638      	mov	r0, r7
 8002e68:	eb04 0803 	add.w	r8, r4, r3
 8002e6c:	f000 f928 	bl	80030c0 <_sbrk_r>
 8002e70:	4580      	cmp	r8, r0
 8002e72:	d13a      	bne.n	8002eea <_malloc_r+0xd2>
 8002e74:	6821      	ldr	r1, [r4, #0]
 8002e76:	3503      	adds	r5, #3
 8002e78:	1a6d      	subs	r5, r5, r1
 8002e7a:	f025 0503 	bic.w	r5, r5, #3
 8002e7e:	3508      	adds	r5, #8
 8002e80:	2d0c      	cmp	r5, #12
 8002e82:	bf38      	it	cc
 8002e84:	250c      	movcc	r5, #12
 8002e86:	4638      	mov	r0, r7
 8002e88:	4629      	mov	r1, r5
 8002e8a:	f7ff ffa5 	bl	8002dd8 <sbrk_aligned>
 8002e8e:	3001      	adds	r0, #1
 8002e90:	d02b      	beq.n	8002eea <_malloc_r+0xd2>
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	442b      	add	r3, r5
 8002e96:	6023      	str	r3, [r4, #0]
 8002e98:	e00e      	b.n	8002eb8 <_malloc_r+0xa0>
 8002e9a:	6822      	ldr	r2, [r4, #0]
 8002e9c:	1b52      	subs	r2, r2, r5
 8002e9e:	d41e      	bmi.n	8002ede <_malloc_r+0xc6>
 8002ea0:	2a0b      	cmp	r2, #11
 8002ea2:	d916      	bls.n	8002ed2 <_malloc_r+0xba>
 8002ea4:	1961      	adds	r1, r4, r5
 8002ea6:	42a3      	cmp	r3, r4
 8002ea8:	6025      	str	r5, [r4, #0]
 8002eaa:	bf18      	it	ne
 8002eac:	6059      	strne	r1, [r3, #4]
 8002eae:	6863      	ldr	r3, [r4, #4]
 8002eb0:	bf08      	it	eq
 8002eb2:	6031      	streq	r1, [r6, #0]
 8002eb4:	5162      	str	r2, [r4, r5]
 8002eb6:	604b      	str	r3, [r1, #4]
 8002eb8:	4638      	mov	r0, r7
 8002eba:	f104 060b 	add.w	r6, r4, #11
 8002ebe:	f000 fb71 	bl	80035a4 <__malloc_unlock>
 8002ec2:	f026 0607 	bic.w	r6, r6, #7
 8002ec6:	1d23      	adds	r3, r4, #4
 8002ec8:	1af2      	subs	r2, r6, r3
 8002eca:	d0b6      	beq.n	8002e3a <_malloc_r+0x22>
 8002ecc:	1b9b      	subs	r3, r3, r6
 8002ece:	50a3      	str	r3, [r4, r2]
 8002ed0:	e7b3      	b.n	8002e3a <_malloc_r+0x22>
 8002ed2:	6862      	ldr	r2, [r4, #4]
 8002ed4:	42a3      	cmp	r3, r4
 8002ed6:	bf0c      	ite	eq
 8002ed8:	6032      	streq	r2, [r6, #0]
 8002eda:	605a      	strne	r2, [r3, #4]
 8002edc:	e7ec      	b.n	8002eb8 <_malloc_r+0xa0>
 8002ede:	4623      	mov	r3, r4
 8002ee0:	6864      	ldr	r4, [r4, #4]
 8002ee2:	e7b2      	b.n	8002e4a <_malloc_r+0x32>
 8002ee4:	4634      	mov	r4, r6
 8002ee6:	6876      	ldr	r6, [r6, #4]
 8002ee8:	e7b9      	b.n	8002e5e <_malloc_r+0x46>
 8002eea:	230c      	movs	r3, #12
 8002eec:	4638      	mov	r0, r7
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	f000 fb58 	bl	80035a4 <__malloc_unlock>
 8002ef4:	e7a1      	b.n	8002e3a <_malloc_r+0x22>
 8002ef6:	6025      	str	r5, [r4, #0]
 8002ef8:	e7de      	b.n	8002eb8 <_malloc_r+0xa0>
 8002efa:	bf00      	nop
 8002efc:	200010f0 	.word	0x200010f0

08002f00 <_puts_r>:
 8002f00:	b570      	push	{r4, r5, r6, lr}
 8002f02:	460e      	mov	r6, r1
 8002f04:	4605      	mov	r5, r0
 8002f06:	b118      	cbz	r0, 8002f10 <_puts_r+0x10>
 8002f08:	6983      	ldr	r3, [r0, #24]
 8002f0a:	b90b      	cbnz	r3, 8002f10 <_puts_r+0x10>
 8002f0c:	f7ff fe96 	bl	8002c3c <__sinit>
 8002f10:	69ab      	ldr	r3, [r5, #24]
 8002f12:	68ac      	ldr	r4, [r5, #8]
 8002f14:	b913      	cbnz	r3, 8002f1c <_puts_r+0x1c>
 8002f16:	4628      	mov	r0, r5
 8002f18:	f7ff fe90 	bl	8002c3c <__sinit>
 8002f1c:	4b2c      	ldr	r3, [pc, #176]	; (8002fd0 <_puts_r+0xd0>)
 8002f1e:	429c      	cmp	r4, r3
 8002f20:	d120      	bne.n	8002f64 <_puts_r+0x64>
 8002f22:	686c      	ldr	r4, [r5, #4]
 8002f24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f26:	07db      	lsls	r3, r3, #31
 8002f28:	d405      	bmi.n	8002f36 <_puts_r+0x36>
 8002f2a:	89a3      	ldrh	r3, [r4, #12]
 8002f2c:	0598      	lsls	r0, r3, #22
 8002f2e:	d402      	bmi.n	8002f36 <_puts_r+0x36>
 8002f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f32:	f7ff ff46 	bl	8002dc2 <__retarget_lock_acquire_recursive>
 8002f36:	89a3      	ldrh	r3, [r4, #12]
 8002f38:	0719      	lsls	r1, r3, #28
 8002f3a:	d51d      	bpl.n	8002f78 <_puts_r+0x78>
 8002f3c:	6923      	ldr	r3, [r4, #16]
 8002f3e:	b1db      	cbz	r3, 8002f78 <_puts_r+0x78>
 8002f40:	3e01      	subs	r6, #1
 8002f42:	68a3      	ldr	r3, [r4, #8]
 8002f44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	60a3      	str	r3, [r4, #8]
 8002f4c:	bb39      	cbnz	r1, 8002f9e <_puts_r+0x9e>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	da38      	bge.n	8002fc4 <_puts_r+0xc4>
 8002f52:	4622      	mov	r2, r4
 8002f54:	210a      	movs	r1, #10
 8002f56:	4628      	mov	r0, r5
 8002f58:	f000 f906 	bl	8003168 <__swbuf_r>
 8002f5c:	3001      	adds	r0, #1
 8002f5e:	d011      	beq.n	8002f84 <_puts_r+0x84>
 8002f60:	250a      	movs	r5, #10
 8002f62:	e011      	b.n	8002f88 <_puts_r+0x88>
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <_puts_r+0xd4>)
 8002f66:	429c      	cmp	r4, r3
 8002f68:	d101      	bne.n	8002f6e <_puts_r+0x6e>
 8002f6a:	68ac      	ldr	r4, [r5, #8]
 8002f6c:	e7da      	b.n	8002f24 <_puts_r+0x24>
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <_puts_r+0xd8>)
 8002f70:	429c      	cmp	r4, r3
 8002f72:	bf08      	it	eq
 8002f74:	68ec      	ldreq	r4, [r5, #12]
 8002f76:	e7d5      	b.n	8002f24 <_puts_r+0x24>
 8002f78:	4621      	mov	r1, r4
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	f000 f958 	bl	8003230 <__swsetup_r>
 8002f80:	2800      	cmp	r0, #0
 8002f82:	d0dd      	beq.n	8002f40 <_puts_r+0x40>
 8002f84:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002f88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f8a:	07da      	lsls	r2, r3, #31
 8002f8c:	d405      	bmi.n	8002f9a <_puts_r+0x9a>
 8002f8e:	89a3      	ldrh	r3, [r4, #12]
 8002f90:	059b      	lsls	r3, r3, #22
 8002f92:	d402      	bmi.n	8002f9a <_puts_r+0x9a>
 8002f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f96:	f7ff ff15 	bl	8002dc4 <__retarget_lock_release_recursive>
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	bd70      	pop	{r4, r5, r6, pc}
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	da04      	bge.n	8002fac <_puts_r+0xac>
 8002fa2:	69a2      	ldr	r2, [r4, #24]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	dc06      	bgt.n	8002fb6 <_puts_r+0xb6>
 8002fa8:	290a      	cmp	r1, #10
 8002faa:	d004      	beq.n	8002fb6 <_puts_r+0xb6>
 8002fac:	6823      	ldr	r3, [r4, #0]
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	6022      	str	r2, [r4, #0]
 8002fb2:	7019      	strb	r1, [r3, #0]
 8002fb4:	e7c5      	b.n	8002f42 <_puts_r+0x42>
 8002fb6:	4622      	mov	r2, r4
 8002fb8:	4628      	mov	r0, r5
 8002fba:	f000 f8d5 	bl	8003168 <__swbuf_r>
 8002fbe:	3001      	adds	r0, #1
 8002fc0:	d1bf      	bne.n	8002f42 <_puts_r+0x42>
 8002fc2:	e7df      	b.n	8002f84 <_puts_r+0x84>
 8002fc4:	250a      	movs	r5, #10
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	6022      	str	r2, [r4, #0]
 8002fcc:	701d      	strb	r5, [r3, #0]
 8002fce:	e7db      	b.n	8002f88 <_puts_r+0x88>
 8002fd0:	080037b0 	.word	0x080037b0
 8002fd4:	080037d0 	.word	0x080037d0
 8002fd8:	08003790 	.word	0x08003790

08002fdc <puts>:
 8002fdc:	4b02      	ldr	r3, [pc, #8]	; (8002fe8 <puts+0xc>)
 8002fde:	4601      	mov	r1, r0
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	f7ff bf8d 	b.w	8002f00 <_puts_r>
 8002fe6:	bf00      	nop
 8002fe8:	20000010 	.word	0x20000010

08002fec <cleanup_glue>:
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	460c      	mov	r4, r1
 8002ff0:	6809      	ldr	r1, [r1, #0]
 8002ff2:	4605      	mov	r5, r0
 8002ff4:	b109      	cbz	r1, 8002ffa <cleanup_glue+0xe>
 8002ff6:	f7ff fff9 	bl	8002fec <cleanup_glue>
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003002:	f000 bad5 	b.w	80035b0 <_free_r>
	...

08003008 <_reclaim_reent>:
 8003008:	4b2c      	ldr	r3, [pc, #176]	; (80030bc <_reclaim_reent+0xb4>)
 800300a:	b570      	push	{r4, r5, r6, lr}
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4604      	mov	r4, r0
 8003010:	4283      	cmp	r3, r0
 8003012:	d051      	beq.n	80030b8 <_reclaim_reent+0xb0>
 8003014:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003016:	b143      	cbz	r3, 800302a <_reclaim_reent+0x22>
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d14a      	bne.n	80030b4 <_reclaim_reent+0xac>
 800301e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003020:	6819      	ldr	r1, [r3, #0]
 8003022:	b111      	cbz	r1, 800302a <_reclaim_reent+0x22>
 8003024:	4620      	mov	r0, r4
 8003026:	f000 fac3 	bl	80035b0 <_free_r>
 800302a:	6961      	ldr	r1, [r4, #20]
 800302c:	b111      	cbz	r1, 8003034 <_reclaim_reent+0x2c>
 800302e:	4620      	mov	r0, r4
 8003030:	f000 fabe 	bl	80035b0 <_free_r>
 8003034:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003036:	b111      	cbz	r1, 800303e <_reclaim_reent+0x36>
 8003038:	4620      	mov	r0, r4
 800303a:	f000 fab9 	bl	80035b0 <_free_r>
 800303e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003040:	b111      	cbz	r1, 8003048 <_reclaim_reent+0x40>
 8003042:	4620      	mov	r0, r4
 8003044:	f000 fab4 	bl	80035b0 <_free_r>
 8003048:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800304a:	b111      	cbz	r1, 8003052 <_reclaim_reent+0x4a>
 800304c:	4620      	mov	r0, r4
 800304e:	f000 faaf 	bl	80035b0 <_free_r>
 8003052:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003054:	b111      	cbz	r1, 800305c <_reclaim_reent+0x54>
 8003056:	4620      	mov	r0, r4
 8003058:	f000 faaa 	bl	80035b0 <_free_r>
 800305c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800305e:	b111      	cbz	r1, 8003066 <_reclaim_reent+0x5e>
 8003060:	4620      	mov	r0, r4
 8003062:	f000 faa5 	bl	80035b0 <_free_r>
 8003066:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003068:	b111      	cbz	r1, 8003070 <_reclaim_reent+0x68>
 800306a:	4620      	mov	r0, r4
 800306c:	f000 faa0 	bl	80035b0 <_free_r>
 8003070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003072:	b111      	cbz	r1, 800307a <_reclaim_reent+0x72>
 8003074:	4620      	mov	r0, r4
 8003076:	f000 fa9b 	bl	80035b0 <_free_r>
 800307a:	69a3      	ldr	r3, [r4, #24]
 800307c:	b1e3      	cbz	r3, 80030b8 <_reclaim_reent+0xb0>
 800307e:	4620      	mov	r0, r4
 8003080:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003082:	4798      	blx	r3
 8003084:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003086:	b1b9      	cbz	r1, 80030b8 <_reclaim_reent+0xb0>
 8003088:	4620      	mov	r0, r4
 800308a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800308e:	f7ff bfad 	b.w	8002fec <cleanup_glue>
 8003092:	5949      	ldr	r1, [r1, r5]
 8003094:	b941      	cbnz	r1, 80030a8 <_reclaim_reent+0xa0>
 8003096:	3504      	adds	r5, #4
 8003098:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800309a:	2d80      	cmp	r5, #128	; 0x80
 800309c:	68d9      	ldr	r1, [r3, #12]
 800309e:	d1f8      	bne.n	8003092 <_reclaim_reent+0x8a>
 80030a0:	4620      	mov	r0, r4
 80030a2:	f000 fa85 	bl	80035b0 <_free_r>
 80030a6:	e7ba      	b.n	800301e <_reclaim_reent+0x16>
 80030a8:	680e      	ldr	r6, [r1, #0]
 80030aa:	4620      	mov	r0, r4
 80030ac:	f000 fa80 	bl	80035b0 <_free_r>
 80030b0:	4631      	mov	r1, r6
 80030b2:	e7ef      	b.n	8003094 <_reclaim_reent+0x8c>
 80030b4:	2500      	movs	r5, #0
 80030b6:	e7ef      	b.n	8003098 <_reclaim_reent+0x90>
 80030b8:	bd70      	pop	{r4, r5, r6, pc}
 80030ba:	bf00      	nop
 80030bc:	20000010 	.word	0x20000010

080030c0 <_sbrk_r>:
 80030c0:	b538      	push	{r3, r4, r5, lr}
 80030c2:	2300      	movs	r3, #0
 80030c4:	4d05      	ldr	r5, [pc, #20]	; (80030dc <_sbrk_r+0x1c>)
 80030c6:	4604      	mov	r4, r0
 80030c8:	4608      	mov	r0, r1
 80030ca:	602b      	str	r3, [r5, #0]
 80030cc:	f7fd fb60 	bl	8000790 <_sbrk>
 80030d0:	1c43      	adds	r3, r0, #1
 80030d2:	d102      	bne.n	80030da <_sbrk_r+0x1a>
 80030d4:	682b      	ldr	r3, [r5, #0]
 80030d6:	b103      	cbz	r3, 80030da <_sbrk_r+0x1a>
 80030d8:	6023      	str	r3, [r4, #0]
 80030da:	bd38      	pop	{r3, r4, r5, pc}
 80030dc:	200010f8 	.word	0x200010f8

080030e0 <__sread>:
 80030e0:	b510      	push	{r4, lr}
 80030e2:	460c      	mov	r4, r1
 80030e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030e8:	f000 faaa 	bl	8003640 <_read_r>
 80030ec:	2800      	cmp	r0, #0
 80030ee:	bfab      	itete	ge
 80030f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80030f2:	89a3      	ldrhlt	r3, [r4, #12]
 80030f4:	181b      	addge	r3, r3, r0
 80030f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80030fa:	bfac      	ite	ge
 80030fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80030fe:	81a3      	strhlt	r3, [r4, #12]
 8003100:	bd10      	pop	{r4, pc}

08003102 <__swrite>:
 8003102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003106:	461f      	mov	r7, r3
 8003108:	898b      	ldrh	r3, [r1, #12]
 800310a:	4605      	mov	r5, r0
 800310c:	05db      	lsls	r3, r3, #23
 800310e:	460c      	mov	r4, r1
 8003110:	4616      	mov	r6, r2
 8003112:	d505      	bpl.n	8003120 <__swrite+0x1e>
 8003114:	2302      	movs	r3, #2
 8003116:	2200      	movs	r2, #0
 8003118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800311c:	f000 f9c4 	bl	80034a8 <_lseek_r>
 8003120:	89a3      	ldrh	r3, [r4, #12]
 8003122:	4632      	mov	r2, r6
 8003124:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003128:	81a3      	strh	r3, [r4, #12]
 800312a:	4628      	mov	r0, r5
 800312c:	463b      	mov	r3, r7
 800312e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003136:	f000 b869 	b.w	800320c <_write_r>

0800313a <__sseek>:
 800313a:	b510      	push	{r4, lr}
 800313c:	460c      	mov	r4, r1
 800313e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003142:	f000 f9b1 	bl	80034a8 <_lseek_r>
 8003146:	1c43      	adds	r3, r0, #1
 8003148:	89a3      	ldrh	r3, [r4, #12]
 800314a:	bf15      	itete	ne
 800314c:	6560      	strne	r0, [r4, #84]	; 0x54
 800314e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003152:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003156:	81a3      	strheq	r3, [r4, #12]
 8003158:	bf18      	it	ne
 800315a:	81a3      	strhne	r3, [r4, #12]
 800315c:	bd10      	pop	{r4, pc}

0800315e <__sclose>:
 800315e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003162:	f000 b8d3 	b.w	800330c <_close_r>
	...

08003168 <__swbuf_r>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	460e      	mov	r6, r1
 800316c:	4614      	mov	r4, r2
 800316e:	4605      	mov	r5, r0
 8003170:	b118      	cbz	r0, 800317a <__swbuf_r+0x12>
 8003172:	6983      	ldr	r3, [r0, #24]
 8003174:	b90b      	cbnz	r3, 800317a <__swbuf_r+0x12>
 8003176:	f7ff fd61 	bl	8002c3c <__sinit>
 800317a:	4b21      	ldr	r3, [pc, #132]	; (8003200 <__swbuf_r+0x98>)
 800317c:	429c      	cmp	r4, r3
 800317e:	d12b      	bne.n	80031d8 <__swbuf_r+0x70>
 8003180:	686c      	ldr	r4, [r5, #4]
 8003182:	69a3      	ldr	r3, [r4, #24]
 8003184:	60a3      	str	r3, [r4, #8]
 8003186:	89a3      	ldrh	r3, [r4, #12]
 8003188:	071a      	lsls	r2, r3, #28
 800318a:	d52f      	bpl.n	80031ec <__swbuf_r+0x84>
 800318c:	6923      	ldr	r3, [r4, #16]
 800318e:	b36b      	cbz	r3, 80031ec <__swbuf_r+0x84>
 8003190:	6923      	ldr	r3, [r4, #16]
 8003192:	6820      	ldr	r0, [r4, #0]
 8003194:	b2f6      	uxtb	r6, r6
 8003196:	1ac0      	subs	r0, r0, r3
 8003198:	6963      	ldr	r3, [r4, #20]
 800319a:	4637      	mov	r7, r6
 800319c:	4283      	cmp	r3, r0
 800319e:	dc04      	bgt.n	80031aa <__swbuf_r+0x42>
 80031a0:	4621      	mov	r1, r4
 80031a2:	4628      	mov	r0, r5
 80031a4:	f000 f944 	bl	8003430 <_fflush_r>
 80031a8:	bb30      	cbnz	r0, 80031f8 <__swbuf_r+0x90>
 80031aa:	68a3      	ldr	r3, [r4, #8]
 80031ac:	3001      	adds	r0, #1
 80031ae:	3b01      	subs	r3, #1
 80031b0:	60a3      	str	r3, [r4, #8]
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	6022      	str	r2, [r4, #0]
 80031b8:	701e      	strb	r6, [r3, #0]
 80031ba:	6963      	ldr	r3, [r4, #20]
 80031bc:	4283      	cmp	r3, r0
 80031be:	d004      	beq.n	80031ca <__swbuf_r+0x62>
 80031c0:	89a3      	ldrh	r3, [r4, #12]
 80031c2:	07db      	lsls	r3, r3, #31
 80031c4:	d506      	bpl.n	80031d4 <__swbuf_r+0x6c>
 80031c6:	2e0a      	cmp	r6, #10
 80031c8:	d104      	bne.n	80031d4 <__swbuf_r+0x6c>
 80031ca:	4621      	mov	r1, r4
 80031cc:	4628      	mov	r0, r5
 80031ce:	f000 f92f 	bl	8003430 <_fflush_r>
 80031d2:	b988      	cbnz	r0, 80031f8 <__swbuf_r+0x90>
 80031d4:	4638      	mov	r0, r7
 80031d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031d8:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <__swbuf_r+0x9c>)
 80031da:	429c      	cmp	r4, r3
 80031dc:	d101      	bne.n	80031e2 <__swbuf_r+0x7a>
 80031de:	68ac      	ldr	r4, [r5, #8]
 80031e0:	e7cf      	b.n	8003182 <__swbuf_r+0x1a>
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <__swbuf_r+0xa0>)
 80031e4:	429c      	cmp	r4, r3
 80031e6:	bf08      	it	eq
 80031e8:	68ec      	ldreq	r4, [r5, #12]
 80031ea:	e7ca      	b.n	8003182 <__swbuf_r+0x1a>
 80031ec:	4621      	mov	r1, r4
 80031ee:	4628      	mov	r0, r5
 80031f0:	f000 f81e 	bl	8003230 <__swsetup_r>
 80031f4:	2800      	cmp	r0, #0
 80031f6:	d0cb      	beq.n	8003190 <__swbuf_r+0x28>
 80031f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80031fc:	e7ea      	b.n	80031d4 <__swbuf_r+0x6c>
 80031fe:	bf00      	nop
 8003200:	080037b0 	.word	0x080037b0
 8003204:	080037d0 	.word	0x080037d0
 8003208:	08003790 	.word	0x08003790

0800320c <_write_r>:
 800320c:	b538      	push	{r3, r4, r5, lr}
 800320e:	4604      	mov	r4, r0
 8003210:	4608      	mov	r0, r1
 8003212:	4611      	mov	r1, r2
 8003214:	2200      	movs	r2, #0
 8003216:	4d05      	ldr	r5, [pc, #20]	; (800322c <_write_r+0x20>)
 8003218:	602a      	str	r2, [r5, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	f7fd f96e 	bl	80004fc <_write>
 8003220:	1c43      	adds	r3, r0, #1
 8003222:	d102      	bne.n	800322a <_write_r+0x1e>
 8003224:	682b      	ldr	r3, [r5, #0]
 8003226:	b103      	cbz	r3, 800322a <_write_r+0x1e>
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	bd38      	pop	{r3, r4, r5, pc}
 800322c:	200010f8 	.word	0x200010f8

08003230 <__swsetup_r>:
 8003230:	4b32      	ldr	r3, [pc, #200]	; (80032fc <__swsetup_r+0xcc>)
 8003232:	b570      	push	{r4, r5, r6, lr}
 8003234:	681d      	ldr	r5, [r3, #0]
 8003236:	4606      	mov	r6, r0
 8003238:	460c      	mov	r4, r1
 800323a:	b125      	cbz	r5, 8003246 <__swsetup_r+0x16>
 800323c:	69ab      	ldr	r3, [r5, #24]
 800323e:	b913      	cbnz	r3, 8003246 <__swsetup_r+0x16>
 8003240:	4628      	mov	r0, r5
 8003242:	f7ff fcfb 	bl	8002c3c <__sinit>
 8003246:	4b2e      	ldr	r3, [pc, #184]	; (8003300 <__swsetup_r+0xd0>)
 8003248:	429c      	cmp	r4, r3
 800324a:	d10f      	bne.n	800326c <__swsetup_r+0x3c>
 800324c:	686c      	ldr	r4, [r5, #4]
 800324e:	89a3      	ldrh	r3, [r4, #12]
 8003250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003254:	0719      	lsls	r1, r3, #28
 8003256:	d42c      	bmi.n	80032b2 <__swsetup_r+0x82>
 8003258:	06dd      	lsls	r5, r3, #27
 800325a:	d411      	bmi.n	8003280 <__swsetup_r+0x50>
 800325c:	2309      	movs	r3, #9
 800325e:	6033      	str	r3, [r6, #0]
 8003260:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003268:	81a3      	strh	r3, [r4, #12]
 800326a:	e03e      	b.n	80032ea <__swsetup_r+0xba>
 800326c:	4b25      	ldr	r3, [pc, #148]	; (8003304 <__swsetup_r+0xd4>)
 800326e:	429c      	cmp	r4, r3
 8003270:	d101      	bne.n	8003276 <__swsetup_r+0x46>
 8003272:	68ac      	ldr	r4, [r5, #8]
 8003274:	e7eb      	b.n	800324e <__swsetup_r+0x1e>
 8003276:	4b24      	ldr	r3, [pc, #144]	; (8003308 <__swsetup_r+0xd8>)
 8003278:	429c      	cmp	r4, r3
 800327a:	bf08      	it	eq
 800327c:	68ec      	ldreq	r4, [r5, #12]
 800327e:	e7e6      	b.n	800324e <__swsetup_r+0x1e>
 8003280:	0758      	lsls	r0, r3, #29
 8003282:	d512      	bpl.n	80032aa <__swsetup_r+0x7a>
 8003284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003286:	b141      	cbz	r1, 800329a <__swsetup_r+0x6a>
 8003288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800328c:	4299      	cmp	r1, r3
 800328e:	d002      	beq.n	8003296 <__swsetup_r+0x66>
 8003290:	4630      	mov	r0, r6
 8003292:	f000 f98d 	bl	80035b0 <_free_r>
 8003296:	2300      	movs	r3, #0
 8003298:	6363      	str	r3, [r4, #52]	; 0x34
 800329a:	89a3      	ldrh	r3, [r4, #12]
 800329c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032a0:	81a3      	strh	r3, [r4, #12]
 80032a2:	2300      	movs	r3, #0
 80032a4:	6063      	str	r3, [r4, #4]
 80032a6:	6923      	ldr	r3, [r4, #16]
 80032a8:	6023      	str	r3, [r4, #0]
 80032aa:	89a3      	ldrh	r3, [r4, #12]
 80032ac:	f043 0308 	orr.w	r3, r3, #8
 80032b0:	81a3      	strh	r3, [r4, #12]
 80032b2:	6923      	ldr	r3, [r4, #16]
 80032b4:	b94b      	cbnz	r3, 80032ca <__swsetup_r+0x9a>
 80032b6:	89a3      	ldrh	r3, [r4, #12]
 80032b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c0:	d003      	beq.n	80032ca <__swsetup_r+0x9a>
 80032c2:	4621      	mov	r1, r4
 80032c4:	4630      	mov	r0, r6
 80032c6:	f000 f927 	bl	8003518 <__smakebuf_r>
 80032ca:	89a0      	ldrh	r0, [r4, #12]
 80032cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032d0:	f010 0301 	ands.w	r3, r0, #1
 80032d4:	d00a      	beq.n	80032ec <__swsetup_r+0xbc>
 80032d6:	2300      	movs	r3, #0
 80032d8:	60a3      	str	r3, [r4, #8]
 80032da:	6963      	ldr	r3, [r4, #20]
 80032dc:	425b      	negs	r3, r3
 80032de:	61a3      	str	r3, [r4, #24]
 80032e0:	6923      	ldr	r3, [r4, #16]
 80032e2:	b943      	cbnz	r3, 80032f6 <__swsetup_r+0xc6>
 80032e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032e8:	d1ba      	bne.n	8003260 <__swsetup_r+0x30>
 80032ea:	bd70      	pop	{r4, r5, r6, pc}
 80032ec:	0781      	lsls	r1, r0, #30
 80032ee:	bf58      	it	pl
 80032f0:	6963      	ldrpl	r3, [r4, #20]
 80032f2:	60a3      	str	r3, [r4, #8]
 80032f4:	e7f4      	b.n	80032e0 <__swsetup_r+0xb0>
 80032f6:	2000      	movs	r0, #0
 80032f8:	e7f7      	b.n	80032ea <__swsetup_r+0xba>
 80032fa:	bf00      	nop
 80032fc:	20000010 	.word	0x20000010
 8003300:	080037b0 	.word	0x080037b0
 8003304:	080037d0 	.word	0x080037d0
 8003308:	08003790 	.word	0x08003790

0800330c <_close_r>:
 800330c:	b538      	push	{r3, r4, r5, lr}
 800330e:	2300      	movs	r3, #0
 8003310:	4d05      	ldr	r5, [pc, #20]	; (8003328 <_close_r+0x1c>)
 8003312:	4604      	mov	r4, r0
 8003314:	4608      	mov	r0, r1
 8003316:	602b      	str	r3, [r5, #0]
 8003318:	f7fd fa09 	bl	800072e <_close>
 800331c:	1c43      	adds	r3, r0, #1
 800331e:	d102      	bne.n	8003326 <_close_r+0x1a>
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	b103      	cbz	r3, 8003326 <_close_r+0x1a>
 8003324:	6023      	str	r3, [r4, #0]
 8003326:	bd38      	pop	{r3, r4, r5, pc}
 8003328:	200010f8 	.word	0x200010f8

0800332c <__sflush_r>:
 800332c:	898a      	ldrh	r2, [r1, #12]
 800332e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003330:	4605      	mov	r5, r0
 8003332:	0710      	lsls	r0, r2, #28
 8003334:	460c      	mov	r4, r1
 8003336:	d457      	bmi.n	80033e8 <__sflush_r+0xbc>
 8003338:	684b      	ldr	r3, [r1, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	dc04      	bgt.n	8003348 <__sflush_r+0x1c>
 800333e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	dc01      	bgt.n	8003348 <__sflush_r+0x1c>
 8003344:	2000      	movs	r0, #0
 8003346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800334a:	2e00      	cmp	r6, #0
 800334c:	d0fa      	beq.n	8003344 <__sflush_r+0x18>
 800334e:	2300      	movs	r3, #0
 8003350:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003354:	682f      	ldr	r7, [r5, #0]
 8003356:	602b      	str	r3, [r5, #0]
 8003358:	d032      	beq.n	80033c0 <__sflush_r+0x94>
 800335a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800335c:	89a3      	ldrh	r3, [r4, #12]
 800335e:	075a      	lsls	r2, r3, #29
 8003360:	d505      	bpl.n	800336e <__sflush_r+0x42>
 8003362:	6863      	ldr	r3, [r4, #4]
 8003364:	1ac0      	subs	r0, r0, r3
 8003366:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003368:	b10b      	cbz	r3, 800336e <__sflush_r+0x42>
 800336a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800336c:	1ac0      	subs	r0, r0, r3
 800336e:	2300      	movs	r3, #0
 8003370:	4602      	mov	r2, r0
 8003372:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003374:	4628      	mov	r0, r5
 8003376:	6a21      	ldr	r1, [r4, #32]
 8003378:	47b0      	blx	r6
 800337a:	1c43      	adds	r3, r0, #1
 800337c:	89a3      	ldrh	r3, [r4, #12]
 800337e:	d106      	bne.n	800338e <__sflush_r+0x62>
 8003380:	6829      	ldr	r1, [r5, #0]
 8003382:	291d      	cmp	r1, #29
 8003384:	d82c      	bhi.n	80033e0 <__sflush_r+0xb4>
 8003386:	4a29      	ldr	r2, [pc, #164]	; (800342c <__sflush_r+0x100>)
 8003388:	40ca      	lsrs	r2, r1
 800338a:	07d6      	lsls	r6, r2, #31
 800338c:	d528      	bpl.n	80033e0 <__sflush_r+0xb4>
 800338e:	2200      	movs	r2, #0
 8003390:	6062      	str	r2, [r4, #4]
 8003392:	6922      	ldr	r2, [r4, #16]
 8003394:	04d9      	lsls	r1, r3, #19
 8003396:	6022      	str	r2, [r4, #0]
 8003398:	d504      	bpl.n	80033a4 <__sflush_r+0x78>
 800339a:	1c42      	adds	r2, r0, #1
 800339c:	d101      	bne.n	80033a2 <__sflush_r+0x76>
 800339e:	682b      	ldr	r3, [r5, #0]
 80033a0:	b903      	cbnz	r3, 80033a4 <__sflush_r+0x78>
 80033a2:	6560      	str	r0, [r4, #84]	; 0x54
 80033a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033a6:	602f      	str	r7, [r5, #0]
 80033a8:	2900      	cmp	r1, #0
 80033aa:	d0cb      	beq.n	8003344 <__sflush_r+0x18>
 80033ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033b0:	4299      	cmp	r1, r3
 80033b2:	d002      	beq.n	80033ba <__sflush_r+0x8e>
 80033b4:	4628      	mov	r0, r5
 80033b6:	f000 f8fb 	bl	80035b0 <_free_r>
 80033ba:	2000      	movs	r0, #0
 80033bc:	6360      	str	r0, [r4, #52]	; 0x34
 80033be:	e7c2      	b.n	8003346 <__sflush_r+0x1a>
 80033c0:	6a21      	ldr	r1, [r4, #32]
 80033c2:	2301      	movs	r3, #1
 80033c4:	4628      	mov	r0, r5
 80033c6:	47b0      	blx	r6
 80033c8:	1c41      	adds	r1, r0, #1
 80033ca:	d1c7      	bne.n	800335c <__sflush_r+0x30>
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0c4      	beq.n	800335c <__sflush_r+0x30>
 80033d2:	2b1d      	cmp	r3, #29
 80033d4:	d001      	beq.n	80033da <__sflush_r+0xae>
 80033d6:	2b16      	cmp	r3, #22
 80033d8:	d101      	bne.n	80033de <__sflush_r+0xb2>
 80033da:	602f      	str	r7, [r5, #0]
 80033dc:	e7b2      	b.n	8003344 <__sflush_r+0x18>
 80033de:	89a3      	ldrh	r3, [r4, #12]
 80033e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033e4:	81a3      	strh	r3, [r4, #12]
 80033e6:	e7ae      	b.n	8003346 <__sflush_r+0x1a>
 80033e8:	690f      	ldr	r7, [r1, #16]
 80033ea:	2f00      	cmp	r7, #0
 80033ec:	d0aa      	beq.n	8003344 <__sflush_r+0x18>
 80033ee:	0793      	lsls	r3, r2, #30
 80033f0:	bf18      	it	ne
 80033f2:	2300      	movne	r3, #0
 80033f4:	680e      	ldr	r6, [r1, #0]
 80033f6:	bf08      	it	eq
 80033f8:	694b      	ldreq	r3, [r1, #20]
 80033fa:	1bf6      	subs	r6, r6, r7
 80033fc:	600f      	str	r7, [r1, #0]
 80033fe:	608b      	str	r3, [r1, #8]
 8003400:	2e00      	cmp	r6, #0
 8003402:	dd9f      	ble.n	8003344 <__sflush_r+0x18>
 8003404:	4633      	mov	r3, r6
 8003406:	463a      	mov	r2, r7
 8003408:	4628      	mov	r0, r5
 800340a:	6a21      	ldr	r1, [r4, #32]
 800340c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003410:	47e0      	blx	ip
 8003412:	2800      	cmp	r0, #0
 8003414:	dc06      	bgt.n	8003424 <__sflush_r+0xf8>
 8003416:	89a3      	ldrh	r3, [r4, #12]
 8003418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800341c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003420:	81a3      	strh	r3, [r4, #12]
 8003422:	e790      	b.n	8003346 <__sflush_r+0x1a>
 8003424:	4407      	add	r7, r0
 8003426:	1a36      	subs	r6, r6, r0
 8003428:	e7ea      	b.n	8003400 <__sflush_r+0xd4>
 800342a:	bf00      	nop
 800342c:	20400001 	.word	0x20400001

08003430 <_fflush_r>:
 8003430:	b538      	push	{r3, r4, r5, lr}
 8003432:	690b      	ldr	r3, [r1, #16]
 8003434:	4605      	mov	r5, r0
 8003436:	460c      	mov	r4, r1
 8003438:	b913      	cbnz	r3, 8003440 <_fflush_r+0x10>
 800343a:	2500      	movs	r5, #0
 800343c:	4628      	mov	r0, r5
 800343e:	bd38      	pop	{r3, r4, r5, pc}
 8003440:	b118      	cbz	r0, 800344a <_fflush_r+0x1a>
 8003442:	6983      	ldr	r3, [r0, #24]
 8003444:	b90b      	cbnz	r3, 800344a <_fflush_r+0x1a>
 8003446:	f7ff fbf9 	bl	8002c3c <__sinit>
 800344a:	4b14      	ldr	r3, [pc, #80]	; (800349c <_fflush_r+0x6c>)
 800344c:	429c      	cmp	r4, r3
 800344e:	d11b      	bne.n	8003488 <_fflush_r+0x58>
 8003450:	686c      	ldr	r4, [r5, #4]
 8003452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0ef      	beq.n	800343a <_fflush_r+0xa>
 800345a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800345c:	07d0      	lsls	r0, r2, #31
 800345e:	d404      	bmi.n	800346a <_fflush_r+0x3a>
 8003460:	0599      	lsls	r1, r3, #22
 8003462:	d402      	bmi.n	800346a <_fflush_r+0x3a>
 8003464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003466:	f7ff fcac 	bl	8002dc2 <__retarget_lock_acquire_recursive>
 800346a:	4628      	mov	r0, r5
 800346c:	4621      	mov	r1, r4
 800346e:	f7ff ff5d 	bl	800332c <__sflush_r>
 8003472:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003474:	4605      	mov	r5, r0
 8003476:	07da      	lsls	r2, r3, #31
 8003478:	d4e0      	bmi.n	800343c <_fflush_r+0xc>
 800347a:	89a3      	ldrh	r3, [r4, #12]
 800347c:	059b      	lsls	r3, r3, #22
 800347e:	d4dd      	bmi.n	800343c <_fflush_r+0xc>
 8003480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003482:	f7ff fc9f 	bl	8002dc4 <__retarget_lock_release_recursive>
 8003486:	e7d9      	b.n	800343c <_fflush_r+0xc>
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <_fflush_r+0x70>)
 800348a:	429c      	cmp	r4, r3
 800348c:	d101      	bne.n	8003492 <_fflush_r+0x62>
 800348e:	68ac      	ldr	r4, [r5, #8]
 8003490:	e7df      	b.n	8003452 <_fflush_r+0x22>
 8003492:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <_fflush_r+0x74>)
 8003494:	429c      	cmp	r4, r3
 8003496:	bf08      	it	eq
 8003498:	68ec      	ldreq	r4, [r5, #12]
 800349a:	e7da      	b.n	8003452 <_fflush_r+0x22>
 800349c:	080037b0 	.word	0x080037b0
 80034a0:	080037d0 	.word	0x080037d0
 80034a4:	08003790 	.word	0x08003790

080034a8 <_lseek_r>:
 80034a8:	b538      	push	{r3, r4, r5, lr}
 80034aa:	4604      	mov	r4, r0
 80034ac:	4608      	mov	r0, r1
 80034ae:	4611      	mov	r1, r2
 80034b0:	2200      	movs	r2, #0
 80034b2:	4d05      	ldr	r5, [pc, #20]	; (80034c8 <_lseek_r+0x20>)
 80034b4:	602a      	str	r2, [r5, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	f7fd f95d 	bl	8000776 <_lseek>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	d102      	bne.n	80034c6 <_lseek_r+0x1e>
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	b103      	cbz	r3, 80034c6 <_lseek_r+0x1e>
 80034c4:	6023      	str	r3, [r4, #0]
 80034c6:	bd38      	pop	{r3, r4, r5, pc}
 80034c8:	200010f8 	.word	0x200010f8

080034cc <__swhatbuf_r>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	460e      	mov	r6, r1
 80034d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034d4:	4614      	mov	r4, r2
 80034d6:	2900      	cmp	r1, #0
 80034d8:	461d      	mov	r5, r3
 80034da:	b096      	sub	sp, #88	; 0x58
 80034dc:	da08      	bge.n	80034f0 <__swhatbuf_r+0x24>
 80034de:	2200      	movs	r2, #0
 80034e0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80034e4:	602a      	str	r2, [r5, #0]
 80034e6:	061a      	lsls	r2, r3, #24
 80034e8:	d410      	bmi.n	800350c <__swhatbuf_r+0x40>
 80034ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034ee:	e00e      	b.n	800350e <__swhatbuf_r+0x42>
 80034f0:	466a      	mov	r2, sp
 80034f2:	f000 f8b7 	bl	8003664 <_fstat_r>
 80034f6:	2800      	cmp	r0, #0
 80034f8:	dbf1      	blt.n	80034de <__swhatbuf_r+0x12>
 80034fa:	9a01      	ldr	r2, [sp, #4]
 80034fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003500:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003504:	425a      	negs	r2, r3
 8003506:	415a      	adcs	r2, r3
 8003508:	602a      	str	r2, [r5, #0]
 800350a:	e7ee      	b.n	80034ea <__swhatbuf_r+0x1e>
 800350c:	2340      	movs	r3, #64	; 0x40
 800350e:	2000      	movs	r0, #0
 8003510:	6023      	str	r3, [r4, #0]
 8003512:	b016      	add	sp, #88	; 0x58
 8003514:	bd70      	pop	{r4, r5, r6, pc}
	...

08003518 <__smakebuf_r>:
 8003518:	898b      	ldrh	r3, [r1, #12]
 800351a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800351c:	079d      	lsls	r5, r3, #30
 800351e:	4606      	mov	r6, r0
 8003520:	460c      	mov	r4, r1
 8003522:	d507      	bpl.n	8003534 <__smakebuf_r+0x1c>
 8003524:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003528:	6023      	str	r3, [r4, #0]
 800352a:	6123      	str	r3, [r4, #16]
 800352c:	2301      	movs	r3, #1
 800352e:	6163      	str	r3, [r4, #20]
 8003530:	b002      	add	sp, #8
 8003532:	bd70      	pop	{r4, r5, r6, pc}
 8003534:	466a      	mov	r2, sp
 8003536:	ab01      	add	r3, sp, #4
 8003538:	f7ff ffc8 	bl	80034cc <__swhatbuf_r>
 800353c:	9900      	ldr	r1, [sp, #0]
 800353e:	4605      	mov	r5, r0
 8003540:	4630      	mov	r0, r6
 8003542:	f7ff fc69 	bl	8002e18 <_malloc_r>
 8003546:	b948      	cbnz	r0, 800355c <__smakebuf_r+0x44>
 8003548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800354c:	059a      	lsls	r2, r3, #22
 800354e:	d4ef      	bmi.n	8003530 <__smakebuf_r+0x18>
 8003550:	f023 0303 	bic.w	r3, r3, #3
 8003554:	f043 0302 	orr.w	r3, r3, #2
 8003558:	81a3      	strh	r3, [r4, #12]
 800355a:	e7e3      	b.n	8003524 <__smakebuf_r+0xc>
 800355c:	4b0d      	ldr	r3, [pc, #52]	; (8003594 <__smakebuf_r+0x7c>)
 800355e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003560:	89a3      	ldrh	r3, [r4, #12]
 8003562:	6020      	str	r0, [r4, #0]
 8003564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003568:	81a3      	strh	r3, [r4, #12]
 800356a:	9b00      	ldr	r3, [sp, #0]
 800356c:	6120      	str	r0, [r4, #16]
 800356e:	6163      	str	r3, [r4, #20]
 8003570:	9b01      	ldr	r3, [sp, #4]
 8003572:	b15b      	cbz	r3, 800358c <__smakebuf_r+0x74>
 8003574:	4630      	mov	r0, r6
 8003576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800357a:	f000 f885 	bl	8003688 <_isatty_r>
 800357e:	b128      	cbz	r0, 800358c <__smakebuf_r+0x74>
 8003580:	89a3      	ldrh	r3, [r4, #12]
 8003582:	f023 0303 	bic.w	r3, r3, #3
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	81a3      	strh	r3, [r4, #12]
 800358c:	89a0      	ldrh	r0, [r4, #12]
 800358e:	4305      	orrs	r5, r0
 8003590:	81a5      	strh	r5, [r4, #12]
 8003592:	e7cd      	b.n	8003530 <__smakebuf_r+0x18>
 8003594:	08002bd5 	.word	0x08002bd5

08003598 <__malloc_lock>:
 8003598:	4801      	ldr	r0, [pc, #4]	; (80035a0 <__malloc_lock+0x8>)
 800359a:	f7ff bc12 	b.w	8002dc2 <__retarget_lock_acquire_recursive>
 800359e:	bf00      	nop
 80035a0:	200010ec 	.word	0x200010ec

080035a4 <__malloc_unlock>:
 80035a4:	4801      	ldr	r0, [pc, #4]	; (80035ac <__malloc_unlock+0x8>)
 80035a6:	f7ff bc0d 	b.w	8002dc4 <__retarget_lock_release_recursive>
 80035aa:	bf00      	nop
 80035ac:	200010ec 	.word	0x200010ec

080035b0 <_free_r>:
 80035b0:	b538      	push	{r3, r4, r5, lr}
 80035b2:	4605      	mov	r5, r0
 80035b4:	2900      	cmp	r1, #0
 80035b6:	d040      	beq.n	800363a <_free_r+0x8a>
 80035b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035bc:	1f0c      	subs	r4, r1, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	bfb8      	it	lt
 80035c2:	18e4      	addlt	r4, r4, r3
 80035c4:	f7ff ffe8 	bl	8003598 <__malloc_lock>
 80035c8:	4a1c      	ldr	r2, [pc, #112]	; (800363c <_free_r+0x8c>)
 80035ca:	6813      	ldr	r3, [r2, #0]
 80035cc:	b933      	cbnz	r3, 80035dc <_free_r+0x2c>
 80035ce:	6063      	str	r3, [r4, #4]
 80035d0:	6014      	str	r4, [r2, #0]
 80035d2:	4628      	mov	r0, r5
 80035d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035d8:	f7ff bfe4 	b.w	80035a4 <__malloc_unlock>
 80035dc:	42a3      	cmp	r3, r4
 80035de:	d908      	bls.n	80035f2 <_free_r+0x42>
 80035e0:	6820      	ldr	r0, [r4, #0]
 80035e2:	1821      	adds	r1, r4, r0
 80035e4:	428b      	cmp	r3, r1
 80035e6:	bf01      	itttt	eq
 80035e8:	6819      	ldreq	r1, [r3, #0]
 80035ea:	685b      	ldreq	r3, [r3, #4]
 80035ec:	1809      	addeq	r1, r1, r0
 80035ee:	6021      	streq	r1, [r4, #0]
 80035f0:	e7ed      	b.n	80035ce <_free_r+0x1e>
 80035f2:	461a      	mov	r2, r3
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	b10b      	cbz	r3, 80035fc <_free_r+0x4c>
 80035f8:	42a3      	cmp	r3, r4
 80035fa:	d9fa      	bls.n	80035f2 <_free_r+0x42>
 80035fc:	6811      	ldr	r1, [r2, #0]
 80035fe:	1850      	adds	r0, r2, r1
 8003600:	42a0      	cmp	r0, r4
 8003602:	d10b      	bne.n	800361c <_free_r+0x6c>
 8003604:	6820      	ldr	r0, [r4, #0]
 8003606:	4401      	add	r1, r0
 8003608:	1850      	adds	r0, r2, r1
 800360a:	4283      	cmp	r3, r0
 800360c:	6011      	str	r1, [r2, #0]
 800360e:	d1e0      	bne.n	80035d2 <_free_r+0x22>
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4401      	add	r1, r0
 8003616:	6011      	str	r1, [r2, #0]
 8003618:	6053      	str	r3, [r2, #4]
 800361a:	e7da      	b.n	80035d2 <_free_r+0x22>
 800361c:	d902      	bls.n	8003624 <_free_r+0x74>
 800361e:	230c      	movs	r3, #12
 8003620:	602b      	str	r3, [r5, #0]
 8003622:	e7d6      	b.n	80035d2 <_free_r+0x22>
 8003624:	6820      	ldr	r0, [r4, #0]
 8003626:	1821      	adds	r1, r4, r0
 8003628:	428b      	cmp	r3, r1
 800362a:	bf01      	itttt	eq
 800362c:	6819      	ldreq	r1, [r3, #0]
 800362e:	685b      	ldreq	r3, [r3, #4]
 8003630:	1809      	addeq	r1, r1, r0
 8003632:	6021      	streq	r1, [r4, #0]
 8003634:	6063      	str	r3, [r4, #4]
 8003636:	6054      	str	r4, [r2, #4]
 8003638:	e7cb      	b.n	80035d2 <_free_r+0x22>
 800363a:	bd38      	pop	{r3, r4, r5, pc}
 800363c:	200010f0 	.word	0x200010f0

08003640 <_read_r>:
 8003640:	b538      	push	{r3, r4, r5, lr}
 8003642:	4604      	mov	r4, r0
 8003644:	4608      	mov	r0, r1
 8003646:	4611      	mov	r1, r2
 8003648:	2200      	movs	r2, #0
 800364a:	4d05      	ldr	r5, [pc, #20]	; (8003660 <_read_r+0x20>)
 800364c:	602a      	str	r2, [r5, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	f7fd f850 	bl	80006f4 <_read>
 8003654:	1c43      	adds	r3, r0, #1
 8003656:	d102      	bne.n	800365e <_read_r+0x1e>
 8003658:	682b      	ldr	r3, [r5, #0]
 800365a:	b103      	cbz	r3, 800365e <_read_r+0x1e>
 800365c:	6023      	str	r3, [r4, #0]
 800365e:	bd38      	pop	{r3, r4, r5, pc}
 8003660:	200010f8 	.word	0x200010f8

08003664 <_fstat_r>:
 8003664:	b538      	push	{r3, r4, r5, lr}
 8003666:	2300      	movs	r3, #0
 8003668:	4d06      	ldr	r5, [pc, #24]	; (8003684 <_fstat_r+0x20>)
 800366a:	4604      	mov	r4, r0
 800366c:	4608      	mov	r0, r1
 800366e:	4611      	mov	r1, r2
 8003670:	602b      	str	r3, [r5, #0]
 8003672:	f7fd f867 	bl	8000744 <_fstat>
 8003676:	1c43      	adds	r3, r0, #1
 8003678:	d102      	bne.n	8003680 <_fstat_r+0x1c>
 800367a:	682b      	ldr	r3, [r5, #0]
 800367c:	b103      	cbz	r3, 8003680 <_fstat_r+0x1c>
 800367e:	6023      	str	r3, [r4, #0]
 8003680:	bd38      	pop	{r3, r4, r5, pc}
 8003682:	bf00      	nop
 8003684:	200010f8 	.word	0x200010f8

08003688 <_isatty_r>:
 8003688:	b538      	push	{r3, r4, r5, lr}
 800368a:	2300      	movs	r3, #0
 800368c:	4d05      	ldr	r5, [pc, #20]	; (80036a4 <_isatty_r+0x1c>)
 800368e:	4604      	mov	r4, r0
 8003690:	4608      	mov	r0, r1
 8003692:	602b      	str	r3, [r5, #0]
 8003694:	f7fd f865 	bl	8000762 <_isatty>
 8003698:	1c43      	adds	r3, r0, #1
 800369a:	d102      	bne.n	80036a2 <_isatty_r+0x1a>
 800369c:	682b      	ldr	r3, [r5, #0]
 800369e:	b103      	cbz	r3, 80036a2 <_isatty_r+0x1a>
 80036a0:	6023      	str	r3, [r4, #0]
 80036a2:	bd38      	pop	{r3, r4, r5, pc}
 80036a4:	200010f8 	.word	0x200010f8

080036a8 <_init>:
 80036a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036aa:	bf00      	nop
 80036ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ae:	bc08      	pop	{r3}
 80036b0:	469e      	mov	lr, r3
 80036b2:	4770      	bx	lr

080036b4 <_fini>:
 80036b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b6:	bf00      	nop
 80036b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ba:	bc08      	pop	{r3}
 80036bc:	469e      	mov	lr, r3
 80036be:	4770      	bx	lr
