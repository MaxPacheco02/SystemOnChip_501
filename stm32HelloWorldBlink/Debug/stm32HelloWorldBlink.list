
stm32HelloWorldBlink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080018f0  080018f0  000118f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001960  08001960  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001960  08001960  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001960  08001960  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001960  08001960  00011960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001964  08001964  00011964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001974  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001974  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000036af  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010d5  00000000  00000000  000236e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000470  00000000  00000000  000247c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003d8  00000000  00000000  00024c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e32  00000000  00000000  00025008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000051de  00000000  00000000  0003ae3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ddcd  00000000  00000000  00040018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bdde5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f90  00000000  00000000  000bde38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080018d8 	.word	0x080018d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080018d8 	.word	0x080018d8

0800014c <LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* ****************************************************** */
  /* Configurar los pines del Puerto B para las lineas:
   * RW, RS, EN, D4-D7 del LCD
   * como general purpose output push-pull and 50 MHz speed */
	// 0,1,2,5,6,8,9
	GPIOC->CRL &= ~GPIO_CRL_CNF0;
 8000152:	4b53      	ldr	r3, [pc, #332]	; (80002a0 <LCD_Init+0x154>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	4a52      	ldr	r2, [pc, #328]	; (80002a0 <LCD_Init+0x154>)
 8000158:	f023 030c 	bic.w	r3, r3, #12
 800015c:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE0;
 800015e:	4b50      	ldr	r3, [pc, #320]	; (80002a0 <LCD_Init+0x154>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	4a4f      	ldr	r2, [pc, #316]	; (80002a0 <LCD_Init+0x154>)
 8000164:	f043 0303 	orr.w	r3, r3, #3
 8000168:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~GPIO_CRL_CNF1;
 800016a:	4b4d      	ldr	r3, [pc, #308]	; (80002a0 <LCD_Init+0x154>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	4a4c      	ldr	r2, [pc, #304]	; (80002a0 <LCD_Init+0x154>)
 8000170:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000174:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE1;
 8000176:	4b4a      	ldr	r3, [pc, #296]	; (80002a0 <LCD_Init+0x154>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a49      	ldr	r2, [pc, #292]	; (80002a0 <LCD_Init+0x154>)
 800017c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000180:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~GPIO_CRL_CNF2;
 8000182:	4b47      	ldr	r3, [pc, #284]	; (80002a0 <LCD_Init+0x154>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a46      	ldr	r2, [pc, #280]	; (80002a0 <LCD_Init+0x154>)
 8000188:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800018c:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE2;
 800018e:	4b44      	ldr	r3, [pc, #272]	; (80002a0 <LCD_Init+0x154>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a43      	ldr	r2, [pc, #268]	; (80002a0 <LCD_Init+0x154>)
 8000194:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000198:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~GPIO_CRL_CNF5;
 800019a:	4b41      	ldr	r3, [pc, #260]	; (80002a0 <LCD_Init+0x154>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a40      	ldr	r2, [pc, #256]	; (80002a0 <LCD_Init+0x154>)
 80001a0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80001a4:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE5;
 80001a6:	4b3e      	ldr	r3, [pc, #248]	; (80002a0 <LCD_Init+0x154>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a3d      	ldr	r2, [pc, #244]	; (80002a0 <LCD_Init+0x154>)
 80001ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80001b0:	6013      	str	r3, [r2, #0]
	GPIOC->CRL &= ~GPIO_CRL_CNF6;
 80001b2:	4b3b      	ldr	r3, [pc, #236]	; (80002a0 <LCD_Init+0x154>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a3a      	ldr	r2, [pc, #232]	; (80002a0 <LCD_Init+0x154>)
 80001b8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80001bc:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE6;
 80001be:	4b38      	ldr	r3, [pc, #224]	; (80002a0 <LCD_Init+0x154>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a37      	ldr	r2, [pc, #220]	; (80002a0 <LCD_Init+0x154>)
 80001c4:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80001c8:	6013      	str	r3, [r2, #0]
	GPIOC->CRH &= ~GPIO_CRH_CNF8;
 80001ca:	4b35      	ldr	r3, [pc, #212]	; (80002a0 <LCD_Init+0x154>)
 80001cc:	685b      	ldr	r3, [r3, #4]
 80001ce:	4a34      	ldr	r2, [pc, #208]	; (80002a0 <LCD_Init+0x154>)
 80001d0:	f023 030c 	bic.w	r3, r3, #12
 80001d4:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE8;
 80001d6:	4b32      	ldr	r3, [pc, #200]	; (80002a0 <LCD_Init+0x154>)
 80001d8:	685b      	ldr	r3, [r3, #4]
 80001da:	4a31      	ldr	r2, [pc, #196]	; (80002a0 <LCD_Init+0x154>)
 80001dc:	f043 0303 	orr.w	r3, r3, #3
 80001e0:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF9;
 80001e2:	4b2f      	ldr	r3, [pc, #188]	; (80002a0 <LCD_Init+0x154>)
 80001e4:	685b      	ldr	r3, [r3, #4]
 80001e6:	4a2e      	ldr	r2, [pc, #184]	; (80002a0 <LCD_Init+0x154>)
 80001e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80001ec:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE9;
 80001ee:	4b2c      	ldr	r3, [pc, #176]	; (80002a0 <LCD_Init+0x154>)
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	4a2b      	ldr	r2, [pc, #172]	; (80002a0 <LCD_Init+0x154>)
 80001f4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80001f8:	6053      	str	r3, [r2, #4]


  /* ****************************************************** */

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 80001fa:	4b29      	ldr	r3, [pc, #164]	; (80002a0 <LCD_Init+0x154>)
 80001fc:	4a29      	ldr	r2, [pc, #164]	; (80002a4 <LCD_Init+0x158>)
 80001fe:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	HAL_Delay(15);
 8000200:	200f      	movs	r0, #15
 8000202:	f000 fe2b 	bl	8000e5c <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000206:	4b26      	ldr	r3, [pc, #152]	; (80002a0 <LCD_Init+0x154>)
 8000208:	4a26      	ldr	r2, [pc, #152]	; (80002a4 <LCD_Init+0x158>)
 800020a:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 800020c:	f000 f968 	bl	80004e0 <LCD_Pulse_EN>
	HAL_Delay(5);//					deberia ser un delay de 4.1ms
 8000210:	2005      	movs	r0, #5
 8000212:	f000 fe23 	bl	8000e5c <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000216:	4b22      	ldr	r3, [pc, #136]	; (80002a0 <LCD_Init+0x154>)
 8000218:	4a22      	ldr	r2, [pc, #136]	; (80002a4 <LCD_Init+0x158>)
 800021a:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 800021c:	f000 f960 	bl	80004e0 <LCD_Pulse_EN>
	HAL_Delay(1);//					deberia ser un delay de 100us
 8000220:	2001      	movs	r0, #1
 8000222:	f000 fe1b 	bl	8000e5c <HAL_Delay>

	GPIOC->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000226:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <LCD_Init+0x154>)
 8000228:	4a1e      	ldr	r2, [pc, #120]	; (80002a4 <LCD_Init+0x158>)
 800022a:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 800022c:	f000 f958 	bl	80004e0 <LCD_Pulse_EN>

	while( LCD_Busy( ) );//				espera a que el LCD este operativo
 8000230:	bf00      	nop
 8000232:	f000 f911 	bl	8000458 <LCD_Busy>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d1fa      	bne.n	8000232 <LCD_Init+0xe6>
	GPIOC->BSRR	 =	1U << LCD_D4_PIN_LOW
 800023c:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <LCD_Init+0x154>)
 800023e:	4a1a      	ldr	r2, [pc, #104]	; (80002a8 <LCD_Init+0x15c>)
 8000240:	611a      	str	r2, [r3, #16]
			|	1U << LCD_D5_PIN_HIGH
			|	1U << LCD_D6_PIN_LOW
			|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000242:	f000 f94d 	bl	80004e0 <LCD_Pulse_EN>

	while( LCD_Busy( ) );//				espera a que se complete
 8000246:	bf00      	nop
 8000248:	f000 f906 	bl	8000458 <LCD_Busy>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d1fa      	bne.n	8000248 <LCD_Init+0xfc>
	LCD_Write_Cmd( 0x28U );//			establecemos LCD como: datos 4-bit, #lineas=2, font=5x7 dots
 8000252:	2028      	movs	r0, #40	; 0x28
 8000254:	f000 f890 	bl	8000378 <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x0CU );//			enciende el LCD sin cursor
 8000258:	200c      	movs	r0, #12
 800025a:	f000 f88d 	bl	8000378 <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x06U );//			inicializa cursor
 800025e:	2006      	movs	r0, #6
 8000260:	f000 f88a 	bl	8000378 <LCD_Write_Cmd>

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );//			establece la direccion CGRAM desde 0
 8000264:	2040      	movs	r0, #64	; 0x40
 8000266:	f000 f887 	bl	8000378 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 800026a:	4b10      	ldr	r3, [pc, #64]	; (80002ac <LCD_Init+0x160>)
 800026c:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 800026e:	2300      	movs	r3, #0
 8000270:	603b      	str	r3, [r7, #0]
 8000272:	e00a      	b.n	800028a <LCD_Init+0x13e>
		LCD_Put_Char( *p );
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	4618      	mov	r0, r3
 800027a:	f000 f891 	bl	80003a0 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	3301      	adds	r3, #1
 8000282:	603b      	str	r3, [r7, #0]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	3301      	adds	r3, #1
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	2b3f      	cmp	r3, #63	; 0x3f
 800028e:	d9f1      	bls.n	8000274 <LCD_Init+0x128>

	LCD_Write_Cmd( 0x80 );
 8000290:	2080      	movs	r0, #128	; 0x80
 8000292:	f000 f871 	bl	8000378 <LCD_Write_Cmd>
}
 8000296:	bf00      	nop
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40011000 	.word	0x40011000
 80002a4:	03000060 	.word	0x03000060
 80002a8:	03200040 	.word	0x03200040
 80002ac:	08001910 	.word	0x08001910

080002b0 <LCD_Out_Data4>:

//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(unsigned char val){
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )//			Bit[0]
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	f003 0301 	and.w	r3, r3, #1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d003      	beq.n	80002cc <LCD_Out_Data4+0x1c>
		GPIOC->BSRR	=	1U << LCD_D4_PIN_HIGH;
 80002c4:	4b1a      	ldr	r3, [pc, #104]	; (8000330 <LCD_Out_Data4+0x80>)
 80002c6:	2220      	movs	r2, #32
 80002c8:	611a      	str	r2, [r3, #16]
 80002ca:	e003      	b.n	80002d4 <LCD_Out_Data4+0x24>
	else
		GPIOC->BSRR	=	1U << LCD_D4_PIN_LOW;
 80002cc:	4b18      	ldr	r3, [pc, #96]	; (8000330 <LCD_Out_Data4+0x80>)
 80002ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80002d2:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )//			Bit[1]
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	f003 0302 	and.w	r3, r3, #2
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d003      	beq.n	80002e6 <LCD_Out_Data4+0x36>
		GPIOC->BSRR	=	1U << LCD_D5_PIN_HIGH;
 80002de:	4b14      	ldr	r3, [pc, #80]	; (8000330 <LCD_Out_Data4+0x80>)
 80002e0:	2240      	movs	r2, #64	; 0x40
 80002e2:	611a      	str	r2, [r3, #16]
 80002e4:	e003      	b.n	80002ee <LCD_Out_Data4+0x3e>
	else
		GPIOC->BSRR	=	1U << LCD_D5_PIN_LOW;
 80002e6:	4b12      	ldr	r3, [pc, #72]	; (8000330 <LCD_Out_Data4+0x80>)
 80002e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80002ec:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )//			Bit[2]
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	f003 0304 	and.w	r3, r3, #4
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d004      	beq.n	8000302 <LCD_Out_Data4+0x52>
		GPIOC->BSRR	=	1U << LCD_D6_PIN_HIGH;
 80002f8:	4b0d      	ldr	r3, [pc, #52]	; (8000330 <LCD_Out_Data4+0x80>)
 80002fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002fe:	611a      	str	r2, [r3, #16]
 8000300:	e003      	b.n	800030a <LCD_Out_Data4+0x5a>
	else
		GPIOC->BSRR	=	1U << LCD_D6_PIN_LOW;
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <LCD_Out_Data4+0x80>)
 8000304:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000308:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )//			Bit[3]
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	f003 0308 	and.w	r3, r3, #8
 8000310:	2b00      	cmp	r3, #0
 8000312:	d004      	beq.n	800031e <LCD_Out_Data4+0x6e>
		GPIOC->BSRR	=	1U << LCD_D7_PIN_HIGH;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <LCD_Out_Data4+0x80>)
 8000316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800031a:	611a      	str	r2, [r3, #16]
	else
		GPIOC->BSRR	=	1U << LCD_D7_PIN_LOW;
}
 800031c:	e003      	b.n	8000326 <LCD_Out_Data4+0x76>
		GPIOC->BSRR	=	1U << LCD_D7_PIN_LOW;
 800031e:	4b04      	ldr	r3, [pc, #16]	; (8000330 <LCD_Out_Data4+0x80>)
 8000320:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000324:	611a      	str	r2, [r3, #16]
}
 8000326:	bf00      	nop
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	40011000 	.word	0x40011000

08000334 <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(unsigned char val){
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	091b      	lsrs	r3, r3, #4
 8000342:	b2db      	uxtb	r3, r3
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ffb3 	bl	80002b0 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 800034a:	f000 f8c9 	bl	80004e0 <LCD_Pulse_EN>

	LCD_Out_Data4( val & 0x0FU );
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	f003 030f 	and.w	r3, r3, #15
 8000354:	b2db      	uxtb	r3, r3
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ffaa 	bl	80002b0 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 800035c:	f000 f8c0 	bl	80004e0 <LCD_Pulse_EN>

	while( LCD_Busy( ) );
 8000360:	bf00      	nop
 8000362:	f000 f879 	bl	8000458 <LCD_Busy>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d1fa      	bne.n	8000362 <LCD_Write_Byte+0x2e>
}
 800036c:	bf00      	nop
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(unsigned char val){
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	1U << LCD_RS_PIN_LOW;//		RS=0 (seleccion de comando)
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <LCD_Write_Cmd+0x24>)
 8000384:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000388:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	4618      	mov	r0, r3
 800038e:	f7ff ffd1 	bl	8000334 <LCD_Write_Byte>
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40011000 	.word	0x40011000

080003a0 <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(unsigned char c){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR	=	1U << LCD_RS_PIN_HIGH;//	RS=1 (seleccion de caracteres)
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <LCD_Put_Char+0x20>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( c );
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff ffbe 	bl	8000334 <LCD_Write_Byte>
}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40011000 	.word	0x40011000

080003c4 <LCD_Set_Cursor>:

//Funcion que establece el cursor en una posicion de la pantalla del LCD
void LCD_Set_Cursor(unsigned char line, unsigned char column){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	460a      	mov	r2, r1
 80003ce:	71fb      	strb	r3, [r7, #7]
 80003d0:	4613      	mov	r3, r2
 80003d2:	71bb      	strb	r3, [r7, #6]
	unsigned char address;
	if( column != 0 )
 80003d4:	79bb      	ldrb	r3, [r7, #6]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d002      	beq.n	80003e0 <LCD_Set_Cursor+0x1c>
		column--;
 80003da:	79bb      	ldrb	r3, [r7, #6]
 80003dc:	3b01      	subs	r3, #1
 80003de:	71bb      	strb	r3, [r7, #6]
	if( line != 0 )
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d002      	beq.n	80003ec <LCD_Set_Cursor+0x28>
		line--;
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	3b01      	subs	r3, #1
 80003ea:	71fb      	strb	r3, [r7, #7]
	address = ( line * 40 ) + column;
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	461a      	mov	r2, r3
 80003f0:	0092      	lsls	r2, r2, #2
 80003f2:	4413      	add	r3, r2
 80003f4:	00db      	lsls	r3, r3, #3
 80003f6:	b2da      	uxtb	r2, r3
 80003f8:	79bb      	ldrb	r3, [r7, #6]
 80003fa:	4413      	add	r3, r2
 80003fc:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 80003fe:	7bfb      	ldrb	r3, [r7, #15]
 8000400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000404:	b2db      	uxtb	r3, r3
 8000406:	3b80      	subs	r3, #128	; 0x80
 8000408:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 800040a:	7bfb      	ldrb	r3, [r7, #15]
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff ffb3 	bl	8000378 <LCD_Write_Cmd>
}
 8000412:	bf00      	nop
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <LCD_Put_Str>:

//Funcion que envia una cadena de caracteres ASCII al LCD
void LCD_Put_Str(char* str){
 800041a:	b580      	push	{r7, lr}
 800041c:	b084      	sub	sp, #16
 800041e:	af00      	add	r7, sp, #0
 8000420:	6078      	str	r0, [r7, #4]
	for( int i = 0; i < 16 && str[ i ] != 0; i++ )
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	e009      	b.n	800043c <LCD_Put_Str+0x22>
		LCD_Put_Char( str[ i ] );//			envia 1 byte al LCD
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	4413      	add	r3, r2
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff ffb5 	bl	80003a0 <LCD_Put_Char>
	for( int i = 0; i < 16 && str[ i ] != 0; i++ )
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	3301      	adds	r3, #1
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	2b0f      	cmp	r3, #15
 8000440:	dc05      	bgt.n	800044e <LCD_Put_Str+0x34>
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	687a      	ldr	r2, [r7, #4]
 8000446:	4413      	add	r3, r2
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d1ec      	bne.n	8000428 <LCD_Put_Str+0xe>
}
 800044e:	bf00      	nop
 8000450:	3710      	adds	r7, #16
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <LCD_Busy>:
			LCD_Put_Char( ch[ i ] );
	}
}

//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* ***************************************************** */
  /* Configurar la linea D7 del LCD como:
   * floating input                                        */
	GPIOC->CRH &= ~GPIO_CRH_CNF9_1 & ~GPIO_CRH_MODE9;
 800045c:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <LCD_Busy+0x80>)
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	4a1d      	ldr	r2, [pc, #116]	; (80004d8 <LCD_Busy+0x80>)
 8000462:	f023 03b0 	bic.w	r3, r3, #176	; 0xb0
 8000466:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_CNF9_0;
 8000468:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <LCD_Busy+0x80>)
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	4a1a      	ldr	r2, [pc, #104]	; (80004d8 <LCD_Busy+0x80>)
 800046e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000472:	6053      	str	r3, [r2, #4]

  /* ***************************************************** */

	GPIOC->BSRR	 =	1U << LCD_RS_PIN_LOW
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <LCD_Busy+0x80>)
 8000476:	4a19      	ldr	r2, [pc, #100]	; (80004dc <LCD_Busy+0x84>)
 8000478:	611a      	str	r2, [r3, #16]
			|	1U << LCD_RW_PIN_HIGH
			|	1U << LCD_EN_PIN_HIGH;
	HAL_Delay(1);//					          deberia de ser un delay of 100us
 800047a:	2001      	movs	r0, #1
 800047c:	f000 fcee 	bl	8000e5c <HAL_Delay>

  /* ***************************************************** */
  if(GPIOC->IDR & 1U << LCD_D7_PIN_HIGH){//					                  if D7 is set, then
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <LCD_Busy+0x80>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000488:	2b00      	cmp	r3, #0
 800048a:	d011      	beq.n	80004b0 <LCD_Busy+0x58>
  /* ***************************************************** */
		GPIOC->BSRR	 =	1U << LCD_RW_PIN_LOW
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <LCD_Busy+0x80>)
 800048e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000492:	611a      	str	r2, [r3, #16]
				|	1U << LCD_EN_PIN_LOW;

    /* ***************************************************** */
    /* Configurar la linea D7 del LCD como:
     * general purpose output and 50 MHz speed               */
		GPIOC->CRH &= ~GPIO_CRH_CNF9;
 8000494:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <LCD_Busy+0x80>)
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	4a0f      	ldr	r2, [pc, #60]	; (80004d8 <LCD_Busy+0x80>)
 800049a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800049e:	6053      	str	r3, [r2, #4]
		GPIOC->CRH |= GPIO_CRH_MODE9;
 80004a0:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <LCD_Busy+0x80>)
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	4a0c      	ldr	r2, [pc, #48]	; (80004d8 <LCD_Busy+0x80>)
 80004a6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80004aa:	6053      	str	r3, [r2, #4]

    /* ***************************************************** */
		return 1;
 80004ac:	2301      	movs	r3, #1
 80004ae:	e010      	b.n	80004d2 <LCD_Busy+0x7a>
	} else {
		GPIOC->BSRR	 =	1U << LCD_RW_PIN_LOW
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <LCD_Busy+0x80>)
 80004b2:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80004b6:	611a      	str	r2, [r3, #16]
				|	1U << LCD_EN_PIN_LOW;

    /* ***************************************************** */
    /* Configurar la linea D7 del LCD como:
     * general purpose output and 50 MHz speed               */
		GPIOC->CRH &= ~GPIO_CRH_CNF9;
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <LCD_Busy+0x80>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	4a06      	ldr	r2, [pc, #24]	; (80004d8 <LCD_Busy+0x80>)
 80004be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80004c2:	6053      	str	r3, [r2, #4]
		GPIOC->CRH |= GPIO_CRH_MODE9;
 80004c4:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <LCD_Busy+0x80>)
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	4a03      	ldr	r2, [pc, #12]	; (80004d8 <LCD_Busy+0x80>)
 80004ca:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80004ce:	6053      	str	r3, [r2, #4]

    /* ***************************************************** */
		return 0;
 80004d0:	2300      	movs	r3, #0
	}
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40011000 	.word	0x40011000
 80004dc:	00010006 	.word	0x00010006

080004e0 <LCD_Pulse_EN>:

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	GPIOC->BSRR	=	1U << LCD_EN_PIN_HIGH;//		habilita pin EN ON
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <LCD_Pulse_EN+0x1c>)
 80004e6:	2202      	movs	r2, #2
 80004e8:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);//							deberia de ser un delay de 50us
 80004ea:	2001      	movs	r0, #1
 80004ec:	f000 fcb6 	bl	8000e5c <HAL_Delay>
	GPIOC->BSRR	=	1U << LCD_EN_PIN_LOW;//			habilita pin EN OFF
 80004f0:	4b02      	ldr	r3, [pc, #8]	; (80004fc <LCD_Pulse_EN+0x1c>)
 80004f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80004f6:	611a      	str	r2, [r3, #16]
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40011000 	.word	0x40011000

08000500 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b09b      	sub	sp, #108	; 0x6c
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fc47 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 faa1 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 fae1 	bl	8000ad4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init();
 8000512:	f000 fb19 	bl	8000b48 <USER_RCC_Init>
  USER_GPIO_Init();
 8000516:	f000 fb25 	bl	8000b64 <USER_GPIO_Init>
  LCD_Init( );//				inicializamos la libreria del LCD
 800051a:	f7ff fe17 	bl	800014c <LCD_Init>
  LCD_Cursor_ON( );//			cursor visible activo
 800051e:	200e      	movs	r0, #14
 8000520:	f7ff ff2a 	bl	8000378 <LCD_Write_Cmd>
  LCD_Clear( );//			borra la pantalla
 8000524:	2001      	movs	r0, #1
 8000526:	f7ff ff27 	bl	8000378 <LCD_Write_Cmd>
  LCD_Set_Cursor( 1, 0 );//		posiciona cursor en la fila 1 columna 0
 800052a:	2100      	movs	r1, #0
 800052c:	2001      	movs	r0, #1
 800052e:	f7ff ff49 	bl	80003c4 <LCD_Set_Cursor>
  //LCD_Put_Str( "ABCDEFGHIJKLMNOd" );//	escribe un string
  //LCD_Set_Cursor(2,0);
  //LCD_Put_Str( "ABC" );//	escribe un string

  uint16_t count = 0, row = 1, tecla, found, changed = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8000538:	2301      	movs	r3, #1
 800053a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800053e:	2300      	movs	r3, #0
 8000540:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

  char msg[31], msg1[16], msg2[16];
  char key[] = "0123456789ABCD ";
 8000544:	4b03      	ldr	r3, [pc, #12]	; (8000554 <main+0x54>)
 8000546:	1d3c      	adds	r4, r7, #4
 8000548:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800054a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for(int i = 0; i < 31 ; i++){
 800054e:	2300      	movs	r3, #0
 8000550:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000552:	e00a      	b.n	800056a <main+0x6a>
 8000554:	080018f0 	.word	0x080018f0
	  msg[i] = 0x0;
 8000558:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800055c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800055e:	4413      	add	r3, r2
 8000560:	2200      	movs	r2, #0
 8000562:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 31 ; i++){
 8000564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000566:	3301      	adds	r3, #1
 8000568:	65fb      	str	r3, [r7, #92]	; 0x5c
 800056a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800056c:	2b1e      	cmp	r3, #30
 800056e:	ddf3      	ble.n	8000558 <main+0x58>
		  HAL_Delay(10);
	  }
*/

//C
	  GPIOB->BSRR = (1 << 16) | (1 << 1) | (1 << 2) | (1 << 3);
 8000570:	4ba7      	ldr	r3, [pc, #668]	; (8000810 <main+0x310>)
 8000572:	4aa8      	ldr	r2, [pc, #672]	; (8000814 <main+0x314>)
 8000574:	611a      	str	r2, [r3, #16]
	  found = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  if(!(GPIOB->IDR & GPIO_IDR_IDR4 ) & !found){
 800057c:	4ba4      	ldr	r3, [pc, #656]	; (8000810 <main+0x310>)
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	f003 0310 	and.w	r3, r3, #16
 8000584:	2b00      	cmp	r3, #0
 8000586:	bf0c      	ite	eq
 8000588:	2301      	moveq	r3, #1
 800058a:	2300      	movne	r3, #0
 800058c:	b2da      	uxtb	r2, r3
 800058e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000592:	2b00      	cmp	r3, #0
 8000594:	bf0c      	ite	eq
 8000596:	2301      	moveq	r3, #1
 8000598:	2300      	movne	r3, #0
 800059a:	b2db      	uxtb	r3, r3
 800059c:	4013      	ands	r3, r2
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d005      	beq.n	80005b0 <main+0xb0>
		 tecla = 0x1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		 found = 1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR5 ) & !found){
 80005b0:	4b97      	ldr	r3, [pc, #604]	; (8000810 <main+0x310>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	f003 0320 	and.w	r3, r3, #32
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	bf0c      	ite	eq
 80005bc:	2301      	moveq	r3, #1
 80005be:	2300      	movne	r3, #0
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	bf0c      	ite	eq
 80005ca:	2301      	moveq	r3, #1
 80005cc:	2300      	movne	r3, #0
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	4013      	ands	r3, r2
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d005      	beq.n	80005e4 <main+0xe4>
		  tecla = 0x2;
 80005d8:	2302      	movs	r3, #2
 80005da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		  found = 1;
 80005de:	2301      	movs	r3, #1
 80005e0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR6 ) & !found){
 80005e4:	4b8a      	ldr	r3, [pc, #552]	; (8000810 <main+0x310>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bf0c      	ite	eq
 80005f0:	2301      	moveq	r3, #1
 80005f2:	2300      	movne	r3, #0
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	bf0c      	ite	eq
 80005fe:	2301      	moveq	r3, #1
 8000600:	2300      	movne	r3, #0
 8000602:	b2db      	uxtb	r3, r3
 8000604:	4013      	ands	r3, r2
 8000606:	b2db      	uxtb	r3, r3
 8000608:	2b00      	cmp	r3, #0
 800060a:	d005      	beq.n	8000618 <main+0x118>
		  tecla = 0x3;
 800060c:	2303      	movs	r3, #3
 800060e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		  found = 1;
 8000612:	2301      	movs	r3, #1
 8000614:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR7 ) & !found){
 8000618:	4b7d      	ldr	r3, [pc, #500]	; (8000810 <main+0x310>)
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000620:	2b00      	cmp	r3, #0
 8000622:	bf0c      	ite	eq
 8000624:	2301      	moveq	r3, #1
 8000626:	2300      	movne	r3, #0
 8000628:	b2da      	uxtb	r2, r3
 800062a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800062e:	2b00      	cmp	r3, #0
 8000630:	bf0c      	ite	eq
 8000632:	2301      	moveq	r3, #1
 8000634:	2300      	movne	r3, #0
 8000636:	b2db      	uxtb	r3, r3
 8000638:	4013      	ands	r3, r2
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d005      	beq.n	800064c <main+0x14c>
		  tecla = 0xA;
 8000640:	230a      	movs	r3, #10
 8000642:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		  found = 1;
 8000646:	2301      	movs	r3, #1
 8000648:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  }

	  GPIOB->BSRR = (1 << 0) | (1 << 17) | (1 << 2) | (1 << 3);
 800064c:	4b70      	ldr	r3, [pc, #448]	; (8000810 <main+0x310>)
 800064e:	4a72      	ldr	r2, [pc, #456]	; (8000818 <main+0x318>)
 8000650:	611a      	str	r2, [r3, #16]
	  if(!(GPIOB->IDR & GPIO_IDR_IDR4 ) & !found){
 8000652:	4b6f      	ldr	r3, [pc, #444]	; (8000810 <main+0x310>)
 8000654:	689b      	ldr	r3, [r3, #8]
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	2b00      	cmp	r3, #0
 800065c:	bf0c      	ite	eq
 800065e:	2301      	moveq	r3, #1
 8000660:	2300      	movne	r3, #0
 8000662:	b2da      	uxtb	r2, r3
 8000664:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000668:	2b00      	cmp	r3, #0
 800066a:	bf0c      	ite	eq
 800066c:	2301      	moveq	r3, #1
 800066e:	2300      	movne	r3, #0
 8000670:	b2db      	uxtb	r3, r3
 8000672:	4013      	ands	r3, r2
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b00      	cmp	r3, #0
 8000678:	d005      	beq.n	8000686 <main+0x186>
		  tecla = 0x4;
 800067a:	2304      	movs	r3, #4
 800067c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		  found = 1;
 8000680:	2301      	movs	r3, #1
 8000682:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR5 ) & !found){
 8000686:	4b62      	ldr	r3, [pc, #392]	; (8000810 <main+0x310>)
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	f003 0320 	and.w	r3, r3, #32
 800068e:	2b00      	cmp	r3, #0
 8000690:	bf0c      	ite	eq
 8000692:	2301      	moveq	r3, #1
 8000694:	2300      	movne	r3, #0
 8000696:	b2da      	uxtb	r2, r3
 8000698:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800069c:	2b00      	cmp	r3, #0
 800069e:	bf0c      	ite	eq
 80006a0:	2301      	moveq	r3, #1
 80006a2:	2300      	movne	r3, #0
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	4013      	ands	r3, r2
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d005      	beq.n	80006ba <main+0x1ba>
		  tecla = 0x5;
 80006ae:	2305      	movs	r3, #5
 80006b0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		  found = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR6 ) & !found){
 80006ba:	4b55      	ldr	r3, [pc, #340]	; (8000810 <main+0x310>)
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	bf0c      	ite	eq
 80006c6:	2301      	moveq	r3, #1
 80006c8:	2300      	movne	r3, #0
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf0c      	ite	eq
 80006d4:	2301      	moveq	r3, #1
 80006d6:	2300      	movne	r3, #0
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	4013      	ands	r3, r2
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d005      	beq.n	80006ee <main+0x1ee>
		  tecla = 0x6;
 80006e2:	2306      	movs	r3, #6
 80006e4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		  found = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR7 ) & !found){
 80006ee:	4b48      	ldr	r3, [pc, #288]	; (8000810 <main+0x310>)
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	bf0c      	ite	eq
 80006fa:	2301      	moveq	r3, #1
 80006fc:	2300      	movne	r3, #0
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000704:	2b00      	cmp	r3, #0
 8000706:	bf0c      	ite	eq
 8000708:	2301      	moveq	r3, #1
 800070a:	2300      	movne	r3, #0
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4013      	ands	r3, r2
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	d005      	beq.n	8000722 <main+0x222>
		  tecla = 0xB;
 8000716:	230b      	movs	r3, #11
 8000718:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		  found = 1;
 800071c:	2301      	movs	r3, #1
 800071e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  }

	  GPIOB->BSRR = (1 << 0) | (1 << 1) | (1 << 18) | (1 << 3);
 8000722:	4b3b      	ldr	r3, [pc, #236]	; (8000810 <main+0x310>)
 8000724:	4a3d      	ldr	r2, [pc, #244]	; (800081c <main+0x31c>)
 8000726:	611a      	str	r2, [r3, #16]
	  if(!(GPIOB->IDR & GPIO_IDR_IDR4 ) & !found){
 8000728:	4b39      	ldr	r3, [pc, #228]	; (8000810 <main+0x310>)
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	f003 0310 	and.w	r3, r3, #16
 8000730:	2b00      	cmp	r3, #0
 8000732:	bf0c      	ite	eq
 8000734:	2301      	moveq	r3, #1
 8000736:	2300      	movne	r3, #0
 8000738:	b2da      	uxtb	r2, r3
 800073a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800073e:	2b00      	cmp	r3, #0
 8000740:	bf0c      	ite	eq
 8000742:	2301      	moveq	r3, #1
 8000744:	2300      	movne	r3, #0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	4013      	ands	r3, r2
 800074a:	b2db      	uxtb	r3, r3
 800074c:	2b00      	cmp	r3, #0
 800074e:	d005      	beq.n	800075c <main+0x25c>
		  tecla = 0x7;
 8000750:	2307      	movs	r3, #7
 8000752:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		  found = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR5 ) & !found){
 800075c:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <main+0x310>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	f003 0320 	and.w	r3, r3, #32
 8000764:	2b00      	cmp	r3, #0
 8000766:	bf0c      	ite	eq
 8000768:	2301      	moveq	r3, #1
 800076a:	2300      	movne	r3, #0
 800076c:	b2da      	uxtb	r2, r3
 800076e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000772:	2b00      	cmp	r3, #0
 8000774:	bf0c      	ite	eq
 8000776:	2301      	moveq	r3, #1
 8000778:	2300      	movne	r3, #0
 800077a:	b2db      	uxtb	r3, r3
 800077c:	4013      	ands	r3, r2
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d005      	beq.n	8000790 <main+0x290>
		  tecla = 0x8;
 8000784:	2308      	movs	r3, #8
 8000786:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		  found = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR6 ) & !found){
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <main+0x310>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000798:	2b00      	cmp	r3, #0
 800079a:	bf0c      	ite	eq
 800079c:	2301      	moveq	r3, #1
 800079e:	2300      	movne	r3, #0
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	bf0c      	ite	eq
 80007aa:	2301      	moveq	r3, #1
 80007ac:	2300      	movne	r3, #0
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4013      	ands	r3, r2
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d005      	beq.n	80007c4 <main+0x2c4>
		  tecla = 0x9;
 80007b8:	2309      	movs	r3, #9
 80007ba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		  found = 1;
 80007be:	2301      	movs	r3, #1
 80007c0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR7 ) & !found){
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <main+0x310>)
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	bf0c      	ite	eq
 80007d0:	2301      	moveq	r3, #1
 80007d2:	2300      	movne	r3, #0
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80007da:	2b00      	cmp	r3, #0
 80007dc:	bf0c      	ite	eq
 80007de:	2301      	moveq	r3, #1
 80007e0:	2300      	movne	r3, #0
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	4013      	ands	r3, r2
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d005      	beq.n	80007f8 <main+0x2f8>
		  tecla = 0xC;
 80007ec:	230c      	movs	r3, #12
 80007ee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		  found = 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  }

	  GPIOB->BSRR = (1 << 0) | (1 << 1) | (1 << 2) | (1 << 19);
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <main+0x310>)
 80007fa:	4a09      	ldr	r2, [pc, #36]	; (8000820 <main+0x320>)
 80007fc:	611a      	str	r2, [r3, #16]
	  if(!(GPIOB->IDR & GPIO_IDR_IDR4 ) & !found){
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <main+0x310>)
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	f003 0310 	and.w	r3, r3, #16
 8000806:	2b00      	cmp	r3, #0
 8000808:	bf0c      	ite	eq
 800080a:	2301      	moveq	r3, #1
 800080c:	2300      	movne	r3, #0
 800080e:	e009      	b.n	8000824 <main+0x324>
 8000810:	40010c00 	.word	0x40010c00
 8000814:	0001000e 	.word	0x0001000e
 8000818:	0002000d 	.word	0x0002000d
 800081c:	0004000b 	.word	0x0004000b
 8000820:	00080007 	.word	0x00080007
 8000824:	b2da      	uxtb	r2, r3
 8000826:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800082a:	2b00      	cmp	r3, #0
 800082c:	bf0c      	ite	eq
 800082e:	2301      	moveq	r3, #1
 8000830:	2300      	movne	r3, #0
 8000832:	b2db      	uxtb	r3, r3
 8000834:	4013      	ands	r3, r2
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	d005      	beq.n	8000848 <main+0x348>
		  tecla = 0xE;
 800083c:	230e      	movs	r3, #14
 800083e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		  found = 1;
 8000842:	2301      	movs	r3, #1
 8000844:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR5 ) & !found){
 8000848:	4b7f      	ldr	r3, [pc, #508]	; (8000a48 <main+0x548>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	f003 0320 	and.w	r3, r3, #32
 8000850:	2b00      	cmp	r3, #0
 8000852:	bf0c      	ite	eq
 8000854:	2301      	moveq	r3, #1
 8000856:	2300      	movne	r3, #0
 8000858:	b2da      	uxtb	r2, r3
 800085a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800085e:	2b00      	cmp	r3, #0
 8000860:	bf0c      	ite	eq
 8000862:	2301      	moveq	r3, #1
 8000864:	2300      	movne	r3, #0
 8000866:	b2db      	uxtb	r3, r3
 8000868:	4013      	ands	r3, r2
 800086a:	b2db      	uxtb	r3, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	d005      	beq.n	800087c <main+0x37c>
		  tecla = 0x0;
 8000870:	2300      	movs	r3, #0
 8000872:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		  found = 1;
 8000876:	2301      	movs	r3, #1
 8000878:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR6 ) & !found){
 800087c:	4b72      	ldr	r3, [pc, #456]	; (8000a48 <main+0x548>)
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf0c      	ite	eq
 8000888:	2301      	moveq	r3, #1
 800088a:	2300      	movne	r3, #0
 800088c:	b2da      	uxtb	r2, r3
 800088e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000892:	2b00      	cmp	r3, #0
 8000894:	bf0c      	ite	eq
 8000896:	2301      	moveq	r3, #1
 8000898:	2300      	movne	r3, #0
 800089a:	b2db      	uxtb	r3, r3
 800089c:	4013      	ands	r3, r2
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d005      	beq.n	80008b0 <main+0x3b0>
		  tecla = 0xF;
 80008a4:	230f      	movs	r3, #15
 80008a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		  found = 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  }
	  if(!(GPIOB->IDR & GPIO_IDR_IDR7 ) & !found){
 80008b0:	4b65      	ldr	r3, [pc, #404]	; (8000a48 <main+0x548>)
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	bf0c      	ite	eq
 80008bc:	2301      	moveq	r3, #1
 80008be:	2300      	movne	r3, #0
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	bf0c      	ite	eq
 80008ca:	2301      	moveq	r3, #1
 80008cc:	2300      	movne	r3, #0
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	4013      	ands	r3, r2
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d005      	beq.n	80008e4 <main+0x3e4>
		  tecla = 0xD;
 80008d8:	230d      	movs	r3, #13
 80008da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		  found = 1;
 80008de:	2301      	movs	r3, #1
 80008e0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  }

	  if(!found)
 80008e4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <main+0x3f2>
		  tecla = 0x10;
 80008ec:	2310      	movs	r3, #16
 80008ee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

	  if(found){
 80008f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d04e      	beq.n	8000998 <main+0x498>
		  changed = 1;
 80008fa:	2301      	movs	r3, #1
 80008fc:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
		  if(tecla == 0xE){
 8000900:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8000904:	2b0e      	cmp	r3, #14
 8000906:	d126      	bne.n	8000956 <main+0x456>
			  if(count > 0){
 8000908:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800090c:	2b00      	cmp	r3, #0
 800090e:	d043      	beq.n	8000998 <main+0x498>
				  msg[count-1] = 0x0;
 8000910:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000914:	3b01      	subs	r3, #1
 8000916:	3368      	adds	r3, #104	; 0x68
 8000918:	443b      	add	r3, r7
 800091a:	2200      	movs	r2, #0
 800091c:	f803 2c34 	strb.w	r2, [r3, #-52]
				  count--;
 8000920:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000924:	3b01      	subs	r3, #1
 8000926:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

				  if(count>=16)
 800092a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800092e:	2b0f      	cmp	r3, #15
 8000930:	d909      	bls.n	8000946 <main+0x446>
					  msg2[count%16] = 0x0;
 8000932:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000936:	f003 030f 	and.w	r3, r3, #15
 800093a:	3368      	adds	r3, #104	; 0x68
 800093c:	443b      	add	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	f803 2c54 	strb.w	r2, [r3, #-84]
 8000944:	e028      	b.n	8000998 <main+0x498>
				  else
					  msg1[count] = 0x0;
 8000946:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800094a:	3368      	adds	r3, #104	; 0x68
 800094c:	443b      	add	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	f803 2c44 	strb.w	r2, [r3, #-68]
 8000954:	e020      	b.n	8000998 <main+0x498>
			  }
		  } else if(count <= 31){
 8000956:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800095a:	2b1f      	cmp	r3, #31
 800095c:	d81c      	bhi.n	8000998 <main+0x498>
			  if(tecla == 0xF)
 800095e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8000962:	2b0f      	cmp	r3, #15
 8000964:	d107      	bne.n	8000976 <main+0x476>
				  msg[count] = key[0xE];
 8000966:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800096a:	7cba      	ldrb	r2, [r7, #18]
 800096c:	3368      	adds	r3, #104	; 0x68
 800096e:	443b      	add	r3, r7
 8000970:	f803 2c34 	strb.w	r2, [r3, #-52]
 8000974:	e00b      	b.n	800098e <main+0x48e>
			  else
				  msg[count] = key[tecla];
 8000976:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800097a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800097e:	3268      	adds	r2, #104	; 0x68
 8000980:	443a      	add	r2, r7
 8000982:	f812 2c64 	ldrb.w	r2, [r2, #-100]
 8000986:	3368      	adds	r3, #104	; 0x68
 8000988:	443b      	add	r3, r7
 800098a:	f803 2c34 	strb.w	r2, [r3, #-52]
			  count++;
 800098e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000992:	3301      	adds	r3, #1
 8000994:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
		  }
	  }

	  for(int i = 0 ; i < 16 ; i++){
 8000998:	2300      	movs	r3, #0
 800099a:	65bb      	str	r3, [r7, #88]	; 0x58
 800099c:	e019      	b.n	80009d2 <main+0x4d2>
		  msg1[i] = msg[i];
 800099e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80009a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009a4:	4413      	add	r3, r2
 80009a6:	7819      	ldrb	r1, [r3, #0]
 80009a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80009ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009ae:	4413      	add	r3, r2
 80009b0:	460a      	mov	r2, r1
 80009b2:	701a      	strb	r2, [r3, #0]
		  msg2[i] = msg[i+16];
 80009b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009b6:	3310      	adds	r3, #16
 80009b8:	3368      	adds	r3, #104	; 0x68
 80009ba:	443b      	add	r3, r7
 80009bc:	f813 1c34 	ldrb.w	r1, [r3, #-52]
 80009c0:	f107 0214 	add.w	r2, r7, #20
 80009c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009c6:	4413      	add	r3, r2
 80009c8:	460a      	mov	r2, r1
 80009ca:	701a      	strb	r2, [r3, #0]
	  for(int i = 0 ; i < 16 ; i++){
 80009cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009ce:	3301      	adds	r3, #1
 80009d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80009d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	dde2      	ble.n	800099e <main+0x49e>
	  }

	  if(changed == 1){
 80009d8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d12f      	bne.n	8000a40 <main+0x540>
		  changed = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
		  LCD_Clear();
 80009e6:	2001      	movs	r0, #1
 80009e8:	f7ff fcc6 	bl	8000378 <LCD_Write_Cmd>

		  LCD_Set_Cursor(1,0);
 80009ec:	2100      	movs	r1, #0
 80009ee:	2001      	movs	r0, #1
 80009f0:	f7ff fce8 	bl	80003c4 <LCD_Set_Cursor>
		  LCD_Put_Str(msg1);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fd0e 	bl	800041a <LCD_Put_Str>
		  LCD_Set_Cursor(2,0);
 80009fe:	2100      	movs	r1, #0
 8000a00:	2002      	movs	r0, #2
 8000a02:	f7ff fcdf 	bl	80003c4 <LCD_Set_Cursor>
		  LCD_Put_Str(msg2);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fd05 	bl	800041a <LCD_Put_Str>
		  LCD_Set_Cursor(count/16 + 1, (count+1) % 17);
 8000a10:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000a14:	091b      	lsrs	r3, r3, #4
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	b2d8      	uxtb	r0, r3
 8000a1e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <main+0x54c>)
 8000a26:	fb83 1302 	smull	r1, r3, r3, r2
 8000a2a:	10d9      	asrs	r1, r3, #3
 8000a2c:	17d3      	asrs	r3, r2, #31
 8000a2e:	1ac9      	subs	r1, r1, r3
 8000a30:	460b      	mov	r3, r1
 8000a32:	011b      	lsls	r3, r3, #4
 8000a34:	440b      	add	r3, r1
 8000a36:	1ad1      	subs	r1, r2, r3
 8000a38:	b2cb      	uxtb	r3, r1
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f7ff fcc2 	bl	80003c4 <LCD_Set_Cursor>
	  }

	  HAL_Delay(50);
 8000a40:	2032      	movs	r0, #50	; 0x32
 8000a42:	f000 fa0b 	bl	8000e5c <HAL_Delay>
	  GPIOB->BSRR = (1 << 16) | (1 << 1) | (1 << 2) | (1 << 3);
 8000a46:	e593      	b.n	8000570 <main+0x70>
 8000a48:	40010c00 	.word	0x40010c00
 8000a4c:	78787879 	.word	0x78787879

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b090      	sub	sp, #64	; 0x40
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0318 	add.w	r3, r7, #24
 8000a5a:	2228      	movs	r2, #40	; 0x28
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 ff32 	bl	80018c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a76:	2301      	movs	r3, #1
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a82:	2300      	movs	r3, #0
 8000a84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a86:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8c:	f107 0318 	add.w	r3, r7, #24
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 fb0d 	bl	80010b0 <HAL_RCC_OscConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a9c:	f000 f8e8 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2102      	movs	r1, #2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fd7a 	bl	80015b4 <HAL_RCC_ClockConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000ac6:	f000 f8d3 	bl	8000c70 <Error_Handler>
  }
}
 8000aca:	bf00      	nop
 8000acc:	3740      	adds	r7, #64	; 0x40
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_GPIO_Init+0x70>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	4a19      	ldr	r2, [pc, #100]	; (8000b44 <MX_GPIO_Init+0x70>)
 8000ae0:	f043 0310 	orr.w	r3, r3, #16
 8000ae4:	6193      	str	r3, [r2, #24]
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <MX_GPIO_Init+0x70>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	f003 0310 	and.w	r3, r3, #16
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_GPIO_Init+0x70>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <MX_GPIO_Init+0x70>)
 8000af8:	f043 0320 	orr.w	r3, r3, #32
 8000afc:	6193      	str	r3, [r2, #24]
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_GPIO_Init+0x70>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	f003 0320 	and.w	r3, r3, #32
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_GPIO_Init+0x70>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <MX_GPIO_Init+0x70>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6193      	str	r3, [r2, #24]
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_GPIO_Init+0x70>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_GPIO_Init+0x70>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <MX_GPIO_Init+0x70>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	6193      	str	r3, [r2, #24]
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <MX_GPIO_Init+0x70>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	40021000 	.word	0x40021000

08000b48 <USER_RCC_Init>:

/* USER CODE BEGIN 4 */
void USER_RCC_Init(void){
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;//		I/O port A clock enable
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <USER_RCC_Init+0x18>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <USER_RCC_Init+0x18>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	6193      	str	r3, [r2, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	40021000 	.word	0x40021000

08000b64 <USER_GPIO_Init>:

void USER_GPIO_Init(void){
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
	GPIOA->CRH |= GPIO_CRH_CNF10_1;
	GPIOA->ODR |= GPIO_ODR_ODR10;
	*/

//C
	GPIOB->BSRR &= GPIO_BSRR_BR0 & GPIO_BSRR_BR1 & GPIO_BSRR_BR2 & GPIO_BSRR_BR3;
 8000b68:	4b40      	ldr	r3, [pc, #256]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	4b3f      	ldr	r3, [pc, #252]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
	//pins PB0-PB3 as output push-pull
	GPIOB->CRL &= ~GPIO_CRL_CNF0 & ~GPIO_CRL_MODE0_1;
 8000b72:	4b3e      	ldr	r3, [pc, #248]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a3d      	ldr	r2, [pc, #244]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000b78:	f023 030e 	bic.w	r3, r3, #14
 8000b7c:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE0_0;
 8000b7e:	4b3b      	ldr	r3, [pc, #236]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a3a      	ldr	r2, [pc, #232]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~GPIO_CRL_CNF1 & ~GPIO_CRL_MODE1_1;
 8000b8a:	4b38      	ldr	r3, [pc, #224]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a37      	ldr	r2, [pc, #220]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000b90:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000b94:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE1_0;
 8000b96:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a34      	ldr	r2, [pc, #208]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000b9c:	f043 0310 	orr.w	r3, r3, #16
 8000ba0:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~GPIO_CRL_CNF2 & ~GPIO_CRL_MODE2_1;
 8000ba2:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a31      	ldr	r2, [pc, #196]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000ba8:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8000bac:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE2_0;
 8000bae:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a2e      	ldr	r2, [pc, #184]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb8:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~GPIO_CRL_CNF3 & ~GPIO_CRL_MODE3_1;
 8000bba:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a2b      	ldr	r2, [pc, #172]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000bc0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000bc4:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE3_0;
 8000bc6:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a28      	ldr	r2, [pc, #160]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000bcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd0:	6013      	str	r3, [r2, #0]

	//pins PB4-PB7 as input pull-up
	GPIOB->CRL &= ~GPIO_CRL_CNF4_0 & ~GPIO_CRL_MODE4;
 8000bd2:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a25      	ldr	r2, [pc, #148]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000bd8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8000bdc:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF4_1;
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a22      	ldr	r2, [pc, #136]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000be4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000be8:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= GPIO_ODR_ODR4;
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	4a1f      	ldr	r2, [pc, #124]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000bf0:	f043 0310 	orr.w	r3, r3, #16
 8000bf4:	60d3      	str	r3, [r2, #12]
	GPIOB->CRL &= ~GPIO_CRL_CNF5_0 & ~GPIO_CRL_MODE5;
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000bfc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8000c00:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF5_1;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000c08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c0c:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= GPIO_ODR_ODR5;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	4a16      	ldr	r2, [pc, #88]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000c14:	f043 0320 	orr.w	r3, r3, #32
 8000c18:	60d3      	str	r3, [r2, #12]
	GPIOB->CRL &= ~GPIO_CRL_CNF6_0 & ~GPIO_CRL_MODE6;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a13      	ldr	r2, [pc, #76]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000c20:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c24:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF6_1;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000c2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c30:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= GPIO_ODR_ODR6;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c3c:	60d3      	str	r3, [r2, #12]
	GPIOB->CRL &= ~GPIO_CRL_CNF7_0 & ~GPIO_CRL_MODE7;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000c44:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8000c48:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF7_1;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000c50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c54:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= GPIO_ODR_ODR7;
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <USER_GPIO_Init+0x108>)
 8000c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c60:	60d3      	str	r3, [r2, #12]

}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40010c00 	.word	0x40010c00

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>
	...

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6193      	str	r3, [r2, #24]
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	61d3      	str	r3, [r2, #28]
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_MspInit+0x60>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_MspInit+0x60>)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010000 	.word	0x40010000

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <UsageFault_Handler+0x4>

08000cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr

08000d22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d26:	f000 f87d 	bl	8000e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d36:	f000 f999 	bl	800106c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
	...

08000d4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4e:	490d      	ldr	r1, [pc, #52]	; (8000d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d64:	4c0a      	ldr	r4, [pc, #40]	; (8000d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d72:	f7ff ffe4 	bl	8000d3e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d76:	f000 fd83 	bl	8001880 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7a:	f7ff fbc1 	bl	8000500 <main>
  bx lr
 8000d7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d88:	08001968 	.word	0x08001968
  ldr r2, =_sbss
 8000d8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d90:	2000002c 	.word	0x2000002c

08000d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC1_2_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_Init+0x28>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <HAL_Init+0x28>)
 8000da2:	f043 0310 	orr.w	r3, r3, #16
 8000da6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f000 f92b 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dae:	2000      	movs	r0, #0
 8000db0:	f000 f808 	bl	8000dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db4:	f7ff ff62 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40022000 	.word	0x40022000

08000dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x54>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x58>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f935 	bl	8001052 <HAL_SYSTICK_Config>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00e      	b.n	8000e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d80a      	bhi.n	8000e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f000 f90b 	bl	800101a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e04:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <HAL_InitTick+0x5c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e000      	b.n	8000e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000004 	.word	0x20000004

08000e24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <HAL_IncTick+0x1c>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_IncTick+0x20>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a03      	ldr	r2, [pc, #12]	; (8000e44 <HAL_IncTick+0x20>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000028 	.word	0x20000028

08000e48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b02      	ldr	r3, [pc, #8]	; (8000e58 <HAL_GetTick+0x10>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	20000028 	.word	0x20000028

08000e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff fff0 	bl	8000e48 <HAL_GetTick>
 8000e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e74:	d005      	beq.n	8000e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_Delay+0x44>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e82:	bf00      	nop
 8000e84:	f7ff ffe0 	bl	8000e48 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d8f7      	bhi.n	8000e84 <HAL_Delay+0x28>
  {
  }
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008

08000ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed6:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	60d3      	str	r3, [r2, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	f003 0307 	and.w	r3, r3, #7
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f7ff ff90 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff49 	bl	8000ea4 <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102c:	f7ff ff5e 	bl	8000eec <__NVIC_GetPriorityGrouping>
 8001030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ff90 	bl	8000f5c <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff5f 	bl	8000f08 <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffb0 	bl	8000fc0 <SysTick_Config>
 8001060:	4603      	mov	r3, r0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001078:	695a      	ldr	r2, [r3, #20]
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	4013      	ands	r3, r2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d006      	beq.n	8001090 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f806 	bl	800109c <HAL_GPIO_EXTI_Callback>
  }
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40010400 	.word	0x40010400

0800109c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e272      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 8087 	beq.w	80011de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010d0:	4b92      	ldr	r3, [pc, #584]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 030c 	and.w	r3, r3, #12
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d00c      	beq.n	80010f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010dc:	4b8f      	ldr	r3, [pc, #572]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d112      	bne.n	800110e <HAL_RCC_OscConfig+0x5e>
 80010e8:	4b8c      	ldr	r3, [pc, #560]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f4:	d10b      	bne.n	800110e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f6:	4b89      	ldr	r3, [pc, #548]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d06c      	beq.n	80011dc <HAL_RCC_OscConfig+0x12c>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d168      	bne.n	80011dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e24c      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001116:	d106      	bne.n	8001126 <HAL_RCC_OscConfig+0x76>
 8001118:	4b80      	ldr	r3, [pc, #512]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a7f      	ldr	r2, [pc, #508]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 800111e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	e02e      	b.n	8001184 <HAL_RCC_OscConfig+0xd4>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0x98>
 800112e:	4b7b      	ldr	r3, [pc, #492]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a7a      	ldr	r2, [pc, #488]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	4b78      	ldr	r3, [pc, #480]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a77      	ldr	r2, [pc, #476]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001140:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e01d      	b.n	8001184 <HAL_RCC_OscConfig+0xd4>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001150:	d10c      	bne.n	800116c <HAL_RCC_OscConfig+0xbc>
 8001152:	4b72      	ldr	r3, [pc, #456]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a71      	ldr	r2, [pc, #452]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	4b6f      	ldr	r3, [pc, #444]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a6e      	ldr	r2, [pc, #440]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e00b      	b.n	8001184 <HAL_RCC_OscConfig+0xd4>
 800116c:	4b6b      	ldr	r3, [pc, #428]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a6a      	ldr	r2, [pc, #424]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b68      	ldr	r3, [pc, #416]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a67      	ldr	r2, [pc, #412]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 800117e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001182:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d013      	beq.n	80011b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fe5c 	bl	8000e48 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fe58 	bl	8000e48 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	; 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e200      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	4b5d      	ldr	r3, [pc, #372]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0xe4>
 80011b2:	e014      	b.n	80011de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fe48 	bl	8000e48 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fe44 	bl	8000e48 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e1ec      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	4b53      	ldr	r3, [pc, #332]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f0      	bne.n	80011bc <HAL_RCC_OscConfig+0x10c>
 80011da:	e000      	b.n	80011de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d063      	beq.n	80012b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ea:	4b4c      	ldr	r3, [pc, #304]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00b      	beq.n	800120e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011f6:	4b49      	ldr	r3, [pc, #292]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d11c      	bne.n	800123c <HAL_RCC_OscConfig+0x18c>
 8001202:	4b46      	ldr	r3, [pc, #280]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d116      	bne.n	800123c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	4b43      	ldr	r3, [pc, #268]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <HAL_RCC_OscConfig+0x176>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d001      	beq.n	8001226 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e1c0      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001226:	4b3d      	ldr	r3, [pc, #244]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4939      	ldr	r1, [pc, #228]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001236:	4313      	orrs	r3, r2
 8001238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	e03a      	b.n	80012b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d020      	beq.n	8001286 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001244:	4b36      	ldr	r3, [pc, #216]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001246:	2201      	movs	r2, #1
 8001248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124a:	f7ff fdfd 	bl	8000e48 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001252:	f7ff fdf9 	bl	8000e48 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e1a1      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001264:	4b2d      	ldr	r3, [pc, #180]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001270:	4b2a      	ldr	r3, [pc, #168]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4927      	ldr	r1, [pc, #156]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 8001280:	4313      	orrs	r3, r2
 8001282:	600b      	str	r3, [r1, #0]
 8001284:	e015      	b.n	80012b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001286:	4b26      	ldr	r3, [pc, #152]	; (8001320 <HAL_RCC_OscConfig+0x270>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fddc 	bl	8000e48 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001294:	f7ff fdd8 	bl	8000e48 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e180      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d03a      	beq.n	8001334 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d019      	beq.n	80012fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_RCC_OscConfig+0x274>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012cc:	f7ff fdbc 	bl	8000e48 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d4:	f7ff fdb8 	bl	8000e48 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e160      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <HAL_RCC_OscConfig+0x26c>)
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012f2:	2001      	movs	r0, #1
 80012f4:	f000 faa6 	bl	8001844 <RCC_Delay>
 80012f8:	e01c      	b.n	8001334 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_RCC_OscConfig+0x274>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001300:	f7ff fda2 	bl	8000e48 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001306:	e00f      	b.n	8001328 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001308:	f7ff fd9e 	bl	8000e48 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d908      	bls.n	8001328 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e146      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000
 8001320:	42420000 	.word	0x42420000
 8001324:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001328:	4b92      	ldr	r3, [pc, #584]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1e9      	bne.n	8001308 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80a6 	beq.w	800148e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001346:	4b8b      	ldr	r3, [pc, #556]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10d      	bne.n	800136e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	4b88      	ldr	r3, [pc, #544]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	4a87      	ldr	r2, [pc, #540]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135c:	61d3      	str	r3, [r2, #28]
 800135e:	4b85      	ldr	r3, [pc, #532]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800136a:	2301      	movs	r3, #1
 800136c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136e:	4b82      	ldr	r3, [pc, #520]	; (8001578 <HAL_RCC_OscConfig+0x4c8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d118      	bne.n	80013ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800137a:	4b7f      	ldr	r3, [pc, #508]	; (8001578 <HAL_RCC_OscConfig+0x4c8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a7e      	ldr	r2, [pc, #504]	; (8001578 <HAL_RCC_OscConfig+0x4c8>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001386:	f7ff fd5f 	bl	8000e48 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138e:	f7ff fd5b 	bl	8000e48 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b64      	cmp	r3, #100	; 0x64
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e103      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a0:	4b75      	ldr	r3, [pc, #468]	; (8001578 <HAL_RCC_OscConfig+0x4c8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d106      	bne.n	80013c2 <HAL_RCC_OscConfig+0x312>
 80013b4:	4b6f      	ldr	r3, [pc, #444]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4a6e      	ldr	r2, [pc, #440]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6213      	str	r3, [r2, #32]
 80013c0:	e02d      	b.n	800141e <HAL_RCC_OscConfig+0x36e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10c      	bne.n	80013e4 <HAL_RCC_OscConfig+0x334>
 80013ca:	4b6a      	ldr	r3, [pc, #424]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	4a69      	ldr	r2, [pc, #420]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	f023 0301 	bic.w	r3, r3, #1
 80013d4:	6213      	str	r3, [r2, #32]
 80013d6:	4b67      	ldr	r3, [pc, #412]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	4a66      	ldr	r2, [pc, #408]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	f023 0304 	bic.w	r3, r3, #4
 80013e0:	6213      	str	r3, [r2, #32]
 80013e2:	e01c      	b.n	800141e <HAL_RCC_OscConfig+0x36e>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b05      	cmp	r3, #5
 80013ea:	d10c      	bne.n	8001406 <HAL_RCC_OscConfig+0x356>
 80013ec:	4b61      	ldr	r3, [pc, #388]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	4a60      	ldr	r2, [pc, #384]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	6213      	str	r3, [r2, #32]
 80013f8:	4b5e      	ldr	r3, [pc, #376]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4a5d      	ldr	r2, [pc, #372]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6213      	str	r3, [r2, #32]
 8001404:	e00b      	b.n	800141e <HAL_RCC_OscConfig+0x36e>
 8001406:	4b5b      	ldr	r3, [pc, #364]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	4a5a      	ldr	r2, [pc, #360]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	6213      	str	r3, [r2, #32]
 8001412:	4b58      	ldr	r3, [pc, #352]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	4a57      	ldr	r2, [pc, #348]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	f023 0304 	bic.w	r3, r3, #4
 800141c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d015      	beq.n	8001452 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fd0f 	bl	8000e48 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142c:	e00a      	b.n	8001444 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f7ff fd0b 	bl	8000e48 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f241 3288 	movw	r2, #5000	; 0x1388
 800143c:	4293      	cmp	r3, r2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e0b1      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001444:	4b4b      	ldr	r3, [pc, #300]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0ee      	beq.n	800142e <HAL_RCC_OscConfig+0x37e>
 8001450:	e014      	b.n	800147c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001452:	f7ff fcf9 	bl	8000e48 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001458:	e00a      	b.n	8001470 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145a:	f7ff fcf5 	bl	8000e48 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	f241 3288 	movw	r2, #5000	; 0x1388
 8001468:	4293      	cmp	r3, r2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e09b      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001470:	4b40      	ldr	r3, [pc, #256]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1ee      	bne.n	800145a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800147c:	7dfb      	ldrb	r3, [r7, #23]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d105      	bne.n	800148e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001482:	4b3c      	ldr	r3, [pc, #240]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a3b      	ldr	r2, [pc, #236]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800148c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 8087 	beq.w	80015a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001498:	4b36      	ldr	r3, [pc, #216]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d061      	beq.n	8001568 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d146      	bne.n	800153a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ac:	4b33      	ldr	r3, [pc, #204]	; (800157c <HAL_RCC_OscConfig+0x4cc>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fcc9 	bl	8000e48 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff fcc5 	bl	8000e48 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e06d      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f0      	bne.n	80014ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e0:	d108      	bne.n	80014f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014e2:	4b24      	ldr	r3, [pc, #144]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	4921      	ldr	r1, [pc, #132]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f4:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a19      	ldr	r1, [r3, #32]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	430b      	orrs	r3, r1
 8001506:	491b      	ldr	r1, [pc, #108]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_RCC_OscConfig+0x4cc>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fc99 	bl	8000e48 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151a:	f7ff fc95 	bl	8000e48 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e03d      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x46a>
 8001538:	e035      	b.n	80015a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_RCC_OscConfig+0x4cc>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fc82 	bl	8000e48 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001548:	f7ff fc7e 	bl	8000e48 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e026      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_RCC_OscConfig+0x4c4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x498>
 8001566:	e01e      	b.n	80015a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d107      	bne.n	8001580 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e019      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
 8001574:	40021000 	.word	0x40021000
 8001578:	40007000 	.word	0x40007000
 800157c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_RCC_OscConfig+0x500>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	429a      	cmp	r2, r3
 8001592:	d106      	bne.n	80015a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	429a      	cmp	r2, r3
 80015a0:	d001      	beq.n	80015a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021000 	.word	0x40021000

080015b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0d0      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c8:	4b6a      	ldr	r3, [pc, #424]	; (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d910      	bls.n	80015f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d6:	4b67      	ldr	r3, [pc, #412]	; (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 0207 	bic.w	r2, r3, #7
 80015de:	4965      	ldr	r1, [pc, #404]	; (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e6:	4b63      	ldr	r3, [pc, #396]	; (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0b8      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d020      	beq.n	8001646 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001610:	4b59      	ldr	r3, [pc, #356]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a58      	ldr	r2, [pc, #352]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800161a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001628:	4b53      	ldr	r3, [pc, #332]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4a52      	ldr	r2, [pc, #328]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001632:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001634:	4b50      	ldr	r3, [pc, #320]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	494d      	ldr	r1, [pc, #308]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001642:	4313      	orrs	r3, r2
 8001644:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d040      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d107      	bne.n	800166a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165a:	4b47      	ldr	r3, [pc, #284]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d115      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e07f      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d107      	bne.n	8001682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d109      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e073      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e06b      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001692:	4b39      	ldr	r3, [pc, #228]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f023 0203 	bic.w	r2, r3, #3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4936      	ldr	r1, [pc, #216]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a4:	f7ff fbd0 	bl	8000e48 <HAL_GetTick>
 80016a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ac:	f7ff fbcc 	bl	8000e48 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e053      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c2:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 020c 	and.w	r2, r3, #12
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d1eb      	bne.n	80016ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d4:	4b27      	ldr	r3, [pc, #156]	; (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d210      	bcs.n	8001704 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b24      	ldr	r3, [pc, #144]	; (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 0207 	bic.w	r2, r3, #7
 80016ea:	4922      	ldr	r1, [pc, #136]	; (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e032      	b.n	800176a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d008      	beq.n	8001722 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	4916      	ldr	r1, [pc, #88]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d009      	beq.n	8001742 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	490e      	ldr	r1, [pc, #56]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	4313      	orrs	r3, r2
 8001740:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001742:	f000 f821 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 8001746:	4602      	mov	r2, r0
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	490a      	ldr	r1, [pc, #40]	; (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001754:	5ccb      	ldrb	r3, [r1, r3]
 8001756:	fa22 f303 	lsr.w	r3, r2, r3
 800175a:	4a09      	ldr	r2, [pc, #36]	; (8001780 <HAL_RCC_ClockConfig+0x1cc>)
 800175c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_RCC_ClockConfig+0x1d0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fb2e 	bl	8000dc4 <HAL_InitTick>

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40022000 	.word	0x40022000
 8001778:	40021000 	.word	0x40021000
 800177c:	08001950 	.word	0x08001950
 8001780:	20000000 	.word	0x20000000
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001788:	b490      	push	{r4, r7}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800178e:	4b29      	ldr	r3, [pc, #164]	; (8001834 <HAL_RCC_GetSysClockFreq+0xac>)
 8001790:	1d3c      	adds	r4, r7, #4
 8001792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001794:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001798:	f240 2301 	movw	r3, #513	; 0x201
 800179c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 030c 	and.w	r3, r3, #12
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d002      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0x40>
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d003      	beq.n	80017ce <HAL_RCC_GetSysClockFreq+0x46>
 80017c6:	e02b      	b.n	8001820 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017c8:	4b1c      	ldr	r3, [pc, #112]	; (800183c <HAL_RCC_GetSysClockFreq+0xb4>)
 80017ca:	623b      	str	r3, [r7, #32]
      break;
 80017cc:	e02b      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	0c9b      	lsrs	r3, r3, #18
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3328      	adds	r3, #40	; 0x28
 80017d8:	443b      	add	r3, r7
 80017da:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017de:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d012      	beq.n	8001810 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	0c5b      	lsrs	r3, r3, #17
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	3328      	adds	r3, #40	; 0x28
 80017f6:	443b      	add	r3, r7
 80017f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	4a0e      	ldr	r2, [pc, #56]	; (800183c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001802:	fb03 f202 	mul.w	r2, r3, r2
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	fbb2 f3f3 	udiv	r3, r2, r3
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
 800180e:	e004      	b.n	800181a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001814:	fb02 f303 	mul.w	r3, r2, r3
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	623b      	str	r3, [r7, #32]
      break;
 800181e:	e002      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001822:	623b      	str	r3, [r7, #32]
      break;
 8001824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001826:	6a3b      	ldr	r3, [r7, #32]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3728      	adds	r7, #40	; 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bc90      	pop	{r4, r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	08001900 	.word	0x08001900
 8001838:	40021000 	.word	0x40021000
 800183c:	007a1200 	.word	0x007a1200
 8001840:	003d0900 	.word	0x003d0900

08001844 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <RCC_Delay+0x34>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	; (800187c <RCC_Delay+0x38>)
 8001852:	fba2 2303 	umull	r2, r3, r2, r3
 8001856:	0a5b      	lsrs	r3, r3, #9
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	fb02 f303 	mul.w	r3, r2, r3
 800185e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001860:	bf00      	nop
  }
  while (Delay --);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1e5a      	subs	r2, r3, #1
 8001866:	60fa      	str	r2, [r7, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f9      	bne.n	8001860 <RCC_Delay+0x1c>
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	20000000 	.word	0x20000000
 800187c:	10624dd3 	.word	0x10624dd3

08001880 <__libc_init_array>:
 8001880:	b570      	push	{r4, r5, r6, lr}
 8001882:	2600      	movs	r6, #0
 8001884:	4d0c      	ldr	r5, [pc, #48]	; (80018b8 <__libc_init_array+0x38>)
 8001886:	4c0d      	ldr	r4, [pc, #52]	; (80018bc <__libc_init_array+0x3c>)
 8001888:	1b64      	subs	r4, r4, r5
 800188a:	10a4      	asrs	r4, r4, #2
 800188c:	42a6      	cmp	r6, r4
 800188e:	d109      	bne.n	80018a4 <__libc_init_array+0x24>
 8001890:	f000 f822 	bl	80018d8 <_init>
 8001894:	2600      	movs	r6, #0
 8001896:	4d0a      	ldr	r5, [pc, #40]	; (80018c0 <__libc_init_array+0x40>)
 8001898:	4c0a      	ldr	r4, [pc, #40]	; (80018c4 <__libc_init_array+0x44>)
 800189a:	1b64      	subs	r4, r4, r5
 800189c:	10a4      	asrs	r4, r4, #2
 800189e:	42a6      	cmp	r6, r4
 80018a0:	d105      	bne.n	80018ae <__libc_init_array+0x2e>
 80018a2:	bd70      	pop	{r4, r5, r6, pc}
 80018a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80018a8:	4798      	blx	r3
 80018aa:	3601      	adds	r6, #1
 80018ac:	e7ee      	b.n	800188c <__libc_init_array+0xc>
 80018ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80018b2:	4798      	blx	r3
 80018b4:	3601      	adds	r6, #1
 80018b6:	e7f2      	b.n	800189e <__libc_init_array+0x1e>
 80018b8:	08001960 	.word	0x08001960
 80018bc:	08001960 	.word	0x08001960
 80018c0:	08001960 	.word	0x08001960
 80018c4:	08001964 	.word	0x08001964

080018c8 <memset>:
 80018c8:	4603      	mov	r3, r0
 80018ca:	4402      	add	r2, r0
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d100      	bne.n	80018d2 <memset+0xa>
 80018d0:	4770      	bx	lr
 80018d2:	f803 1b01 	strb.w	r1, [r3], #1
 80018d6:	e7f9      	b.n	80018cc <memset+0x4>

080018d8 <_init>:
 80018d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018da:	bf00      	nop
 80018dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018de:	bc08      	pop	{r3}
 80018e0:	469e      	mov	lr, r3
 80018e2:	4770      	bx	lr

080018e4 <_fini>:
 80018e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e6:	bf00      	nop
 80018e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ea:	bc08      	pop	{r3}
 80018ec:	469e      	mov	lr, r3
 80018ee:	4770      	bx	lr
