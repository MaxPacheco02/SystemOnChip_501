
VTec S 4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001aac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08001bb8  08001bb8  00011bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c44  08001c44  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001c44  08001c44  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c44  08001c44  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c44  08001c44  00011c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c48  08001c48  00011c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000070  08001cbc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08001cbc  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000305c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000101b  00000000  00000000  000230f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a0  00000000  00000000  00024110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f8  00000000  00000000  000245b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175bd  00000000  00000000  000249a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000054b8  00000000  00000000  0003bf65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080d85  00000000  00000000  0004141d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c21a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016a4  00000000  00000000  000c21f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ba0 	.word	0x08001ba0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001ba0 	.word	0x08001ba0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fab6 	bl	80006c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f822 	bl	800019c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f862 	bl	8000220 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init();
 800015c:	f000 f89a 	bl	8000294 <USER_RCC_Init>
  USER_GPIO_Init();
 8000160:	f000 f8b4 	bl	80002cc <USER_GPIO_Init>
  USER_USART3_Init();
 8000164:	f000 f93c 	bl	80003e0 <USER_USART3_Init>
  USER_USART2_Init();
 8000168:	f000 f8ea 	bl	8000340 <USER_USART2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  msg = USER_USART3_Receive();
 800016c:	f000 f962 	bl	8000434 <USER_USART3_Receive>
 8000170:	4603      	mov	r3, r0
 8000172:	b2da      	uxtb	r2, r3
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <main+0x48>)
 8000176:	701a      	strb	r2, [r3, #0]
	  USER_USART2_Transmit((int)msg, 16);
 8000178:	4b06      	ldr	r3, [pc, #24]	; (8000194 <main+0x48>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	2110      	movs	r1, #16
 800017e:	4618      	mov	r0, r3
 8000180:	f000 f908 	bl	8000394 <USER_USART2_Transmit>
	  printf("\r\n");
 8000184:	4804      	ldr	r0, [pc, #16]	; (8000198 <main+0x4c>)
 8000186:	f001 f883 	bl	8001290 <puts>
	  HAL_Delay(1000);
 800018a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800018e:	f000 faf9 	bl	8000784 <HAL_Delay>
	  msg = USER_USART3_Receive();
 8000192:	e7eb      	b.n	800016c <main+0x20>
 8000194:	2000008c 	.word	0x2000008c
 8000198:	08001bb8 	.word	0x08001bb8

0800019c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b090      	sub	sp, #64	; 0x40
 80001a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a2:	f107 0318 	add.w	r3, r7, #24
 80001a6:	2228      	movs	r2, #40	; 0x28
 80001a8:	2100      	movs	r1, #0
 80001aa:	4618      	mov	r0, r3
 80001ac:	f000 fffa 	bl	80011a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]
 80001bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001be:	2302      	movs	r3, #2
 80001c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c2:	2301      	movs	r3, #1
 80001c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001c6:	2310      	movs	r3, #16
 80001c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ca:	2302      	movs	r3, #2
 80001cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001ce:	2300      	movs	r3, #0
 80001d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001d2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d8:	f107 0318 	add.w	r3, r7, #24
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 fbd9 	bl	8000994 <HAL_RCC_OscConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001e8:	f000 f936 	bl	8000458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ec:	230f      	movs	r3, #15
 80001ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f0:	2302      	movs	r3, #2
 80001f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	2102      	movs	r1, #2
 8000206:	4618      	mov	r0, r3
 8000208:	f000 fe46 	bl	8000e98 <HAL_RCC_ClockConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x7a>
  {
	Error_Handler();
 8000212:	f000 f921 	bl	8000458 <Error_Handler>
  }
}
 8000216:	bf00      	nop
 8000218:	3740      	adds	r7, #64	; 0x40
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
	...

08000220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000226:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <MX_GPIO_Init+0x70>)
 8000228:	699b      	ldr	r3, [r3, #24]
 800022a:	4a19      	ldr	r2, [pc, #100]	; (8000290 <MX_GPIO_Init+0x70>)
 800022c:	f043 0310 	orr.w	r3, r3, #16
 8000230:	6193      	str	r3, [r2, #24]
 8000232:	4b17      	ldr	r3, [pc, #92]	; (8000290 <MX_GPIO_Init+0x70>)
 8000234:	699b      	ldr	r3, [r3, #24]
 8000236:	f003 0310 	and.w	r3, r3, #16
 800023a:	60fb      	str	r3, [r7, #12]
 800023c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800023e:	4b14      	ldr	r3, [pc, #80]	; (8000290 <MX_GPIO_Init+0x70>)
 8000240:	699b      	ldr	r3, [r3, #24]
 8000242:	4a13      	ldr	r2, [pc, #76]	; (8000290 <MX_GPIO_Init+0x70>)
 8000244:	f043 0320 	orr.w	r3, r3, #32
 8000248:	6193      	str	r3, [r2, #24]
 800024a:	4b11      	ldr	r3, [pc, #68]	; (8000290 <MX_GPIO_Init+0x70>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	f003 0320 	and.w	r3, r3, #32
 8000252:	60bb      	str	r3, [r7, #8]
 8000254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000256:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <MX_GPIO_Init+0x70>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	4a0d      	ldr	r2, [pc, #52]	; (8000290 <MX_GPIO_Init+0x70>)
 800025c:	f043 0304 	orr.w	r3, r3, #4
 8000260:	6193      	str	r3, [r2, #24]
 8000262:	4b0b      	ldr	r3, [pc, #44]	; (8000290 <MX_GPIO_Init+0x70>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	f003 0304 	and.w	r3, r3, #4
 800026a:	607b      	str	r3, [r7, #4]
 800026c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800026e:	4b08      	ldr	r3, [pc, #32]	; (8000290 <MX_GPIO_Init+0x70>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	4a07      	ldr	r2, [pc, #28]	; (8000290 <MX_GPIO_Init+0x70>)
 8000274:	f043 0308 	orr.w	r3, r3, #8
 8000278:	6193      	str	r3, [r2, #24]
 800027a:	4b05      	ldr	r3, [pc, #20]	; (8000290 <MX_GPIO_Init+0x70>)
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	f003 0308 	and.w	r3, r3, #8
 8000282:	603b      	str	r3, [r7, #0]
 8000284:	683b      	ldr	r3, [r7, #0]

}
 8000286:	bf00      	nop
 8000288:	3714      	adds	r7, #20
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr
 8000290:	40021000 	.word	0x40021000

08000294 <USER_RCC_Init>:

/* USER CODE BEGIN 4 */
void USER_RCC_Init(void){
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
	//I/O port A clock enable
	RCC->APB2ENR	|=	 RCC_APB2ENR_IOPAEN;
 8000298:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <USER_RCC_Init+0x34>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <USER_RCC_Init+0x34>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	6193      	str	r3, [r2, #24]

	RCC->CFGR	|=	 RCC_CFGR_ADCPRE;//	ADC prescaler 1:8 for 8 MHz
 80002a4:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <USER_RCC_Init+0x34>)
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <USER_RCC_Init+0x34>)
 80002aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80002ae:	6053      	str	r3, [r2, #4]


	RCC->APB1ENR	|=	 RCC_APB1ENR_TIM2EN//Timer 2 clock enable
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <USER_RCC_Init+0x34>)
 80002b2:	69db      	ldr	r3, [r3, #28]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <USER_RCC_Init+0x34>)
 80002b6:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 80002ba:	f043 0303 	orr.w	r3, r3, #3
 80002be:	61d3      	str	r3, [r2, #28]
					|	 RCC_APB1ENR_TIM3EN//Timer 3 clock enable
					|	 RCC_APB1ENR_USART3EN//  	USART3 clock enable
					|	 RCC_APB1ENR_USART2EN;//  	USART3 clock enable

}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	40021000 	.word	0x40021000

080002cc <USER_GPIO_Init>:
void USER_GPIO_Init(void){
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
	//pin PB10 (USART3_TX) as alternate function output push-pull, max speed 10MHz
	GPIOB->CRH	&=	~GPIO_CRH_CNF10_0 & ~GPIO_CRH_MODE10_1;
 80002d0:	4b19      	ldr	r3, [pc, #100]	; (8000338 <USER_GPIO_Init+0x6c>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	4a18      	ldr	r2, [pc, #96]	; (8000338 <USER_GPIO_Init+0x6c>)
 80002d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80002da:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|=	 GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10_0; //UART TX
 80002dc:	4b16      	ldr	r3, [pc, #88]	; (8000338 <USER_GPIO_Init+0x6c>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	4a15      	ldr	r2, [pc, #84]	; (8000338 <USER_GPIO_Init+0x6c>)
 80002e2:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
 80002e6:	6053      	str	r3, [r2, #4]

	//pin PB11 (USART3_RX) as input pull-up
	GPIOB->CRH	&=	~GPIO_CRH_CNF11_0 & ~GPIO_CRH_MODE11; //UART RX
 80002e8:	4b13      	ldr	r3, [pc, #76]	; (8000338 <USER_GPIO_Init+0x6c>)
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	4a12      	ldr	r2, [pc, #72]	; (8000338 <USER_GPIO_Init+0x6c>)
 80002ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80002f2:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|=	 GPIO_CRH_CNF11_1;
 80002f4:	4b10      	ldr	r3, [pc, #64]	; (8000338 <USER_GPIO_Init+0x6c>)
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	4a0f      	ldr	r2, [pc, #60]	; (8000338 <USER_GPIO_Init+0x6c>)
 80002fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002fe:	6053      	str	r3, [r2, #4]

	//pin PA2 (USART2_TX) as alternate function output push-pull, max speed 10MHz
	GPIOA->CRL	&=	~GPIO_CRL_CNF2_0 & ~GPIO_CRL_MODE2_1;
 8000300:	4b0e      	ldr	r3, [pc, #56]	; (800033c <USER_GPIO_Init+0x70>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a0d      	ldr	r2, [pc, #52]	; (800033c <USER_GPIO_Init+0x70>)
 8000306:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800030a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF2_1 | GPIO_CRL_MODE2_0;
 800030c:	4b0b      	ldr	r3, [pc, #44]	; (800033c <USER_GPIO_Init+0x70>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a0a      	ldr	r2, [pc, #40]	; (800033c <USER_GPIO_Init+0x70>)
 8000312:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
 8000316:	6013      	str	r3, [r2, #0]

	//pin PA3 (USART_RX) as input pull-up
	GPIOA->CRL	&=	~GPIO_CRL_CNF3_0 & ~GPIO_CRL_MODE3;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <USER_GPIO_Init+0x70>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a07      	ldr	r2, [pc, #28]	; (800033c <USER_GPIO_Init+0x70>)
 800031e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000322:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF3_1;
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <USER_GPIO_Init+0x70>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a04      	ldr	r2, [pc, #16]	; (800033c <USER_GPIO_Init+0x70>)
 800032a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800032e:	6013      	str	r3, [r2, #0]

}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr
 8000338:	40010c00 	.word	0x40010c00
 800033c:	40010800 	.word	0x40010800

08000340 <USER_USART2_Init>:

void USER_USART2_Init(void){
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	USART2->CR1	|=	 USART_CR1_UE;//		USART enabled
 8000344:	4b12      	ldr	r3, [pc, #72]	; (8000390 <USER_USART2_Init+0x50>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a11      	ldr	r2, [pc, #68]	; (8000390 <USER_USART2_Init+0x50>)
 800034a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800034e:	60d3      	str	r3, [r2, #12]
	USART2->CR1	&=	~USART_CR1_M//		  	1 start bit, 8 data bits
 8000350:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <USER_USART2_Init+0x50>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	4a0e      	ldr	r2, [pc, #56]	; (8000390 <USER_USART2_Init+0x50>)
 8000356:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 800035a:	60d3      	str	r3, [r2, #12]
			&	~USART_CR1_PCE;//		parity control disabled
	USART2->CR2	&=	~USART_CR2_STOP;//  		1 stop bit
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <USER_USART2_Init+0x50>)
 800035e:	691b      	ldr	r3, [r3, #16]
 8000360:	4a0b      	ldr	r2, [pc, #44]	; (8000390 <USER_USART2_Init+0x50>)
 8000362:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000366:	6113      	str	r3, [r2, #16]
	USART2->BRR	 =	 0xD05;//			9600 bps -> 208.33,
 8000368:	4b09      	ldr	r3, [pc, #36]	; (8000390 <USER_USART2_Init+0x50>)
 800036a:	f640 5205 	movw	r2, #3333	; 0xd05
 800036e:	609a      	str	r2, [r3, #8]
	//NEW USARTDIV = 32*10^6/(16*115200)=17.361
	//BRR = [17->HEX=11][.361*16->HEX=6]=116
	//USART2->BRR = 0x116;


	USART2->CR1	|=	 USART_CR1_TE;//		        transmitter enabled
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <USER_USART2_Init+0x50>)
 8000372:	68db      	ldr	r3, [r3, #12]
 8000374:	4a06      	ldr	r2, [pc, #24]	; (8000390 <USER_USART2_Init+0x50>)
 8000376:	f043 0308 	orr.w	r3, r3, #8
 800037a:	60d3      	str	r3, [r2, #12]
	USART2->CR1	|=	 USART_CR1_RE;//		        receiver enabled
 800037c:	4b04      	ldr	r3, [pc, #16]	; (8000390 <USER_USART2_Init+0x50>)
 800037e:	68db      	ldr	r3, [r3, #12]
 8000380:	4a03      	ldr	r2, [pc, #12]	; (8000390 <USER_USART2_Init+0x50>)
 8000382:	f043 0304 	orr.w	r3, r3, #4
 8000386:	60d3      	str	r3, [r2, #12]
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr
 8000390:	40004400 	.word	0x40004400

08000394 <USER_USART2_Transmit>:

void USER_USART2_Transmit(uint8_t *pData, uint16_t size ){
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	460b      	mov	r3, r1
 800039e:	807b      	strh	r3, [r7, #2]
	for( int i = 0; i < size; i++ ){
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	e00f      	b.n	80003c6 <USER_USART2_Transmit+0x32>
		while( ( USART2->SR & USART_SR_TXE ) == 0 ){}//	wait until transmit reg is empty
 80003a6:	bf00      	nop
 80003a8:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <USER_USART2_Transmit+0x48>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d0f9      	beq.n	80003a8 <USER_USART2_Transmit+0x14>
		USART2->DR = *pData++;//			transmit data
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	1c5a      	adds	r2, r3, #1
 80003b8:	607a      	str	r2, [r7, #4]
 80003ba:	781a      	ldrb	r2, [r3, #0]
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <USER_USART2_Transmit+0x48>)
 80003be:	605a      	str	r2, [r3, #4]
	for( int i = 0; i < size; i++ ){
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	3301      	adds	r3, #1
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	887b      	ldrh	r3, [r7, #2]
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	429a      	cmp	r2, r3
 80003cc:	dbeb      	blt.n	80003a6 <USER_USART2_Transmit+0x12>
	}
}
 80003ce:	bf00      	nop
 80003d0:	bf00      	nop
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40004400 	.word	0x40004400

080003e0 <USER_USART3_Init>:
uint32_t USER_USART2_Receive(void){
	while((USART2->SR & USART_SR_RXNE) == 0){}
	return USART2->DR;
}

void USER_USART3_Init(void){
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
	USART3->CR1	|=	 USART_CR1_UE;//		USART enabled
 80003e4:	4b12      	ldr	r3, [pc, #72]	; (8000430 <USER_USART3_Init+0x50>)
 80003e6:	68db      	ldr	r3, [r3, #12]
 80003e8:	4a11      	ldr	r2, [pc, #68]	; (8000430 <USER_USART3_Init+0x50>)
 80003ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003ee:	60d3      	str	r3, [r2, #12]
	USART3->CR1	&=	~USART_CR1_M//		  	1 start bit, 8 data bits
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <USER_USART3_Init+0x50>)
 80003f2:	68db      	ldr	r3, [r3, #12]
 80003f4:	4a0e      	ldr	r2, [pc, #56]	; (8000430 <USER_USART3_Init+0x50>)
 80003f6:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 80003fa:	60d3      	str	r3, [r2, #12]
			&	~USART_CR1_PCE;//		parity control disabled
	USART3->CR2	&=	~USART_CR2_STOP;//  		1 stop bit
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <USER_USART3_Init+0x50>)
 80003fe:	691b      	ldr	r3, [r3, #16]
 8000400:	4a0b      	ldr	r2, [pc, #44]	; (8000430 <USER_USART3_Init+0x50>)
 8000402:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000406:	6113      	str	r3, [r2, #16]
	USART3->BRR	 =	 0xD05;//			9600 bps -> 208.33,
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <USER_USART3_Init+0x50>)
 800040a:	f640 5205 	movw	r2, #3333	; 0xd05
 800040e:	609a      	str	r2, [r3, #8]
	//USARTDIV = 32*10^6/(16*9600)
	//NEW USARTDIV = 32*10^6/(16*115200)=17.361
	//BRR = [17->HEX=11][.361*16->HEX=6]=116
	//`->BRR = 0x116;

	USART3->CR1	|=	 USART_CR1_TE;//		        transmitter enabled
 8000410:	4b07      	ldr	r3, [pc, #28]	; (8000430 <USER_USART3_Init+0x50>)
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	4a06      	ldr	r2, [pc, #24]	; (8000430 <USER_USART3_Init+0x50>)
 8000416:	f043 0308 	orr.w	r3, r3, #8
 800041a:	60d3      	str	r3, [r2, #12]
	USART3->CR1	|=	 USART_CR1_RE;//		        receiver enabled
 800041c:	4b04      	ldr	r3, [pc, #16]	; (8000430 <USER_USART3_Init+0x50>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	4a03      	ldr	r2, [pc, #12]	; (8000430 <USER_USART3_Init+0x50>)
 8000422:	f043 0304 	orr.w	r3, r3, #4
 8000426:	60d3      	str	r3, [r2, #12]
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	40004800 	.word	0x40004800

08000434 <USER_USART3_Receive>:
		while( ( USART3->SR & USART_SR_TXE ) == 0 ){}//	wait until transmit reg is empty
		USART3->DR = *pData++;//			transmit data
	}
}

uint32_t USER_USART3_Receive(void){
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
	while((USART3->SR & USART_SR_RXNE) == 0){}
 8000438:	bf00      	nop
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <USER_USART3_Receive+0x20>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f003 0320 	and.w	r3, r3, #32
 8000442:	2b00      	cmp	r3, #0
 8000444:	d0f9      	beq.n	800043a <USER_USART3_Receive+0x6>
	return USART3->DR;
 8000446:	4b03      	ldr	r3, [pc, #12]	; (8000454 <USER_USART3_Receive+0x20>)
 8000448:	685b      	ldr	r3, [r3, #4]
}
 800044a:	4618      	mov	r0, r3
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40004800 	.word	0x40004800

08000458 <Error_Handler>:
/**
  * @brief  This function is executed in case of erropr occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800045c:	b672      	cpsid	i
}
 800045e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000460:	e7fe      	b.n	8000460 <Error_Handler+0x8>
	...

08000464 <_write>:
 */

#include "myprintf.h"
#include "main.h"

int _write(int file, char *ptr, int len){
 8000464:	b480      	push	{r7}
 8000466:	b087      	sub	sp, #28
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8000470:	2300      	movs	r3, #0
 8000472:	617b      	str	r3, [r7, #20]
 8000474:	e00f      	b.n	8000496 <_write+0x32>
		while( ( USART2->SR & USART_SR_TXE ) == 0 ){}
 8000476:	bf00      	nop
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <_write+0x48>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000480:	2b00      	cmp	r3, #0
 8000482:	d0f9      	beq.n	8000478 <_write+0x14>
		USART2->DR = *ptr++;
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	60ba      	str	r2, [r7, #8]
 800048a:	781a      	ldrb	r2, [r3, #0]
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <_write+0x48>)
 800048e:	605a      	str	r2, [r3, #4]
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	3301      	adds	r3, #1
 8000494:	617b      	str	r3, [r7, #20]
 8000496:	697a      	ldr	r2, [r7, #20]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	429a      	cmp	r2, r3
 800049c:	dbeb      	blt.n	8000476 <_write+0x12>
	}
	return len;
 800049e:	687b      	ldr	r3, [r7, #4]
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	371c      	adds	r7, #28
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40004400 	.word	0x40004400

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b6:	4b15      	ldr	r3, [pc, #84]	; (800050c <HAL_MspInit+0x5c>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a14      	ldr	r2, [pc, #80]	; (800050c <HAL_MspInit+0x5c>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6193      	str	r3, [r2, #24]
 80004c2:	4b12      	ldr	r3, [pc, #72]	; (800050c <HAL_MspInit+0x5c>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <HAL_MspInit+0x5c>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <HAL_MspInit+0x5c>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_MspInit+0x5c>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <HAL_MspInit+0x60>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <HAL_MspInit+0x60>)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	40021000 	.word	0x40021000
 8000510:	40010000 	.word	0x40010000

08000514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <NMI_Handler+0x4>

0800051a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <HardFault_Handler+0x4>

08000520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <MemManage_Handler+0x4>

08000526 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052a:	e7fe      	b.n	800052a <BusFault_Handler+0x4>

0800052c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <UsageFault_Handler+0x4>

08000532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr

0800053e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr

0800054a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr

08000556 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055a:	f000 f8f7 	bl	800074c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}

08000562 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b086      	sub	sp, #24
 8000566:	af00      	add	r7, sp, #0
 8000568:	60f8      	str	r0, [r7, #12]
 800056a:	60b9      	str	r1, [r7, #8]
 800056c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
 8000572:	e00a      	b.n	800058a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000574:	f3af 8000 	nop.w
 8000578:	4601      	mov	r1, r0
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	1c5a      	adds	r2, r3, #1
 800057e:	60ba      	str	r2, [r7, #8]
 8000580:	b2ca      	uxtb	r2, r1
 8000582:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	3301      	adds	r3, #1
 8000588:	617b      	str	r3, [r7, #20]
 800058a:	697a      	ldr	r2, [r7, #20]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	429a      	cmp	r2, r3
 8000590:	dbf0      	blt.n	8000574 <_read+0x12>
  }

  return len;
 8000592:	687b      	ldr	r3, [r7, #4]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_close>:
  }
  return len;
}

int _close(int file)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005c2:	605a      	str	r2, [r3, #4]
  return 0;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <_isatty>:

int _isatty(int file)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005d8:	2301      	movs	r3, #1
}
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <_sbrk+0x5c>)
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <_sbrk+0x60>)
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <_sbrk+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d102      	bne.n	800061e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <_sbrk+0x64>)
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <_sbrk+0x68>)
 800061c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <_sbrk+0x64>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	429a      	cmp	r2, r3
 800062a:	d207      	bcs.n	800063c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800062c:	f000 fd90 	bl	8001150 <__errno>
 8000630:	4603      	mov	r3, r0
 8000632:	220c      	movs	r2, #12
 8000634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	e009      	b.n	8000650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <_sbrk+0x64>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <_sbrk+0x64>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	4a05      	ldr	r2, [pc, #20]	; (8000660 <_sbrk+0x64>)
 800064c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800064e:	68fb      	ldr	r3, [r7, #12]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20005000 	.word	0x20005000
 800065c:	00000400 	.word	0x00000400
 8000660:	20000090 	.word	0x20000090
 8000664:	200000a8 	.word	0x200000a8

08000668 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000674:	f7ff fff8 	bl	8000668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000678:	480b      	ldr	r0, [pc, #44]	; (80006a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800067a:	490c      	ldr	r1, [pc, #48]	; (80006ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800067c:	4a0c      	ldr	r2, [pc, #48]	; (80006b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000680:	e002      	b.n	8000688 <LoopCopyDataInit>

08000682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000686:	3304      	adds	r3, #4

08000688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800068c:	d3f9      	bcc.n	8000682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068e:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000690:	4c09      	ldr	r4, [pc, #36]	; (80006b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000694:	e001      	b.n	800069a <LoopFillZerobss>

08000696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000698:	3204      	adds	r2, #4

0800069a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800069c:	d3fb      	bcc.n	8000696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800069e:	f000 fd5d 	bl	800115c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a2:	f7ff fd53 	bl	800014c <main>
  bx lr
 80006a6:	4770      	bx	lr
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006b0:	08001c4c 	.word	0x08001c4c
  ldr r2, =_sbss
 80006b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006b8:	200000a8 	.word	0x200000a8

080006bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC1_2_IRQHandler>
	...

080006c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <HAL_Init+0x28>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <HAL_Init+0x28>)
 80006ca:	f043 0310 	orr.w	r3, r3, #16
 80006ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 f92b 	bl	800092c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 f808 	bl	80006ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006dc:	f7ff fee8 	bl	80004b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40022000 	.word	0x40022000

080006ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_InitTick+0x54>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_InitTick+0x58>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4619      	mov	r1, r3
 80006fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000702:	fbb3 f3f1 	udiv	r3, r3, r1
 8000706:	fbb2 f3f3 	udiv	r3, r2, r3
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f935 	bl	800097a <HAL_SYSTICK_Config>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
 8000718:	e00e      	b.n	8000738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b0f      	cmp	r3, #15
 800071e:	d80a      	bhi.n	8000736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000720:	2200      	movs	r2, #0
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	f04f 30ff 	mov.w	r0, #4294967295
 8000728:	f000 f90b 	bl	8000942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <HAL_InitTick+0x5c>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000732:	2300      	movs	r3, #0
 8000734:	e000      	b.n	8000738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000000 	.word	0x20000000
 8000744:	20000008 	.word	0x20000008
 8000748:	20000004 	.word	0x20000004

0800074c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <HAL_IncTick+0x1c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_IncTick+0x20>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4413      	add	r3, r2
 800075c:	4a03      	ldr	r2, [pc, #12]	; (800076c <HAL_IncTick+0x20>)
 800075e:	6013      	str	r3, [r2, #0]
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	20000008 	.word	0x20000008
 800076c:	20000094 	.word	0x20000094

08000770 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  return uwTick;
 8000774:	4b02      	ldr	r3, [pc, #8]	; (8000780 <HAL_GetTick+0x10>)
 8000776:	681b      	ldr	r3, [r3, #0]
}
 8000778:	4618      	mov	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	20000094 	.word	0x20000094

08000784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800078c:	f7ff fff0 	bl	8000770 <HAL_GetTick>
 8000790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800079c:	d005      	beq.n	80007aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <HAL_Delay+0x44>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	4413      	add	r3, r2
 80007a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007aa:	bf00      	nop
 80007ac:	f7ff ffe0 	bl	8000770 <HAL_GetTick>
 80007b0:	4602      	mov	r2, r0
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d8f7      	bhi.n	80007ac <HAL_Delay+0x28>
  {
  }
}
 80007bc:	bf00      	nop
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000008 	.word	0x20000008

080007cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <__NVIC_SetPriorityGrouping+0x44>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e8:	4013      	ands	r3, r2
 80007ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007fe:	4a04      	ldr	r2, [pc, #16]	; (8000810 <__NVIC_SetPriorityGrouping+0x44>)
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	60d3      	str	r3, [r2, #12]
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <__NVIC_GetPriorityGrouping+0x18>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	0a1b      	lsrs	r3, r3, #8
 800081e:	f003 0307 	and.w	r3, r3, #7
}
 8000822:	4618      	mov	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	2b00      	cmp	r3, #0
 8000842:	db0a      	blt.n	800085a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	490c      	ldr	r1, [pc, #48]	; (800087c <__NVIC_SetPriority+0x4c>)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	0112      	lsls	r2, r2, #4
 8000850:	b2d2      	uxtb	r2, r2
 8000852:	440b      	add	r3, r1
 8000854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000858:	e00a      	b.n	8000870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4908      	ldr	r1, [pc, #32]	; (8000880 <__NVIC_SetPriority+0x50>)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	f003 030f 	and.w	r3, r3, #15
 8000866:	3b04      	subs	r3, #4
 8000868:	0112      	lsls	r2, r2, #4
 800086a:	b2d2      	uxtb	r2, r2
 800086c:	440b      	add	r3, r1
 800086e:	761a      	strb	r2, [r3, #24]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000e100 	.word	0xe000e100
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000884:	b480      	push	{r7}
 8000886:	b089      	sub	sp, #36	; 0x24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	f1c3 0307 	rsb	r3, r3, #7
 800089e:	2b04      	cmp	r3, #4
 80008a0:	bf28      	it	cs
 80008a2:	2304      	movcs	r3, #4
 80008a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3304      	adds	r3, #4
 80008aa:	2b06      	cmp	r3, #6
 80008ac:	d902      	bls.n	80008b4 <NVIC_EncodePriority+0x30>
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3b03      	subs	r3, #3
 80008b2:	e000      	b.n	80008b6 <NVIC_EncodePriority+0x32>
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	f04f 32ff 	mov.w	r2, #4294967295
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43da      	mvns	r2, r3
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	401a      	ands	r2, r3
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008cc:	f04f 31ff 	mov.w	r1, #4294967295
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	fa01 f303 	lsl.w	r3, r1, r3
 80008d6:	43d9      	mvns	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008dc:	4313      	orrs	r3, r2
         );
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3724      	adds	r7, #36	; 0x24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008f8:	d301      	bcc.n	80008fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008fa:	2301      	movs	r3, #1
 80008fc:	e00f      	b.n	800091e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <SysTick_Config+0x40>)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3b01      	subs	r3, #1
 8000904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000906:	210f      	movs	r1, #15
 8000908:	f04f 30ff 	mov.w	r0, #4294967295
 800090c:	f7ff ff90 	bl	8000830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <SysTick_Config+0x40>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <SysTick_Config+0x40>)
 8000918:	2207      	movs	r2, #7
 800091a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	e000e010 	.word	0xe000e010

0800092c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ff49 	bl	80007cc <__NVIC_SetPriorityGrouping>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000942:	b580      	push	{r7, lr}
 8000944:	b086      	sub	sp, #24
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000954:	f7ff ff5e 	bl	8000814 <__NVIC_GetPriorityGrouping>
 8000958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	6978      	ldr	r0, [r7, #20]
 8000960:	f7ff ff90 	bl	8000884 <NVIC_EncodePriority>
 8000964:	4602      	mov	r2, r0
 8000966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff5f 	bl	8000830 <__NVIC_SetPriority>
}
 8000972:	bf00      	nop
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ffb0 	bl	80008e8 <SysTick_Config>
 8000988:	4603      	mov	r3, r0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d101      	bne.n	80009a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e272      	b.n	8000e8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f000 8087 	beq.w	8000ac2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80009b4:	4b92      	ldr	r3, [pc, #584]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f003 030c 	and.w	r3, r3, #12
 80009bc:	2b04      	cmp	r3, #4
 80009be:	d00c      	beq.n	80009da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009c0:	4b8f      	ldr	r3, [pc, #572]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f003 030c 	and.w	r3, r3, #12
 80009c8:	2b08      	cmp	r3, #8
 80009ca:	d112      	bne.n	80009f2 <HAL_RCC_OscConfig+0x5e>
 80009cc:	4b8c      	ldr	r3, [pc, #560]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009d8:	d10b      	bne.n	80009f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009da:	4b89      	ldr	r3, [pc, #548]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d06c      	beq.n	8000ac0 <HAL_RCC_OscConfig+0x12c>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d168      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e24c      	b.n	8000e8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009fa:	d106      	bne.n	8000a0a <HAL_RCC_OscConfig+0x76>
 80009fc:	4b80      	ldr	r3, [pc, #512]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a7f      	ldr	r2, [pc, #508]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	e02e      	b.n	8000a68 <HAL_RCC_OscConfig+0xd4>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d10c      	bne.n	8000a2c <HAL_RCC_OscConfig+0x98>
 8000a12:	4b7b      	ldr	r3, [pc, #492]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a7a      	ldr	r2, [pc, #488]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a1c:	6013      	str	r3, [r2, #0]
 8000a1e:	4b78      	ldr	r3, [pc, #480]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a77      	ldr	r2, [pc, #476]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a28:	6013      	str	r3, [r2, #0]
 8000a2a:	e01d      	b.n	8000a68 <HAL_RCC_OscConfig+0xd4>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a34:	d10c      	bne.n	8000a50 <HAL_RCC_OscConfig+0xbc>
 8000a36:	4b72      	ldr	r3, [pc, #456]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a71      	ldr	r2, [pc, #452]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a40:	6013      	str	r3, [r2, #0]
 8000a42:	4b6f      	ldr	r3, [pc, #444]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a6e      	ldr	r2, [pc, #440]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a4c:	6013      	str	r3, [r2, #0]
 8000a4e:	e00b      	b.n	8000a68 <HAL_RCC_OscConfig+0xd4>
 8000a50:	4b6b      	ldr	r3, [pc, #428]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a6a      	ldr	r2, [pc, #424]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a5a:	6013      	str	r3, [r2, #0]
 8000a5c:	4b68      	ldr	r3, [pc, #416]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a67      	ldr	r2, [pc, #412]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d013      	beq.n	8000a98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a70:	f7ff fe7e 	bl	8000770 <HAL_GetTick>
 8000a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a76:	e008      	b.n	8000a8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a78:	f7ff fe7a 	bl	8000770 <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	2b64      	cmp	r3, #100	; 0x64
 8000a84:	d901      	bls.n	8000a8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000a86:	2303      	movs	r3, #3
 8000a88:	e200      	b.n	8000e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a8a:	4b5d      	ldr	r3, [pc, #372]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d0f0      	beq.n	8000a78 <HAL_RCC_OscConfig+0xe4>
 8000a96:	e014      	b.n	8000ac2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a98:	f7ff fe6a 	bl	8000770 <HAL_GetTick>
 8000a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a9e:	e008      	b.n	8000ab2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000aa0:	f7ff fe66 	bl	8000770 <HAL_GetTick>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	2b64      	cmp	r3, #100	; 0x64
 8000aac:	d901      	bls.n	8000ab2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	e1ec      	b.n	8000e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ab2:	4b53      	ldr	r3, [pc, #332]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f0      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x10c>
 8000abe:	e000      	b.n	8000ac2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d063      	beq.n	8000b96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ace:	4b4c      	ldr	r3, [pc, #304]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 030c 	and.w	r3, r3, #12
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00b      	beq.n	8000af2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ada:	4b49      	ldr	r3, [pc, #292]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f003 030c 	and.w	r3, r3, #12
 8000ae2:	2b08      	cmp	r3, #8
 8000ae4:	d11c      	bne.n	8000b20 <HAL_RCC_OscConfig+0x18c>
 8000ae6:	4b46      	ldr	r3, [pc, #280]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d116      	bne.n	8000b20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000af2:	4b43      	ldr	r3, [pc, #268]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d005      	beq.n	8000b0a <HAL_RCC_OscConfig+0x176>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	691b      	ldr	r3, [r3, #16]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d001      	beq.n	8000b0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e1c0      	b.n	8000e8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b0a:	4b3d      	ldr	r3, [pc, #244]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	4939      	ldr	r1, [pc, #228]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b1e:	e03a      	b.n	8000b96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	691b      	ldr	r3, [r3, #16]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d020      	beq.n	8000b6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b28:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b2e:	f7ff fe1f 	bl	8000770 <HAL_GetTick>
 8000b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b34:	e008      	b.n	8000b48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b36:	f7ff fe1b 	bl	8000770 <HAL_GetTick>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d901      	bls.n	8000b48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000b44:	2303      	movs	r3, #3
 8000b46:	e1a1      	b.n	8000e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b48:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0f0      	beq.n	8000b36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b54:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4927      	ldr	r1, [pc, #156]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000b64:	4313      	orrs	r3, r2
 8000b66:	600b      	str	r3, [r1, #0]
 8000b68:	e015      	b.n	8000b96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b6a:	4b26      	ldr	r3, [pc, #152]	; (8000c04 <HAL_RCC_OscConfig+0x270>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b70:	f7ff fdfe 	bl	8000770 <HAL_GetTick>
 8000b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b76:	e008      	b.n	8000b8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b78:	f7ff fdfa 	bl	8000770 <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d901      	bls.n	8000b8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000b86:	2303      	movs	r3, #3
 8000b88:	e180      	b.n	8000e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1f0      	bne.n	8000b78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d03a      	beq.n	8000c18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d019      	beq.n	8000bde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <HAL_RCC_OscConfig+0x274>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bb0:	f7ff fdde 	bl	8000770 <HAL_GetTick>
 8000bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bb6:	e008      	b.n	8000bca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bb8:	f7ff fdda 	bl	8000770 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d901      	bls.n	8000bca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e160      	b.n	8000e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <HAL_RCC_OscConfig+0x26c>)
 8000bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0f0      	beq.n	8000bb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f000 fa9c 	bl	8001114 <RCC_Delay>
 8000bdc:	e01c      	b.n	8000c18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_RCC_OscConfig+0x274>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000be4:	f7ff fdc4 	bl	8000770 <HAL_GetTick>
 8000be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bea:	e00f      	b.n	8000c0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bec:	f7ff fdc0 	bl	8000770 <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d908      	bls.n	8000c0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e146      	b.n	8000e8c <HAL_RCC_OscConfig+0x4f8>
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000
 8000c04:	42420000 	.word	0x42420000
 8000c08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c0c:	4b92      	ldr	r3, [pc, #584]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1e9      	bne.n	8000bec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f000 80a6 	beq.w	8000d72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c26:	2300      	movs	r3, #0
 8000c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c2a:	4b8b      	ldr	r3, [pc, #556]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d10d      	bne.n	8000c52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b88      	ldr	r3, [pc, #544]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a87      	ldr	r2, [pc, #540]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	61d3      	str	r3, [r2, #28]
 8000c42:	4b85      	ldr	r3, [pc, #532]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c52:	4b82      	ldr	r3, [pc, #520]	; (8000e5c <HAL_RCC_OscConfig+0x4c8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d118      	bne.n	8000c90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c5e:	4b7f      	ldr	r3, [pc, #508]	; (8000e5c <HAL_RCC_OscConfig+0x4c8>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a7e      	ldr	r2, [pc, #504]	; (8000e5c <HAL_RCC_OscConfig+0x4c8>)
 8000c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c6a:	f7ff fd81 	bl	8000770 <HAL_GetTick>
 8000c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c70:	e008      	b.n	8000c84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c72:	f7ff fd7d 	bl	8000770 <HAL_GetTick>
 8000c76:	4602      	mov	r2, r0
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	2b64      	cmp	r3, #100	; 0x64
 8000c7e:	d901      	bls.n	8000c84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000c80:	2303      	movs	r3, #3
 8000c82:	e103      	b.n	8000e8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c84:	4b75      	ldr	r3, [pc, #468]	; (8000e5c <HAL_RCC_OscConfig+0x4c8>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0f0      	beq.n	8000c72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d106      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x312>
 8000c98:	4b6f      	ldr	r3, [pc, #444]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000c9a:	6a1b      	ldr	r3, [r3, #32]
 8000c9c:	4a6e      	ldr	r2, [pc, #440]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	6213      	str	r3, [r2, #32]
 8000ca4:	e02d      	b.n	8000d02 <HAL_RCC_OscConfig+0x36e>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10c      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x334>
 8000cae:	4b6a      	ldr	r3, [pc, #424]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000cb0:	6a1b      	ldr	r3, [r3, #32]
 8000cb2:	4a69      	ldr	r2, [pc, #420]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000cb4:	f023 0301 	bic.w	r3, r3, #1
 8000cb8:	6213      	str	r3, [r2, #32]
 8000cba:	4b67      	ldr	r3, [pc, #412]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000cbc:	6a1b      	ldr	r3, [r3, #32]
 8000cbe:	4a66      	ldr	r2, [pc, #408]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000cc0:	f023 0304 	bic.w	r3, r3, #4
 8000cc4:	6213      	str	r3, [r2, #32]
 8000cc6:	e01c      	b.n	8000d02 <HAL_RCC_OscConfig+0x36e>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	2b05      	cmp	r3, #5
 8000cce:	d10c      	bne.n	8000cea <HAL_RCC_OscConfig+0x356>
 8000cd0:	4b61      	ldr	r3, [pc, #388]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000cd2:	6a1b      	ldr	r3, [r3, #32]
 8000cd4:	4a60      	ldr	r2, [pc, #384]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	6213      	str	r3, [r2, #32]
 8000cdc:	4b5e      	ldr	r3, [pc, #376]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000cde:	6a1b      	ldr	r3, [r3, #32]
 8000ce0:	4a5d      	ldr	r2, [pc, #372]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	6213      	str	r3, [r2, #32]
 8000ce8:	e00b      	b.n	8000d02 <HAL_RCC_OscConfig+0x36e>
 8000cea:	4b5b      	ldr	r3, [pc, #364]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000cec:	6a1b      	ldr	r3, [r3, #32]
 8000cee:	4a5a      	ldr	r2, [pc, #360]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000cf0:	f023 0301 	bic.w	r3, r3, #1
 8000cf4:	6213      	str	r3, [r2, #32]
 8000cf6:	4b58      	ldr	r3, [pc, #352]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000cf8:	6a1b      	ldr	r3, [r3, #32]
 8000cfa:	4a57      	ldr	r2, [pc, #348]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000cfc:	f023 0304 	bic.w	r3, r3, #4
 8000d00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d015      	beq.n	8000d36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d0a:	f7ff fd31 	bl	8000770 <HAL_GetTick>
 8000d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d10:	e00a      	b.n	8000d28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d12:	f7ff fd2d 	bl	8000770 <HAL_GetTick>
 8000d16:	4602      	mov	r2, r0
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d901      	bls.n	8000d28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d24:	2303      	movs	r3, #3
 8000d26:	e0b1      	b.n	8000e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d28:	4b4b      	ldr	r3, [pc, #300]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000d2a:	6a1b      	ldr	r3, [r3, #32]
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d0ee      	beq.n	8000d12 <HAL_RCC_OscConfig+0x37e>
 8000d34:	e014      	b.n	8000d60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d36:	f7ff fd1b 	bl	8000770 <HAL_GetTick>
 8000d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d3c:	e00a      	b.n	8000d54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d3e:	f7ff fd17 	bl	8000770 <HAL_GetTick>
 8000d42:	4602      	mov	r2, r0
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d901      	bls.n	8000d54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000d50:	2303      	movs	r3, #3
 8000d52:	e09b      	b.n	8000e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d54:	4b40      	ldr	r3, [pc, #256]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000d56:	6a1b      	ldr	r3, [r3, #32]
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1ee      	bne.n	8000d3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000d60:	7dfb      	ldrb	r3, [r7, #23]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d105      	bne.n	8000d72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d66:	4b3c      	ldr	r3, [pc, #240]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a3b      	ldr	r2, [pc, #236]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 8087 	beq.w	8000e8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d7c:	4b36      	ldr	r3, [pc, #216]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 030c 	and.w	r3, r3, #12
 8000d84:	2b08      	cmp	r3, #8
 8000d86:	d061      	beq.n	8000e4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69db      	ldr	r3, [r3, #28]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d146      	bne.n	8000e1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d90:	4b33      	ldr	r3, [pc, #204]	; (8000e60 <HAL_RCC_OscConfig+0x4cc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d96:	f7ff fceb 	bl	8000770 <HAL_GetTick>
 8000d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d9e:	f7ff fce7 	bl	8000770 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e06d      	b.n	8000e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000db0:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1f0      	bne.n	8000d9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a1b      	ldr	r3, [r3, #32]
 8000dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc4:	d108      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	4921      	ldr	r1, [pc, #132]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a19      	ldr	r1, [r3, #32]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	430b      	orrs	r3, r1
 8000dea:	491b      	ldr	r1, [pc, #108]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000dec:	4313      	orrs	r3, r2
 8000dee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <HAL_RCC_OscConfig+0x4cc>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df6:	f7ff fcbb 	bl	8000770 <HAL_GetTick>
 8000dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000dfc:	e008      	b.n	8000e10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dfe:	f7ff fcb7 	bl	8000770 <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d901      	bls.n	8000e10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e03d      	b.n	8000e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0f0      	beq.n	8000dfe <HAL_RCC_OscConfig+0x46a>
 8000e1c:	e035      	b.n	8000e8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_RCC_OscConfig+0x4cc>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e24:	f7ff fca4 	bl	8000770 <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e2c:	f7ff fca0 	bl	8000770 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e026      	b.n	8000e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_RCC_OscConfig+0x4c4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1f0      	bne.n	8000e2c <HAL_RCC_OscConfig+0x498>
 8000e4a:	e01e      	b.n	8000e8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	69db      	ldr	r3, [r3, #28]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d107      	bne.n	8000e64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e019      	b.n	8000e8c <HAL_RCC_OscConfig+0x4f8>
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40007000 	.word	0x40007000
 8000e60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_RCC_OscConfig+0x500>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a1b      	ldr	r3, [r3, #32]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d106      	bne.n	8000e86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d001      	beq.n	8000e8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40021000 	.word	0x40021000

08000e98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e0d0      	b.n	800104e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000eac:	4b6a      	ldr	r3, [pc, #424]	; (8001058 <HAL_RCC_ClockConfig+0x1c0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0307 	and.w	r3, r3, #7
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d910      	bls.n	8000edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eba:	4b67      	ldr	r3, [pc, #412]	; (8001058 <HAL_RCC_ClockConfig+0x1c0>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f023 0207 	bic.w	r2, r3, #7
 8000ec2:	4965      	ldr	r1, [pc, #404]	; (8001058 <HAL_RCC_ClockConfig+0x1c0>)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000eca:	4b63      	ldr	r3, [pc, #396]	; (8001058 <HAL_RCC_ClockConfig+0x1c0>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d001      	beq.n	8000edc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e0b8      	b.n	800104e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d020      	beq.n	8000f2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d005      	beq.n	8000f00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ef4:	4b59      	ldr	r3, [pc, #356]	; (800105c <HAL_RCC_ClockConfig+0x1c4>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	4a58      	ldr	r2, [pc, #352]	; (800105c <HAL_RCC_ClockConfig+0x1c4>)
 8000efa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000efe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d005      	beq.n	8000f18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f0c:	4b53      	ldr	r3, [pc, #332]	; (800105c <HAL_RCC_ClockConfig+0x1c4>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	4a52      	ldr	r2, [pc, #328]	; (800105c <HAL_RCC_ClockConfig+0x1c4>)
 8000f12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f18:	4b50      	ldr	r3, [pc, #320]	; (800105c <HAL_RCC_ClockConfig+0x1c4>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	494d      	ldr	r1, [pc, #308]	; (800105c <HAL_RCC_ClockConfig+0x1c4>)
 8000f26:	4313      	orrs	r3, r2
 8000f28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d040      	beq.n	8000fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d107      	bne.n	8000f4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3e:	4b47      	ldr	r3, [pc, #284]	; (800105c <HAL_RCC_ClockConfig+0x1c4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d115      	bne.n	8000f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e07f      	b.n	800104e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d107      	bne.n	8000f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f56:	4b41      	ldr	r3, [pc, #260]	; (800105c <HAL_RCC_ClockConfig+0x1c4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d109      	bne.n	8000f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e073      	b.n	800104e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f66:	4b3d      	ldr	r3, [pc, #244]	; (800105c <HAL_RCC_ClockConfig+0x1c4>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e06b      	b.n	800104e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f76:	4b39      	ldr	r3, [pc, #228]	; (800105c <HAL_RCC_ClockConfig+0x1c4>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f023 0203 	bic.w	r2, r3, #3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	4936      	ldr	r1, [pc, #216]	; (800105c <HAL_RCC_ClockConfig+0x1c4>)
 8000f84:	4313      	orrs	r3, r2
 8000f86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f88:	f7ff fbf2 	bl	8000770 <HAL_GetTick>
 8000f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f8e:	e00a      	b.n	8000fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f90:	f7ff fbee 	bl	8000770 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e053      	b.n	800104e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <HAL_RCC_ClockConfig+0x1c4>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 020c 	and.w	r2, r3, #12
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d1eb      	bne.n	8000f90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <HAL_RCC_ClockConfig+0x1c0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d210      	bcs.n	8000fe8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fc6:	4b24      	ldr	r3, [pc, #144]	; (8001058 <HAL_RCC_ClockConfig+0x1c0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f023 0207 	bic.w	r2, r3, #7
 8000fce:	4922      	ldr	r1, [pc, #136]	; (8001058 <HAL_RCC_ClockConfig+0x1c0>)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_RCC_ClockConfig+0x1c0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d001      	beq.n	8000fe8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e032      	b.n	800104e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d008      	beq.n	8001006 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <HAL_RCC_ClockConfig+0x1c4>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	4916      	ldr	r1, [pc, #88]	; (800105c <HAL_RCC_ClockConfig+0x1c4>)
 8001002:	4313      	orrs	r3, r2
 8001004:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	2b00      	cmp	r3, #0
 8001010:	d009      	beq.n	8001026 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_RCC_ClockConfig+0x1c4>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	490e      	ldr	r1, [pc, #56]	; (800105c <HAL_RCC_ClockConfig+0x1c4>)
 8001022:	4313      	orrs	r3, r2
 8001024:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001026:	f000 f821 	bl	800106c <HAL_RCC_GetSysClockFreq>
 800102a:	4602      	mov	r2, r0
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <HAL_RCC_ClockConfig+0x1c4>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	091b      	lsrs	r3, r3, #4
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	490a      	ldr	r1, [pc, #40]	; (8001060 <HAL_RCC_ClockConfig+0x1c8>)
 8001038:	5ccb      	ldrb	r3, [r1, r3]
 800103a:	fa22 f303 	lsr.w	r3, r2, r3
 800103e:	4a09      	ldr	r2, [pc, #36]	; (8001064 <HAL_RCC_ClockConfig+0x1cc>)
 8001040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_RCC_ClockConfig+0x1d0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fb50 	bl	80006ec <HAL_InitTick>

  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40022000 	.word	0x40022000
 800105c:	40021000 	.word	0x40021000
 8001060:	08001bbc 	.word	0x08001bbc
 8001064:	20000000 	.word	0x20000000
 8001068:	20000004 	.word	0x20000004

0800106c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001086:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <HAL_RCC_GetSysClockFreq+0x94>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	2b04      	cmp	r3, #4
 8001094:	d002      	beq.n	800109c <HAL_RCC_GetSysClockFreq+0x30>
 8001096:	2b08      	cmp	r3, #8
 8001098:	d003      	beq.n	80010a2 <HAL_RCC_GetSysClockFreq+0x36>
 800109a:	e027      	b.n	80010ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800109c:	4b19      	ldr	r3, [pc, #100]	; (8001104 <HAL_RCC_GetSysClockFreq+0x98>)
 800109e:	613b      	str	r3, [r7, #16]
      break;
 80010a0:	e027      	b.n	80010f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	0c9b      	lsrs	r3, r3, #18
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	4a17      	ldr	r2, [pc, #92]	; (8001108 <HAL_RCC_GetSysClockFreq+0x9c>)
 80010ac:	5cd3      	ldrb	r3, [r2, r3]
 80010ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d010      	beq.n	80010dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_RCC_GetSysClockFreq+0x94>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	0c5b      	lsrs	r3, r3, #17
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	4a11      	ldr	r2, [pc, #68]	; (800110c <HAL_RCC_GetSysClockFreq+0xa0>)
 80010c6:	5cd3      	ldrb	r3, [r2, r3]
 80010c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <HAL_RCC_GetSysClockFreq+0x98>)
 80010ce:	fb03 f202 	mul.w	r2, r3, r2
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	e004      	b.n	80010e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <HAL_RCC_GetSysClockFreq+0xa4>)
 80010e0:	fb02 f303 	mul.w	r3, r2, r3
 80010e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	613b      	str	r3, [r7, #16]
      break;
 80010ea:	e002      	b.n	80010f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_RCC_GetSysClockFreq+0x98>)
 80010ee:	613b      	str	r3, [r7, #16]
      break;
 80010f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80010f2:	693b      	ldr	r3, [r7, #16]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	371c      	adds	r7, #28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000
 8001104:	007a1200 	.word	0x007a1200
 8001108:	08001bcc 	.word	0x08001bcc
 800110c:	08001bdc 	.word	0x08001bdc
 8001110:	003d0900 	.word	0x003d0900

08001114 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <RCC_Delay+0x34>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0a      	ldr	r2, [pc, #40]	; (800114c <RCC_Delay+0x38>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	0a5b      	lsrs	r3, r3, #9
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	fb02 f303 	mul.w	r3, r2, r3
 800112e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001130:	bf00      	nop
  }
  while (Delay --);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	1e5a      	subs	r2, r3, #1
 8001136:	60fa      	str	r2, [r7, #12]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f9      	bne.n	8001130 <RCC_Delay+0x1c>
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	20000000 	.word	0x20000000
 800114c:	10624dd3 	.word	0x10624dd3

08001150 <__errno>:
 8001150:	4b01      	ldr	r3, [pc, #4]	; (8001158 <__errno+0x8>)
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	2000000c 	.word	0x2000000c

0800115c <__libc_init_array>:
 800115c:	b570      	push	{r4, r5, r6, lr}
 800115e:	2600      	movs	r6, #0
 8001160:	4d0c      	ldr	r5, [pc, #48]	; (8001194 <__libc_init_array+0x38>)
 8001162:	4c0d      	ldr	r4, [pc, #52]	; (8001198 <__libc_init_array+0x3c>)
 8001164:	1b64      	subs	r4, r4, r5
 8001166:	10a4      	asrs	r4, r4, #2
 8001168:	42a6      	cmp	r6, r4
 800116a:	d109      	bne.n	8001180 <__libc_init_array+0x24>
 800116c:	f000 fd18 	bl	8001ba0 <_init>
 8001170:	2600      	movs	r6, #0
 8001172:	4d0a      	ldr	r5, [pc, #40]	; (800119c <__libc_init_array+0x40>)
 8001174:	4c0a      	ldr	r4, [pc, #40]	; (80011a0 <__libc_init_array+0x44>)
 8001176:	1b64      	subs	r4, r4, r5
 8001178:	10a4      	asrs	r4, r4, #2
 800117a:	42a6      	cmp	r6, r4
 800117c:	d105      	bne.n	800118a <__libc_init_array+0x2e>
 800117e:	bd70      	pop	{r4, r5, r6, pc}
 8001180:	f855 3b04 	ldr.w	r3, [r5], #4
 8001184:	4798      	blx	r3
 8001186:	3601      	adds	r6, #1
 8001188:	e7ee      	b.n	8001168 <__libc_init_array+0xc>
 800118a:	f855 3b04 	ldr.w	r3, [r5], #4
 800118e:	4798      	blx	r3
 8001190:	3601      	adds	r6, #1
 8001192:	e7f2      	b.n	800117a <__libc_init_array+0x1e>
 8001194:	08001c44 	.word	0x08001c44
 8001198:	08001c44 	.word	0x08001c44
 800119c:	08001c44 	.word	0x08001c44
 80011a0:	08001c48 	.word	0x08001c48

080011a4 <memset>:
 80011a4:	4603      	mov	r3, r0
 80011a6:	4402      	add	r2, r0
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d100      	bne.n	80011ae <memset+0xa>
 80011ac:	4770      	bx	lr
 80011ae:	f803 1b01 	strb.w	r1, [r3], #1
 80011b2:	e7f9      	b.n	80011a8 <memset+0x4>

080011b4 <_puts_r>:
 80011b4:	b570      	push	{r4, r5, r6, lr}
 80011b6:	460e      	mov	r6, r1
 80011b8:	4605      	mov	r5, r0
 80011ba:	b118      	cbz	r0, 80011c4 <_puts_r+0x10>
 80011bc:	6983      	ldr	r3, [r0, #24]
 80011be:	b90b      	cbnz	r3, 80011c4 <_puts_r+0x10>
 80011c0:	f000 fa44 	bl	800164c <__sinit>
 80011c4:	69ab      	ldr	r3, [r5, #24]
 80011c6:	68ac      	ldr	r4, [r5, #8]
 80011c8:	b913      	cbnz	r3, 80011d0 <_puts_r+0x1c>
 80011ca:	4628      	mov	r0, r5
 80011cc:	f000 fa3e 	bl	800164c <__sinit>
 80011d0:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <_puts_r+0xd0>)
 80011d2:	429c      	cmp	r4, r3
 80011d4:	d120      	bne.n	8001218 <_puts_r+0x64>
 80011d6:	686c      	ldr	r4, [r5, #4]
 80011d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80011da:	07db      	lsls	r3, r3, #31
 80011dc:	d405      	bmi.n	80011ea <_puts_r+0x36>
 80011de:	89a3      	ldrh	r3, [r4, #12]
 80011e0:	0598      	lsls	r0, r3, #22
 80011e2:	d402      	bmi.n	80011ea <_puts_r+0x36>
 80011e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011e6:	f000 facf 	bl	8001788 <__retarget_lock_acquire_recursive>
 80011ea:	89a3      	ldrh	r3, [r4, #12]
 80011ec:	0719      	lsls	r1, r3, #28
 80011ee:	d51d      	bpl.n	800122c <_puts_r+0x78>
 80011f0:	6923      	ldr	r3, [r4, #16]
 80011f2:	b1db      	cbz	r3, 800122c <_puts_r+0x78>
 80011f4:	3e01      	subs	r6, #1
 80011f6:	68a3      	ldr	r3, [r4, #8]
 80011f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80011fc:	3b01      	subs	r3, #1
 80011fe:	60a3      	str	r3, [r4, #8]
 8001200:	bb39      	cbnz	r1, 8001252 <_puts_r+0x9e>
 8001202:	2b00      	cmp	r3, #0
 8001204:	da38      	bge.n	8001278 <_puts_r+0xc4>
 8001206:	4622      	mov	r2, r4
 8001208:	210a      	movs	r1, #10
 800120a:	4628      	mov	r0, r5
 800120c:	f000 f848 	bl	80012a0 <__swbuf_r>
 8001210:	3001      	adds	r0, #1
 8001212:	d011      	beq.n	8001238 <_puts_r+0x84>
 8001214:	250a      	movs	r5, #10
 8001216:	e011      	b.n	800123c <_puts_r+0x88>
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <_puts_r+0xd4>)
 800121a:	429c      	cmp	r4, r3
 800121c:	d101      	bne.n	8001222 <_puts_r+0x6e>
 800121e:	68ac      	ldr	r4, [r5, #8]
 8001220:	e7da      	b.n	80011d8 <_puts_r+0x24>
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <_puts_r+0xd8>)
 8001224:	429c      	cmp	r4, r3
 8001226:	bf08      	it	eq
 8001228:	68ec      	ldreq	r4, [r5, #12]
 800122a:	e7d5      	b.n	80011d8 <_puts_r+0x24>
 800122c:	4621      	mov	r1, r4
 800122e:	4628      	mov	r0, r5
 8001230:	f000 f888 	bl	8001344 <__swsetup_r>
 8001234:	2800      	cmp	r0, #0
 8001236:	d0dd      	beq.n	80011f4 <_puts_r+0x40>
 8001238:	f04f 35ff 	mov.w	r5, #4294967295
 800123c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800123e:	07da      	lsls	r2, r3, #31
 8001240:	d405      	bmi.n	800124e <_puts_r+0x9a>
 8001242:	89a3      	ldrh	r3, [r4, #12]
 8001244:	059b      	lsls	r3, r3, #22
 8001246:	d402      	bmi.n	800124e <_puts_r+0x9a>
 8001248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800124a:	f000 fa9e 	bl	800178a <__retarget_lock_release_recursive>
 800124e:	4628      	mov	r0, r5
 8001250:	bd70      	pop	{r4, r5, r6, pc}
 8001252:	2b00      	cmp	r3, #0
 8001254:	da04      	bge.n	8001260 <_puts_r+0xac>
 8001256:	69a2      	ldr	r2, [r4, #24]
 8001258:	429a      	cmp	r2, r3
 800125a:	dc06      	bgt.n	800126a <_puts_r+0xb6>
 800125c:	290a      	cmp	r1, #10
 800125e:	d004      	beq.n	800126a <_puts_r+0xb6>
 8001260:	6823      	ldr	r3, [r4, #0]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	6022      	str	r2, [r4, #0]
 8001266:	7019      	strb	r1, [r3, #0]
 8001268:	e7c5      	b.n	80011f6 <_puts_r+0x42>
 800126a:	4622      	mov	r2, r4
 800126c:	4628      	mov	r0, r5
 800126e:	f000 f817 	bl	80012a0 <__swbuf_r>
 8001272:	3001      	adds	r0, #1
 8001274:	d1bf      	bne.n	80011f6 <_puts_r+0x42>
 8001276:	e7df      	b.n	8001238 <_puts_r+0x84>
 8001278:	250a      	movs	r5, #10
 800127a:	6823      	ldr	r3, [r4, #0]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	6022      	str	r2, [r4, #0]
 8001280:	701d      	strb	r5, [r3, #0]
 8001282:	e7db      	b.n	800123c <_puts_r+0x88>
 8001284:	08001c04 	.word	0x08001c04
 8001288:	08001c24 	.word	0x08001c24
 800128c:	08001be4 	.word	0x08001be4

08001290 <puts>:
 8001290:	4b02      	ldr	r3, [pc, #8]	; (800129c <puts+0xc>)
 8001292:	4601      	mov	r1, r0
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	f7ff bf8d 	b.w	80011b4 <_puts_r>
 800129a:	bf00      	nop
 800129c:	2000000c 	.word	0x2000000c

080012a0 <__swbuf_r>:
 80012a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a2:	460e      	mov	r6, r1
 80012a4:	4614      	mov	r4, r2
 80012a6:	4605      	mov	r5, r0
 80012a8:	b118      	cbz	r0, 80012b2 <__swbuf_r+0x12>
 80012aa:	6983      	ldr	r3, [r0, #24]
 80012ac:	b90b      	cbnz	r3, 80012b2 <__swbuf_r+0x12>
 80012ae:	f000 f9cd 	bl	800164c <__sinit>
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <__swbuf_r+0x98>)
 80012b4:	429c      	cmp	r4, r3
 80012b6:	d12b      	bne.n	8001310 <__swbuf_r+0x70>
 80012b8:	686c      	ldr	r4, [r5, #4]
 80012ba:	69a3      	ldr	r3, [r4, #24]
 80012bc:	60a3      	str	r3, [r4, #8]
 80012be:	89a3      	ldrh	r3, [r4, #12]
 80012c0:	071a      	lsls	r2, r3, #28
 80012c2:	d52f      	bpl.n	8001324 <__swbuf_r+0x84>
 80012c4:	6923      	ldr	r3, [r4, #16]
 80012c6:	b36b      	cbz	r3, 8001324 <__swbuf_r+0x84>
 80012c8:	6923      	ldr	r3, [r4, #16]
 80012ca:	6820      	ldr	r0, [r4, #0]
 80012cc:	b2f6      	uxtb	r6, r6
 80012ce:	1ac0      	subs	r0, r0, r3
 80012d0:	6963      	ldr	r3, [r4, #20]
 80012d2:	4637      	mov	r7, r6
 80012d4:	4283      	cmp	r3, r0
 80012d6:	dc04      	bgt.n	80012e2 <__swbuf_r+0x42>
 80012d8:	4621      	mov	r1, r4
 80012da:	4628      	mov	r0, r5
 80012dc:	f000 f922 	bl	8001524 <_fflush_r>
 80012e0:	bb30      	cbnz	r0, 8001330 <__swbuf_r+0x90>
 80012e2:	68a3      	ldr	r3, [r4, #8]
 80012e4:	3001      	adds	r0, #1
 80012e6:	3b01      	subs	r3, #1
 80012e8:	60a3      	str	r3, [r4, #8]
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	6022      	str	r2, [r4, #0]
 80012f0:	701e      	strb	r6, [r3, #0]
 80012f2:	6963      	ldr	r3, [r4, #20]
 80012f4:	4283      	cmp	r3, r0
 80012f6:	d004      	beq.n	8001302 <__swbuf_r+0x62>
 80012f8:	89a3      	ldrh	r3, [r4, #12]
 80012fa:	07db      	lsls	r3, r3, #31
 80012fc:	d506      	bpl.n	800130c <__swbuf_r+0x6c>
 80012fe:	2e0a      	cmp	r6, #10
 8001300:	d104      	bne.n	800130c <__swbuf_r+0x6c>
 8001302:	4621      	mov	r1, r4
 8001304:	4628      	mov	r0, r5
 8001306:	f000 f90d 	bl	8001524 <_fflush_r>
 800130a:	b988      	cbnz	r0, 8001330 <__swbuf_r+0x90>
 800130c:	4638      	mov	r0, r7
 800130e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <__swbuf_r+0x9c>)
 8001312:	429c      	cmp	r4, r3
 8001314:	d101      	bne.n	800131a <__swbuf_r+0x7a>
 8001316:	68ac      	ldr	r4, [r5, #8]
 8001318:	e7cf      	b.n	80012ba <__swbuf_r+0x1a>
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <__swbuf_r+0xa0>)
 800131c:	429c      	cmp	r4, r3
 800131e:	bf08      	it	eq
 8001320:	68ec      	ldreq	r4, [r5, #12]
 8001322:	e7ca      	b.n	80012ba <__swbuf_r+0x1a>
 8001324:	4621      	mov	r1, r4
 8001326:	4628      	mov	r0, r5
 8001328:	f000 f80c 	bl	8001344 <__swsetup_r>
 800132c:	2800      	cmp	r0, #0
 800132e:	d0cb      	beq.n	80012c8 <__swbuf_r+0x28>
 8001330:	f04f 37ff 	mov.w	r7, #4294967295
 8001334:	e7ea      	b.n	800130c <__swbuf_r+0x6c>
 8001336:	bf00      	nop
 8001338:	08001c04 	.word	0x08001c04
 800133c:	08001c24 	.word	0x08001c24
 8001340:	08001be4 	.word	0x08001be4

08001344 <__swsetup_r>:
 8001344:	4b32      	ldr	r3, [pc, #200]	; (8001410 <__swsetup_r+0xcc>)
 8001346:	b570      	push	{r4, r5, r6, lr}
 8001348:	681d      	ldr	r5, [r3, #0]
 800134a:	4606      	mov	r6, r0
 800134c:	460c      	mov	r4, r1
 800134e:	b125      	cbz	r5, 800135a <__swsetup_r+0x16>
 8001350:	69ab      	ldr	r3, [r5, #24]
 8001352:	b913      	cbnz	r3, 800135a <__swsetup_r+0x16>
 8001354:	4628      	mov	r0, r5
 8001356:	f000 f979 	bl	800164c <__sinit>
 800135a:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <__swsetup_r+0xd0>)
 800135c:	429c      	cmp	r4, r3
 800135e:	d10f      	bne.n	8001380 <__swsetup_r+0x3c>
 8001360:	686c      	ldr	r4, [r5, #4]
 8001362:	89a3      	ldrh	r3, [r4, #12]
 8001364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001368:	0719      	lsls	r1, r3, #28
 800136a:	d42c      	bmi.n	80013c6 <__swsetup_r+0x82>
 800136c:	06dd      	lsls	r5, r3, #27
 800136e:	d411      	bmi.n	8001394 <__swsetup_r+0x50>
 8001370:	2309      	movs	r3, #9
 8001372:	6033      	str	r3, [r6, #0]
 8001374:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	81a3      	strh	r3, [r4, #12]
 800137e:	e03e      	b.n	80013fe <__swsetup_r+0xba>
 8001380:	4b25      	ldr	r3, [pc, #148]	; (8001418 <__swsetup_r+0xd4>)
 8001382:	429c      	cmp	r4, r3
 8001384:	d101      	bne.n	800138a <__swsetup_r+0x46>
 8001386:	68ac      	ldr	r4, [r5, #8]
 8001388:	e7eb      	b.n	8001362 <__swsetup_r+0x1e>
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <__swsetup_r+0xd8>)
 800138c:	429c      	cmp	r4, r3
 800138e:	bf08      	it	eq
 8001390:	68ec      	ldreq	r4, [r5, #12]
 8001392:	e7e6      	b.n	8001362 <__swsetup_r+0x1e>
 8001394:	0758      	lsls	r0, r3, #29
 8001396:	d512      	bpl.n	80013be <__swsetup_r+0x7a>
 8001398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800139a:	b141      	cbz	r1, 80013ae <__swsetup_r+0x6a>
 800139c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013a0:	4299      	cmp	r1, r3
 80013a2:	d002      	beq.n	80013aa <__swsetup_r+0x66>
 80013a4:	4630      	mov	r0, r6
 80013a6:	f000 fa57 	bl	8001858 <_free_r>
 80013aa:	2300      	movs	r3, #0
 80013ac:	6363      	str	r3, [r4, #52]	; 0x34
 80013ae:	89a3      	ldrh	r3, [r4, #12]
 80013b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80013b4:	81a3      	strh	r3, [r4, #12]
 80013b6:	2300      	movs	r3, #0
 80013b8:	6063      	str	r3, [r4, #4]
 80013ba:	6923      	ldr	r3, [r4, #16]
 80013bc:	6023      	str	r3, [r4, #0]
 80013be:	89a3      	ldrh	r3, [r4, #12]
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	81a3      	strh	r3, [r4, #12]
 80013c6:	6923      	ldr	r3, [r4, #16]
 80013c8:	b94b      	cbnz	r3, 80013de <__swsetup_r+0x9a>
 80013ca:	89a3      	ldrh	r3, [r4, #12]
 80013cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80013d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013d4:	d003      	beq.n	80013de <__swsetup_r+0x9a>
 80013d6:	4621      	mov	r1, r4
 80013d8:	4630      	mov	r0, r6
 80013da:	f000 f9fd 	bl	80017d8 <__smakebuf_r>
 80013de:	89a0      	ldrh	r0, [r4, #12]
 80013e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80013e4:	f010 0301 	ands.w	r3, r0, #1
 80013e8:	d00a      	beq.n	8001400 <__swsetup_r+0xbc>
 80013ea:	2300      	movs	r3, #0
 80013ec:	60a3      	str	r3, [r4, #8]
 80013ee:	6963      	ldr	r3, [r4, #20]
 80013f0:	425b      	negs	r3, r3
 80013f2:	61a3      	str	r3, [r4, #24]
 80013f4:	6923      	ldr	r3, [r4, #16]
 80013f6:	b943      	cbnz	r3, 800140a <__swsetup_r+0xc6>
 80013f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80013fc:	d1ba      	bne.n	8001374 <__swsetup_r+0x30>
 80013fe:	bd70      	pop	{r4, r5, r6, pc}
 8001400:	0781      	lsls	r1, r0, #30
 8001402:	bf58      	it	pl
 8001404:	6963      	ldrpl	r3, [r4, #20]
 8001406:	60a3      	str	r3, [r4, #8]
 8001408:	e7f4      	b.n	80013f4 <__swsetup_r+0xb0>
 800140a:	2000      	movs	r0, #0
 800140c:	e7f7      	b.n	80013fe <__swsetup_r+0xba>
 800140e:	bf00      	nop
 8001410:	2000000c 	.word	0x2000000c
 8001414:	08001c04 	.word	0x08001c04
 8001418:	08001c24 	.word	0x08001c24
 800141c:	08001be4 	.word	0x08001be4

08001420 <__sflush_r>:
 8001420:	898a      	ldrh	r2, [r1, #12]
 8001422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001424:	4605      	mov	r5, r0
 8001426:	0710      	lsls	r0, r2, #28
 8001428:	460c      	mov	r4, r1
 800142a:	d457      	bmi.n	80014dc <__sflush_r+0xbc>
 800142c:	684b      	ldr	r3, [r1, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	dc04      	bgt.n	800143c <__sflush_r+0x1c>
 8001432:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001434:	2b00      	cmp	r3, #0
 8001436:	dc01      	bgt.n	800143c <__sflush_r+0x1c>
 8001438:	2000      	movs	r0, #0
 800143a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800143c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800143e:	2e00      	cmp	r6, #0
 8001440:	d0fa      	beq.n	8001438 <__sflush_r+0x18>
 8001442:	2300      	movs	r3, #0
 8001444:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001448:	682f      	ldr	r7, [r5, #0]
 800144a:	602b      	str	r3, [r5, #0]
 800144c:	d032      	beq.n	80014b4 <__sflush_r+0x94>
 800144e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001450:	89a3      	ldrh	r3, [r4, #12]
 8001452:	075a      	lsls	r2, r3, #29
 8001454:	d505      	bpl.n	8001462 <__sflush_r+0x42>
 8001456:	6863      	ldr	r3, [r4, #4]
 8001458:	1ac0      	subs	r0, r0, r3
 800145a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800145c:	b10b      	cbz	r3, 8001462 <__sflush_r+0x42>
 800145e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001460:	1ac0      	subs	r0, r0, r3
 8001462:	2300      	movs	r3, #0
 8001464:	4602      	mov	r2, r0
 8001466:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001468:	4628      	mov	r0, r5
 800146a:	6a21      	ldr	r1, [r4, #32]
 800146c:	47b0      	blx	r6
 800146e:	1c43      	adds	r3, r0, #1
 8001470:	89a3      	ldrh	r3, [r4, #12]
 8001472:	d106      	bne.n	8001482 <__sflush_r+0x62>
 8001474:	6829      	ldr	r1, [r5, #0]
 8001476:	291d      	cmp	r1, #29
 8001478:	d82c      	bhi.n	80014d4 <__sflush_r+0xb4>
 800147a:	4a29      	ldr	r2, [pc, #164]	; (8001520 <__sflush_r+0x100>)
 800147c:	40ca      	lsrs	r2, r1
 800147e:	07d6      	lsls	r6, r2, #31
 8001480:	d528      	bpl.n	80014d4 <__sflush_r+0xb4>
 8001482:	2200      	movs	r2, #0
 8001484:	6062      	str	r2, [r4, #4]
 8001486:	6922      	ldr	r2, [r4, #16]
 8001488:	04d9      	lsls	r1, r3, #19
 800148a:	6022      	str	r2, [r4, #0]
 800148c:	d504      	bpl.n	8001498 <__sflush_r+0x78>
 800148e:	1c42      	adds	r2, r0, #1
 8001490:	d101      	bne.n	8001496 <__sflush_r+0x76>
 8001492:	682b      	ldr	r3, [r5, #0]
 8001494:	b903      	cbnz	r3, 8001498 <__sflush_r+0x78>
 8001496:	6560      	str	r0, [r4, #84]	; 0x54
 8001498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800149a:	602f      	str	r7, [r5, #0]
 800149c:	2900      	cmp	r1, #0
 800149e:	d0cb      	beq.n	8001438 <__sflush_r+0x18>
 80014a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014a4:	4299      	cmp	r1, r3
 80014a6:	d002      	beq.n	80014ae <__sflush_r+0x8e>
 80014a8:	4628      	mov	r0, r5
 80014aa:	f000 f9d5 	bl	8001858 <_free_r>
 80014ae:	2000      	movs	r0, #0
 80014b0:	6360      	str	r0, [r4, #52]	; 0x34
 80014b2:	e7c2      	b.n	800143a <__sflush_r+0x1a>
 80014b4:	6a21      	ldr	r1, [r4, #32]
 80014b6:	2301      	movs	r3, #1
 80014b8:	4628      	mov	r0, r5
 80014ba:	47b0      	blx	r6
 80014bc:	1c41      	adds	r1, r0, #1
 80014be:	d1c7      	bne.n	8001450 <__sflush_r+0x30>
 80014c0:	682b      	ldr	r3, [r5, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0c4      	beq.n	8001450 <__sflush_r+0x30>
 80014c6:	2b1d      	cmp	r3, #29
 80014c8:	d001      	beq.n	80014ce <__sflush_r+0xae>
 80014ca:	2b16      	cmp	r3, #22
 80014cc:	d101      	bne.n	80014d2 <__sflush_r+0xb2>
 80014ce:	602f      	str	r7, [r5, #0]
 80014d0:	e7b2      	b.n	8001438 <__sflush_r+0x18>
 80014d2:	89a3      	ldrh	r3, [r4, #12]
 80014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014d8:	81a3      	strh	r3, [r4, #12]
 80014da:	e7ae      	b.n	800143a <__sflush_r+0x1a>
 80014dc:	690f      	ldr	r7, [r1, #16]
 80014de:	2f00      	cmp	r7, #0
 80014e0:	d0aa      	beq.n	8001438 <__sflush_r+0x18>
 80014e2:	0793      	lsls	r3, r2, #30
 80014e4:	bf18      	it	ne
 80014e6:	2300      	movne	r3, #0
 80014e8:	680e      	ldr	r6, [r1, #0]
 80014ea:	bf08      	it	eq
 80014ec:	694b      	ldreq	r3, [r1, #20]
 80014ee:	1bf6      	subs	r6, r6, r7
 80014f0:	600f      	str	r7, [r1, #0]
 80014f2:	608b      	str	r3, [r1, #8]
 80014f4:	2e00      	cmp	r6, #0
 80014f6:	dd9f      	ble.n	8001438 <__sflush_r+0x18>
 80014f8:	4633      	mov	r3, r6
 80014fa:	463a      	mov	r2, r7
 80014fc:	4628      	mov	r0, r5
 80014fe:	6a21      	ldr	r1, [r4, #32]
 8001500:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001504:	47e0      	blx	ip
 8001506:	2800      	cmp	r0, #0
 8001508:	dc06      	bgt.n	8001518 <__sflush_r+0xf8>
 800150a:	89a3      	ldrh	r3, [r4, #12]
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001514:	81a3      	strh	r3, [r4, #12]
 8001516:	e790      	b.n	800143a <__sflush_r+0x1a>
 8001518:	4407      	add	r7, r0
 800151a:	1a36      	subs	r6, r6, r0
 800151c:	e7ea      	b.n	80014f4 <__sflush_r+0xd4>
 800151e:	bf00      	nop
 8001520:	20400001 	.word	0x20400001

08001524 <_fflush_r>:
 8001524:	b538      	push	{r3, r4, r5, lr}
 8001526:	690b      	ldr	r3, [r1, #16]
 8001528:	4605      	mov	r5, r0
 800152a:	460c      	mov	r4, r1
 800152c:	b913      	cbnz	r3, 8001534 <_fflush_r+0x10>
 800152e:	2500      	movs	r5, #0
 8001530:	4628      	mov	r0, r5
 8001532:	bd38      	pop	{r3, r4, r5, pc}
 8001534:	b118      	cbz	r0, 800153e <_fflush_r+0x1a>
 8001536:	6983      	ldr	r3, [r0, #24]
 8001538:	b90b      	cbnz	r3, 800153e <_fflush_r+0x1a>
 800153a:	f000 f887 	bl	800164c <__sinit>
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <_fflush_r+0x6c>)
 8001540:	429c      	cmp	r4, r3
 8001542:	d11b      	bne.n	800157c <_fflush_r+0x58>
 8001544:	686c      	ldr	r4, [r5, #4]
 8001546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0ef      	beq.n	800152e <_fflush_r+0xa>
 800154e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001550:	07d0      	lsls	r0, r2, #31
 8001552:	d404      	bmi.n	800155e <_fflush_r+0x3a>
 8001554:	0599      	lsls	r1, r3, #22
 8001556:	d402      	bmi.n	800155e <_fflush_r+0x3a>
 8001558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800155a:	f000 f915 	bl	8001788 <__retarget_lock_acquire_recursive>
 800155e:	4628      	mov	r0, r5
 8001560:	4621      	mov	r1, r4
 8001562:	f7ff ff5d 	bl	8001420 <__sflush_r>
 8001566:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001568:	4605      	mov	r5, r0
 800156a:	07da      	lsls	r2, r3, #31
 800156c:	d4e0      	bmi.n	8001530 <_fflush_r+0xc>
 800156e:	89a3      	ldrh	r3, [r4, #12]
 8001570:	059b      	lsls	r3, r3, #22
 8001572:	d4dd      	bmi.n	8001530 <_fflush_r+0xc>
 8001574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001576:	f000 f908 	bl	800178a <__retarget_lock_release_recursive>
 800157a:	e7d9      	b.n	8001530 <_fflush_r+0xc>
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <_fflush_r+0x70>)
 800157e:	429c      	cmp	r4, r3
 8001580:	d101      	bne.n	8001586 <_fflush_r+0x62>
 8001582:	68ac      	ldr	r4, [r5, #8]
 8001584:	e7df      	b.n	8001546 <_fflush_r+0x22>
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <_fflush_r+0x74>)
 8001588:	429c      	cmp	r4, r3
 800158a:	bf08      	it	eq
 800158c:	68ec      	ldreq	r4, [r5, #12]
 800158e:	e7da      	b.n	8001546 <_fflush_r+0x22>
 8001590:	08001c04 	.word	0x08001c04
 8001594:	08001c24 	.word	0x08001c24
 8001598:	08001be4 	.word	0x08001be4

0800159c <std>:
 800159c:	2300      	movs	r3, #0
 800159e:	b510      	push	{r4, lr}
 80015a0:	4604      	mov	r4, r0
 80015a2:	e9c0 3300 	strd	r3, r3, [r0]
 80015a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80015aa:	6083      	str	r3, [r0, #8]
 80015ac:	8181      	strh	r1, [r0, #12]
 80015ae:	6643      	str	r3, [r0, #100]	; 0x64
 80015b0:	81c2      	strh	r2, [r0, #14]
 80015b2:	6183      	str	r3, [r0, #24]
 80015b4:	4619      	mov	r1, r3
 80015b6:	2208      	movs	r2, #8
 80015b8:	305c      	adds	r0, #92	; 0x5c
 80015ba:	f7ff fdf3 	bl	80011a4 <memset>
 80015be:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <std+0x38>)
 80015c0:	6224      	str	r4, [r4, #32]
 80015c2:	6263      	str	r3, [r4, #36]	; 0x24
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <std+0x3c>)
 80015c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <std+0x40>)
 80015ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <std+0x44>)
 80015ce:	6323      	str	r3, [r4, #48]	; 0x30
 80015d0:	bd10      	pop	{r4, pc}
 80015d2:	bf00      	nop
 80015d4:	08001a31 	.word	0x08001a31
 80015d8:	08001a53 	.word	0x08001a53
 80015dc:	08001a8b 	.word	0x08001a8b
 80015e0:	08001aaf 	.word	0x08001aaf

080015e4 <_cleanup_r>:
 80015e4:	4901      	ldr	r1, [pc, #4]	; (80015ec <_cleanup_r+0x8>)
 80015e6:	f000 b8af 	b.w	8001748 <_fwalk_reent>
 80015ea:	bf00      	nop
 80015ec:	08001525 	.word	0x08001525

080015f0 <__sfmoreglue>:
 80015f0:	2268      	movs	r2, #104	; 0x68
 80015f2:	b570      	push	{r4, r5, r6, lr}
 80015f4:	1e4d      	subs	r5, r1, #1
 80015f6:	4355      	muls	r5, r2
 80015f8:	460e      	mov	r6, r1
 80015fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80015fe:	f000 f993 	bl	8001928 <_malloc_r>
 8001602:	4604      	mov	r4, r0
 8001604:	b140      	cbz	r0, 8001618 <__sfmoreglue+0x28>
 8001606:	2100      	movs	r1, #0
 8001608:	e9c0 1600 	strd	r1, r6, [r0]
 800160c:	300c      	adds	r0, #12
 800160e:	60a0      	str	r0, [r4, #8]
 8001610:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001614:	f7ff fdc6 	bl	80011a4 <memset>
 8001618:	4620      	mov	r0, r4
 800161a:	bd70      	pop	{r4, r5, r6, pc}

0800161c <__sfp_lock_acquire>:
 800161c:	4801      	ldr	r0, [pc, #4]	; (8001624 <__sfp_lock_acquire+0x8>)
 800161e:	f000 b8b3 	b.w	8001788 <__retarget_lock_acquire_recursive>
 8001622:	bf00      	nop
 8001624:	20000099 	.word	0x20000099

08001628 <__sfp_lock_release>:
 8001628:	4801      	ldr	r0, [pc, #4]	; (8001630 <__sfp_lock_release+0x8>)
 800162a:	f000 b8ae 	b.w	800178a <__retarget_lock_release_recursive>
 800162e:	bf00      	nop
 8001630:	20000099 	.word	0x20000099

08001634 <__sinit_lock_acquire>:
 8001634:	4801      	ldr	r0, [pc, #4]	; (800163c <__sinit_lock_acquire+0x8>)
 8001636:	f000 b8a7 	b.w	8001788 <__retarget_lock_acquire_recursive>
 800163a:	bf00      	nop
 800163c:	2000009a 	.word	0x2000009a

08001640 <__sinit_lock_release>:
 8001640:	4801      	ldr	r0, [pc, #4]	; (8001648 <__sinit_lock_release+0x8>)
 8001642:	f000 b8a2 	b.w	800178a <__retarget_lock_release_recursive>
 8001646:	bf00      	nop
 8001648:	2000009a 	.word	0x2000009a

0800164c <__sinit>:
 800164c:	b510      	push	{r4, lr}
 800164e:	4604      	mov	r4, r0
 8001650:	f7ff fff0 	bl	8001634 <__sinit_lock_acquire>
 8001654:	69a3      	ldr	r3, [r4, #24]
 8001656:	b11b      	cbz	r3, 8001660 <__sinit+0x14>
 8001658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800165c:	f7ff bff0 	b.w	8001640 <__sinit_lock_release>
 8001660:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001664:	6523      	str	r3, [r4, #80]	; 0x50
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <__sinit+0x68>)
 8001668:	4a13      	ldr	r2, [pc, #76]	; (80016b8 <__sinit+0x6c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	62a2      	str	r2, [r4, #40]	; 0x28
 800166e:	42a3      	cmp	r3, r4
 8001670:	bf08      	it	eq
 8001672:	2301      	moveq	r3, #1
 8001674:	4620      	mov	r0, r4
 8001676:	bf08      	it	eq
 8001678:	61a3      	streq	r3, [r4, #24]
 800167a:	f000 f81f 	bl	80016bc <__sfp>
 800167e:	6060      	str	r0, [r4, #4]
 8001680:	4620      	mov	r0, r4
 8001682:	f000 f81b 	bl	80016bc <__sfp>
 8001686:	60a0      	str	r0, [r4, #8]
 8001688:	4620      	mov	r0, r4
 800168a:	f000 f817 	bl	80016bc <__sfp>
 800168e:	2200      	movs	r2, #0
 8001690:	2104      	movs	r1, #4
 8001692:	60e0      	str	r0, [r4, #12]
 8001694:	6860      	ldr	r0, [r4, #4]
 8001696:	f7ff ff81 	bl	800159c <std>
 800169a:	2201      	movs	r2, #1
 800169c:	2109      	movs	r1, #9
 800169e:	68a0      	ldr	r0, [r4, #8]
 80016a0:	f7ff ff7c 	bl	800159c <std>
 80016a4:	2202      	movs	r2, #2
 80016a6:	2112      	movs	r1, #18
 80016a8:	68e0      	ldr	r0, [r4, #12]
 80016aa:	f7ff ff77 	bl	800159c <std>
 80016ae:	2301      	movs	r3, #1
 80016b0:	61a3      	str	r3, [r4, #24]
 80016b2:	e7d1      	b.n	8001658 <__sinit+0xc>
 80016b4:	08001be0 	.word	0x08001be0
 80016b8:	080015e5 	.word	0x080015e5

080016bc <__sfp>:
 80016bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016be:	4607      	mov	r7, r0
 80016c0:	f7ff ffac 	bl	800161c <__sfp_lock_acquire>
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <__sfp+0x84>)
 80016c6:	681e      	ldr	r6, [r3, #0]
 80016c8:	69b3      	ldr	r3, [r6, #24]
 80016ca:	b913      	cbnz	r3, 80016d2 <__sfp+0x16>
 80016cc:	4630      	mov	r0, r6
 80016ce:	f7ff ffbd 	bl	800164c <__sinit>
 80016d2:	3648      	adds	r6, #72	; 0x48
 80016d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80016d8:	3b01      	subs	r3, #1
 80016da:	d503      	bpl.n	80016e4 <__sfp+0x28>
 80016dc:	6833      	ldr	r3, [r6, #0]
 80016de:	b30b      	cbz	r3, 8001724 <__sfp+0x68>
 80016e0:	6836      	ldr	r6, [r6, #0]
 80016e2:	e7f7      	b.n	80016d4 <__sfp+0x18>
 80016e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80016e8:	b9d5      	cbnz	r5, 8001720 <__sfp+0x64>
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <__sfp+0x88>)
 80016ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80016f0:	60e3      	str	r3, [r4, #12]
 80016f2:	6665      	str	r5, [r4, #100]	; 0x64
 80016f4:	f000 f847 	bl	8001786 <__retarget_lock_init_recursive>
 80016f8:	f7ff ff96 	bl	8001628 <__sfp_lock_release>
 80016fc:	2208      	movs	r2, #8
 80016fe:	4629      	mov	r1, r5
 8001700:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001704:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001708:	6025      	str	r5, [r4, #0]
 800170a:	61a5      	str	r5, [r4, #24]
 800170c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001710:	f7ff fd48 	bl	80011a4 <memset>
 8001714:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001718:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800171c:	4620      	mov	r0, r4
 800171e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001720:	3468      	adds	r4, #104	; 0x68
 8001722:	e7d9      	b.n	80016d8 <__sfp+0x1c>
 8001724:	2104      	movs	r1, #4
 8001726:	4638      	mov	r0, r7
 8001728:	f7ff ff62 	bl	80015f0 <__sfmoreglue>
 800172c:	4604      	mov	r4, r0
 800172e:	6030      	str	r0, [r6, #0]
 8001730:	2800      	cmp	r0, #0
 8001732:	d1d5      	bne.n	80016e0 <__sfp+0x24>
 8001734:	f7ff ff78 	bl	8001628 <__sfp_lock_release>
 8001738:	230c      	movs	r3, #12
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	e7ee      	b.n	800171c <__sfp+0x60>
 800173e:	bf00      	nop
 8001740:	08001be0 	.word	0x08001be0
 8001744:	ffff0001 	.word	0xffff0001

08001748 <_fwalk_reent>:
 8001748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800174c:	4606      	mov	r6, r0
 800174e:	4688      	mov	r8, r1
 8001750:	2700      	movs	r7, #0
 8001752:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001756:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800175a:	f1b9 0901 	subs.w	r9, r9, #1
 800175e:	d505      	bpl.n	800176c <_fwalk_reent+0x24>
 8001760:	6824      	ldr	r4, [r4, #0]
 8001762:	2c00      	cmp	r4, #0
 8001764:	d1f7      	bne.n	8001756 <_fwalk_reent+0xe>
 8001766:	4638      	mov	r0, r7
 8001768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800176c:	89ab      	ldrh	r3, [r5, #12]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d907      	bls.n	8001782 <_fwalk_reent+0x3a>
 8001772:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001776:	3301      	adds	r3, #1
 8001778:	d003      	beq.n	8001782 <_fwalk_reent+0x3a>
 800177a:	4629      	mov	r1, r5
 800177c:	4630      	mov	r0, r6
 800177e:	47c0      	blx	r8
 8001780:	4307      	orrs	r7, r0
 8001782:	3568      	adds	r5, #104	; 0x68
 8001784:	e7e9      	b.n	800175a <_fwalk_reent+0x12>

08001786 <__retarget_lock_init_recursive>:
 8001786:	4770      	bx	lr

08001788 <__retarget_lock_acquire_recursive>:
 8001788:	4770      	bx	lr

0800178a <__retarget_lock_release_recursive>:
 800178a:	4770      	bx	lr

0800178c <__swhatbuf_r>:
 800178c:	b570      	push	{r4, r5, r6, lr}
 800178e:	460e      	mov	r6, r1
 8001790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001794:	4614      	mov	r4, r2
 8001796:	2900      	cmp	r1, #0
 8001798:	461d      	mov	r5, r3
 800179a:	b096      	sub	sp, #88	; 0x58
 800179c:	da08      	bge.n	80017b0 <__swhatbuf_r+0x24>
 800179e:	2200      	movs	r2, #0
 80017a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80017a4:	602a      	str	r2, [r5, #0]
 80017a6:	061a      	lsls	r2, r3, #24
 80017a8:	d410      	bmi.n	80017cc <__swhatbuf_r+0x40>
 80017aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ae:	e00e      	b.n	80017ce <__swhatbuf_r+0x42>
 80017b0:	466a      	mov	r2, sp
 80017b2:	f000 f9a3 	bl	8001afc <_fstat_r>
 80017b6:	2800      	cmp	r0, #0
 80017b8:	dbf1      	blt.n	800179e <__swhatbuf_r+0x12>
 80017ba:	9a01      	ldr	r2, [sp, #4]
 80017bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80017c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80017c4:	425a      	negs	r2, r3
 80017c6:	415a      	adcs	r2, r3
 80017c8:	602a      	str	r2, [r5, #0]
 80017ca:	e7ee      	b.n	80017aa <__swhatbuf_r+0x1e>
 80017cc:	2340      	movs	r3, #64	; 0x40
 80017ce:	2000      	movs	r0, #0
 80017d0:	6023      	str	r3, [r4, #0]
 80017d2:	b016      	add	sp, #88	; 0x58
 80017d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080017d8 <__smakebuf_r>:
 80017d8:	898b      	ldrh	r3, [r1, #12]
 80017da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80017dc:	079d      	lsls	r5, r3, #30
 80017de:	4606      	mov	r6, r0
 80017e0:	460c      	mov	r4, r1
 80017e2:	d507      	bpl.n	80017f4 <__smakebuf_r+0x1c>
 80017e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80017e8:	6023      	str	r3, [r4, #0]
 80017ea:	6123      	str	r3, [r4, #16]
 80017ec:	2301      	movs	r3, #1
 80017ee:	6163      	str	r3, [r4, #20]
 80017f0:	b002      	add	sp, #8
 80017f2:	bd70      	pop	{r4, r5, r6, pc}
 80017f4:	466a      	mov	r2, sp
 80017f6:	ab01      	add	r3, sp, #4
 80017f8:	f7ff ffc8 	bl	800178c <__swhatbuf_r>
 80017fc:	9900      	ldr	r1, [sp, #0]
 80017fe:	4605      	mov	r5, r0
 8001800:	4630      	mov	r0, r6
 8001802:	f000 f891 	bl	8001928 <_malloc_r>
 8001806:	b948      	cbnz	r0, 800181c <__smakebuf_r+0x44>
 8001808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800180c:	059a      	lsls	r2, r3, #22
 800180e:	d4ef      	bmi.n	80017f0 <__smakebuf_r+0x18>
 8001810:	f023 0303 	bic.w	r3, r3, #3
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	81a3      	strh	r3, [r4, #12]
 800181a:	e7e3      	b.n	80017e4 <__smakebuf_r+0xc>
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <__smakebuf_r+0x7c>)
 800181e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001820:	89a3      	ldrh	r3, [r4, #12]
 8001822:	6020      	str	r0, [r4, #0]
 8001824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001828:	81a3      	strh	r3, [r4, #12]
 800182a:	9b00      	ldr	r3, [sp, #0]
 800182c:	6120      	str	r0, [r4, #16]
 800182e:	6163      	str	r3, [r4, #20]
 8001830:	9b01      	ldr	r3, [sp, #4]
 8001832:	b15b      	cbz	r3, 800184c <__smakebuf_r+0x74>
 8001834:	4630      	mov	r0, r6
 8001836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800183a:	f000 f971 	bl	8001b20 <_isatty_r>
 800183e:	b128      	cbz	r0, 800184c <__smakebuf_r+0x74>
 8001840:	89a3      	ldrh	r3, [r4, #12]
 8001842:	f023 0303 	bic.w	r3, r3, #3
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	81a3      	strh	r3, [r4, #12]
 800184c:	89a0      	ldrh	r0, [r4, #12]
 800184e:	4305      	orrs	r5, r0
 8001850:	81a5      	strh	r5, [r4, #12]
 8001852:	e7cd      	b.n	80017f0 <__smakebuf_r+0x18>
 8001854:	080015e5 	.word	0x080015e5

08001858 <_free_r>:
 8001858:	b538      	push	{r3, r4, r5, lr}
 800185a:	4605      	mov	r5, r0
 800185c:	2900      	cmp	r1, #0
 800185e:	d040      	beq.n	80018e2 <_free_r+0x8a>
 8001860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001864:	1f0c      	subs	r4, r1, #4
 8001866:	2b00      	cmp	r3, #0
 8001868:	bfb8      	it	lt
 800186a:	18e4      	addlt	r4, r4, r3
 800186c:	f000 f97a 	bl	8001b64 <__malloc_lock>
 8001870:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <_free_r+0x8c>)
 8001872:	6813      	ldr	r3, [r2, #0]
 8001874:	b933      	cbnz	r3, 8001884 <_free_r+0x2c>
 8001876:	6063      	str	r3, [r4, #4]
 8001878:	6014      	str	r4, [r2, #0]
 800187a:	4628      	mov	r0, r5
 800187c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001880:	f000 b976 	b.w	8001b70 <__malloc_unlock>
 8001884:	42a3      	cmp	r3, r4
 8001886:	d908      	bls.n	800189a <_free_r+0x42>
 8001888:	6820      	ldr	r0, [r4, #0]
 800188a:	1821      	adds	r1, r4, r0
 800188c:	428b      	cmp	r3, r1
 800188e:	bf01      	itttt	eq
 8001890:	6819      	ldreq	r1, [r3, #0]
 8001892:	685b      	ldreq	r3, [r3, #4]
 8001894:	1809      	addeq	r1, r1, r0
 8001896:	6021      	streq	r1, [r4, #0]
 8001898:	e7ed      	b.n	8001876 <_free_r+0x1e>
 800189a:	461a      	mov	r2, r3
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	b10b      	cbz	r3, 80018a4 <_free_r+0x4c>
 80018a0:	42a3      	cmp	r3, r4
 80018a2:	d9fa      	bls.n	800189a <_free_r+0x42>
 80018a4:	6811      	ldr	r1, [r2, #0]
 80018a6:	1850      	adds	r0, r2, r1
 80018a8:	42a0      	cmp	r0, r4
 80018aa:	d10b      	bne.n	80018c4 <_free_r+0x6c>
 80018ac:	6820      	ldr	r0, [r4, #0]
 80018ae:	4401      	add	r1, r0
 80018b0:	1850      	adds	r0, r2, r1
 80018b2:	4283      	cmp	r3, r0
 80018b4:	6011      	str	r1, [r2, #0]
 80018b6:	d1e0      	bne.n	800187a <_free_r+0x22>
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4401      	add	r1, r0
 80018be:	6011      	str	r1, [r2, #0]
 80018c0:	6053      	str	r3, [r2, #4]
 80018c2:	e7da      	b.n	800187a <_free_r+0x22>
 80018c4:	d902      	bls.n	80018cc <_free_r+0x74>
 80018c6:	230c      	movs	r3, #12
 80018c8:	602b      	str	r3, [r5, #0]
 80018ca:	e7d6      	b.n	800187a <_free_r+0x22>
 80018cc:	6820      	ldr	r0, [r4, #0]
 80018ce:	1821      	adds	r1, r4, r0
 80018d0:	428b      	cmp	r3, r1
 80018d2:	bf01      	itttt	eq
 80018d4:	6819      	ldreq	r1, [r3, #0]
 80018d6:	685b      	ldreq	r3, [r3, #4]
 80018d8:	1809      	addeq	r1, r1, r0
 80018da:	6021      	streq	r1, [r4, #0]
 80018dc:	6063      	str	r3, [r4, #4]
 80018de:	6054      	str	r4, [r2, #4]
 80018e0:	e7cb      	b.n	800187a <_free_r+0x22>
 80018e2:	bd38      	pop	{r3, r4, r5, pc}
 80018e4:	2000009c 	.word	0x2000009c

080018e8 <sbrk_aligned>:
 80018e8:	b570      	push	{r4, r5, r6, lr}
 80018ea:	4e0e      	ldr	r6, [pc, #56]	; (8001924 <sbrk_aligned+0x3c>)
 80018ec:	460c      	mov	r4, r1
 80018ee:	6831      	ldr	r1, [r6, #0]
 80018f0:	4605      	mov	r5, r0
 80018f2:	b911      	cbnz	r1, 80018fa <sbrk_aligned+0x12>
 80018f4:	f000 f88c 	bl	8001a10 <_sbrk_r>
 80018f8:	6030      	str	r0, [r6, #0]
 80018fa:	4621      	mov	r1, r4
 80018fc:	4628      	mov	r0, r5
 80018fe:	f000 f887 	bl	8001a10 <_sbrk_r>
 8001902:	1c43      	adds	r3, r0, #1
 8001904:	d00a      	beq.n	800191c <sbrk_aligned+0x34>
 8001906:	1cc4      	adds	r4, r0, #3
 8001908:	f024 0403 	bic.w	r4, r4, #3
 800190c:	42a0      	cmp	r0, r4
 800190e:	d007      	beq.n	8001920 <sbrk_aligned+0x38>
 8001910:	1a21      	subs	r1, r4, r0
 8001912:	4628      	mov	r0, r5
 8001914:	f000 f87c 	bl	8001a10 <_sbrk_r>
 8001918:	3001      	adds	r0, #1
 800191a:	d101      	bne.n	8001920 <sbrk_aligned+0x38>
 800191c:	f04f 34ff 	mov.w	r4, #4294967295
 8001920:	4620      	mov	r0, r4
 8001922:	bd70      	pop	{r4, r5, r6, pc}
 8001924:	200000a0 	.word	0x200000a0

08001928 <_malloc_r>:
 8001928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800192c:	1ccd      	adds	r5, r1, #3
 800192e:	f025 0503 	bic.w	r5, r5, #3
 8001932:	3508      	adds	r5, #8
 8001934:	2d0c      	cmp	r5, #12
 8001936:	bf38      	it	cc
 8001938:	250c      	movcc	r5, #12
 800193a:	2d00      	cmp	r5, #0
 800193c:	4607      	mov	r7, r0
 800193e:	db01      	blt.n	8001944 <_malloc_r+0x1c>
 8001940:	42a9      	cmp	r1, r5
 8001942:	d905      	bls.n	8001950 <_malloc_r+0x28>
 8001944:	230c      	movs	r3, #12
 8001946:	2600      	movs	r6, #0
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	4630      	mov	r0, r6
 800194c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001950:	4e2e      	ldr	r6, [pc, #184]	; (8001a0c <_malloc_r+0xe4>)
 8001952:	f000 f907 	bl	8001b64 <__malloc_lock>
 8001956:	6833      	ldr	r3, [r6, #0]
 8001958:	461c      	mov	r4, r3
 800195a:	bb34      	cbnz	r4, 80019aa <_malloc_r+0x82>
 800195c:	4629      	mov	r1, r5
 800195e:	4638      	mov	r0, r7
 8001960:	f7ff ffc2 	bl	80018e8 <sbrk_aligned>
 8001964:	1c43      	adds	r3, r0, #1
 8001966:	4604      	mov	r4, r0
 8001968:	d14d      	bne.n	8001a06 <_malloc_r+0xde>
 800196a:	6834      	ldr	r4, [r6, #0]
 800196c:	4626      	mov	r6, r4
 800196e:	2e00      	cmp	r6, #0
 8001970:	d140      	bne.n	80019f4 <_malloc_r+0xcc>
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	4631      	mov	r1, r6
 8001976:	4638      	mov	r0, r7
 8001978:	eb04 0803 	add.w	r8, r4, r3
 800197c:	f000 f848 	bl	8001a10 <_sbrk_r>
 8001980:	4580      	cmp	r8, r0
 8001982:	d13a      	bne.n	80019fa <_malloc_r+0xd2>
 8001984:	6821      	ldr	r1, [r4, #0]
 8001986:	3503      	adds	r5, #3
 8001988:	1a6d      	subs	r5, r5, r1
 800198a:	f025 0503 	bic.w	r5, r5, #3
 800198e:	3508      	adds	r5, #8
 8001990:	2d0c      	cmp	r5, #12
 8001992:	bf38      	it	cc
 8001994:	250c      	movcc	r5, #12
 8001996:	4638      	mov	r0, r7
 8001998:	4629      	mov	r1, r5
 800199a:	f7ff ffa5 	bl	80018e8 <sbrk_aligned>
 800199e:	3001      	adds	r0, #1
 80019a0:	d02b      	beq.n	80019fa <_malloc_r+0xd2>
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	442b      	add	r3, r5
 80019a6:	6023      	str	r3, [r4, #0]
 80019a8:	e00e      	b.n	80019c8 <_malloc_r+0xa0>
 80019aa:	6822      	ldr	r2, [r4, #0]
 80019ac:	1b52      	subs	r2, r2, r5
 80019ae:	d41e      	bmi.n	80019ee <_malloc_r+0xc6>
 80019b0:	2a0b      	cmp	r2, #11
 80019b2:	d916      	bls.n	80019e2 <_malloc_r+0xba>
 80019b4:	1961      	adds	r1, r4, r5
 80019b6:	42a3      	cmp	r3, r4
 80019b8:	6025      	str	r5, [r4, #0]
 80019ba:	bf18      	it	ne
 80019bc:	6059      	strne	r1, [r3, #4]
 80019be:	6863      	ldr	r3, [r4, #4]
 80019c0:	bf08      	it	eq
 80019c2:	6031      	streq	r1, [r6, #0]
 80019c4:	5162      	str	r2, [r4, r5]
 80019c6:	604b      	str	r3, [r1, #4]
 80019c8:	4638      	mov	r0, r7
 80019ca:	f104 060b 	add.w	r6, r4, #11
 80019ce:	f000 f8cf 	bl	8001b70 <__malloc_unlock>
 80019d2:	f026 0607 	bic.w	r6, r6, #7
 80019d6:	1d23      	adds	r3, r4, #4
 80019d8:	1af2      	subs	r2, r6, r3
 80019da:	d0b6      	beq.n	800194a <_malloc_r+0x22>
 80019dc:	1b9b      	subs	r3, r3, r6
 80019de:	50a3      	str	r3, [r4, r2]
 80019e0:	e7b3      	b.n	800194a <_malloc_r+0x22>
 80019e2:	6862      	ldr	r2, [r4, #4]
 80019e4:	42a3      	cmp	r3, r4
 80019e6:	bf0c      	ite	eq
 80019e8:	6032      	streq	r2, [r6, #0]
 80019ea:	605a      	strne	r2, [r3, #4]
 80019ec:	e7ec      	b.n	80019c8 <_malloc_r+0xa0>
 80019ee:	4623      	mov	r3, r4
 80019f0:	6864      	ldr	r4, [r4, #4]
 80019f2:	e7b2      	b.n	800195a <_malloc_r+0x32>
 80019f4:	4634      	mov	r4, r6
 80019f6:	6876      	ldr	r6, [r6, #4]
 80019f8:	e7b9      	b.n	800196e <_malloc_r+0x46>
 80019fa:	230c      	movs	r3, #12
 80019fc:	4638      	mov	r0, r7
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	f000 f8b6 	bl	8001b70 <__malloc_unlock>
 8001a04:	e7a1      	b.n	800194a <_malloc_r+0x22>
 8001a06:	6025      	str	r5, [r4, #0]
 8001a08:	e7de      	b.n	80019c8 <_malloc_r+0xa0>
 8001a0a:	bf00      	nop
 8001a0c:	2000009c 	.word	0x2000009c

08001a10 <_sbrk_r>:
 8001a10:	b538      	push	{r3, r4, r5, lr}
 8001a12:	2300      	movs	r3, #0
 8001a14:	4d05      	ldr	r5, [pc, #20]	; (8001a2c <_sbrk_r+0x1c>)
 8001a16:	4604      	mov	r4, r0
 8001a18:	4608      	mov	r0, r1
 8001a1a:	602b      	str	r3, [r5, #0]
 8001a1c:	f7fe fdee 	bl	80005fc <_sbrk>
 8001a20:	1c43      	adds	r3, r0, #1
 8001a22:	d102      	bne.n	8001a2a <_sbrk_r+0x1a>
 8001a24:	682b      	ldr	r3, [r5, #0]
 8001a26:	b103      	cbz	r3, 8001a2a <_sbrk_r+0x1a>
 8001a28:	6023      	str	r3, [r4, #0]
 8001a2a:	bd38      	pop	{r3, r4, r5, pc}
 8001a2c:	200000a4 	.word	0x200000a4

08001a30 <__sread>:
 8001a30:	b510      	push	{r4, lr}
 8001a32:	460c      	mov	r4, r1
 8001a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a38:	f000 f8a0 	bl	8001b7c <_read_r>
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	bfab      	itete	ge
 8001a40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001a42:	89a3      	ldrhlt	r3, [r4, #12]
 8001a44:	181b      	addge	r3, r3, r0
 8001a46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001a4a:	bfac      	ite	ge
 8001a4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001a4e:	81a3      	strhlt	r3, [r4, #12]
 8001a50:	bd10      	pop	{r4, pc}

08001a52 <__swrite>:
 8001a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a56:	461f      	mov	r7, r3
 8001a58:	898b      	ldrh	r3, [r1, #12]
 8001a5a:	4605      	mov	r5, r0
 8001a5c:	05db      	lsls	r3, r3, #23
 8001a5e:	460c      	mov	r4, r1
 8001a60:	4616      	mov	r6, r2
 8001a62:	d505      	bpl.n	8001a70 <__swrite+0x1e>
 8001a64:	2302      	movs	r3, #2
 8001a66:	2200      	movs	r2, #0
 8001a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a6c:	f000 f868 	bl	8001b40 <_lseek_r>
 8001a70:	89a3      	ldrh	r3, [r4, #12]
 8001a72:	4632      	mov	r2, r6
 8001a74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a78:	81a3      	strh	r3, [r4, #12]
 8001a7a:	4628      	mov	r0, r5
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a86:	f000 b817 	b.w	8001ab8 <_write_r>

08001a8a <__sseek>:
 8001a8a:	b510      	push	{r4, lr}
 8001a8c:	460c      	mov	r4, r1
 8001a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a92:	f000 f855 	bl	8001b40 <_lseek_r>
 8001a96:	1c43      	adds	r3, r0, #1
 8001a98:	89a3      	ldrh	r3, [r4, #12]
 8001a9a:	bf15      	itete	ne
 8001a9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001a9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001aa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001aa6:	81a3      	strheq	r3, [r4, #12]
 8001aa8:	bf18      	it	ne
 8001aaa:	81a3      	strhne	r3, [r4, #12]
 8001aac:	bd10      	pop	{r4, pc}

08001aae <__sclose>:
 8001aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ab2:	f000 b813 	b.w	8001adc <_close_r>
	...

08001ab8 <_write_r>:
 8001ab8:	b538      	push	{r3, r4, r5, lr}
 8001aba:	4604      	mov	r4, r0
 8001abc:	4608      	mov	r0, r1
 8001abe:	4611      	mov	r1, r2
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	4d05      	ldr	r5, [pc, #20]	; (8001ad8 <_write_r+0x20>)
 8001ac4:	602a      	str	r2, [r5, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	f7fe fccc 	bl	8000464 <_write>
 8001acc:	1c43      	adds	r3, r0, #1
 8001ace:	d102      	bne.n	8001ad6 <_write_r+0x1e>
 8001ad0:	682b      	ldr	r3, [r5, #0]
 8001ad2:	b103      	cbz	r3, 8001ad6 <_write_r+0x1e>
 8001ad4:	6023      	str	r3, [r4, #0]
 8001ad6:	bd38      	pop	{r3, r4, r5, pc}
 8001ad8:	200000a4 	.word	0x200000a4

08001adc <_close_r>:
 8001adc:	b538      	push	{r3, r4, r5, lr}
 8001ade:	2300      	movs	r3, #0
 8001ae0:	4d05      	ldr	r5, [pc, #20]	; (8001af8 <_close_r+0x1c>)
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	4608      	mov	r0, r1
 8001ae6:	602b      	str	r3, [r5, #0]
 8001ae8:	f7fe fd58 	bl	800059c <_close>
 8001aec:	1c43      	adds	r3, r0, #1
 8001aee:	d102      	bne.n	8001af6 <_close_r+0x1a>
 8001af0:	682b      	ldr	r3, [r5, #0]
 8001af2:	b103      	cbz	r3, 8001af6 <_close_r+0x1a>
 8001af4:	6023      	str	r3, [r4, #0]
 8001af6:	bd38      	pop	{r3, r4, r5, pc}
 8001af8:	200000a4 	.word	0x200000a4

08001afc <_fstat_r>:
 8001afc:	b538      	push	{r3, r4, r5, lr}
 8001afe:	2300      	movs	r3, #0
 8001b00:	4d06      	ldr	r5, [pc, #24]	; (8001b1c <_fstat_r+0x20>)
 8001b02:	4604      	mov	r4, r0
 8001b04:	4608      	mov	r0, r1
 8001b06:	4611      	mov	r1, r2
 8001b08:	602b      	str	r3, [r5, #0]
 8001b0a:	f7fe fd52 	bl	80005b2 <_fstat>
 8001b0e:	1c43      	adds	r3, r0, #1
 8001b10:	d102      	bne.n	8001b18 <_fstat_r+0x1c>
 8001b12:	682b      	ldr	r3, [r5, #0]
 8001b14:	b103      	cbz	r3, 8001b18 <_fstat_r+0x1c>
 8001b16:	6023      	str	r3, [r4, #0]
 8001b18:	bd38      	pop	{r3, r4, r5, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200000a4 	.word	0x200000a4

08001b20 <_isatty_r>:
 8001b20:	b538      	push	{r3, r4, r5, lr}
 8001b22:	2300      	movs	r3, #0
 8001b24:	4d05      	ldr	r5, [pc, #20]	; (8001b3c <_isatty_r+0x1c>)
 8001b26:	4604      	mov	r4, r0
 8001b28:	4608      	mov	r0, r1
 8001b2a:	602b      	str	r3, [r5, #0]
 8001b2c:	f7fe fd50 	bl	80005d0 <_isatty>
 8001b30:	1c43      	adds	r3, r0, #1
 8001b32:	d102      	bne.n	8001b3a <_isatty_r+0x1a>
 8001b34:	682b      	ldr	r3, [r5, #0]
 8001b36:	b103      	cbz	r3, 8001b3a <_isatty_r+0x1a>
 8001b38:	6023      	str	r3, [r4, #0]
 8001b3a:	bd38      	pop	{r3, r4, r5, pc}
 8001b3c:	200000a4 	.word	0x200000a4

08001b40 <_lseek_r>:
 8001b40:	b538      	push	{r3, r4, r5, lr}
 8001b42:	4604      	mov	r4, r0
 8001b44:	4608      	mov	r0, r1
 8001b46:	4611      	mov	r1, r2
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4d05      	ldr	r5, [pc, #20]	; (8001b60 <_lseek_r+0x20>)
 8001b4c:	602a      	str	r2, [r5, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f7fe fd48 	bl	80005e4 <_lseek>
 8001b54:	1c43      	adds	r3, r0, #1
 8001b56:	d102      	bne.n	8001b5e <_lseek_r+0x1e>
 8001b58:	682b      	ldr	r3, [r5, #0]
 8001b5a:	b103      	cbz	r3, 8001b5e <_lseek_r+0x1e>
 8001b5c:	6023      	str	r3, [r4, #0]
 8001b5e:	bd38      	pop	{r3, r4, r5, pc}
 8001b60:	200000a4 	.word	0x200000a4

08001b64 <__malloc_lock>:
 8001b64:	4801      	ldr	r0, [pc, #4]	; (8001b6c <__malloc_lock+0x8>)
 8001b66:	f7ff be0f 	b.w	8001788 <__retarget_lock_acquire_recursive>
 8001b6a:	bf00      	nop
 8001b6c:	20000098 	.word	0x20000098

08001b70 <__malloc_unlock>:
 8001b70:	4801      	ldr	r0, [pc, #4]	; (8001b78 <__malloc_unlock+0x8>)
 8001b72:	f7ff be0a 	b.w	800178a <__retarget_lock_release_recursive>
 8001b76:	bf00      	nop
 8001b78:	20000098 	.word	0x20000098

08001b7c <_read_r>:
 8001b7c:	b538      	push	{r3, r4, r5, lr}
 8001b7e:	4604      	mov	r4, r0
 8001b80:	4608      	mov	r0, r1
 8001b82:	4611      	mov	r1, r2
 8001b84:	2200      	movs	r2, #0
 8001b86:	4d05      	ldr	r5, [pc, #20]	; (8001b9c <_read_r+0x20>)
 8001b88:	602a      	str	r2, [r5, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f7fe fce9 	bl	8000562 <_read>
 8001b90:	1c43      	adds	r3, r0, #1
 8001b92:	d102      	bne.n	8001b9a <_read_r+0x1e>
 8001b94:	682b      	ldr	r3, [r5, #0]
 8001b96:	b103      	cbz	r3, 8001b9a <_read_r+0x1e>
 8001b98:	6023      	str	r3, [r4, #0]
 8001b9a:	bd38      	pop	{r3, r4, r5, pc}
 8001b9c:	200000a4 	.word	0x200000a4

08001ba0 <_init>:
 8001ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba2:	bf00      	nop
 8001ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ba6:	bc08      	pop	{r3}
 8001ba8:	469e      	mov	lr, r3
 8001baa:	4770      	bx	lr

08001bac <_fini>:
 8001bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bae:	bf00      	nop
 8001bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bb2:	bc08      	pop	{r3}
 8001bb4:	469e      	mov	lr, r3
 8001bb6:	4770      	bx	lr
