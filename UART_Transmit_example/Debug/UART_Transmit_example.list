
UART_Transmit_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003058  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08003168  08003168  00013168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032f0  080032f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080032f0  080032f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032f0  080032f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032f0  080032f0  000132f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080032f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08003368  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08003368  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003248  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001006  00000000  00000000  000232e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a8  00000000  00000000  000242e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000400  00000000  00000000  00024790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175a6  00000000  00000000  00024b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000554e  00000000  00000000  0003c136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080cf7  00000000  00000000  00041684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c237b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c50  00000000  00000000  000c23cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08003150 	.word	0x08003150

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08003150 	.word	0x08003150

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_frsub>:
 8000af4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af8:	e002      	b.n	8000b00 <__addsf3>
 8000afa:	bf00      	nop

08000afc <__aeabi_fsub>:
 8000afc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b00 <__addsf3>:
 8000b00:	0042      	lsls	r2, r0, #1
 8000b02:	bf1f      	itttt	ne
 8000b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b08:	ea92 0f03 	teqne	r2, r3
 8000b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b14:	d06a      	beq.n	8000bec <__addsf3+0xec>
 8000b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b1e:	bfc1      	itttt	gt
 8000b20:	18d2      	addgt	r2, r2, r3
 8000b22:	4041      	eorgt	r1, r0
 8000b24:	4048      	eorgt	r0, r1
 8000b26:	4041      	eorgt	r1, r0
 8000b28:	bfb8      	it	lt
 8000b2a:	425b      	neglt	r3, r3
 8000b2c:	2b19      	cmp	r3, #25
 8000b2e:	bf88      	it	hi
 8000b30:	4770      	bxhi	lr
 8000b32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b3e:	bf18      	it	ne
 8000b40:	4240      	negne	r0, r0
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b4e:	bf18      	it	ne
 8000b50:	4249      	negne	r1, r1
 8000b52:	ea92 0f03 	teq	r2, r3
 8000b56:	d03f      	beq.n	8000bd8 <__addsf3+0xd8>
 8000b58:	f1a2 0201 	sub.w	r2, r2, #1
 8000b5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b60:	eb10 000c 	adds.w	r0, r0, ip
 8000b64:	f1c3 0320 	rsb	r3, r3, #32
 8000b68:	fa01 f103 	lsl.w	r1, r1, r3
 8000b6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b70:	d502      	bpl.n	8000b78 <__addsf3+0x78>
 8000b72:	4249      	negs	r1, r1
 8000b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b7c:	d313      	bcc.n	8000ba6 <__addsf3+0xa6>
 8000b7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b82:	d306      	bcc.n	8000b92 <__addsf3+0x92>
 8000b84:	0840      	lsrs	r0, r0, #1
 8000b86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b8a:	f102 0201 	add.w	r2, r2, #1
 8000b8e:	2afe      	cmp	r2, #254	; 0xfe
 8000b90:	d251      	bcs.n	8000c36 <__addsf3+0x136>
 8000b92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b9a:	bf08      	it	eq
 8000b9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ba0:	ea40 0003 	orr.w	r0, r0, r3
 8000ba4:	4770      	bx	lr
 8000ba6:	0049      	lsls	r1, r1, #1
 8000ba8:	eb40 0000 	adc.w	r0, r0, r0
 8000bac:	3a01      	subs	r2, #1
 8000bae:	bf28      	it	cs
 8000bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bb4:	d2ed      	bcs.n	8000b92 <__addsf3+0x92>
 8000bb6:	fab0 fc80 	clz	ip, r0
 8000bba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000bc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bc6:	bfaa      	itet	ge
 8000bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bcc:	4252      	neglt	r2, r2
 8000bce:	4318      	orrge	r0, r3
 8000bd0:	bfbc      	itt	lt
 8000bd2:	40d0      	lsrlt	r0, r2
 8000bd4:	4318      	orrlt	r0, r3
 8000bd6:	4770      	bx	lr
 8000bd8:	f092 0f00 	teq	r2, #0
 8000bdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be0:	bf06      	itte	eq
 8000be2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000be6:	3201      	addeq	r2, #1
 8000be8:	3b01      	subne	r3, #1
 8000bea:	e7b5      	b.n	8000b58 <__addsf3+0x58>
 8000bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf4:	bf18      	it	ne
 8000bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bfa:	d021      	beq.n	8000c40 <__addsf3+0x140>
 8000bfc:	ea92 0f03 	teq	r2, r3
 8000c00:	d004      	beq.n	8000c0c <__addsf3+0x10c>
 8000c02:	f092 0f00 	teq	r2, #0
 8000c06:	bf08      	it	eq
 8000c08:	4608      	moveq	r0, r1
 8000c0a:	4770      	bx	lr
 8000c0c:	ea90 0f01 	teq	r0, r1
 8000c10:	bf1c      	itt	ne
 8000c12:	2000      	movne	r0, #0
 8000c14:	4770      	bxne	lr
 8000c16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c1a:	d104      	bne.n	8000c26 <__addsf3+0x126>
 8000c1c:	0040      	lsls	r0, r0, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c24:	4770      	bx	lr
 8000c26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c2a:	bf3c      	itt	cc
 8000c2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c30:	4770      	bxcc	lr
 8000c32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3e:	4770      	bx	lr
 8000c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c44:	bf16      	itet	ne
 8000c46:	4608      	movne	r0, r1
 8000c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c4c:	4601      	movne	r1, r0
 8000c4e:	0242      	lsls	r2, r0, #9
 8000c50:	bf06      	itte	eq
 8000c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c56:	ea90 0f01 	teqeq	r0, r1
 8000c5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c5e:	4770      	bx	lr

08000c60 <__aeabi_ui2f>:
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e004      	b.n	8000c70 <__aeabi_i2f+0x8>
 8000c66:	bf00      	nop

08000c68 <__aeabi_i2f>:
 8000c68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	bf48      	it	mi
 8000c6e:	4240      	negmi	r0, r0
 8000c70:	ea5f 0c00 	movs.w	ip, r0
 8000c74:	bf08      	it	eq
 8000c76:	4770      	bxeq	lr
 8000c78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	f04f 0000 	mov.w	r0, #0
 8000c82:	e01c      	b.n	8000cbe <__aeabi_l2f+0x2a>

08000c84 <__aeabi_ul2f>:
 8000c84:	ea50 0201 	orrs.w	r2, r0, r1
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e00a      	b.n	8000ca8 <__aeabi_l2f+0x14>
 8000c92:	bf00      	nop

08000c94 <__aeabi_l2f>:
 8000c94:	ea50 0201 	orrs.w	r2, r0, r1
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca0:	d502      	bpl.n	8000ca8 <__aeabi_l2f+0x14>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	ea5f 0c01 	movs.w	ip, r1
 8000cac:	bf02      	ittt	eq
 8000cae:	4684      	moveq	ip, r0
 8000cb0:	4601      	moveq	r1, r0
 8000cb2:	2000      	moveq	r0, #0
 8000cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb8:	bf08      	it	eq
 8000cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cc2:	fabc f28c 	clz	r2, ip
 8000cc6:	3a08      	subs	r2, #8
 8000cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ccc:	db10      	blt.n	8000cf0 <__aeabi_l2f+0x5c>
 8000cce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd8:	f1c2 0220 	rsb	r2, r2, #32
 8000cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce4:	eb43 0002 	adc.w	r0, r3, r2
 8000ce8:	bf08      	it	eq
 8000cea:	f020 0001 	biceq.w	r0, r0, #1
 8000cee:	4770      	bx	lr
 8000cf0:	f102 0220 	add.w	r2, r2, #32
 8000cf4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d00:	fa21 f202 	lsr.w	r2, r1, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_f2iz>:
 8000d10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d18:	d30f      	bcc.n	8000d3a <__aeabi_f2iz+0x2a>
 8000d1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d22:	d90d      	bls.n	8000d40 <__aeabi_f2iz+0x30>
 8000d24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d2c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d30:	fa23 f002 	lsr.w	r0, r3, r2
 8000d34:	bf18      	it	ne
 8000d36:	4240      	negne	r0, r0
 8000d38:	4770      	bx	lr
 8000d3a:	f04f 0000 	mov.w	r0, #0
 8000d3e:	4770      	bx	lr
 8000d40:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d44:	d101      	bne.n	8000d4a <__aeabi_f2iz+0x3a>
 8000d46:	0242      	lsls	r2, r0, #9
 8000d48:	d105      	bne.n	8000d56 <__aeabi_f2iz+0x46>
 8000d4a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d4e:	bf08      	it	eq
 8000d50:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d54:	4770      	bx	lr
 8000d56:	f04f 0000 	mov.w	r0, #0
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_f2uiz>:
 8000d5c:	0042      	lsls	r2, r0, #1
 8000d5e:	d20e      	bcs.n	8000d7e <__aeabi_f2uiz+0x22>
 8000d60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d64:	d30b      	bcc.n	8000d7e <__aeabi_f2uiz+0x22>
 8000d66:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d6e:	d409      	bmi.n	8000d84 <__aeabi_f2uiz+0x28>
 8000d70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d78:	fa23 f002 	lsr.w	r0, r3, r2
 8000d7c:	4770      	bx	lr
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	4770      	bx	lr
 8000d84:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d88:	d101      	bne.n	8000d8e <__aeabi_f2uiz+0x32>
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	d102      	bne.n	8000d94 <__aeabi_f2uiz+0x38>
 8000d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d92:	4770      	bx	lr
 8000d94:	f04f 0000 	mov.w	r0, #0
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	0000      	movs	r0, r0
	...

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b090      	sub	sp, #64	; 0x40
 8000da4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  uint16_t event_val1, event_val2, event_diff;
  uint32_t a=0, a1=0, a2=0, b=0, c=0, d=0, t_a=0, t_b=0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
 8000dae:	2300      	movs	r3, #0
 8000db0:	623b      	str	r3, [r7, #32]
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
  float pressed_t, freq, max_freq = 0, t=0;
 8000dc6:	f04f 0300 	mov.w	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd2:	f000 fc07 	bl	80015e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd6:	f000 f909 	bl	8000fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dda:	f000 f949 	bl	8001070 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init();
 8000dde:	f000 f981 	bl	80010e4 <USER_RCC_Init>
  USER_GPIO_Init();
 8000de2:	f000 f99b 	bl	800111c <USER_GPIO_Init>
  USER_TIM2_Capture_Init();
 8000de6:	f000 f9d3 	bl	8001190 <USER_TIM2_Capture_Init>
  USER_TIM3_Capture_Init();
 8000dea:	f000 fa39 	bl	8001260 <USER_TIM3_Capture_Init>
  USER_USART3_Init();
 8000dee:	f000 fa79 	bl	80012e4 <USER_USART3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  TIM2->CNT = 230;	//A
 8000df2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df6:	22e6      	movs	r2, #230	; 0xe6
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
  while (1)
  {
	  if(TIM2->SR & TIM_SR_UIF){
 8000dfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d0f8      	beq.n	8000dfa <main+0x5a>
		  TIM2->SR	&=	!TIM_SR_UIF;
 8000e08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
		  TIM2->CR1	&=	 !TIM_CR1_CEN;//		counter disabled
 8000e16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]

		  t+=0.1;
 8000e24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e26:	f7ff fbab 	bl	8000580 <__aeabi_f2d>
 8000e2a:	a365      	add	r3, pc, #404	; (adr r3, 8000fc0 <main+0x220>)
 8000e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e30:	f7ff fa48 	bl	80002c4 <__adddf3>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f7ff fe0a 	bl	8000a54 <__aeabi_d2f>
 8000e40:	4603      	mov	r3, r0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
		  t_a = (int)t;
 8000e44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e46:	f7ff ff63 	bl	8000d10 <__aeabi_f2iz>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	613b      	str	r3, [r7, #16]
		  t_b = ((int)(t*10)) % 10;
 8000e4e:	4960      	ldr	r1, [pc, #384]	; (8000fd0 <main+0x230>)
 8000e50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e52:	f7ff f97d 	bl	8000150 <__aeabi_fmul>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff59 	bl	8000d10 <__aeabi_f2iz>
 8000e5e:	4601      	mov	r1, r0
 8000e60:	4b5c      	ldr	r3, [pc, #368]	; (8000fd4 <main+0x234>)
 8000e62:	fb83 2301 	smull	r2, r3, r3, r1
 8000e66:	109a      	asrs	r2, r3, #2
 8000e68:	17cb      	asrs	r3, r1, #31
 8000e6a:	1ad2      	subs	r2, r2, r3
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	1aca      	subs	r2, r1, r3
 8000e76:	60fa      	str	r2, [r7, #12]

		  freq = 70 + ((float)(rand() % 100))/10.0;
 8000e78:	f001 f92c 	bl	80020d4 <rand>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	4b56      	ldr	r3, [pc, #344]	; (8000fd8 <main+0x238>)
 8000e80:	fb83 1302 	smull	r1, r3, r3, r2
 8000e84:	1159      	asrs	r1, r3, #5
 8000e86:	17d3      	asrs	r3, r2, #31
 8000e88:	1acb      	subs	r3, r1, r3
 8000e8a:	2164      	movs	r1, #100	; 0x64
 8000e8c:	fb01 f303 	mul.w	r3, r1, r3
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fee8 	bl	8000c68 <__aeabi_i2f>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fb70 	bl	8000580 <__aeabi_f2d>
 8000ea0:	f04f 0200 	mov.w	r2, #0
 8000ea4:	4b4d      	ldr	r3, [pc, #308]	; (8000fdc <main+0x23c>)
 8000ea6:	f7ff fced 	bl	8000884 <__aeabi_ddiv>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	4b4a      	ldr	r3, [pc, #296]	; (8000fe0 <main+0x240>)
 8000eb8:	f7ff fa04 	bl	80002c4 <__adddf3>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f7ff fdc6 	bl	8000a54 <__aeabi_d2f>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	607b      	str	r3, [r7, #4]
		  a = freq;
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff45 	bl	8000d5c <__aeabi_f2uiz>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
		  b = (int)(freq*10) % 10;
 8000ed6:	493e      	ldr	r1, [pc, #248]	; (8000fd0 <main+0x230>)
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff f939 	bl	8000150 <__aeabi_fmul>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff15 	bl	8000d10 <__aeabi_f2iz>
 8000ee6:	4601      	mov	r1, r0
 8000ee8:	4b3a      	ldr	r3, [pc, #232]	; (8000fd4 <main+0x234>)
 8000eea:	fb83 2301 	smull	r2, r3, r3, r1
 8000eee:	109a      	asrs	r2, r3, #2
 8000ef0:	17cb      	asrs	r3, r1, #31
 8000ef2:	1ad2      	subs	r2, r2, r3
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	1aca      	subs	r2, r1, r3
 8000efe:	61fa      	str	r2, [r7, #28]

		  v = 3.3 + ((float)(rand() % 100))/500.0;
 8000f00:	f001 f8e8 	bl	80020d4 <rand>
 8000f04:	4602      	mov	r2, r0
 8000f06:	4b34      	ldr	r3, [pc, #208]	; (8000fd8 <main+0x238>)
 8000f08:	fb83 1302 	smull	r1, r3, r3, r2
 8000f0c:	1159      	asrs	r1, r3, #5
 8000f0e:	17d3      	asrs	r3, r2, #31
 8000f10:	1acb      	subs	r3, r1, r3
 8000f12:	2164      	movs	r1, #100	; 0x64
 8000f14:	fb01 f303 	mul.w	r3, r1, r3
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fea4 	bl	8000c68 <__aeabi_i2f>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fb2c 	bl	8000580 <__aeabi_f2d>
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <main+0x244>)
 8000f2e:	f7ff fca9 	bl	8000884 <__aeabi_ddiv>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	a323      	add	r3, pc, #140	; (adr r3, 8000fc8 <main+0x228>)
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	f7ff f9c0 	bl	80002c4 <__adddf3>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f7ff fd82 	bl	8000a54 <__aeabi_d2f>
 8000f50:	4603      	mov	r3, r0
 8000f52:	603b      	str	r3, [r7, #0]
		  c = v;
 8000f54:	6838      	ldr	r0, [r7, #0]
 8000f56:	f7ff ff01 	bl	8000d5c <__aeabi_f2uiz>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	61bb      	str	r3, [r7, #24]
		  d = (int)(v*10) % 10;
 8000f5e:	491c      	ldr	r1, [pc, #112]	; (8000fd0 <main+0x230>)
 8000f60:	6838      	ldr	r0, [r7, #0]
 8000f62:	f7ff f8f5 	bl	8000150 <__aeabi_fmul>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fed1 	bl	8000d10 <__aeabi_f2iz>
 8000f6e:	4601      	mov	r1, r0
 8000f70:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <main+0x234>)
 8000f72:	fb83 2301 	smull	r2, r3, r3, r1
 8000f76:	109a      	asrs	r2, r3, #2
 8000f78:	17cb      	asrs	r3, r1, #31
 8000f7a:	1ad2      	subs	r2, r2, r3
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	1aca      	subs	r2, r1, r3
 8000f86:	617a      	str	r2, [r7, #20]
		  printf("%d.%d) F: %d.%d || P: %d.%d\n",t_a, t_b,a,b,c,d);
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	9302      	str	r3, [sp, #8]
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	6939      	ldr	r1, [r7, #16]
 8000f9a:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <main+0x248>)
 8000f9c:	f001 f882 	bl	80020a4 <iprintf>
		  TIM2->CNT = 230;
 8000fa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fa4:	22e6      	movs	r2, #230	; 0xe6
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24
		  TIM2->CR1	|=	 TIM_CR1_CEN;//		counter enabled
 8000fa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6013      	str	r3, [r2, #0]
	  if(TIM2->SR & TIM_SR_UIF){
 8000fb8:	e71f      	b.n	8000dfa <main+0x5a>
 8000fba:	bf00      	nop
 8000fbc:	f3af 8000 	nop.w
 8000fc0:	9999999a 	.word	0x9999999a
 8000fc4:	3fb99999 	.word	0x3fb99999
 8000fc8:	66666666 	.word	0x66666666
 8000fcc:	400a6666 	.word	0x400a6666
 8000fd0:	41200000 	.word	0x41200000
 8000fd4:	66666667 	.word	0x66666667
 8000fd8:	51eb851f 	.word	0x51eb851f
 8000fdc:	40240000 	.word	0x40240000
 8000fe0:	40518000 	.word	0x40518000
 8000fe4:	407f4000 	.word	0x407f4000
 8000fe8:	08003168 	.word	0x08003168

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b090      	sub	sp, #64	; 0x40
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 0318 	add.w	r3, r7, #24
 8000ff6:	2228      	movs	r2, #40	; 0x28
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 f84a 	bl	8002094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001012:	2301      	movs	r3, #1
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001016:	2310      	movs	r3, #16
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101a:	2302      	movs	r3, #2
 800101c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800101e:	2300      	movs	r3, #0
 8001020:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001022:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001028:	f107 0318 	add.w	r3, r7, #24
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fc1f 	bl	8001870 <HAL_RCC_OscConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001038:	f000 f97e 	bl	8001338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	230f      	movs	r3, #15
 800103e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001040:	2302      	movs	r3, #2
 8001042:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800104c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2102      	movs	r1, #2
 8001056:	4618      	mov	r0, r3
 8001058:	f000 fe8c 	bl	8001d74 <HAL_RCC_ClockConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0x7a>
  {
	Error_Handler();
 8001062:	f000 f969 	bl	8001338 <Error_Handler>
  }
}
 8001066:	bf00      	nop
 8001068:	3740      	adds	r7, #64	; 0x40
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_GPIO_Init+0x70>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	4a19      	ldr	r2, [pc, #100]	; (80010e0 <MX_GPIO_Init+0x70>)
 800107c:	f043 0310 	orr.w	r3, r3, #16
 8001080:	6193      	str	r3, [r2, #24]
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_GPIO_Init+0x70>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_GPIO_Init+0x70>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <MX_GPIO_Init+0x70>)
 8001094:	f043 0320 	orr.w	r3, r3, #32
 8001098:	6193      	str	r3, [r2, #24]
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_GPIO_Init+0x70>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f003 0320 	and.w	r3, r3, #32
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_GPIO_Init+0x70>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <MX_GPIO_Init+0x70>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6193      	str	r3, [r2, #24]
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_GPIO_Init+0x70>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <MX_GPIO_Init+0x70>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <MX_GPIO_Init+0x70>)
 80010c4:	f043 0308 	orr.w	r3, r3, #8
 80010c8:	6193      	str	r3, [r2, #24]
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <MX_GPIO_Init+0x70>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	40021000 	.word	0x40021000

080010e4 <USER_RCC_Init>:

/* USER CODE BEGIN 4 */
void USER_RCC_Init(void){
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
	//I/O port A clock enable
	RCC->APB2ENR	|=	 RCC_APB2ENR_IOPAEN
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <USER_RCC_Init+0x34>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <USER_RCC_Init+0x34>)
 80010ee:	f443 7301 	orr.w	r3, r3, #516	; 0x204
 80010f2:	6193      	str	r3, [r2, #24]
  					|	 RCC_APB2ENR_ADC1EN;//	ADC 1 clock enable

	RCC->CFGR	|=	 RCC_CFGR_ADCPRE;//	ADC prescaler 1:8 for 8 MHz
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <USER_RCC_Init+0x34>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <USER_RCC_Init+0x34>)
 80010fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010fe:	6053      	str	r3, [r2, #4]


	RCC->APB1ENR	|=	 RCC_APB1ENR_TIM2EN//Timer 2 clock enable
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <USER_RCC_Init+0x34>)
 8001102:	69db      	ldr	r3, [r3, #28]
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <USER_RCC_Init+0x34>)
 8001106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800110a:	f043 0303 	orr.w	r3, r3, #3
 800110e:	61d3      	str	r3, [r2, #28]
					|	 RCC_APB1ENR_TIM3EN//Timer 3 clock enable
					|	 RCC_APB1ENR_USART3EN;//  	USART3 clock enable

}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	40021000 	.word	0x40021000

0800111c <USER_GPIO_Init>:
void USER_GPIO_Init(void){
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
	//PA0 (TIM2_CH1) as input floating
	GPIOA->CRL	&=	~GPIO_CRL_CNF0_1 & ~GPIO_CRL_MODE0; //Transmit timer
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <USER_GPIO_Init+0x6c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a18      	ldr	r2, [pc, #96]	; (8001188 <USER_GPIO_Init+0x6c>)
 8001126:	f023 030b 	bic.w	r3, r3, #11
 800112a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF0_0;
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <USER_GPIO_Init+0x6c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a15      	ldr	r2, [pc, #84]	; (8001188 <USER_GPIO_Init+0x6c>)
 8001132:	f043 0304 	orr.w	r3, r3, #4
 8001136:	6013      	str	r3, [r2, #0]

	//PA6 (TIM3_CH1) as input floating
	GPIOA->CRL	&=	~GPIO_CRL_CNF6_1 & ~GPIO_CRL_MODE6; //Flow Sensor
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <USER_GPIO_Init+0x6c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a12      	ldr	r2, [pc, #72]	; (8001188 <USER_GPIO_Init+0x6c>)
 800113e:	f023 6330 	bic.w	r3, r3, #184549376	; 0xb000000
 8001142:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF6_0;
 8001144:	4b10      	ldr	r3, [pc, #64]	; (8001188 <USER_GPIO_Init+0x6c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0f      	ldr	r2, [pc, #60]	; (8001188 <USER_GPIO_Init+0x6c>)
 800114a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800114e:	6013      	str	r3, [r2, #0]

	//pin PB10 (USART3_TX) as alternate function output push-pull, max speed 10MHz
	GPIOB->CRH	&=	~GPIO_CRH_CNF10_0 & ~GPIO_CRH_MODE10_1;
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <USER_GPIO_Init+0x70>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	4a0d      	ldr	r2, [pc, #52]	; (800118c <USER_GPIO_Init+0x70>)
 8001156:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800115a:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|=	 GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10_0; //UART TX
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <USER_GPIO_Init+0x70>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	4a0a      	ldr	r2, [pc, #40]	; (800118c <USER_GPIO_Init+0x70>)
 8001162:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
 8001166:	6053      	str	r3, [r2, #4]

	//pin PB11 (USART3_RX) as input pull-up
	GPIOB->CRH	&=	~GPIO_CRH_CNF11_0 & ~GPIO_CRH_MODE11; //UART RX
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <USER_GPIO_Init+0x70>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4a07      	ldr	r2, [pc, #28]	; (800118c <USER_GPIO_Init+0x70>)
 800116e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001172:	6053      	str	r3, [r2, #4]
	GPIOB->CRH	|=	 GPIO_CRH_CNF11_1;
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <USER_GPIO_Init+0x70>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <USER_GPIO_Init+0x70>)
 800117a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117e:	6053      	str	r3, [r2, #4]

}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	40010800 	.word	0x40010800
 800118c:	40010c00 	.word	0x40010c00

08001190 <USER_TIM2_Capture_Init>:

void USER_TIM2_Capture_Init(void){
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
	TIM2->CR1	&=	~TIM_CR1_CKD_0;
 8001194:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800119e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011a2:	6013      	str	r3, [r2, #0]
	TIM2->CR1	|=	 TIM_CR1_CKD_1;//	sampling (DTS) = TIM_CLK/4
 80011a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b2:	6013      	str	r3, [r2, #0]
	TIM2->CCMR1 	&=	~TIM_CCMR1_CC1S_1;
 80011b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011be:	f023 0302 	bic.w	r3, r3, #2
 80011c2:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 	|=	 TIM_CCMR1_CC1S_0;//	CC1 channel as input, mapped on TI1
 80011c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 	|=	 TIM_CCMR1_IC1F;//	filter -> DTS/32, N=8
 80011d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011de:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80011e2:	6193      	str	r3, [r2, #24]
	TIM2->CCER	|=	 TIM_CCER_CC1P;//	capture is done on falling edge
 80011e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ee:	f043 0302 	orr.w	r3, r3, #2
 80011f2:	6213      	str	r3, [r2, #32]
	TIM2->CCMR1 	&=	~TIM_CCMR1_IC1PSC;//	no prescaler
 80011f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011fe:	f023 030c 	bic.w	r3, r3, #12
 8001202:	6193      	str	r3, [r2, #24]
	TIM2->CCER	|=	 TIM_CCER_CC1E;//	capture enabled
 8001204:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6213      	str	r3, [r2, #32]
	TIM2->PSC	 =	 97;//		maximum prescaler
 8001214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001218:	2261      	movs	r2, #97	; 0x61
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->SMCR	&=	!TIM_SMCR_SMS;
 800121c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
	TIM2->CR1	&=	!TIM_CR1_CMS & !TIM_CR1_DIR & !TIM_CR1_UDIS;
 800122a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
	TIM2->SR	&=	!TIM_SR_UIF;
 8001238:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
	TIM2->CR1	|=	 TIM_CR1_CEN;//		counter enabled
 8001246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6013      	str	r3, [r2, #0]
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
	...

08001260 <USER_TIM3_Capture_Init>:
uint16_t USER_TIM2_Capture_Event(void){
	while( !(TIM2->SR & TIM_SR_CC1IF) );//		wait until a capture occurs
	return TIM2->CCR1;//				return the captured value
}

void USER_TIM3_Capture_Init(void){
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
	TIM3->CR1	&=	~TIM_CR1_CKD_0;
 8001264:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <USER_TIM3_Capture_Init+0x80>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a1d      	ldr	r2, [pc, #116]	; (80012e0 <USER_TIM3_Capture_Init+0x80>)
 800126a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800126e:	6013      	str	r3, [r2, #0]
	TIM3->CR1	|=	 TIM_CR1_CKD_1;//	sampling (DTS) = TIM_CLK/4
 8001270:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <USER_TIM3_Capture_Init+0x80>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a1a      	ldr	r2, [pc, #104]	; (80012e0 <USER_TIM3_Capture_Init+0x80>)
 8001276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127a:	6013      	str	r3, [r2, #0]
	TIM3->CCMR1 	&=	~TIM_CCMR1_CC1S_1;
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <USER_TIM3_Capture_Init+0x80>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <USER_TIM3_Capture_Init+0x80>)
 8001282:	f023 0302 	bic.w	r3, r3, #2
 8001286:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 	|=	 TIM_CCMR1_CC1S_0;//	CC1 channel as input, mapped on TI1
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <USER_TIM3_Capture_Init+0x80>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <USER_TIM3_Capture_Init+0x80>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 	|=	 TIM_CCMR1_IC1F;//	filter -> DTS/32, N=8
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <USER_TIM3_Capture_Init+0x80>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <USER_TIM3_Capture_Init+0x80>)
 800129a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800129e:	6193      	str	r3, [r2, #24]
	TIM3->CCER	|=	 TIM_CCER_CC1P;//	capture is done on falling edge
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <USER_TIM3_Capture_Init+0x80>)
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <USER_TIM3_Capture_Init+0x80>)
 80012a6:	f043 0302 	orr.w	r3, r3, #2
 80012aa:	6213      	str	r3, [r2, #32]
	TIM3->CCMR1 	&=	~TIM_CCMR1_IC1PSC;//	no prescaler
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <USER_TIM3_Capture_Init+0x80>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <USER_TIM3_Capture_Init+0x80>)
 80012b2:	f023 030c 	bic.w	r3, r3, #12
 80012b6:	6193      	str	r3, [r2, #24]
	TIM3->CCER	|=	 TIM_CCER_CC1E;//	capture enabled
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <USER_TIM3_Capture_Init+0x80>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <USER_TIM3_Capture_Init+0x80>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6213      	str	r3, [r2, #32]
	TIM3->PSC	 =	 97;//		maximum prescaler
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <USER_TIM3_Capture_Init+0x80>)
 80012c6:	2261      	movs	r2, #97	; 0x61
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28

	TIM3->CR1	|=	 TIM_CR1_CEN;//		counter enabled
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <USER_TIM3_Capture_Init+0x80>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <USER_TIM3_Capture_Init+0x80>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6013      	str	r3, [r2, #0]
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40000400 	.word	0x40000400

080012e4 <USER_USART3_Init>:
uint16_t USER_TIM3_Capture_Event(void){
	while( !(TIM3->SR & TIM_SR_CC1IF) );//		wait until a capture occurs
	return TIM3->CCR1;//				return the captured value
}

void USER_USART3_Init(void){
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
	USART3->CR1	|=	 USART_CR1_UE;//		USART enabled
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <USER_USART3_Init+0x50>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	4a11      	ldr	r2, [pc, #68]	; (8001334 <USER_USART3_Init+0x50>)
 80012ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012f2:	60d3      	str	r3, [r2, #12]
	USART3->CR1	&=	~USART_CR1_M//		  	1 start bit, 8 data bits
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <USER_USART3_Init+0x50>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <USER_USART3_Init+0x50>)
 80012fa:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 80012fe:	60d3      	str	r3, [r2, #12]
			&	~USART_CR1_PCE;//		parity control disabled
	USART3->CR2	&=	~USART_CR2_STOP;//  		1 stop bit
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <USER_USART3_Init+0x50>)
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <USER_USART3_Init+0x50>)
 8001306:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800130a:	6113      	str	r3, [r2, #16]
	USART3->BRR	 =	 0xD05;//			9600 bps -> 208.33,
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <USER_USART3_Init+0x50>)
 800130e:	f640 5205 	movw	r2, #3333	; 0xd05
 8001312:	609a      	str	r2, [r3, #8]
	//USARTDIV = 32*10^6/(16*9600)
	//NEW USARTDIV = 32*10^6/(16*115200)=17.361
	//BRR = [17->HEX=11][.361*16->HEX=6]=116
	//`->BRR = 0x116;

	USART3->CR1	|=	 USART_CR1_TE;//		        transmitter enabled
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <USER_USART3_Init+0x50>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	4a06      	ldr	r2, [pc, #24]	; (8001334 <USER_USART3_Init+0x50>)
 800131a:	f043 0308 	orr.w	r3, r3, #8
 800131e:	60d3      	str	r3, [r2, #12]
	USART3->CR1	|=	 USART_CR1_RE;//		        receiver enabled
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <USER_USART3_Init+0x50>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	4a03      	ldr	r2, [pc, #12]	; (8001334 <USER_USART3_Init+0x50>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	40004800 	.word	0x40004800

08001338 <Error_Handler>:
/**
  * @brief  This function is executed in case of erropr occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133c:	b672      	cpsid	i
}
 800133e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001340:	e7fe      	b.n	8001340 <Error_Handler+0x8>
	...

08001344 <_write>:
 */

#include "myprintf.h"
#include "main.h"

int _write(int file, char *ptr, int len){
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	e00f      	b.n	8001376 <_write+0x32>
		while( ( USART3->SR & USART_SR_TXE ) == 0 ){}
 8001356:	bf00      	nop
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <_write+0x48>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f9      	beq.n	8001358 <_write+0x14>
		USART3->DR = *ptr++;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	60ba      	str	r2, [r7, #8]
 800136a:	781a      	ldrb	r2, [r3, #0]
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <_write+0x48>)
 800136e:	605a      	str	r2, [r3, #4]
	for(DataIdx=0; DataIdx<len; DataIdx++){
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	3301      	adds	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	429a      	cmp	r2, r3
 800137c:	dbeb      	blt.n	8001356 <_write+0x12>
	}
	return len;
 800137e:	687b      	ldr	r3, [r7, #4]
}
 8001380:	4618      	mov	r0, r3
 8001382:	371c      	adds	r7, #28
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40004800 	.word	0x40004800

08001390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_MspInit+0x5c>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	4a14      	ldr	r2, [pc, #80]	; (80013ec <HAL_MspInit+0x5c>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6193      	str	r3, [r2, #24]
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_MspInit+0x5c>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_MspInit+0x5c>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <HAL_MspInit+0x5c>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	61d3      	str	r3, [r2, #28]
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_MspInit+0x5c>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_MspInit+0x60>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <HAL_MspInit+0x60>)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010000 	.word	0x40010000

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <NMI_Handler+0x4>

080013fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr

0800142a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143a:	f000 f919 	bl	8001670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}

08001442 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  return 1;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <_kill>:

int _kill(int pid, int sig)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800145a:	f000 fdf1 	bl	8002040 <__errno>
 800145e:	4603      	mov	r3, r0
 8001460:	2216      	movs	r2, #22
 8001462:	601a      	str	r2, [r3, #0]
  return -1;
 8001464:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <_exit>:

void _exit (int status)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001478:	f04f 31ff 	mov.w	r1, #4294967295
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ffe7 	bl	8001450 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001482:	e7fe      	b.n	8001482 <_exit+0x12>

08001484 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	e00a      	b.n	80014ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001496:	f3af 8000 	nop.w
 800149a:	4601      	mov	r1, r0
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	60ba      	str	r2, [r7, #8]
 80014a2:	b2ca      	uxtb	r2, r1
 80014a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dbf0      	blt.n	8001496 <_read+0x12>
  }

  return len;
 80014b4:	687b      	ldr	r3, [r7, #4]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <_close>:
  }
  return len;
}

int _close(int file)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014e4:	605a      	str	r2, [r3, #4]
  return 0;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr

080014f2 <_isatty>:

int _isatty(int file)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001506:	b480      	push	{r7}
 8001508:	b085      	sub	sp, #20
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
	...

08001520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001528:	4a14      	ldr	r2, [pc, #80]	; (800157c <_sbrk+0x5c>)
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <_sbrk+0x60>)
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d102      	bne.n	8001542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <_sbrk+0x64>)
 800153e:	4a12      	ldr	r2, [pc, #72]	; (8001588 <_sbrk+0x68>)
 8001540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	429a      	cmp	r2, r3
 800154e:	d207      	bcs.n	8001560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001550:	f000 fd76 	bl	8002040 <__errno>
 8001554:	4603      	mov	r3, r0
 8001556:	220c      	movs	r2, #12
 8001558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	e009      	b.n	8001574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <_sbrk+0x64>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <_sbrk+0x64>)
 8001570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20005000 	.word	0x20005000
 8001580:	00000400 	.word	0x00000400
 8001584:	2000008c 	.word	0x2000008c
 8001588:	200000a8 	.word	0x200000a8

0800158c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800159a:	490d      	ldr	r1, [pc, #52]	; (80015d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b0:	4c0a      	ldr	r4, [pc, #40]	; (80015dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015be:	f7ff ffe5 	bl	800158c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015c2:	f000 fd43 	bl	800204c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015c6:	f7ff fbeb 	bl	8000da0 <main>
  bx lr
 80015ca:	4770      	bx	lr
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015d4:	080032f8 	.word	0x080032f8
  ldr r2, =_sbss
 80015d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015dc:	200000a4 	.word	0x200000a4

080015e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC1_2_IRQHandler>
	...

080015e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_Init+0x28>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_Init+0x28>)
 80015ee:	f043 0310 	orr.w	r3, r3, #16
 80015f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f4:	2003      	movs	r0, #3
 80015f6:	f000 f907 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f000 f808 	bl	8001610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001600:	f7ff fec6 	bl	8001390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40022000 	.word	0x40022000

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_InitTick+0x54>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_InitTick+0x58>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001626:	fbb3 f3f1 	udiv	r3, r3, r1
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f911 	bl	8001856 <HAL_SYSTICK_Config>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e00e      	b.n	800165c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b0f      	cmp	r3, #15
 8001642:	d80a      	bhi.n	800165a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001644:	2200      	movs	r2, #0
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f000 f8e7 	bl	800181e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001650:	4a06      	ldr	r2, [pc, #24]	; (800166c <HAL_InitTick+0x5c>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	e000      	b.n	800165c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000000 	.word	0x20000000
 8001668:	20000008 	.word	0x20000008
 800166c:	20000004 	.word	0x20000004

08001670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_IncTick+0x1c>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <HAL_IncTick+0x20>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4413      	add	r3, r2
 8001680:	4a03      	ldr	r2, [pc, #12]	; (8001690 <HAL_IncTick+0x20>)
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	20000008 	.word	0x20000008
 8001690:	20000090 	.word	0x20000090

08001694 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return uwTick;
 8001698:	4b02      	ldr	r3, [pc, #8]	; (80016a4 <HAL_GetTick+0x10>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	20000090 	.word	0x20000090

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db0a      	blt.n	8001736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	490c      	ldr	r1, [pc, #48]	; (8001758 <__NVIC_SetPriority+0x4c>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	0112      	lsls	r2, r2, #4
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	440b      	add	r3, r1
 8001730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001734:	e00a      	b.n	800174c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4908      	ldr	r1, [pc, #32]	; (800175c <__NVIC_SetPriority+0x50>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	3b04      	subs	r3, #4
 8001744:	0112      	lsls	r2, r2, #4
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	440b      	add	r3, r1
 800174a:	761a      	strb	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000e100 	.word	0xe000e100
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f1c3 0307 	rsb	r3, r3, #7
 800177a:	2b04      	cmp	r3, #4
 800177c:	bf28      	it	cs
 800177e:	2304      	movcs	r3, #4
 8001780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3304      	adds	r3, #4
 8001786:	2b06      	cmp	r3, #6
 8001788:	d902      	bls.n	8001790 <NVIC_EncodePriority+0x30>
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3b03      	subs	r3, #3
 800178e:	e000      	b.n	8001792 <NVIC_EncodePriority+0x32>
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	f04f 32ff 	mov.w	r2, #4294967295
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	401a      	ands	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	43d9      	mvns	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	4313      	orrs	r3, r2
         );
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3724      	adds	r7, #36	; 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f7ff ff90 	bl	800170c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff49 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001830:	f7ff ff5e 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ff90 	bl	8001760 <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5f 	bl	800170c <__NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffb0 	bl	80017c4 <SysTick_Config>
 8001864:	4603      	mov	r3, r0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e272      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8087 	beq.w	800199e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001890:	4b92      	ldr	r3, [pc, #584]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b04      	cmp	r3, #4
 800189a:	d00c      	beq.n	80018b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800189c:	4b8f      	ldr	r3, [pc, #572]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d112      	bne.n	80018ce <HAL_RCC_OscConfig+0x5e>
 80018a8:	4b8c      	ldr	r3, [pc, #560]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b4:	d10b      	bne.n	80018ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b6:	4b89      	ldr	r3, [pc, #548]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d06c      	beq.n	800199c <HAL_RCC_OscConfig+0x12c>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d168      	bne.n	800199c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e24c      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d6:	d106      	bne.n	80018e6 <HAL_RCC_OscConfig+0x76>
 80018d8:	4b80      	ldr	r3, [pc, #512]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a7f      	ldr	r2, [pc, #508]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	e02e      	b.n	8001944 <HAL_RCC_OscConfig+0xd4>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10c      	bne.n	8001908 <HAL_RCC_OscConfig+0x98>
 80018ee:	4b7b      	ldr	r3, [pc, #492]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a7a      	ldr	r2, [pc, #488]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	4b78      	ldr	r3, [pc, #480]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a77      	ldr	r2, [pc, #476]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001900:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	e01d      	b.n	8001944 <HAL_RCC_OscConfig+0xd4>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0xbc>
 8001912:	4b72      	ldr	r3, [pc, #456]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a71      	ldr	r2, [pc, #452]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b6f      	ldr	r3, [pc, #444]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a6e      	ldr	r2, [pc, #440]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e00b      	b.n	8001944 <HAL_RCC_OscConfig+0xd4>
 800192c:	4b6b      	ldr	r3, [pc, #428]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a6a      	ldr	r2, [pc, #424]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b68      	ldr	r3, [pc, #416]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a67      	ldr	r2, [pc, #412]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 800193e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001942:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff fea2 	bl	8001694 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001954:	f7ff fe9e 	bl	8001694 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	; 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e200      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	4b5d      	ldr	r3, [pc, #372]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0xe4>
 8001972:	e014      	b.n	800199e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff fe8e 	bl	8001694 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800197c:	f7ff fe8a 	bl	8001694 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b64      	cmp	r3, #100	; 0x64
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e1ec      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198e:	4b53      	ldr	r3, [pc, #332]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x10c>
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d063      	beq.n	8001a72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019aa:	4b4c      	ldr	r3, [pc, #304]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00b      	beq.n	80019ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019b6:	4b49      	ldr	r3, [pc, #292]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d11c      	bne.n	80019fc <HAL_RCC_OscConfig+0x18c>
 80019c2:	4b46      	ldr	r3, [pc, #280]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d116      	bne.n	80019fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ce:	4b43      	ldr	r3, [pc, #268]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <HAL_RCC_OscConfig+0x176>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e1c0      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e6:	4b3d      	ldr	r3, [pc, #244]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4939      	ldr	r1, [pc, #228]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fa:	e03a      	b.n	8001a72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d020      	beq.n	8001a46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a04:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fe43 	bl	8001694 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a12:	f7ff fe3f 	bl	8001694 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e1a1      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a24:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a30:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4927      	ldr	r1, [pc, #156]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]
 8001a44:	e015      	b.n	8001a72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fe22 	bl	8001694 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a54:	f7ff fe1e 	bl	8001694 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e180      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d03a      	beq.n	8001af4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d019      	beq.n	8001aba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8c:	f7ff fe02 	bl	8001694 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a94:	f7ff fdfe 	bl	8001694 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e160      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f000 faa6 	bl	8002004 <RCC_Delay>
 8001ab8:	e01c      	b.n	8001af4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac0:	f7ff fde8 	bl	8001694 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac6:	e00f      	b.n	8001ae8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac8:	f7ff fde4 	bl	8001694 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d908      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e146      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	42420000 	.word	0x42420000
 8001ae4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae8:	4b92      	ldr	r3, [pc, #584]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1e9      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80a6 	beq.w	8001c4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b06:	4b8b      	ldr	r3, [pc, #556]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10d      	bne.n	8001b2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	4b88      	ldr	r3, [pc, #544]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	4a87      	ldr	r2, [pc, #540]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	61d3      	str	r3, [r2, #28]
 8001b1e:	4b85      	ldr	r3, [pc, #532]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2e:	4b82      	ldr	r3, [pc, #520]	; (8001d38 <HAL_RCC_OscConfig+0x4c8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d118      	bne.n	8001b6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3a:	4b7f      	ldr	r3, [pc, #508]	; (8001d38 <HAL_RCC_OscConfig+0x4c8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7e      	ldr	r2, [pc, #504]	; (8001d38 <HAL_RCC_OscConfig+0x4c8>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b46:	f7ff fda5 	bl	8001694 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4e:	f7ff fda1 	bl	8001694 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b64      	cmp	r3, #100	; 0x64
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e103      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	4b75      	ldr	r3, [pc, #468]	; (8001d38 <HAL_RCC_OscConfig+0x4c8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x312>
 8001b74:	4b6f      	ldr	r3, [pc, #444]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4a6e      	ldr	r2, [pc, #440]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6213      	str	r3, [r2, #32]
 8001b80:	e02d      	b.n	8001bde <HAL_RCC_OscConfig+0x36e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x334>
 8001b8a:	4b6a      	ldr	r3, [pc, #424]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	4a69      	ldr	r2, [pc, #420]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	6213      	str	r3, [r2, #32]
 8001b96:	4b67      	ldr	r3, [pc, #412]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4a66      	ldr	r2, [pc, #408]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	f023 0304 	bic.w	r3, r3, #4
 8001ba0:	6213      	str	r3, [r2, #32]
 8001ba2:	e01c      	b.n	8001bde <HAL_RCC_OscConfig+0x36e>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b05      	cmp	r3, #5
 8001baa:	d10c      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x356>
 8001bac:	4b61      	ldr	r3, [pc, #388]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4a60      	ldr	r2, [pc, #384]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	6213      	str	r3, [r2, #32]
 8001bb8:	4b5e      	ldr	r3, [pc, #376]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a5d      	ldr	r2, [pc, #372]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	e00b      	b.n	8001bde <HAL_RCC_OscConfig+0x36e>
 8001bc6:	4b5b      	ldr	r3, [pc, #364]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	4a5a      	ldr	r2, [pc, #360]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	6213      	str	r3, [r2, #32]
 8001bd2:	4b58      	ldr	r3, [pc, #352]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	4a57      	ldr	r2, [pc, #348]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	f023 0304 	bic.w	r3, r3, #4
 8001bdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d015      	beq.n	8001c12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be6:	f7ff fd55 	bl	8001694 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bec:	e00a      	b.n	8001c04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7ff fd51 	bl	8001694 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e0b1      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c04:	4b4b      	ldr	r3, [pc, #300]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0ee      	beq.n	8001bee <HAL_RCC_OscConfig+0x37e>
 8001c10:	e014      	b.n	8001c3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c12:	f7ff fd3f 	bl	8001694 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1a:	f7ff fd3b 	bl	8001694 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e09b      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c30:	4b40      	ldr	r3, [pc, #256]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1ee      	bne.n	8001c1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d105      	bne.n	8001c4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c42:	4b3c      	ldr	r3, [pc, #240]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	4a3b      	ldr	r2, [pc, #236]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8087 	beq.w	8001d66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c58:	4b36      	ldr	r3, [pc, #216]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d061      	beq.n	8001d28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d146      	bne.n	8001cfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6c:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <HAL_RCC_OscConfig+0x4cc>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c72:	f7ff fd0f 	bl	8001694 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7ff fd0b 	bl	8001694 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e06d      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8c:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f0      	bne.n	8001c7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca0:	d108      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ca2:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	4921      	ldr	r1, [pc, #132]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a19      	ldr	r1, [r3, #32]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	491b      	ldr	r1, [pc, #108]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_RCC_OscConfig+0x4cc>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff fcdf 	bl	8001694 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cda:	f7ff fcdb 	bl	8001694 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e03d      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x46a>
 8001cf8:	e035      	b.n	8001d66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_RCC_OscConfig+0x4cc>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff fcc8 	bl	8001694 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d08:	f7ff fcc4 	bl	8001694 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e026      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x498>
 8001d26:	e01e      	b.n	8001d66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e019      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_OscConfig+0x500>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000

08001d74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0d0      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d88:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d910      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4b67      	ldr	r3, [pc, #412]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 0207 	bic.w	r2, r3, #7
 8001d9e:	4965      	ldr	r1, [pc, #404]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0b8      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d020      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd0:	4b59      	ldr	r3, [pc, #356]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a58      	ldr	r2, [pc, #352]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de8:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a52      	ldr	r2, [pc, #328]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001df2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df4:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	494d      	ldr	r1, [pc, #308]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d040      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d115      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e07f      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e32:	4b41      	ldr	r3, [pc, #260]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e073      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e42:	4b3d      	ldr	r3, [pc, #244]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e06b      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e52:	4b39      	ldr	r3, [pc, #228]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f023 0203 	bic.w	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4936      	ldr	r1, [pc, #216]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e64:	f7ff fc16 	bl	8001694 <HAL_GetTick>
 8001e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6c:	f7ff fc12 	bl	8001694 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e053      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 020c 	and.w	r2, r3, #12
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d1eb      	bne.n	8001e6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d210      	bcs.n	8001ec4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 0207 	bic.w	r2, r3, #7
 8001eaa:	4922      	ldr	r1, [pc, #136]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e032      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4916      	ldr	r1, [pc, #88]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	490e      	ldr	r1, [pc, #56]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f02:	f000 f821 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001f06:	4602      	mov	r2, r0
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	490a      	ldr	r1, [pc, #40]	; (8001f3c <HAL_RCC_ClockConfig+0x1c8>)
 8001f14:	5ccb      	ldrb	r3, [r1, r3]
 8001f16:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1a:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <HAL_RCC_ClockConfig+0x1cc>)
 8001f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_RCC_ClockConfig+0x1d0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fb74 	bl	8001610 <HAL_InitTick>

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40022000 	.word	0x40022000
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08003198 	.word	0x08003198
 8001f40:	20000000 	.word	0x20000000
 8001f44:	20000004 	.word	0x20000004

08001f48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f48:	b490      	push	{r4, r7}
 8001f4a:	b08a      	sub	sp, #40	; 0x28
 8001f4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f4e:	4b29      	ldr	r3, [pc, #164]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f50:	1d3c      	adds	r4, r7, #4
 8001f52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f58:	f240 2301 	movw	r3, #513	; 0x201
 8001f5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d002      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x40>
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d003      	beq.n	8001f8e <HAL_RCC_GetSysClockFreq+0x46>
 8001f86:	e02b      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f88:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f8a:	623b      	str	r3, [r7, #32]
      break;
 8001f8c:	e02b      	b.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	0c9b      	lsrs	r3, r3, #18
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3328      	adds	r3, #40	; 0x28
 8001f98:	443b      	add	r3, r7
 8001f9a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f9e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d012      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001faa:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	0c5b      	lsrs	r3, r3, #17
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	3328      	adds	r3, #40	; 0x28
 8001fb6:	443b      	add	r3, r7
 8001fb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fbc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	4a0e      	ldr	r2, [pc, #56]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fc2:	fb03 f202 	mul.w	r2, r3, r2
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fce:	e004      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fd4:	fb02 f303 	mul.w	r3, r2, r3
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	623b      	str	r3, [r7, #32]
      break;
 8001fde:	e002      	b.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fe2:	623b      	str	r3, [r7, #32]
      break;
 8001fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3728      	adds	r7, #40	; 0x28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc90      	pop	{r4, r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	08003188 	.word	0x08003188
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	007a1200 	.word	0x007a1200
 8002000:	003d0900 	.word	0x003d0900

08002004 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <RCC_Delay+0x34>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <RCC_Delay+0x38>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	0a5b      	lsrs	r3, r3, #9
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002020:	bf00      	nop
  }
  while (Delay --);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1e5a      	subs	r2, r3, #1
 8002026:	60fa      	str	r2, [r7, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f9      	bne.n	8002020 <RCC_Delay+0x1c>
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	20000000 	.word	0x20000000
 800203c:	10624dd3 	.word	0x10624dd3

08002040 <__errno>:
 8002040:	4b01      	ldr	r3, [pc, #4]	; (8002048 <__errno+0x8>)
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	2000000c 	.word	0x2000000c

0800204c <__libc_init_array>:
 800204c:	b570      	push	{r4, r5, r6, lr}
 800204e:	2600      	movs	r6, #0
 8002050:	4d0c      	ldr	r5, [pc, #48]	; (8002084 <__libc_init_array+0x38>)
 8002052:	4c0d      	ldr	r4, [pc, #52]	; (8002088 <__libc_init_array+0x3c>)
 8002054:	1b64      	subs	r4, r4, r5
 8002056:	10a4      	asrs	r4, r4, #2
 8002058:	42a6      	cmp	r6, r4
 800205a:	d109      	bne.n	8002070 <__libc_init_array+0x24>
 800205c:	f001 f878 	bl	8003150 <_init>
 8002060:	2600      	movs	r6, #0
 8002062:	4d0a      	ldr	r5, [pc, #40]	; (800208c <__libc_init_array+0x40>)
 8002064:	4c0a      	ldr	r4, [pc, #40]	; (8002090 <__libc_init_array+0x44>)
 8002066:	1b64      	subs	r4, r4, r5
 8002068:	10a4      	asrs	r4, r4, #2
 800206a:	42a6      	cmp	r6, r4
 800206c:	d105      	bne.n	800207a <__libc_init_array+0x2e>
 800206e:	bd70      	pop	{r4, r5, r6, pc}
 8002070:	f855 3b04 	ldr.w	r3, [r5], #4
 8002074:	4798      	blx	r3
 8002076:	3601      	adds	r6, #1
 8002078:	e7ee      	b.n	8002058 <__libc_init_array+0xc>
 800207a:	f855 3b04 	ldr.w	r3, [r5], #4
 800207e:	4798      	blx	r3
 8002080:	3601      	adds	r6, #1
 8002082:	e7f2      	b.n	800206a <__libc_init_array+0x1e>
 8002084:	080032f0 	.word	0x080032f0
 8002088:	080032f0 	.word	0x080032f0
 800208c:	080032f0 	.word	0x080032f0
 8002090:	080032f4 	.word	0x080032f4

08002094 <memset>:
 8002094:	4603      	mov	r3, r0
 8002096:	4402      	add	r2, r0
 8002098:	4293      	cmp	r3, r2
 800209a:	d100      	bne.n	800209e <memset+0xa>
 800209c:	4770      	bx	lr
 800209e:	f803 1b01 	strb.w	r1, [r3], #1
 80020a2:	e7f9      	b.n	8002098 <memset+0x4>

080020a4 <iprintf>:
 80020a4:	b40f      	push	{r0, r1, r2, r3}
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <iprintf+0x2c>)
 80020a8:	b513      	push	{r0, r1, r4, lr}
 80020aa:	681c      	ldr	r4, [r3, #0]
 80020ac:	b124      	cbz	r4, 80020b8 <iprintf+0x14>
 80020ae:	69a3      	ldr	r3, [r4, #24]
 80020b0:	b913      	cbnz	r3, 80020b8 <iprintf+0x14>
 80020b2:	4620      	mov	r0, r4
 80020b4:	f000 f8c2 	bl	800223c <__sinit>
 80020b8:	ab05      	add	r3, sp, #20
 80020ba:	4620      	mov	r0, r4
 80020bc:	9a04      	ldr	r2, [sp, #16]
 80020be:	68a1      	ldr	r1, [r4, #8]
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	f000 fa79 	bl	80025b8 <_vfiprintf_r>
 80020c6:	b002      	add	sp, #8
 80020c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020cc:	b004      	add	sp, #16
 80020ce:	4770      	bx	lr
 80020d0:	2000000c 	.word	0x2000000c

080020d4 <rand>:
 80020d4:	4b16      	ldr	r3, [pc, #88]	; (8002130 <rand+0x5c>)
 80020d6:	b510      	push	{r4, lr}
 80020d8:	681c      	ldr	r4, [r3, #0]
 80020da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020dc:	b9b3      	cbnz	r3, 800210c <rand+0x38>
 80020de:	2018      	movs	r0, #24
 80020e0:	f000 f95e 	bl	80023a0 <malloc>
 80020e4:	4602      	mov	r2, r0
 80020e6:	63a0      	str	r0, [r4, #56]	; 0x38
 80020e8:	b920      	cbnz	r0, 80020f4 <rand+0x20>
 80020ea:	214e      	movs	r1, #78	; 0x4e
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <rand+0x60>)
 80020ee:	4812      	ldr	r0, [pc, #72]	; (8002138 <rand+0x64>)
 80020f0:	f000 f82e 	bl	8002150 <__assert_func>
 80020f4:	4911      	ldr	r1, [pc, #68]	; (800213c <rand+0x68>)
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <rand+0x6c>)
 80020f8:	e9c0 1300 	strd	r1, r3, [r0]
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <rand+0x70>)
 80020fe:	2100      	movs	r1, #0
 8002100:	6083      	str	r3, [r0, #8]
 8002102:	230b      	movs	r3, #11
 8002104:	8183      	strh	r3, [r0, #12]
 8002106:	2001      	movs	r0, #1
 8002108:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800210c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800210e:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <rand+0x74>)
 8002110:	6920      	ldr	r0, [r4, #16]
 8002112:	6963      	ldr	r3, [r4, #20]
 8002114:	4342      	muls	r2, r0
 8002116:	490d      	ldr	r1, [pc, #52]	; (800214c <rand+0x78>)
 8002118:	fb01 2203 	mla	r2, r1, r3, r2
 800211c:	fba0 0101 	umull	r0, r1, r0, r1
 8002120:	1c43      	adds	r3, r0, #1
 8002122:	eb42 0001 	adc.w	r0, r2, r1
 8002126:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800212a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800212e:	bd10      	pop	{r4, pc}
 8002130:	2000000c 	.word	0x2000000c
 8002134:	080031ac 	.word	0x080031ac
 8002138:	080031c3 	.word	0x080031c3
 800213c:	abcd330e 	.word	0xabcd330e
 8002140:	e66d1234 	.word	0xe66d1234
 8002144:	0005deec 	.word	0x0005deec
 8002148:	5851f42d 	.word	0x5851f42d
 800214c:	4c957f2d 	.word	0x4c957f2d

08002150 <__assert_func>:
 8002150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002152:	4614      	mov	r4, r2
 8002154:	461a      	mov	r2, r3
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <__assert_func+0x2c>)
 8002158:	4605      	mov	r5, r0
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68d8      	ldr	r0, [r3, #12]
 800215e:	b14c      	cbz	r4, 8002174 <__assert_func+0x24>
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <__assert_func+0x30>)
 8002162:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002166:	9100      	str	r1, [sp, #0]
 8002168:	462b      	mov	r3, r5
 800216a:	4906      	ldr	r1, [pc, #24]	; (8002184 <__assert_func+0x34>)
 800216c:	f000 f8e4 	bl	8002338 <fiprintf>
 8002170:	f000 fe0e 	bl	8002d90 <abort>
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <__assert_func+0x38>)
 8002176:	461c      	mov	r4, r3
 8002178:	e7f3      	b.n	8002162 <__assert_func+0x12>
 800217a:	bf00      	nop
 800217c:	2000000c 	.word	0x2000000c
 8002180:	0800321e 	.word	0x0800321e
 8002184:	0800322b 	.word	0x0800322b
 8002188:	08003259 	.word	0x08003259

0800218c <std>:
 800218c:	2300      	movs	r3, #0
 800218e:	b510      	push	{r4, lr}
 8002190:	4604      	mov	r4, r0
 8002192:	e9c0 3300 	strd	r3, r3, [r0]
 8002196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800219a:	6083      	str	r3, [r0, #8]
 800219c:	8181      	strh	r1, [r0, #12]
 800219e:	6643      	str	r3, [r0, #100]	; 0x64
 80021a0:	81c2      	strh	r2, [r0, #14]
 80021a2:	6183      	str	r3, [r0, #24]
 80021a4:	4619      	mov	r1, r3
 80021a6:	2208      	movs	r2, #8
 80021a8:	305c      	adds	r0, #92	; 0x5c
 80021aa:	f7ff ff73 	bl	8002094 <memset>
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <std+0x38>)
 80021b0:	6224      	str	r4, [r4, #32]
 80021b2:	6263      	str	r3, [r4, #36]	; 0x24
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <std+0x3c>)
 80021b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <std+0x40>)
 80021ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <std+0x44>)
 80021be:	6323      	str	r3, [r4, #48]	; 0x30
 80021c0:	bd10      	pop	{r4, pc}
 80021c2:	bf00      	nop
 80021c4:	08002b65 	.word	0x08002b65
 80021c8:	08002b87 	.word	0x08002b87
 80021cc:	08002bbf 	.word	0x08002bbf
 80021d0:	08002be3 	.word	0x08002be3

080021d4 <_cleanup_r>:
 80021d4:	4901      	ldr	r1, [pc, #4]	; (80021dc <_cleanup_r+0x8>)
 80021d6:	f000 b8c1 	b.w	800235c <_fwalk_reent>
 80021da:	bf00      	nop
 80021dc:	08002ec5 	.word	0x08002ec5

080021e0 <__sfmoreglue>:
 80021e0:	2268      	movs	r2, #104	; 0x68
 80021e2:	b570      	push	{r4, r5, r6, lr}
 80021e4:	1e4d      	subs	r5, r1, #1
 80021e6:	4355      	muls	r5, r2
 80021e8:	460e      	mov	r6, r1
 80021ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80021ee:	f000 f947 	bl	8002480 <_malloc_r>
 80021f2:	4604      	mov	r4, r0
 80021f4:	b140      	cbz	r0, 8002208 <__sfmoreglue+0x28>
 80021f6:	2100      	movs	r1, #0
 80021f8:	e9c0 1600 	strd	r1, r6, [r0]
 80021fc:	300c      	adds	r0, #12
 80021fe:	60a0      	str	r0, [r4, #8]
 8002200:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002204:	f7ff ff46 	bl	8002094 <memset>
 8002208:	4620      	mov	r0, r4
 800220a:	bd70      	pop	{r4, r5, r6, pc}

0800220c <__sfp_lock_acquire>:
 800220c:	4801      	ldr	r0, [pc, #4]	; (8002214 <__sfp_lock_acquire+0x8>)
 800220e:	f000 b8c5 	b.w	800239c <__retarget_lock_acquire_recursive>
 8002212:	bf00      	nop
 8002214:	20000095 	.word	0x20000095

08002218 <__sfp_lock_release>:
 8002218:	4801      	ldr	r0, [pc, #4]	; (8002220 <__sfp_lock_release+0x8>)
 800221a:	f000 b8c0 	b.w	800239e <__retarget_lock_release_recursive>
 800221e:	bf00      	nop
 8002220:	20000095 	.word	0x20000095

08002224 <__sinit_lock_acquire>:
 8002224:	4801      	ldr	r0, [pc, #4]	; (800222c <__sinit_lock_acquire+0x8>)
 8002226:	f000 b8b9 	b.w	800239c <__retarget_lock_acquire_recursive>
 800222a:	bf00      	nop
 800222c:	20000096 	.word	0x20000096

08002230 <__sinit_lock_release>:
 8002230:	4801      	ldr	r0, [pc, #4]	; (8002238 <__sinit_lock_release+0x8>)
 8002232:	f000 b8b4 	b.w	800239e <__retarget_lock_release_recursive>
 8002236:	bf00      	nop
 8002238:	20000096 	.word	0x20000096

0800223c <__sinit>:
 800223c:	b510      	push	{r4, lr}
 800223e:	4604      	mov	r4, r0
 8002240:	f7ff fff0 	bl	8002224 <__sinit_lock_acquire>
 8002244:	69a3      	ldr	r3, [r4, #24]
 8002246:	b11b      	cbz	r3, 8002250 <__sinit+0x14>
 8002248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800224c:	f7ff bff0 	b.w	8002230 <__sinit_lock_release>
 8002250:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002254:	6523      	str	r3, [r4, #80]	; 0x50
 8002256:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <__sinit+0x68>)
 8002258:	4a13      	ldr	r2, [pc, #76]	; (80022a8 <__sinit+0x6c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	62a2      	str	r2, [r4, #40]	; 0x28
 800225e:	42a3      	cmp	r3, r4
 8002260:	bf08      	it	eq
 8002262:	2301      	moveq	r3, #1
 8002264:	4620      	mov	r0, r4
 8002266:	bf08      	it	eq
 8002268:	61a3      	streq	r3, [r4, #24]
 800226a:	f000 f81f 	bl	80022ac <__sfp>
 800226e:	6060      	str	r0, [r4, #4]
 8002270:	4620      	mov	r0, r4
 8002272:	f000 f81b 	bl	80022ac <__sfp>
 8002276:	60a0      	str	r0, [r4, #8]
 8002278:	4620      	mov	r0, r4
 800227a:	f000 f817 	bl	80022ac <__sfp>
 800227e:	2200      	movs	r2, #0
 8002280:	2104      	movs	r1, #4
 8002282:	60e0      	str	r0, [r4, #12]
 8002284:	6860      	ldr	r0, [r4, #4]
 8002286:	f7ff ff81 	bl	800218c <std>
 800228a:	2201      	movs	r2, #1
 800228c:	2109      	movs	r1, #9
 800228e:	68a0      	ldr	r0, [r4, #8]
 8002290:	f7ff ff7c 	bl	800218c <std>
 8002294:	2202      	movs	r2, #2
 8002296:	2112      	movs	r1, #18
 8002298:	68e0      	ldr	r0, [r4, #12]
 800229a:	f7ff ff77 	bl	800218c <std>
 800229e:	2301      	movs	r3, #1
 80022a0:	61a3      	str	r3, [r4, #24]
 80022a2:	e7d1      	b.n	8002248 <__sinit+0xc>
 80022a4:	080031a8 	.word	0x080031a8
 80022a8:	080021d5 	.word	0x080021d5

080022ac <__sfp>:
 80022ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ae:	4607      	mov	r7, r0
 80022b0:	f7ff ffac 	bl	800220c <__sfp_lock_acquire>
 80022b4:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <__sfp+0x84>)
 80022b6:	681e      	ldr	r6, [r3, #0]
 80022b8:	69b3      	ldr	r3, [r6, #24]
 80022ba:	b913      	cbnz	r3, 80022c2 <__sfp+0x16>
 80022bc:	4630      	mov	r0, r6
 80022be:	f7ff ffbd 	bl	800223c <__sinit>
 80022c2:	3648      	adds	r6, #72	; 0x48
 80022c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	d503      	bpl.n	80022d4 <__sfp+0x28>
 80022cc:	6833      	ldr	r3, [r6, #0]
 80022ce:	b30b      	cbz	r3, 8002314 <__sfp+0x68>
 80022d0:	6836      	ldr	r6, [r6, #0]
 80022d2:	e7f7      	b.n	80022c4 <__sfp+0x18>
 80022d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80022d8:	b9d5      	cbnz	r5, 8002310 <__sfp+0x64>
 80022da:	4b16      	ldr	r3, [pc, #88]	; (8002334 <__sfp+0x88>)
 80022dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80022e0:	60e3      	str	r3, [r4, #12]
 80022e2:	6665      	str	r5, [r4, #100]	; 0x64
 80022e4:	f000 f859 	bl	800239a <__retarget_lock_init_recursive>
 80022e8:	f7ff ff96 	bl	8002218 <__sfp_lock_release>
 80022ec:	2208      	movs	r2, #8
 80022ee:	4629      	mov	r1, r5
 80022f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80022f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80022f8:	6025      	str	r5, [r4, #0]
 80022fa:	61a5      	str	r5, [r4, #24]
 80022fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002300:	f7ff fec8 	bl	8002094 <memset>
 8002304:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002308:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800230c:	4620      	mov	r0, r4
 800230e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002310:	3468      	adds	r4, #104	; 0x68
 8002312:	e7d9      	b.n	80022c8 <__sfp+0x1c>
 8002314:	2104      	movs	r1, #4
 8002316:	4638      	mov	r0, r7
 8002318:	f7ff ff62 	bl	80021e0 <__sfmoreglue>
 800231c:	4604      	mov	r4, r0
 800231e:	6030      	str	r0, [r6, #0]
 8002320:	2800      	cmp	r0, #0
 8002322:	d1d5      	bne.n	80022d0 <__sfp+0x24>
 8002324:	f7ff ff78 	bl	8002218 <__sfp_lock_release>
 8002328:	230c      	movs	r3, #12
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	e7ee      	b.n	800230c <__sfp+0x60>
 800232e:	bf00      	nop
 8002330:	080031a8 	.word	0x080031a8
 8002334:	ffff0001 	.word	0xffff0001

08002338 <fiprintf>:
 8002338:	b40e      	push	{r1, r2, r3}
 800233a:	b503      	push	{r0, r1, lr}
 800233c:	4601      	mov	r1, r0
 800233e:	ab03      	add	r3, sp, #12
 8002340:	4805      	ldr	r0, [pc, #20]	; (8002358 <fiprintf+0x20>)
 8002342:	f853 2b04 	ldr.w	r2, [r3], #4
 8002346:	6800      	ldr	r0, [r0, #0]
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	f000 f935 	bl	80025b8 <_vfiprintf_r>
 800234e:	b002      	add	sp, #8
 8002350:	f85d eb04 	ldr.w	lr, [sp], #4
 8002354:	b003      	add	sp, #12
 8002356:	4770      	bx	lr
 8002358:	2000000c 	.word	0x2000000c

0800235c <_fwalk_reent>:
 800235c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002360:	4606      	mov	r6, r0
 8002362:	4688      	mov	r8, r1
 8002364:	2700      	movs	r7, #0
 8002366:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800236a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800236e:	f1b9 0901 	subs.w	r9, r9, #1
 8002372:	d505      	bpl.n	8002380 <_fwalk_reent+0x24>
 8002374:	6824      	ldr	r4, [r4, #0]
 8002376:	2c00      	cmp	r4, #0
 8002378:	d1f7      	bne.n	800236a <_fwalk_reent+0xe>
 800237a:	4638      	mov	r0, r7
 800237c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002380:	89ab      	ldrh	r3, [r5, #12]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d907      	bls.n	8002396 <_fwalk_reent+0x3a>
 8002386:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800238a:	3301      	adds	r3, #1
 800238c:	d003      	beq.n	8002396 <_fwalk_reent+0x3a>
 800238e:	4629      	mov	r1, r5
 8002390:	4630      	mov	r0, r6
 8002392:	47c0      	blx	r8
 8002394:	4307      	orrs	r7, r0
 8002396:	3568      	adds	r5, #104	; 0x68
 8002398:	e7e9      	b.n	800236e <_fwalk_reent+0x12>

0800239a <__retarget_lock_init_recursive>:
 800239a:	4770      	bx	lr

0800239c <__retarget_lock_acquire_recursive>:
 800239c:	4770      	bx	lr

0800239e <__retarget_lock_release_recursive>:
 800239e:	4770      	bx	lr

080023a0 <malloc>:
 80023a0:	4b02      	ldr	r3, [pc, #8]	; (80023ac <malloc+0xc>)
 80023a2:	4601      	mov	r1, r0
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	f000 b86b 	b.w	8002480 <_malloc_r>
 80023aa:	bf00      	nop
 80023ac:	2000000c 	.word	0x2000000c

080023b0 <_free_r>:
 80023b0:	b538      	push	{r3, r4, r5, lr}
 80023b2:	4605      	mov	r5, r0
 80023b4:	2900      	cmp	r1, #0
 80023b6:	d040      	beq.n	800243a <_free_r+0x8a>
 80023b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023bc:	1f0c      	subs	r4, r1, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	bfb8      	it	lt
 80023c2:	18e4      	addlt	r4, r4, r3
 80023c4:	f000 fe40 	bl	8003048 <__malloc_lock>
 80023c8:	4a1c      	ldr	r2, [pc, #112]	; (800243c <_free_r+0x8c>)
 80023ca:	6813      	ldr	r3, [r2, #0]
 80023cc:	b933      	cbnz	r3, 80023dc <_free_r+0x2c>
 80023ce:	6063      	str	r3, [r4, #4]
 80023d0:	6014      	str	r4, [r2, #0]
 80023d2:	4628      	mov	r0, r5
 80023d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023d8:	f000 be3c 	b.w	8003054 <__malloc_unlock>
 80023dc:	42a3      	cmp	r3, r4
 80023de:	d908      	bls.n	80023f2 <_free_r+0x42>
 80023e0:	6820      	ldr	r0, [r4, #0]
 80023e2:	1821      	adds	r1, r4, r0
 80023e4:	428b      	cmp	r3, r1
 80023e6:	bf01      	itttt	eq
 80023e8:	6819      	ldreq	r1, [r3, #0]
 80023ea:	685b      	ldreq	r3, [r3, #4]
 80023ec:	1809      	addeq	r1, r1, r0
 80023ee:	6021      	streq	r1, [r4, #0]
 80023f0:	e7ed      	b.n	80023ce <_free_r+0x1e>
 80023f2:	461a      	mov	r2, r3
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	b10b      	cbz	r3, 80023fc <_free_r+0x4c>
 80023f8:	42a3      	cmp	r3, r4
 80023fa:	d9fa      	bls.n	80023f2 <_free_r+0x42>
 80023fc:	6811      	ldr	r1, [r2, #0]
 80023fe:	1850      	adds	r0, r2, r1
 8002400:	42a0      	cmp	r0, r4
 8002402:	d10b      	bne.n	800241c <_free_r+0x6c>
 8002404:	6820      	ldr	r0, [r4, #0]
 8002406:	4401      	add	r1, r0
 8002408:	1850      	adds	r0, r2, r1
 800240a:	4283      	cmp	r3, r0
 800240c:	6011      	str	r1, [r2, #0]
 800240e:	d1e0      	bne.n	80023d2 <_free_r+0x22>
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4401      	add	r1, r0
 8002416:	6011      	str	r1, [r2, #0]
 8002418:	6053      	str	r3, [r2, #4]
 800241a:	e7da      	b.n	80023d2 <_free_r+0x22>
 800241c:	d902      	bls.n	8002424 <_free_r+0x74>
 800241e:	230c      	movs	r3, #12
 8002420:	602b      	str	r3, [r5, #0]
 8002422:	e7d6      	b.n	80023d2 <_free_r+0x22>
 8002424:	6820      	ldr	r0, [r4, #0]
 8002426:	1821      	adds	r1, r4, r0
 8002428:	428b      	cmp	r3, r1
 800242a:	bf01      	itttt	eq
 800242c:	6819      	ldreq	r1, [r3, #0]
 800242e:	685b      	ldreq	r3, [r3, #4]
 8002430:	1809      	addeq	r1, r1, r0
 8002432:	6021      	streq	r1, [r4, #0]
 8002434:	6063      	str	r3, [r4, #4]
 8002436:	6054      	str	r4, [r2, #4]
 8002438:	e7cb      	b.n	80023d2 <_free_r+0x22>
 800243a:	bd38      	pop	{r3, r4, r5, pc}
 800243c:	20000098 	.word	0x20000098

08002440 <sbrk_aligned>:
 8002440:	b570      	push	{r4, r5, r6, lr}
 8002442:	4e0e      	ldr	r6, [pc, #56]	; (800247c <sbrk_aligned+0x3c>)
 8002444:	460c      	mov	r4, r1
 8002446:	6831      	ldr	r1, [r6, #0]
 8002448:	4605      	mov	r5, r0
 800244a:	b911      	cbnz	r1, 8002452 <sbrk_aligned+0x12>
 800244c:	f000 fb7a 	bl	8002b44 <_sbrk_r>
 8002450:	6030      	str	r0, [r6, #0]
 8002452:	4621      	mov	r1, r4
 8002454:	4628      	mov	r0, r5
 8002456:	f000 fb75 	bl	8002b44 <_sbrk_r>
 800245a:	1c43      	adds	r3, r0, #1
 800245c:	d00a      	beq.n	8002474 <sbrk_aligned+0x34>
 800245e:	1cc4      	adds	r4, r0, #3
 8002460:	f024 0403 	bic.w	r4, r4, #3
 8002464:	42a0      	cmp	r0, r4
 8002466:	d007      	beq.n	8002478 <sbrk_aligned+0x38>
 8002468:	1a21      	subs	r1, r4, r0
 800246a:	4628      	mov	r0, r5
 800246c:	f000 fb6a 	bl	8002b44 <_sbrk_r>
 8002470:	3001      	adds	r0, #1
 8002472:	d101      	bne.n	8002478 <sbrk_aligned+0x38>
 8002474:	f04f 34ff 	mov.w	r4, #4294967295
 8002478:	4620      	mov	r0, r4
 800247a:	bd70      	pop	{r4, r5, r6, pc}
 800247c:	2000009c 	.word	0x2000009c

08002480 <_malloc_r>:
 8002480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002484:	1ccd      	adds	r5, r1, #3
 8002486:	f025 0503 	bic.w	r5, r5, #3
 800248a:	3508      	adds	r5, #8
 800248c:	2d0c      	cmp	r5, #12
 800248e:	bf38      	it	cc
 8002490:	250c      	movcc	r5, #12
 8002492:	2d00      	cmp	r5, #0
 8002494:	4607      	mov	r7, r0
 8002496:	db01      	blt.n	800249c <_malloc_r+0x1c>
 8002498:	42a9      	cmp	r1, r5
 800249a:	d905      	bls.n	80024a8 <_malloc_r+0x28>
 800249c:	230c      	movs	r3, #12
 800249e:	2600      	movs	r6, #0
 80024a0:	603b      	str	r3, [r7, #0]
 80024a2:	4630      	mov	r0, r6
 80024a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024a8:	4e2e      	ldr	r6, [pc, #184]	; (8002564 <_malloc_r+0xe4>)
 80024aa:	f000 fdcd 	bl	8003048 <__malloc_lock>
 80024ae:	6833      	ldr	r3, [r6, #0]
 80024b0:	461c      	mov	r4, r3
 80024b2:	bb34      	cbnz	r4, 8002502 <_malloc_r+0x82>
 80024b4:	4629      	mov	r1, r5
 80024b6:	4638      	mov	r0, r7
 80024b8:	f7ff ffc2 	bl	8002440 <sbrk_aligned>
 80024bc:	1c43      	adds	r3, r0, #1
 80024be:	4604      	mov	r4, r0
 80024c0:	d14d      	bne.n	800255e <_malloc_r+0xde>
 80024c2:	6834      	ldr	r4, [r6, #0]
 80024c4:	4626      	mov	r6, r4
 80024c6:	2e00      	cmp	r6, #0
 80024c8:	d140      	bne.n	800254c <_malloc_r+0xcc>
 80024ca:	6823      	ldr	r3, [r4, #0]
 80024cc:	4631      	mov	r1, r6
 80024ce:	4638      	mov	r0, r7
 80024d0:	eb04 0803 	add.w	r8, r4, r3
 80024d4:	f000 fb36 	bl	8002b44 <_sbrk_r>
 80024d8:	4580      	cmp	r8, r0
 80024da:	d13a      	bne.n	8002552 <_malloc_r+0xd2>
 80024dc:	6821      	ldr	r1, [r4, #0]
 80024de:	3503      	adds	r5, #3
 80024e0:	1a6d      	subs	r5, r5, r1
 80024e2:	f025 0503 	bic.w	r5, r5, #3
 80024e6:	3508      	adds	r5, #8
 80024e8:	2d0c      	cmp	r5, #12
 80024ea:	bf38      	it	cc
 80024ec:	250c      	movcc	r5, #12
 80024ee:	4638      	mov	r0, r7
 80024f0:	4629      	mov	r1, r5
 80024f2:	f7ff ffa5 	bl	8002440 <sbrk_aligned>
 80024f6:	3001      	adds	r0, #1
 80024f8:	d02b      	beq.n	8002552 <_malloc_r+0xd2>
 80024fa:	6823      	ldr	r3, [r4, #0]
 80024fc:	442b      	add	r3, r5
 80024fe:	6023      	str	r3, [r4, #0]
 8002500:	e00e      	b.n	8002520 <_malloc_r+0xa0>
 8002502:	6822      	ldr	r2, [r4, #0]
 8002504:	1b52      	subs	r2, r2, r5
 8002506:	d41e      	bmi.n	8002546 <_malloc_r+0xc6>
 8002508:	2a0b      	cmp	r2, #11
 800250a:	d916      	bls.n	800253a <_malloc_r+0xba>
 800250c:	1961      	adds	r1, r4, r5
 800250e:	42a3      	cmp	r3, r4
 8002510:	6025      	str	r5, [r4, #0]
 8002512:	bf18      	it	ne
 8002514:	6059      	strne	r1, [r3, #4]
 8002516:	6863      	ldr	r3, [r4, #4]
 8002518:	bf08      	it	eq
 800251a:	6031      	streq	r1, [r6, #0]
 800251c:	5162      	str	r2, [r4, r5]
 800251e:	604b      	str	r3, [r1, #4]
 8002520:	4638      	mov	r0, r7
 8002522:	f104 060b 	add.w	r6, r4, #11
 8002526:	f000 fd95 	bl	8003054 <__malloc_unlock>
 800252a:	f026 0607 	bic.w	r6, r6, #7
 800252e:	1d23      	adds	r3, r4, #4
 8002530:	1af2      	subs	r2, r6, r3
 8002532:	d0b6      	beq.n	80024a2 <_malloc_r+0x22>
 8002534:	1b9b      	subs	r3, r3, r6
 8002536:	50a3      	str	r3, [r4, r2]
 8002538:	e7b3      	b.n	80024a2 <_malloc_r+0x22>
 800253a:	6862      	ldr	r2, [r4, #4]
 800253c:	42a3      	cmp	r3, r4
 800253e:	bf0c      	ite	eq
 8002540:	6032      	streq	r2, [r6, #0]
 8002542:	605a      	strne	r2, [r3, #4]
 8002544:	e7ec      	b.n	8002520 <_malloc_r+0xa0>
 8002546:	4623      	mov	r3, r4
 8002548:	6864      	ldr	r4, [r4, #4]
 800254a:	e7b2      	b.n	80024b2 <_malloc_r+0x32>
 800254c:	4634      	mov	r4, r6
 800254e:	6876      	ldr	r6, [r6, #4]
 8002550:	e7b9      	b.n	80024c6 <_malloc_r+0x46>
 8002552:	230c      	movs	r3, #12
 8002554:	4638      	mov	r0, r7
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	f000 fd7c 	bl	8003054 <__malloc_unlock>
 800255c:	e7a1      	b.n	80024a2 <_malloc_r+0x22>
 800255e:	6025      	str	r5, [r4, #0]
 8002560:	e7de      	b.n	8002520 <_malloc_r+0xa0>
 8002562:	bf00      	nop
 8002564:	20000098 	.word	0x20000098

08002568 <__sfputc_r>:
 8002568:	6893      	ldr	r3, [r2, #8]
 800256a:	b410      	push	{r4}
 800256c:	3b01      	subs	r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	6093      	str	r3, [r2, #8]
 8002572:	da07      	bge.n	8002584 <__sfputc_r+0x1c>
 8002574:	6994      	ldr	r4, [r2, #24]
 8002576:	42a3      	cmp	r3, r4
 8002578:	db01      	blt.n	800257e <__sfputc_r+0x16>
 800257a:	290a      	cmp	r1, #10
 800257c:	d102      	bne.n	8002584 <__sfputc_r+0x1c>
 800257e:	bc10      	pop	{r4}
 8002580:	f000 bb34 	b.w	8002bec <__swbuf_r>
 8002584:	6813      	ldr	r3, [r2, #0]
 8002586:	1c58      	adds	r0, r3, #1
 8002588:	6010      	str	r0, [r2, #0]
 800258a:	7019      	strb	r1, [r3, #0]
 800258c:	4608      	mov	r0, r1
 800258e:	bc10      	pop	{r4}
 8002590:	4770      	bx	lr

08002592 <__sfputs_r>:
 8002592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002594:	4606      	mov	r6, r0
 8002596:	460f      	mov	r7, r1
 8002598:	4614      	mov	r4, r2
 800259a:	18d5      	adds	r5, r2, r3
 800259c:	42ac      	cmp	r4, r5
 800259e:	d101      	bne.n	80025a4 <__sfputs_r+0x12>
 80025a0:	2000      	movs	r0, #0
 80025a2:	e007      	b.n	80025b4 <__sfputs_r+0x22>
 80025a4:	463a      	mov	r2, r7
 80025a6:	4630      	mov	r0, r6
 80025a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025ac:	f7ff ffdc 	bl	8002568 <__sfputc_r>
 80025b0:	1c43      	adds	r3, r0, #1
 80025b2:	d1f3      	bne.n	800259c <__sfputs_r+0xa>
 80025b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080025b8 <_vfiprintf_r>:
 80025b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025bc:	460d      	mov	r5, r1
 80025be:	4614      	mov	r4, r2
 80025c0:	4698      	mov	r8, r3
 80025c2:	4606      	mov	r6, r0
 80025c4:	b09d      	sub	sp, #116	; 0x74
 80025c6:	b118      	cbz	r0, 80025d0 <_vfiprintf_r+0x18>
 80025c8:	6983      	ldr	r3, [r0, #24]
 80025ca:	b90b      	cbnz	r3, 80025d0 <_vfiprintf_r+0x18>
 80025cc:	f7ff fe36 	bl	800223c <__sinit>
 80025d0:	4b89      	ldr	r3, [pc, #548]	; (80027f8 <_vfiprintf_r+0x240>)
 80025d2:	429d      	cmp	r5, r3
 80025d4:	d11b      	bne.n	800260e <_vfiprintf_r+0x56>
 80025d6:	6875      	ldr	r5, [r6, #4]
 80025d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025da:	07d9      	lsls	r1, r3, #31
 80025dc:	d405      	bmi.n	80025ea <_vfiprintf_r+0x32>
 80025de:	89ab      	ldrh	r3, [r5, #12]
 80025e0:	059a      	lsls	r2, r3, #22
 80025e2:	d402      	bmi.n	80025ea <_vfiprintf_r+0x32>
 80025e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025e6:	f7ff fed9 	bl	800239c <__retarget_lock_acquire_recursive>
 80025ea:	89ab      	ldrh	r3, [r5, #12]
 80025ec:	071b      	lsls	r3, r3, #28
 80025ee:	d501      	bpl.n	80025f4 <_vfiprintf_r+0x3c>
 80025f0:	692b      	ldr	r3, [r5, #16]
 80025f2:	b9eb      	cbnz	r3, 8002630 <_vfiprintf_r+0x78>
 80025f4:	4629      	mov	r1, r5
 80025f6:	4630      	mov	r0, r6
 80025f8:	f000 fb5c 	bl	8002cb4 <__swsetup_r>
 80025fc:	b1c0      	cbz	r0, 8002630 <_vfiprintf_r+0x78>
 80025fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002600:	07dc      	lsls	r4, r3, #31
 8002602:	d50e      	bpl.n	8002622 <_vfiprintf_r+0x6a>
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	b01d      	add	sp, #116	; 0x74
 800260a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800260e:	4b7b      	ldr	r3, [pc, #492]	; (80027fc <_vfiprintf_r+0x244>)
 8002610:	429d      	cmp	r5, r3
 8002612:	d101      	bne.n	8002618 <_vfiprintf_r+0x60>
 8002614:	68b5      	ldr	r5, [r6, #8]
 8002616:	e7df      	b.n	80025d8 <_vfiprintf_r+0x20>
 8002618:	4b79      	ldr	r3, [pc, #484]	; (8002800 <_vfiprintf_r+0x248>)
 800261a:	429d      	cmp	r5, r3
 800261c:	bf08      	it	eq
 800261e:	68f5      	ldreq	r5, [r6, #12]
 8002620:	e7da      	b.n	80025d8 <_vfiprintf_r+0x20>
 8002622:	89ab      	ldrh	r3, [r5, #12]
 8002624:	0598      	lsls	r0, r3, #22
 8002626:	d4ed      	bmi.n	8002604 <_vfiprintf_r+0x4c>
 8002628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800262a:	f7ff feb8 	bl	800239e <__retarget_lock_release_recursive>
 800262e:	e7e9      	b.n	8002604 <_vfiprintf_r+0x4c>
 8002630:	2300      	movs	r3, #0
 8002632:	9309      	str	r3, [sp, #36]	; 0x24
 8002634:	2320      	movs	r3, #32
 8002636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800263a:	2330      	movs	r3, #48	; 0x30
 800263c:	f04f 0901 	mov.w	r9, #1
 8002640:	f8cd 800c 	str.w	r8, [sp, #12]
 8002644:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002804 <_vfiprintf_r+0x24c>
 8002648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800264c:	4623      	mov	r3, r4
 800264e:	469a      	mov	sl, r3
 8002650:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002654:	b10a      	cbz	r2, 800265a <_vfiprintf_r+0xa2>
 8002656:	2a25      	cmp	r2, #37	; 0x25
 8002658:	d1f9      	bne.n	800264e <_vfiprintf_r+0x96>
 800265a:	ebba 0b04 	subs.w	fp, sl, r4
 800265e:	d00b      	beq.n	8002678 <_vfiprintf_r+0xc0>
 8002660:	465b      	mov	r3, fp
 8002662:	4622      	mov	r2, r4
 8002664:	4629      	mov	r1, r5
 8002666:	4630      	mov	r0, r6
 8002668:	f7ff ff93 	bl	8002592 <__sfputs_r>
 800266c:	3001      	adds	r0, #1
 800266e:	f000 80aa 	beq.w	80027c6 <_vfiprintf_r+0x20e>
 8002672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002674:	445a      	add	r2, fp
 8002676:	9209      	str	r2, [sp, #36]	; 0x24
 8002678:	f89a 3000 	ldrb.w	r3, [sl]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80a2 	beq.w	80027c6 <_vfiprintf_r+0x20e>
 8002682:	2300      	movs	r3, #0
 8002684:	f04f 32ff 	mov.w	r2, #4294967295
 8002688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800268c:	f10a 0a01 	add.w	sl, sl, #1
 8002690:	9304      	str	r3, [sp, #16]
 8002692:	9307      	str	r3, [sp, #28]
 8002694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002698:	931a      	str	r3, [sp, #104]	; 0x68
 800269a:	4654      	mov	r4, sl
 800269c:	2205      	movs	r2, #5
 800269e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026a2:	4858      	ldr	r0, [pc, #352]	; (8002804 <_vfiprintf_r+0x24c>)
 80026a4:	f000 fcc2 	bl	800302c <memchr>
 80026a8:	9a04      	ldr	r2, [sp, #16]
 80026aa:	b9d8      	cbnz	r0, 80026e4 <_vfiprintf_r+0x12c>
 80026ac:	06d1      	lsls	r1, r2, #27
 80026ae:	bf44      	itt	mi
 80026b0:	2320      	movmi	r3, #32
 80026b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026b6:	0713      	lsls	r3, r2, #28
 80026b8:	bf44      	itt	mi
 80026ba:	232b      	movmi	r3, #43	; 0x2b
 80026bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026c0:	f89a 3000 	ldrb.w	r3, [sl]
 80026c4:	2b2a      	cmp	r3, #42	; 0x2a
 80026c6:	d015      	beq.n	80026f4 <_vfiprintf_r+0x13c>
 80026c8:	4654      	mov	r4, sl
 80026ca:	2000      	movs	r0, #0
 80026cc:	f04f 0c0a 	mov.w	ip, #10
 80026d0:	9a07      	ldr	r2, [sp, #28]
 80026d2:	4621      	mov	r1, r4
 80026d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026d8:	3b30      	subs	r3, #48	; 0x30
 80026da:	2b09      	cmp	r3, #9
 80026dc:	d94e      	bls.n	800277c <_vfiprintf_r+0x1c4>
 80026de:	b1b0      	cbz	r0, 800270e <_vfiprintf_r+0x156>
 80026e0:	9207      	str	r2, [sp, #28]
 80026e2:	e014      	b.n	800270e <_vfiprintf_r+0x156>
 80026e4:	eba0 0308 	sub.w	r3, r0, r8
 80026e8:	fa09 f303 	lsl.w	r3, r9, r3
 80026ec:	4313      	orrs	r3, r2
 80026ee:	46a2      	mov	sl, r4
 80026f0:	9304      	str	r3, [sp, #16]
 80026f2:	e7d2      	b.n	800269a <_vfiprintf_r+0xe2>
 80026f4:	9b03      	ldr	r3, [sp, #12]
 80026f6:	1d19      	adds	r1, r3, #4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	9103      	str	r1, [sp, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bfbb      	ittet	lt
 8002700:	425b      	neglt	r3, r3
 8002702:	f042 0202 	orrlt.w	r2, r2, #2
 8002706:	9307      	strge	r3, [sp, #28]
 8002708:	9307      	strlt	r3, [sp, #28]
 800270a:	bfb8      	it	lt
 800270c:	9204      	strlt	r2, [sp, #16]
 800270e:	7823      	ldrb	r3, [r4, #0]
 8002710:	2b2e      	cmp	r3, #46	; 0x2e
 8002712:	d10c      	bne.n	800272e <_vfiprintf_r+0x176>
 8002714:	7863      	ldrb	r3, [r4, #1]
 8002716:	2b2a      	cmp	r3, #42	; 0x2a
 8002718:	d135      	bne.n	8002786 <_vfiprintf_r+0x1ce>
 800271a:	9b03      	ldr	r3, [sp, #12]
 800271c:	3402      	adds	r4, #2
 800271e:	1d1a      	adds	r2, r3, #4
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	9203      	str	r2, [sp, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	bfb8      	it	lt
 8002728:	f04f 33ff 	movlt.w	r3, #4294967295
 800272c:	9305      	str	r3, [sp, #20]
 800272e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002808 <_vfiprintf_r+0x250>
 8002732:	2203      	movs	r2, #3
 8002734:	4650      	mov	r0, sl
 8002736:	7821      	ldrb	r1, [r4, #0]
 8002738:	f000 fc78 	bl	800302c <memchr>
 800273c:	b140      	cbz	r0, 8002750 <_vfiprintf_r+0x198>
 800273e:	2340      	movs	r3, #64	; 0x40
 8002740:	eba0 000a 	sub.w	r0, r0, sl
 8002744:	fa03 f000 	lsl.w	r0, r3, r0
 8002748:	9b04      	ldr	r3, [sp, #16]
 800274a:	3401      	adds	r4, #1
 800274c:	4303      	orrs	r3, r0
 800274e:	9304      	str	r3, [sp, #16]
 8002750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002754:	2206      	movs	r2, #6
 8002756:	482d      	ldr	r0, [pc, #180]	; (800280c <_vfiprintf_r+0x254>)
 8002758:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800275c:	f000 fc66 	bl	800302c <memchr>
 8002760:	2800      	cmp	r0, #0
 8002762:	d03f      	beq.n	80027e4 <_vfiprintf_r+0x22c>
 8002764:	4b2a      	ldr	r3, [pc, #168]	; (8002810 <_vfiprintf_r+0x258>)
 8002766:	bb1b      	cbnz	r3, 80027b0 <_vfiprintf_r+0x1f8>
 8002768:	9b03      	ldr	r3, [sp, #12]
 800276a:	3307      	adds	r3, #7
 800276c:	f023 0307 	bic.w	r3, r3, #7
 8002770:	3308      	adds	r3, #8
 8002772:	9303      	str	r3, [sp, #12]
 8002774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002776:	443b      	add	r3, r7
 8002778:	9309      	str	r3, [sp, #36]	; 0x24
 800277a:	e767      	b.n	800264c <_vfiprintf_r+0x94>
 800277c:	460c      	mov	r4, r1
 800277e:	2001      	movs	r0, #1
 8002780:	fb0c 3202 	mla	r2, ip, r2, r3
 8002784:	e7a5      	b.n	80026d2 <_vfiprintf_r+0x11a>
 8002786:	2300      	movs	r3, #0
 8002788:	f04f 0c0a 	mov.w	ip, #10
 800278c:	4619      	mov	r1, r3
 800278e:	3401      	adds	r4, #1
 8002790:	9305      	str	r3, [sp, #20]
 8002792:	4620      	mov	r0, r4
 8002794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002798:	3a30      	subs	r2, #48	; 0x30
 800279a:	2a09      	cmp	r2, #9
 800279c:	d903      	bls.n	80027a6 <_vfiprintf_r+0x1ee>
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0c5      	beq.n	800272e <_vfiprintf_r+0x176>
 80027a2:	9105      	str	r1, [sp, #20]
 80027a4:	e7c3      	b.n	800272e <_vfiprintf_r+0x176>
 80027a6:	4604      	mov	r4, r0
 80027a8:	2301      	movs	r3, #1
 80027aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80027ae:	e7f0      	b.n	8002792 <_vfiprintf_r+0x1da>
 80027b0:	ab03      	add	r3, sp, #12
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	462a      	mov	r2, r5
 80027b6:	4630      	mov	r0, r6
 80027b8:	4b16      	ldr	r3, [pc, #88]	; (8002814 <_vfiprintf_r+0x25c>)
 80027ba:	a904      	add	r1, sp, #16
 80027bc:	f3af 8000 	nop.w
 80027c0:	4607      	mov	r7, r0
 80027c2:	1c78      	adds	r0, r7, #1
 80027c4:	d1d6      	bne.n	8002774 <_vfiprintf_r+0x1bc>
 80027c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027c8:	07d9      	lsls	r1, r3, #31
 80027ca:	d405      	bmi.n	80027d8 <_vfiprintf_r+0x220>
 80027cc:	89ab      	ldrh	r3, [r5, #12]
 80027ce:	059a      	lsls	r2, r3, #22
 80027d0:	d402      	bmi.n	80027d8 <_vfiprintf_r+0x220>
 80027d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027d4:	f7ff fde3 	bl	800239e <__retarget_lock_release_recursive>
 80027d8:	89ab      	ldrh	r3, [r5, #12]
 80027da:	065b      	lsls	r3, r3, #25
 80027dc:	f53f af12 	bmi.w	8002604 <_vfiprintf_r+0x4c>
 80027e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027e2:	e711      	b.n	8002608 <_vfiprintf_r+0x50>
 80027e4:	ab03      	add	r3, sp, #12
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	462a      	mov	r2, r5
 80027ea:	4630      	mov	r0, r6
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <_vfiprintf_r+0x25c>)
 80027ee:	a904      	add	r1, sp, #16
 80027f0:	f000 f882 	bl	80028f8 <_printf_i>
 80027f4:	e7e4      	b.n	80027c0 <_vfiprintf_r+0x208>
 80027f6:	bf00      	nop
 80027f8:	0800327c 	.word	0x0800327c
 80027fc:	0800329c 	.word	0x0800329c
 8002800:	0800325c 	.word	0x0800325c
 8002804:	080032bc 	.word	0x080032bc
 8002808:	080032c2 	.word	0x080032c2
 800280c:	080032c6 	.word	0x080032c6
 8002810:	00000000 	.word	0x00000000
 8002814:	08002593 	.word	0x08002593

08002818 <_printf_common>:
 8002818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800281c:	4616      	mov	r6, r2
 800281e:	4699      	mov	r9, r3
 8002820:	688a      	ldr	r2, [r1, #8]
 8002822:	690b      	ldr	r3, [r1, #16]
 8002824:	4607      	mov	r7, r0
 8002826:	4293      	cmp	r3, r2
 8002828:	bfb8      	it	lt
 800282a:	4613      	movlt	r3, r2
 800282c:	6033      	str	r3, [r6, #0]
 800282e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002832:	460c      	mov	r4, r1
 8002834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002838:	b10a      	cbz	r2, 800283e <_printf_common+0x26>
 800283a:	3301      	adds	r3, #1
 800283c:	6033      	str	r3, [r6, #0]
 800283e:	6823      	ldr	r3, [r4, #0]
 8002840:	0699      	lsls	r1, r3, #26
 8002842:	bf42      	ittt	mi
 8002844:	6833      	ldrmi	r3, [r6, #0]
 8002846:	3302      	addmi	r3, #2
 8002848:	6033      	strmi	r3, [r6, #0]
 800284a:	6825      	ldr	r5, [r4, #0]
 800284c:	f015 0506 	ands.w	r5, r5, #6
 8002850:	d106      	bne.n	8002860 <_printf_common+0x48>
 8002852:	f104 0a19 	add.w	sl, r4, #25
 8002856:	68e3      	ldr	r3, [r4, #12]
 8002858:	6832      	ldr	r2, [r6, #0]
 800285a:	1a9b      	subs	r3, r3, r2
 800285c:	42ab      	cmp	r3, r5
 800285e:	dc28      	bgt.n	80028b2 <_printf_common+0x9a>
 8002860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002864:	1e13      	subs	r3, r2, #0
 8002866:	6822      	ldr	r2, [r4, #0]
 8002868:	bf18      	it	ne
 800286a:	2301      	movne	r3, #1
 800286c:	0692      	lsls	r2, r2, #26
 800286e:	d42d      	bmi.n	80028cc <_printf_common+0xb4>
 8002870:	4649      	mov	r1, r9
 8002872:	4638      	mov	r0, r7
 8002874:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002878:	47c0      	blx	r8
 800287a:	3001      	adds	r0, #1
 800287c:	d020      	beq.n	80028c0 <_printf_common+0xa8>
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	68e5      	ldr	r5, [r4, #12]
 8002882:	f003 0306 	and.w	r3, r3, #6
 8002886:	2b04      	cmp	r3, #4
 8002888:	bf18      	it	ne
 800288a:	2500      	movne	r5, #0
 800288c:	6832      	ldr	r2, [r6, #0]
 800288e:	f04f 0600 	mov.w	r6, #0
 8002892:	68a3      	ldr	r3, [r4, #8]
 8002894:	bf08      	it	eq
 8002896:	1aad      	subeq	r5, r5, r2
 8002898:	6922      	ldr	r2, [r4, #16]
 800289a:	bf08      	it	eq
 800289c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028a0:	4293      	cmp	r3, r2
 80028a2:	bfc4      	itt	gt
 80028a4:	1a9b      	subgt	r3, r3, r2
 80028a6:	18ed      	addgt	r5, r5, r3
 80028a8:	341a      	adds	r4, #26
 80028aa:	42b5      	cmp	r5, r6
 80028ac:	d11a      	bne.n	80028e4 <_printf_common+0xcc>
 80028ae:	2000      	movs	r0, #0
 80028b0:	e008      	b.n	80028c4 <_printf_common+0xac>
 80028b2:	2301      	movs	r3, #1
 80028b4:	4652      	mov	r2, sl
 80028b6:	4649      	mov	r1, r9
 80028b8:	4638      	mov	r0, r7
 80028ba:	47c0      	blx	r8
 80028bc:	3001      	adds	r0, #1
 80028be:	d103      	bne.n	80028c8 <_printf_common+0xb0>
 80028c0:	f04f 30ff 	mov.w	r0, #4294967295
 80028c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028c8:	3501      	adds	r5, #1
 80028ca:	e7c4      	b.n	8002856 <_printf_common+0x3e>
 80028cc:	2030      	movs	r0, #48	; 0x30
 80028ce:	18e1      	adds	r1, r4, r3
 80028d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028da:	4422      	add	r2, r4
 80028dc:	3302      	adds	r3, #2
 80028de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028e2:	e7c5      	b.n	8002870 <_printf_common+0x58>
 80028e4:	2301      	movs	r3, #1
 80028e6:	4622      	mov	r2, r4
 80028e8:	4649      	mov	r1, r9
 80028ea:	4638      	mov	r0, r7
 80028ec:	47c0      	blx	r8
 80028ee:	3001      	adds	r0, #1
 80028f0:	d0e6      	beq.n	80028c0 <_printf_common+0xa8>
 80028f2:	3601      	adds	r6, #1
 80028f4:	e7d9      	b.n	80028aa <_printf_common+0x92>
	...

080028f8 <_printf_i>:
 80028f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028fc:	7e0f      	ldrb	r7, [r1, #24]
 80028fe:	4691      	mov	r9, r2
 8002900:	2f78      	cmp	r7, #120	; 0x78
 8002902:	4680      	mov	r8, r0
 8002904:	460c      	mov	r4, r1
 8002906:	469a      	mov	sl, r3
 8002908:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800290a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800290e:	d807      	bhi.n	8002920 <_printf_i+0x28>
 8002910:	2f62      	cmp	r7, #98	; 0x62
 8002912:	d80a      	bhi.n	800292a <_printf_i+0x32>
 8002914:	2f00      	cmp	r7, #0
 8002916:	f000 80d9 	beq.w	8002acc <_printf_i+0x1d4>
 800291a:	2f58      	cmp	r7, #88	; 0x58
 800291c:	f000 80a4 	beq.w	8002a68 <_printf_i+0x170>
 8002920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002928:	e03a      	b.n	80029a0 <_printf_i+0xa8>
 800292a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800292e:	2b15      	cmp	r3, #21
 8002930:	d8f6      	bhi.n	8002920 <_printf_i+0x28>
 8002932:	a101      	add	r1, pc, #4	; (adr r1, 8002938 <_printf_i+0x40>)
 8002934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002938:	08002991 	.word	0x08002991
 800293c:	080029a5 	.word	0x080029a5
 8002940:	08002921 	.word	0x08002921
 8002944:	08002921 	.word	0x08002921
 8002948:	08002921 	.word	0x08002921
 800294c:	08002921 	.word	0x08002921
 8002950:	080029a5 	.word	0x080029a5
 8002954:	08002921 	.word	0x08002921
 8002958:	08002921 	.word	0x08002921
 800295c:	08002921 	.word	0x08002921
 8002960:	08002921 	.word	0x08002921
 8002964:	08002ab3 	.word	0x08002ab3
 8002968:	080029d5 	.word	0x080029d5
 800296c:	08002a95 	.word	0x08002a95
 8002970:	08002921 	.word	0x08002921
 8002974:	08002921 	.word	0x08002921
 8002978:	08002ad5 	.word	0x08002ad5
 800297c:	08002921 	.word	0x08002921
 8002980:	080029d5 	.word	0x080029d5
 8002984:	08002921 	.word	0x08002921
 8002988:	08002921 	.word	0x08002921
 800298c:	08002a9d 	.word	0x08002a9d
 8002990:	682b      	ldr	r3, [r5, #0]
 8002992:	1d1a      	adds	r2, r3, #4
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	602a      	str	r2, [r5, #0]
 8002998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800299c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0a4      	b.n	8002aee <_printf_i+0x1f6>
 80029a4:	6820      	ldr	r0, [r4, #0]
 80029a6:	6829      	ldr	r1, [r5, #0]
 80029a8:	0606      	lsls	r6, r0, #24
 80029aa:	f101 0304 	add.w	r3, r1, #4
 80029ae:	d50a      	bpl.n	80029c6 <_printf_i+0xce>
 80029b0:	680e      	ldr	r6, [r1, #0]
 80029b2:	602b      	str	r3, [r5, #0]
 80029b4:	2e00      	cmp	r6, #0
 80029b6:	da03      	bge.n	80029c0 <_printf_i+0xc8>
 80029b8:	232d      	movs	r3, #45	; 0x2d
 80029ba:	4276      	negs	r6, r6
 80029bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029c0:	230a      	movs	r3, #10
 80029c2:	485e      	ldr	r0, [pc, #376]	; (8002b3c <_printf_i+0x244>)
 80029c4:	e019      	b.n	80029fa <_printf_i+0x102>
 80029c6:	680e      	ldr	r6, [r1, #0]
 80029c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80029cc:	602b      	str	r3, [r5, #0]
 80029ce:	bf18      	it	ne
 80029d0:	b236      	sxthne	r6, r6
 80029d2:	e7ef      	b.n	80029b4 <_printf_i+0xbc>
 80029d4:	682b      	ldr	r3, [r5, #0]
 80029d6:	6820      	ldr	r0, [r4, #0]
 80029d8:	1d19      	adds	r1, r3, #4
 80029da:	6029      	str	r1, [r5, #0]
 80029dc:	0601      	lsls	r1, r0, #24
 80029de:	d501      	bpl.n	80029e4 <_printf_i+0xec>
 80029e0:	681e      	ldr	r6, [r3, #0]
 80029e2:	e002      	b.n	80029ea <_printf_i+0xf2>
 80029e4:	0646      	lsls	r6, r0, #25
 80029e6:	d5fb      	bpl.n	80029e0 <_printf_i+0xe8>
 80029e8:	881e      	ldrh	r6, [r3, #0]
 80029ea:	2f6f      	cmp	r7, #111	; 0x6f
 80029ec:	bf0c      	ite	eq
 80029ee:	2308      	moveq	r3, #8
 80029f0:	230a      	movne	r3, #10
 80029f2:	4852      	ldr	r0, [pc, #328]	; (8002b3c <_printf_i+0x244>)
 80029f4:	2100      	movs	r1, #0
 80029f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029fa:	6865      	ldr	r5, [r4, #4]
 80029fc:	2d00      	cmp	r5, #0
 80029fe:	bfa8      	it	ge
 8002a00:	6821      	ldrge	r1, [r4, #0]
 8002a02:	60a5      	str	r5, [r4, #8]
 8002a04:	bfa4      	itt	ge
 8002a06:	f021 0104 	bicge.w	r1, r1, #4
 8002a0a:	6021      	strge	r1, [r4, #0]
 8002a0c:	b90e      	cbnz	r6, 8002a12 <_printf_i+0x11a>
 8002a0e:	2d00      	cmp	r5, #0
 8002a10:	d04d      	beq.n	8002aae <_printf_i+0x1b6>
 8002a12:	4615      	mov	r5, r2
 8002a14:	fbb6 f1f3 	udiv	r1, r6, r3
 8002a18:	fb03 6711 	mls	r7, r3, r1, r6
 8002a1c:	5dc7      	ldrb	r7, [r0, r7]
 8002a1e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002a22:	4637      	mov	r7, r6
 8002a24:	42bb      	cmp	r3, r7
 8002a26:	460e      	mov	r6, r1
 8002a28:	d9f4      	bls.n	8002a14 <_printf_i+0x11c>
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d10b      	bne.n	8002a46 <_printf_i+0x14e>
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	07de      	lsls	r6, r3, #31
 8002a32:	d508      	bpl.n	8002a46 <_printf_i+0x14e>
 8002a34:	6923      	ldr	r3, [r4, #16]
 8002a36:	6861      	ldr	r1, [r4, #4]
 8002a38:	4299      	cmp	r1, r3
 8002a3a:	bfde      	ittt	le
 8002a3c:	2330      	movle	r3, #48	; 0x30
 8002a3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a46:	1b52      	subs	r2, r2, r5
 8002a48:	6122      	str	r2, [r4, #16]
 8002a4a:	464b      	mov	r3, r9
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	4640      	mov	r0, r8
 8002a50:	f8cd a000 	str.w	sl, [sp]
 8002a54:	aa03      	add	r2, sp, #12
 8002a56:	f7ff fedf 	bl	8002818 <_printf_common>
 8002a5a:	3001      	adds	r0, #1
 8002a5c:	d14c      	bne.n	8002af8 <_printf_i+0x200>
 8002a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a62:	b004      	add	sp, #16
 8002a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a68:	4834      	ldr	r0, [pc, #208]	; (8002b3c <_printf_i+0x244>)
 8002a6a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002a6e:	6829      	ldr	r1, [r5, #0]
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a76:	6029      	str	r1, [r5, #0]
 8002a78:	061d      	lsls	r5, r3, #24
 8002a7a:	d514      	bpl.n	8002aa6 <_printf_i+0x1ae>
 8002a7c:	07df      	lsls	r7, r3, #31
 8002a7e:	bf44      	itt	mi
 8002a80:	f043 0320 	orrmi.w	r3, r3, #32
 8002a84:	6023      	strmi	r3, [r4, #0]
 8002a86:	b91e      	cbnz	r6, 8002a90 <_printf_i+0x198>
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	f023 0320 	bic.w	r3, r3, #32
 8002a8e:	6023      	str	r3, [r4, #0]
 8002a90:	2310      	movs	r3, #16
 8002a92:	e7af      	b.n	80029f4 <_printf_i+0xfc>
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	f043 0320 	orr.w	r3, r3, #32
 8002a9a:	6023      	str	r3, [r4, #0]
 8002a9c:	2378      	movs	r3, #120	; 0x78
 8002a9e:	4828      	ldr	r0, [pc, #160]	; (8002b40 <_printf_i+0x248>)
 8002aa0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002aa4:	e7e3      	b.n	8002a6e <_printf_i+0x176>
 8002aa6:	0659      	lsls	r1, r3, #25
 8002aa8:	bf48      	it	mi
 8002aaa:	b2b6      	uxthmi	r6, r6
 8002aac:	e7e6      	b.n	8002a7c <_printf_i+0x184>
 8002aae:	4615      	mov	r5, r2
 8002ab0:	e7bb      	b.n	8002a2a <_printf_i+0x132>
 8002ab2:	682b      	ldr	r3, [r5, #0]
 8002ab4:	6826      	ldr	r6, [r4, #0]
 8002ab6:	1d18      	adds	r0, r3, #4
 8002ab8:	6961      	ldr	r1, [r4, #20]
 8002aba:	6028      	str	r0, [r5, #0]
 8002abc:	0635      	lsls	r5, r6, #24
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	d501      	bpl.n	8002ac6 <_printf_i+0x1ce>
 8002ac2:	6019      	str	r1, [r3, #0]
 8002ac4:	e002      	b.n	8002acc <_printf_i+0x1d4>
 8002ac6:	0670      	lsls	r0, r6, #25
 8002ac8:	d5fb      	bpl.n	8002ac2 <_printf_i+0x1ca>
 8002aca:	8019      	strh	r1, [r3, #0]
 8002acc:	2300      	movs	r3, #0
 8002ace:	4615      	mov	r5, r2
 8002ad0:	6123      	str	r3, [r4, #16]
 8002ad2:	e7ba      	b.n	8002a4a <_printf_i+0x152>
 8002ad4:	682b      	ldr	r3, [r5, #0]
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	1d1a      	adds	r2, r3, #4
 8002ada:	602a      	str	r2, [r5, #0]
 8002adc:	681d      	ldr	r5, [r3, #0]
 8002ade:	6862      	ldr	r2, [r4, #4]
 8002ae0:	4628      	mov	r0, r5
 8002ae2:	f000 faa3 	bl	800302c <memchr>
 8002ae6:	b108      	cbz	r0, 8002aec <_printf_i+0x1f4>
 8002ae8:	1b40      	subs	r0, r0, r5
 8002aea:	6060      	str	r0, [r4, #4]
 8002aec:	6863      	ldr	r3, [r4, #4]
 8002aee:	6123      	str	r3, [r4, #16]
 8002af0:	2300      	movs	r3, #0
 8002af2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002af6:	e7a8      	b.n	8002a4a <_printf_i+0x152>
 8002af8:	462a      	mov	r2, r5
 8002afa:	4649      	mov	r1, r9
 8002afc:	4640      	mov	r0, r8
 8002afe:	6923      	ldr	r3, [r4, #16]
 8002b00:	47d0      	blx	sl
 8002b02:	3001      	adds	r0, #1
 8002b04:	d0ab      	beq.n	8002a5e <_printf_i+0x166>
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	079b      	lsls	r3, r3, #30
 8002b0a:	d413      	bmi.n	8002b34 <_printf_i+0x23c>
 8002b0c:	68e0      	ldr	r0, [r4, #12]
 8002b0e:	9b03      	ldr	r3, [sp, #12]
 8002b10:	4298      	cmp	r0, r3
 8002b12:	bfb8      	it	lt
 8002b14:	4618      	movlt	r0, r3
 8002b16:	e7a4      	b.n	8002a62 <_printf_i+0x16a>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	4632      	mov	r2, r6
 8002b1c:	4649      	mov	r1, r9
 8002b1e:	4640      	mov	r0, r8
 8002b20:	47d0      	blx	sl
 8002b22:	3001      	adds	r0, #1
 8002b24:	d09b      	beq.n	8002a5e <_printf_i+0x166>
 8002b26:	3501      	adds	r5, #1
 8002b28:	68e3      	ldr	r3, [r4, #12]
 8002b2a:	9903      	ldr	r1, [sp, #12]
 8002b2c:	1a5b      	subs	r3, r3, r1
 8002b2e:	42ab      	cmp	r3, r5
 8002b30:	dcf2      	bgt.n	8002b18 <_printf_i+0x220>
 8002b32:	e7eb      	b.n	8002b0c <_printf_i+0x214>
 8002b34:	2500      	movs	r5, #0
 8002b36:	f104 0619 	add.w	r6, r4, #25
 8002b3a:	e7f5      	b.n	8002b28 <_printf_i+0x230>
 8002b3c:	080032cd 	.word	0x080032cd
 8002b40:	080032de 	.word	0x080032de

08002b44 <_sbrk_r>:
 8002b44:	b538      	push	{r3, r4, r5, lr}
 8002b46:	2300      	movs	r3, #0
 8002b48:	4d05      	ldr	r5, [pc, #20]	; (8002b60 <_sbrk_r+0x1c>)
 8002b4a:	4604      	mov	r4, r0
 8002b4c:	4608      	mov	r0, r1
 8002b4e:	602b      	str	r3, [r5, #0]
 8002b50:	f7fe fce6 	bl	8001520 <_sbrk>
 8002b54:	1c43      	adds	r3, r0, #1
 8002b56:	d102      	bne.n	8002b5e <_sbrk_r+0x1a>
 8002b58:	682b      	ldr	r3, [r5, #0]
 8002b5a:	b103      	cbz	r3, 8002b5e <_sbrk_r+0x1a>
 8002b5c:	6023      	str	r3, [r4, #0]
 8002b5e:	bd38      	pop	{r3, r4, r5, pc}
 8002b60:	200000a0 	.word	0x200000a0

08002b64 <__sread>:
 8002b64:	b510      	push	{r4, lr}
 8002b66:	460c      	mov	r4, r1
 8002b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b6c:	f000 fa78 	bl	8003060 <_read_r>
 8002b70:	2800      	cmp	r0, #0
 8002b72:	bfab      	itete	ge
 8002b74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002b76:	89a3      	ldrhlt	r3, [r4, #12]
 8002b78:	181b      	addge	r3, r3, r0
 8002b7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002b7e:	bfac      	ite	ge
 8002b80:	6563      	strge	r3, [r4, #84]	; 0x54
 8002b82:	81a3      	strhlt	r3, [r4, #12]
 8002b84:	bd10      	pop	{r4, pc}

08002b86 <__swrite>:
 8002b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b8a:	461f      	mov	r7, r3
 8002b8c:	898b      	ldrh	r3, [r1, #12]
 8002b8e:	4605      	mov	r5, r0
 8002b90:	05db      	lsls	r3, r3, #23
 8002b92:	460c      	mov	r4, r1
 8002b94:	4616      	mov	r6, r2
 8002b96:	d505      	bpl.n	8002ba4 <__swrite+0x1e>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ba0:	f000 f9cc 	bl	8002f3c <_lseek_r>
 8002ba4:	89a3      	ldrh	r3, [r4, #12]
 8002ba6:	4632      	mov	r2, r6
 8002ba8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bac:	81a3      	strh	r3, [r4, #12]
 8002bae:	4628      	mov	r0, r5
 8002bb0:	463b      	mov	r3, r7
 8002bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bba:	f000 b869 	b.w	8002c90 <_write_r>

08002bbe <__sseek>:
 8002bbe:	b510      	push	{r4, lr}
 8002bc0:	460c      	mov	r4, r1
 8002bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bc6:	f000 f9b9 	bl	8002f3c <_lseek_r>
 8002bca:	1c43      	adds	r3, r0, #1
 8002bcc:	89a3      	ldrh	r3, [r4, #12]
 8002bce:	bf15      	itete	ne
 8002bd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8002bd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002bd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002bda:	81a3      	strheq	r3, [r4, #12]
 8002bdc:	bf18      	it	ne
 8002bde:	81a3      	strhne	r3, [r4, #12]
 8002be0:	bd10      	pop	{r4, pc}

08002be2 <__sclose>:
 8002be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002be6:	f000 b8db 	b.w	8002da0 <_close_r>
	...

08002bec <__swbuf_r>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	460e      	mov	r6, r1
 8002bf0:	4614      	mov	r4, r2
 8002bf2:	4605      	mov	r5, r0
 8002bf4:	b118      	cbz	r0, 8002bfe <__swbuf_r+0x12>
 8002bf6:	6983      	ldr	r3, [r0, #24]
 8002bf8:	b90b      	cbnz	r3, 8002bfe <__swbuf_r+0x12>
 8002bfa:	f7ff fb1f 	bl	800223c <__sinit>
 8002bfe:	4b21      	ldr	r3, [pc, #132]	; (8002c84 <__swbuf_r+0x98>)
 8002c00:	429c      	cmp	r4, r3
 8002c02:	d12b      	bne.n	8002c5c <__swbuf_r+0x70>
 8002c04:	686c      	ldr	r4, [r5, #4]
 8002c06:	69a3      	ldr	r3, [r4, #24]
 8002c08:	60a3      	str	r3, [r4, #8]
 8002c0a:	89a3      	ldrh	r3, [r4, #12]
 8002c0c:	071a      	lsls	r2, r3, #28
 8002c0e:	d52f      	bpl.n	8002c70 <__swbuf_r+0x84>
 8002c10:	6923      	ldr	r3, [r4, #16]
 8002c12:	b36b      	cbz	r3, 8002c70 <__swbuf_r+0x84>
 8002c14:	6923      	ldr	r3, [r4, #16]
 8002c16:	6820      	ldr	r0, [r4, #0]
 8002c18:	b2f6      	uxtb	r6, r6
 8002c1a:	1ac0      	subs	r0, r0, r3
 8002c1c:	6963      	ldr	r3, [r4, #20]
 8002c1e:	4637      	mov	r7, r6
 8002c20:	4283      	cmp	r3, r0
 8002c22:	dc04      	bgt.n	8002c2e <__swbuf_r+0x42>
 8002c24:	4621      	mov	r1, r4
 8002c26:	4628      	mov	r0, r5
 8002c28:	f000 f94c 	bl	8002ec4 <_fflush_r>
 8002c2c:	bb30      	cbnz	r0, 8002c7c <__swbuf_r+0x90>
 8002c2e:	68a3      	ldr	r3, [r4, #8]
 8002c30:	3001      	adds	r0, #1
 8002c32:	3b01      	subs	r3, #1
 8002c34:	60a3      	str	r3, [r4, #8]
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	6022      	str	r2, [r4, #0]
 8002c3c:	701e      	strb	r6, [r3, #0]
 8002c3e:	6963      	ldr	r3, [r4, #20]
 8002c40:	4283      	cmp	r3, r0
 8002c42:	d004      	beq.n	8002c4e <__swbuf_r+0x62>
 8002c44:	89a3      	ldrh	r3, [r4, #12]
 8002c46:	07db      	lsls	r3, r3, #31
 8002c48:	d506      	bpl.n	8002c58 <__swbuf_r+0x6c>
 8002c4a:	2e0a      	cmp	r6, #10
 8002c4c:	d104      	bne.n	8002c58 <__swbuf_r+0x6c>
 8002c4e:	4621      	mov	r1, r4
 8002c50:	4628      	mov	r0, r5
 8002c52:	f000 f937 	bl	8002ec4 <_fflush_r>
 8002c56:	b988      	cbnz	r0, 8002c7c <__swbuf_r+0x90>
 8002c58:	4638      	mov	r0, r7
 8002c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <__swbuf_r+0x9c>)
 8002c5e:	429c      	cmp	r4, r3
 8002c60:	d101      	bne.n	8002c66 <__swbuf_r+0x7a>
 8002c62:	68ac      	ldr	r4, [r5, #8]
 8002c64:	e7cf      	b.n	8002c06 <__swbuf_r+0x1a>
 8002c66:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <__swbuf_r+0xa0>)
 8002c68:	429c      	cmp	r4, r3
 8002c6a:	bf08      	it	eq
 8002c6c:	68ec      	ldreq	r4, [r5, #12]
 8002c6e:	e7ca      	b.n	8002c06 <__swbuf_r+0x1a>
 8002c70:	4621      	mov	r1, r4
 8002c72:	4628      	mov	r0, r5
 8002c74:	f000 f81e 	bl	8002cb4 <__swsetup_r>
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	d0cb      	beq.n	8002c14 <__swbuf_r+0x28>
 8002c7c:	f04f 37ff 	mov.w	r7, #4294967295
 8002c80:	e7ea      	b.n	8002c58 <__swbuf_r+0x6c>
 8002c82:	bf00      	nop
 8002c84:	0800327c 	.word	0x0800327c
 8002c88:	0800329c 	.word	0x0800329c
 8002c8c:	0800325c 	.word	0x0800325c

08002c90 <_write_r>:
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	4604      	mov	r4, r0
 8002c94:	4608      	mov	r0, r1
 8002c96:	4611      	mov	r1, r2
 8002c98:	2200      	movs	r2, #0
 8002c9a:	4d05      	ldr	r5, [pc, #20]	; (8002cb0 <_write_r+0x20>)
 8002c9c:	602a      	str	r2, [r5, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f7fe fb50 	bl	8001344 <_write>
 8002ca4:	1c43      	adds	r3, r0, #1
 8002ca6:	d102      	bne.n	8002cae <_write_r+0x1e>
 8002ca8:	682b      	ldr	r3, [r5, #0]
 8002caa:	b103      	cbz	r3, 8002cae <_write_r+0x1e>
 8002cac:	6023      	str	r3, [r4, #0]
 8002cae:	bd38      	pop	{r3, r4, r5, pc}
 8002cb0:	200000a0 	.word	0x200000a0

08002cb4 <__swsetup_r>:
 8002cb4:	4b32      	ldr	r3, [pc, #200]	; (8002d80 <__swsetup_r+0xcc>)
 8002cb6:	b570      	push	{r4, r5, r6, lr}
 8002cb8:	681d      	ldr	r5, [r3, #0]
 8002cba:	4606      	mov	r6, r0
 8002cbc:	460c      	mov	r4, r1
 8002cbe:	b125      	cbz	r5, 8002cca <__swsetup_r+0x16>
 8002cc0:	69ab      	ldr	r3, [r5, #24]
 8002cc2:	b913      	cbnz	r3, 8002cca <__swsetup_r+0x16>
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	f7ff fab9 	bl	800223c <__sinit>
 8002cca:	4b2e      	ldr	r3, [pc, #184]	; (8002d84 <__swsetup_r+0xd0>)
 8002ccc:	429c      	cmp	r4, r3
 8002cce:	d10f      	bne.n	8002cf0 <__swsetup_r+0x3c>
 8002cd0:	686c      	ldr	r4, [r5, #4]
 8002cd2:	89a3      	ldrh	r3, [r4, #12]
 8002cd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002cd8:	0719      	lsls	r1, r3, #28
 8002cda:	d42c      	bmi.n	8002d36 <__swsetup_r+0x82>
 8002cdc:	06dd      	lsls	r5, r3, #27
 8002cde:	d411      	bmi.n	8002d04 <__swsetup_r+0x50>
 8002ce0:	2309      	movs	r3, #9
 8002ce2:	6033      	str	r3, [r6, #0]
 8002ce4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cec:	81a3      	strh	r3, [r4, #12]
 8002cee:	e03e      	b.n	8002d6e <__swsetup_r+0xba>
 8002cf0:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <__swsetup_r+0xd4>)
 8002cf2:	429c      	cmp	r4, r3
 8002cf4:	d101      	bne.n	8002cfa <__swsetup_r+0x46>
 8002cf6:	68ac      	ldr	r4, [r5, #8]
 8002cf8:	e7eb      	b.n	8002cd2 <__swsetup_r+0x1e>
 8002cfa:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <__swsetup_r+0xd8>)
 8002cfc:	429c      	cmp	r4, r3
 8002cfe:	bf08      	it	eq
 8002d00:	68ec      	ldreq	r4, [r5, #12]
 8002d02:	e7e6      	b.n	8002cd2 <__swsetup_r+0x1e>
 8002d04:	0758      	lsls	r0, r3, #29
 8002d06:	d512      	bpl.n	8002d2e <__swsetup_r+0x7a>
 8002d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d0a:	b141      	cbz	r1, 8002d1e <__swsetup_r+0x6a>
 8002d0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d10:	4299      	cmp	r1, r3
 8002d12:	d002      	beq.n	8002d1a <__swsetup_r+0x66>
 8002d14:	4630      	mov	r0, r6
 8002d16:	f7ff fb4b 	bl	80023b0 <_free_r>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	6363      	str	r3, [r4, #52]	; 0x34
 8002d1e:	89a3      	ldrh	r3, [r4, #12]
 8002d20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d24:	81a3      	strh	r3, [r4, #12]
 8002d26:	2300      	movs	r3, #0
 8002d28:	6063      	str	r3, [r4, #4]
 8002d2a:	6923      	ldr	r3, [r4, #16]
 8002d2c:	6023      	str	r3, [r4, #0]
 8002d2e:	89a3      	ldrh	r3, [r4, #12]
 8002d30:	f043 0308 	orr.w	r3, r3, #8
 8002d34:	81a3      	strh	r3, [r4, #12]
 8002d36:	6923      	ldr	r3, [r4, #16]
 8002d38:	b94b      	cbnz	r3, 8002d4e <__swsetup_r+0x9a>
 8002d3a:	89a3      	ldrh	r3, [r4, #12]
 8002d3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d44:	d003      	beq.n	8002d4e <__swsetup_r+0x9a>
 8002d46:	4621      	mov	r1, r4
 8002d48:	4630      	mov	r0, r6
 8002d4a:	f000 f92f 	bl	8002fac <__smakebuf_r>
 8002d4e:	89a0      	ldrh	r0, [r4, #12]
 8002d50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d54:	f010 0301 	ands.w	r3, r0, #1
 8002d58:	d00a      	beq.n	8002d70 <__swsetup_r+0xbc>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60a3      	str	r3, [r4, #8]
 8002d5e:	6963      	ldr	r3, [r4, #20]
 8002d60:	425b      	negs	r3, r3
 8002d62:	61a3      	str	r3, [r4, #24]
 8002d64:	6923      	ldr	r3, [r4, #16]
 8002d66:	b943      	cbnz	r3, 8002d7a <__swsetup_r+0xc6>
 8002d68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002d6c:	d1ba      	bne.n	8002ce4 <__swsetup_r+0x30>
 8002d6e:	bd70      	pop	{r4, r5, r6, pc}
 8002d70:	0781      	lsls	r1, r0, #30
 8002d72:	bf58      	it	pl
 8002d74:	6963      	ldrpl	r3, [r4, #20]
 8002d76:	60a3      	str	r3, [r4, #8]
 8002d78:	e7f4      	b.n	8002d64 <__swsetup_r+0xb0>
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	e7f7      	b.n	8002d6e <__swsetup_r+0xba>
 8002d7e:	bf00      	nop
 8002d80:	2000000c 	.word	0x2000000c
 8002d84:	0800327c 	.word	0x0800327c
 8002d88:	0800329c 	.word	0x0800329c
 8002d8c:	0800325c 	.word	0x0800325c

08002d90 <abort>:
 8002d90:	2006      	movs	r0, #6
 8002d92:	b508      	push	{r3, lr}
 8002d94:	f000 f99e 	bl	80030d4 <raise>
 8002d98:	2001      	movs	r0, #1
 8002d9a:	f7fe fb69 	bl	8001470 <_exit>
	...

08002da0 <_close_r>:
 8002da0:	b538      	push	{r3, r4, r5, lr}
 8002da2:	2300      	movs	r3, #0
 8002da4:	4d05      	ldr	r5, [pc, #20]	; (8002dbc <_close_r+0x1c>)
 8002da6:	4604      	mov	r4, r0
 8002da8:	4608      	mov	r0, r1
 8002daa:	602b      	str	r3, [r5, #0]
 8002dac:	f7fe fb87 	bl	80014be <_close>
 8002db0:	1c43      	adds	r3, r0, #1
 8002db2:	d102      	bne.n	8002dba <_close_r+0x1a>
 8002db4:	682b      	ldr	r3, [r5, #0]
 8002db6:	b103      	cbz	r3, 8002dba <_close_r+0x1a>
 8002db8:	6023      	str	r3, [r4, #0]
 8002dba:	bd38      	pop	{r3, r4, r5, pc}
 8002dbc:	200000a0 	.word	0x200000a0

08002dc0 <__sflush_r>:
 8002dc0:	898a      	ldrh	r2, [r1, #12]
 8002dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc4:	4605      	mov	r5, r0
 8002dc6:	0710      	lsls	r0, r2, #28
 8002dc8:	460c      	mov	r4, r1
 8002dca:	d457      	bmi.n	8002e7c <__sflush_r+0xbc>
 8002dcc:	684b      	ldr	r3, [r1, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	dc04      	bgt.n	8002ddc <__sflush_r+0x1c>
 8002dd2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	dc01      	bgt.n	8002ddc <__sflush_r+0x1c>
 8002dd8:	2000      	movs	r0, #0
 8002dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002dde:	2e00      	cmp	r6, #0
 8002de0:	d0fa      	beq.n	8002dd8 <__sflush_r+0x18>
 8002de2:	2300      	movs	r3, #0
 8002de4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002de8:	682f      	ldr	r7, [r5, #0]
 8002dea:	602b      	str	r3, [r5, #0]
 8002dec:	d032      	beq.n	8002e54 <__sflush_r+0x94>
 8002dee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002df0:	89a3      	ldrh	r3, [r4, #12]
 8002df2:	075a      	lsls	r2, r3, #29
 8002df4:	d505      	bpl.n	8002e02 <__sflush_r+0x42>
 8002df6:	6863      	ldr	r3, [r4, #4]
 8002df8:	1ac0      	subs	r0, r0, r3
 8002dfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002dfc:	b10b      	cbz	r3, 8002e02 <__sflush_r+0x42>
 8002dfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e00:	1ac0      	subs	r0, r0, r3
 8002e02:	2300      	movs	r3, #0
 8002e04:	4602      	mov	r2, r0
 8002e06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e08:	4628      	mov	r0, r5
 8002e0a:	6a21      	ldr	r1, [r4, #32]
 8002e0c:	47b0      	blx	r6
 8002e0e:	1c43      	adds	r3, r0, #1
 8002e10:	89a3      	ldrh	r3, [r4, #12]
 8002e12:	d106      	bne.n	8002e22 <__sflush_r+0x62>
 8002e14:	6829      	ldr	r1, [r5, #0]
 8002e16:	291d      	cmp	r1, #29
 8002e18:	d82c      	bhi.n	8002e74 <__sflush_r+0xb4>
 8002e1a:	4a29      	ldr	r2, [pc, #164]	; (8002ec0 <__sflush_r+0x100>)
 8002e1c:	40ca      	lsrs	r2, r1
 8002e1e:	07d6      	lsls	r6, r2, #31
 8002e20:	d528      	bpl.n	8002e74 <__sflush_r+0xb4>
 8002e22:	2200      	movs	r2, #0
 8002e24:	6062      	str	r2, [r4, #4]
 8002e26:	6922      	ldr	r2, [r4, #16]
 8002e28:	04d9      	lsls	r1, r3, #19
 8002e2a:	6022      	str	r2, [r4, #0]
 8002e2c:	d504      	bpl.n	8002e38 <__sflush_r+0x78>
 8002e2e:	1c42      	adds	r2, r0, #1
 8002e30:	d101      	bne.n	8002e36 <__sflush_r+0x76>
 8002e32:	682b      	ldr	r3, [r5, #0]
 8002e34:	b903      	cbnz	r3, 8002e38 <__sflush_r+0x78>
 8002e36:	6560      	str	r0, [r4, #84]	; 0x54
 8002e38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e3a:	602f      	str	r7, [r5, #0]
 8002e3c:	2900      	cmp	r1, #0
 8002e3e:	d0cb      	beq.n	8002dd8 <__sflush_r+0x18>
 8002e40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e44:	4299      	cmp	r1, r3
 8002e46:	d002      	beq.n	8002e4e <__sflush_r+0x8e>
 8002e48:	4628      	mov	r0, r5
 8002e4a:	f7ff fab1 	bl	80023b0 <_free_r>
 8002e4e:	2000      	movs	r0, #0
 8002e50:	6360      	str	r0, [r4, #52]	; 0x34
 8002e52:	e7c2      	b.n	8002dda <__sflush_r+0x1a>
 8002e54:	6a21      	ldr	r1, [r4, #32]
 8002e56:	2301      	movs	r3, #1
 8002e58:	4628      	mov	r0, r5
 8002e5a:	47b0      	blx	r6
 8002e5c:	1c41      	adds	r1, r0, #1
 8002e5e:	d1c7      	bne.n	8002df0 <__sflush_r+0x30>
 8002e60:	682b      	ldr	r3, [r5, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0c4      	beq.n	8002df0 <__sflush_r+0x30>
 8002e66:	2b1d      	cmp	r3, #29
 8002e68:	d001      	beq.n	8002e6e <__sflush_r+0xae>
 8002e6a:	2b16      	cmp	r3, #22
 8002e6c:	d101      	bne.n	8002e72 <__sflush_r+0xb2>
 8002e6e:	602f      	str	r7, [r5, #0]
 8002e70:	e7b2      	b.n	8002dd8 <__sflush_r+0x18>
 8002e72:	89a3      	ldrh	r3, [r4, #12]
 8002e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e78:	81a3      	strh	r3, [r4, #12]
 8002e7a:	e7ae      	b.n	8002dda <__sflush_r+0x1a>
 8002e7c:	690f      	ldr	r7, [r1, #16]
 8002e7e:	2f00      	cmp	r7, #0
 8002e80:	d0aa      	beq.n	8002dd8 <__sflush_r+0x18>
 8002e82:	0793      	lsls	r3, r2, #30
 8002e84:	bf18      	it	ne
 8002e86:	2300      	movne	r3, #0
 8002e88:	680e      	ldr	r6, [r1, #0]
 8002e8a:	bf08      	it	eq
 8002e8c:	694b      	ldreq	r3, [r1, #20]
 8002e8e:	1bf6      	subs	r6, r6, r7
 8002e90:	600f      	str	r7, [r1, #0]
 8002e92:	608b      	str	r3, [r1, #8]
 8002e94:	2e00      	cmp	r6, #0
 8002e96:	dd9f      	ble.n	8002dd8 <__sflush_r+0x18>
 8002e98:	4633      	mov	r3, r6
 8002e9a:	463a      	mov	r2, r7
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	6a21      	ldr	r1, [r4, #32]
 8002ea0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002ea4:	47e0      	blx	ip
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	dc06      	bgt.n	8002eb8 <__sflush_r+0xf8>
 8002eaa:	89a3      	ldrh	r3, [r4, #12]
 8002eac:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eb4:	81a3      	strh	r3, [r4, #12]
 8002eb6:	e790      	b.n	8002dda <__sflush_r+0x1a>
 8002eb8:	4407      	add	r7, r0
 8002eba:	1a36      	subs	r6, r6, r0
 8002ebc:	e7ea      	b.n	8002e94 <__sflush_r+0xd4>
 8002ebe:	bf00      	nop
 8002ec0:	20400001 	.word	0x20400001

08002ec4 <_fflush_r>:
 8002ec4:	b538      	push	{r3, r4, r5, lr}
 8002ec6:	690b      	ldr	r3, [r1, #16]
 8002ec8:	4605      	mov	r5, r0
 8002eca:	460c      	mov	r4, r1
 8002ecc:	b913      	cbnz	r3, 8002ed4 <_fflush_r+0x10>
 8002ece:	2500      	movs	r5, #0
 8002ed0:	4628      	mov	r0, r5
 8002ed2:	bd38      	pop	{r3, r4, r5, pc}
 8002ed4:	b118      	cbz	r0, 8002ede <_fflush_r+0x1a>
 8002ed6:	6983      	ldr	r3, [r0, #24]
 8002ed8:	b90b      	cbnz	r3, 8002ede <_fflush_r+0x1a>
 8002eda:	f7ff f9af 	bl	800223c <__sinit>
 8002ede:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <_fflush_r+0x6c>)
 8002ee0:	429c      	cmp	r4, r3
 8002ee2:	d11b      	bne.n	8002f1c <_fflush_r+0x58>
 8002ee4:	686c      	ldr	r4, [r5, #4]
 8002ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0ef      	beq.n	8002ece <_fflush_r+0xa>
 8002eee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ef0:	07d0      	lsls	r0, r2, #31
 8002ef2:	d404      	bmi.n	8002efe <_fflush_r+0x3a>
 8002ef4:	0599      	lsls	r1, r3, #22
 8002ef6:	d402      	bmi.n	8002efe <_fflush_r+0x3a>
 8002ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002efa:	f7ff fa4f 	bl	800239c <__retarget_lock_acquire_recursive>
 8002efe:	4628      	mov	r0, r5
 8002f00:	4621      	mov	r1, r4
 8002f02:	f7ff ff5d 	bl	8002dc0 <__sflush_r>
 8002f06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f08:	4605      	mov	r5, r0
 8002f0a:	07da      	lsls	r2, r3, #31
 8002f0c:	d4e0      	bmi.n	8002ed0 <_fflush_r+0xc>
 8002f0e:	89a3      	ldrh	r3, [r4, #12]
 8002f10:	059b      	lsls	r3, r3, #22
 8002f12:	d4dd      	bmi.n	8002ed0 <_fflush_r+0xc>
 8002f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f16:	f7ff fa42 	bl	800239e <__retarget_lock_release_recursive>
 8002f1a:	e7d9      	b.n	8002ed0 <_fflush_r+0xc>
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <_fflush_r+0x70>)
 8002f1e:	429c      	cmp	r4, r3
 8002f20:	d101      	bne.n	8002f26 <_fflush_r+0x62>
 8002f22:	68ac      	ldr	r4, [r5, #8]
 8002f24:	e7df      	b.n	8002ee6 <_fflush_r+0x22>
 8002f26:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <_fflush_r+0x74>)
 8002f28:	429c      	cmp	r4, r3
 8002f2a:	bf08      	it	eq
 8002f2c:	68ec      	ldreq	r4, [r5, #12]
 8002f2e:	e7da      	b.n	8002ee6 <_fflush_r+0x22>
 8002f30:	0800327c 	.word	0x0800327c
 8002f34:	0800329c 	.word	0x0800329c
 8002f38:	0800325c 	.word	0x0800325c

08002f3c <_lseek_r>:
 8002f3c:	b538      	push	{r3, r4, r5, lr}
 8002f3e:	4604      	mov	r4, r0
 8002f40:	4608      	mov	r0, r1
 8002f42:	4611      	mov	r1, r2
 8002f44:	2200      	movs	r2, #0
 8002f46:	4d05      	ldr	r5, [pc, #20]	; (8002f5c <_lseek_r+0x20>)
 8002f48:	602a      	str	r2, [r5, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f7fe fadb 	bl	8001506 <_lseek>
 8002f50:	1c43      	adds	r3, r0, #1
 8002f52:	d102      	bne.n	8002f5a <_lseek_r+0x1e>
 8002f54:	682b      	ldr	r3, [r5, #0]
 8002f56:	b103      	cbz	r3, 8002f5a <_lseek_r+0x1e>
 8002f58:	6023      	str	r3, [r4, #0]
 8002f5a:	bd38      	pop	{r3, r4, r5, pc}
 8002f5c:	200000a0 	.word	0x200000a0

08002f60 <__swhatbuf_r>:
 8002f60:	b570      	push	{r4, r5, r6, lr}
 8002f62:	460e      	mov	r6, r1
 8002f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f68:	4614      	mov	r4, r2
 8002f6a:	2900      	cmp	r1, #0
 8002f6c:	461d      	mov	r5, r3
 8002f6e:	b096      	sub	sp, #88	; 0x58
 8002f70:	da08      	bge.n	8002f84 <__swhatbuf_r+0x24>
 8002f72:	2200      	movs	r2, #0
 8002f74:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002f78:	602a      	str	r2, [r5, #0]
 8002f7a:	061a      	lsls	r2, r3, #24
 8002f7c:	d410      	bmi.n	8002fa0 <__swhatbuf_r+0x40>
 8002f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f82:	e00e      	b.n	8002fa2 <__swhatbuf_r+0x42>
 8002f84:	466a      	mov	r2, sp
 8002f86:	f000 f8c1 	bl	800310c <_fstat_r>
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	dbf1      	blt.n	8002f72 <__swhatbuf_r+0x12>
 8002f8e:	9a01      	ldr	r2, [sp, #4]
 8002f90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002f94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002f98:	425a      	negs	r2, r3
 8002f9a:	415a      	adcs	r2, r3
 8002f9c:	602a      	str	r2, [r5, #0]
 8002f9e:	e7ee      	b.n	8002f7e <__swhatbuf_r+0x1e>
 8002fa0:	2340      	movs	r3, #64	; 0x40
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	6023      	str	r3, [r4, #0]
 8002fa6:	b016      	add	sp, #88	; 0x58
 8002fa8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002fac <__smakebuf_r>:
 8002fac:	898b      	ldrh	r3, [r1, #12]
 8002fae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002fb0:	079d      	lsls	r5, r3, #30
 8002fb2:	4606      	mov	r6, r0
 8002fb4:	460c      	mov	r4, r1
 8002fb6:	d507      	bpl.n	8002fc8 <__smakebuf_r+0x1c>
 8002fb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002fbc:	6023      	str	r3, [r4, #0]
 8002fbe:	6123      	str	r3, [r4, #16]
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	6163      	str	r3, [r4, #20]
 8002fc4:	b002      	add	sp, #8
 8002fc6:	bd70      	pop	{r4, r5, r6, pc}
 8002fc8:	466a      	mov	r2, sp
 8002fca:	ab01      	add	r3, sp, #4
 8002fcc:	f7ff ffc8 	bl	8002f60 <__swhatbuf_r>
 8002fd0:	9900      	ldr	r1, [sp, #0]
 8002fd2:	4605      	mov	r5, r0
 8002fd4:	4630      	mov	r0, r6
 8002fd6:	f7ff fa53 	bl	8002480 <_malloc_r>
 8002fda:	b948      	cbnz	r0, 8002ff0 <__smakebuf_r+0x44>
 8002fdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fe0:	059a      	lsls	r2, r3, #22
 8002fe2:	d4ef      	bmi.n	8002fc4 <__smakebuf_r+0x18>
 8002fe4:	f023 0303 	bic.w	r3, r3, #3
 8002fe8:	f043 0302 	orr.w	r3, r3, #2
 8002fec:	81a3      	strh	r3, [r4, #12]
 8002fee:	e7e3      	b.n	8002fb8 <__smakebuf_r+0xc>
 8002ff0:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <__smakebuf_r+0x7c>)
 8002ff2:	62b3      	str	r3, [r6, #40]	; 0x28
 8002ff4:	89a3      	ldrh	r3, [r4, #12]
 8002ff6:	6020      	str	r0, [r4, #0]
 8002ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ffc:	81a3      	strh	r3, [r4, #12]
 8002ffe:	9b00      	ldr	r3, [sp, #0]
 8003000:	6120      	str	r0, [r4, #16]
 8003002:	6163      	str	r3, [r4, #20]
 8003004:	9b01      	ldr	r3, [sp, #4]
 8003006:	b15b      	cbz	r3, 8003020 <__smakebuf_r+0x74>
 8003008:	4630      	mov	r0, r6
 800300a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800300e:	f000 f88f 	bl	8003130 <_isatty_r>
 8003012:	b128      	cbz	r0, 8003020 <__smakebuf_r+0x74>
 8003014:	89a3      	ldrh	r3, [r4, #12]
 8003016:	f023 0303 	bic.w	r3, r3, #3
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	81a3      	strh	r3, [r4, #12]
 8003020:	89a0      	ldrh	r0, [r4, #12]
 8003022:	4305      	orrs	r5, r0
 8003024:	81a5      	strh	r5, [r4, #12]
 8003026:	e7cd      	b.n	8002fc4 <__smakebuf_r+0x18>
 8003028:	080021d5 	.word	0x080021d5

0800302c <memchr>:
 800302c:	4603      	mov	r3, r0
 800302e:	b510      	push	{r4, lr}
 8003030:	b2c9      	uxtb	r1, r1
 8003032:	4402      	add	r2, r0
 8003034:	4293      	cmp	r3, r2
 8003036:	4618      	mov	r0, r3
 8003038:	d101      	bne.n	800303e <memchr+0x12>
 800303a:	2000      	movs	r0, #0
 800303c:	e003      	b.n	8003046 <memchr+0x1a>
 800303e:	7804      	ldrb	r4, [r0, #0]
 8003040:	3301      	adds	r3, #1
 8003042:	428c      	cmp	r4, r1
 8003044:	d1f6      	bne.n	8003034 <memchr+0x8>
 8003046:	bd10      	pop	{r4, pc}

08003048 <__malloc_lock>:
 8003048:	4801      	ldr	r0, [pc, #4]	; (8003050 <__malloc_lock+0x8>)
 800304a:	f7ff b9a7 	b.w	800239c <__retarget_lock_acquire_recursive>
 800304e:	bf00      	nop
 8003050:	20000094 	.word	0x20000094

08003054 <__malloc_unlock>:
 8003054:	4801      	ldr	r0, [pc, #4]	; (800305c <__malloc_unlock+0x8>)
 8003056:	f7ff b9a2 	b.w	800239e <__retarget_lock_release_recursive>
 800305a:	bf00      	nop
 800305c:	20000094 	.word	0x20000094

08003060 <_read_r>:
 8003060:	b538      	push	{r3, r4, r5, lr}
 8003062:	4604      	mov	r4, r0
 8003064:	4608      	mov	r0, r1
 8003066:	4611      	mov	r1, r2
 8003068:	2200      	movs	r2, #0
 800306a:	4d05      	ldr	r5, [pc, #20]	; (8003080 <_read_r+0x20>)
 800306c:	602a      	str	r2, [r5, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	f7fe fa08 	bl	8001484 <_read>
 8003074:	1c43      	adds	r3, r0, #1
 8003076:	d102      	bne.n	800307e <_read_r+0x1e>
 8003078:	682b      	ldr	r3, [r5, #0]
 800307a:	b103      	cbz	r3, 800307e <_read_r+0x1e>
 800307c:	6023      	str	r3, [r4, #0]
 800307e:	bd38      	pop	{r3, r4, r5, pc}
 8003080:	200000a0 	.word	0x200000a0

08003084 <_raise_r>:
 8003084:	291f      	cmp	r1, #31
 8003086:	b538      	push	{r3, r4, r5, lr}
 8003088:	4604      	mov	r4, r0
 800308a:	460d      	mov	r5, r1
 800308c:	d904      	bls.n	8003098 <_raise_r+0x14>
 800308e:	2316      	movs	r3, #22
 8003090:	6003      	str	r3, [r0, #0]
 8003092:	f04f 30ff 	mov.w	r0, #4294967295
 8003096:	bd38      	pop	{r3, r4, r5, pc}
 8003098:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800309a:	b112      	cbz	r2, 80030a2 <_raise_r+0x1e>
 800309c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80030a0:	b94b      	cbnz	r3, 80030b6 <_raise_r+0x32>
 80030a2:	4620      	mov	r0, r4
 80030a4:	f000 f830 	bl	8003108 <_getpid_r>
 80030a8:	462a      	mov	r2, r5
 80030aa:	4601      	mov	r1, r0
 80030ac:	4620      	mov	r0, r4
 80030ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030b2:	f000 b817 	b.w	80030e4 <_kill_r>
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d00a      	beq.n	80030d0 <_raise_r+0x4c>
 80030ba:	1c59      	adds	r1, r3, #1
 80030bc:	d103      	bne.n	80030c6 <_raise_r+0x42>
 80030be:	2316      	movs	r3, #22
 80030c0:	6003      	str	r3, [r0, #0]
 80030c2:	2001      	movs	r0, #1
 80030c4:	e7e7      	b.n	8003096 <_raise_r+0x12>
 80030c6:	2400      	movs	r4, #0
 80030c8:	4628      	mov	r0, r5
 80030ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80030ce:	4798      	blx	r3
 80030d0:	2000      	movs	r0, #0
 80030d2:	e7e0      	b.n	8003096 <_raise_r+0x12>

080030d4 <raise>:
 80030d4:	4b02      	ldr	r3, [pc, #8]	; (80030e0 <raise+0xc>)
 80030d6:	4601      	mov	r1, r0
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	f7ff bfd3 	b.w	8003084 <_raise_r>
 80030de:	bf00      	nop
 80030e0:	2000000c 	.word	0x2000000c

080030e4 <_kill_r>:
 80030e4:	b538      	push	{r3, r4, r5, lr}
 80030e6:	2300      	movs	r3, #0
 80030e8:	4d06      	ldr	r5, [pc, #24]	; (8003104 <_kill_r+0x20>)
 80030ea:	4604      	mov	r4, r0
 80030ec:	4608      	mov	r0, r1
 80030ee:	4611      	mov	r1, r2
 80030f0:	602b      	str	r3, [r5, #0]
 80030f2:	f7fe f9ad 	bl	8001450 <_kill>
 80030f6:	1c43      	adds	r3, r0, #1
 80030f8:	d102      	bne.n	8003100 <_kill_r+0x1c>
 80030fa:	682b      	ldr	r3, [r5, #0]
 80030fc:	b103      	cbz	r3, 8003100 <_kill_r+0x1c>
 80030fe:	6023      	str	r3, [r4, #0]
 8003100:	bd38      	pop	{r3, r4, r5, pc}
 8003102:	bf00      	nop
 8003104:	200000a0 	.word	0x200000a0

08003108 <_getpid_r>:
 8003108:	f7fe b99b 	b.w	8001442 <_getpid>

0800310c <_fstat_r>:
 800310c:	b538      	push	{r3, r4, r5, lr}
 800310e:	2300      	movs	r3, #0
 8003110:	4d06      	ldr	r5, [pc, #24]	; (800312c <_fstat_r+0x20>)
 8003112:	4604      	mov	r4, r0
 8003114:	4608      	mov	r0, r1
 8003116:	4611      	mov	r1, r2
 8003118:	602b      	str	r3, [r5, #0]
 800311a:	f7fe f9db 	bl	80014d4 <_fstat>
 800311e:	1c43      	adds	r3, r0, #1
 8003120:	d102      	bne.n	8003128 <_fstat_r+0x1c>
 8003122:	682b      	ldr	r3, [r5, #0]
 8003124:	b103      	cbz	r3, 8003128 <_fstat_r+0x1c>
 8003126:	6023      	str	r3, [r4, #0]
 8003128:	bd38      	pop	{r3, r4, r5, pc}
 800312a:	bf00      	nop
 800312c:	200000a0 	.word	0x200000a0

08003130 <_isatty_r>:
 8003130:	b538      	push	{r3, r4, r5, lr}
 8003132:	2300      	movs	r3, #0
 8003134:	4d05      	ldr	r5, [pc, #20]	; (800314c <_isatty_r+0x1c>)
 8003136:	4604      	mov	r4, r0
 8003138:	4608      	mov	r0, r1
 800313a:	602b      	str	r3, [r5, #0]
 800313c:	f7fe f9d9 	bl	80014f2 <_isatty>
 8003140:	1c43      	adds	r3, r0, #1
 8003142:	d102      	bne.n	800314a <_isatty_r+0x1a>
 8003144:	682b      	ldr	r3, [r5, #0]
 8003146:	b103      	cbz	r3, 800314a <_isatty_r+0x1a>
 8003148:	6023      	str	r3, [r4, #0]
 800314a:	bd38      	pop	{r3, r4, r5, pc}
 800314c:	200000a0 	.word	0x200000a0

08003150 <_init>:
 8003150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003152:	bf00      	nop
 8003154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003156:	bc08      	pop	{r3}
 8003158:	469e      	mov	lr, r3
 800315a:	4770      	bx	lr

0800315c <_fini>:
 800315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315e:	bf00      	nop
 8003160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003162:	bc08      	pop	{r3}
 8003164:	469e      	mov	lr, r3
 8003166:	4770      	bx	lr
