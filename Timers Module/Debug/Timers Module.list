
Timers Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002df0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08002f00  08002f00  00012f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fd0  08002fd0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002fd0  08002fd0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fd0  08002fd0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fd0  08002fd0  00012fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fd4  08002fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08003048  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08003048  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003175  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fd5  00000000  00000000  0002320e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000498  00000000  00000000  000241e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f0  00000000  00000000  00024680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017572  00000000  00000000  00024a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000547c  00000000  00000000  0003bfe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080c8a  00000000  00000000  0004145e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c20e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001aa0  00000000  00000000  000c2138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08002ee8 	.word	0x08002ee8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08002ee8 	.word	0x08002ee8

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_fmul>:
 80009d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009e0:	bf1e      	ittt	ne
 80009e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e6:	ea92 0f0c 	teqne	r2, ip
 80009ea:	ea93 0f0c 	teqne	r3, ip
 80009ee:	d06f      	beq.n	8000ad0 <__aeabi_fmul+0xf8>
 80009f0:	441a      	add	r2, r3
 80009f2:	ea80 0c01 	eor.w	ip, r0, r1
 80009f6:	0240      	lsls	r0, r0, #9
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fe:	d01e      	beq.n	8000a3e <__aeabi_fmul+0x66>
 8000a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a18:	bf3e      	ittt	cc
 8000a1a:	0049      	lslcc	r1, r1, #1
 8000a1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	ea40 0001 	orr.w	r0, r0, r1
 8000a26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a2a:	2afd      	cmp	r2, #253	; 0xfd
 8000a2c:	d81d      	bhi.n	8000a6a <__aeabi_fmul+0x92>
 8000a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a36:	bf08      	it	eq
 8000a38:	f020 0001 	biceq.w	r0, r0, #1
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	0249      	lsleq	r1, r1, #9
 8000a4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a52:	3a7f      	subs	r2, #127	; 0x7f
 8000a54:	bfc2      	ittt	gt
 8000a56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5e:	4770      	bxgt	lr
 8000a60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	dc5d      	bgt.n	8000b28 <__aeabi_fmul+0x150>
 8000a6c:	f112 0f19 	cmn.w	r2, #25
 8000a70:	bfdc      	itt	le
 8000a72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a76:	4770      	bxle	lr
 8000a78:	f1c2 0200 	rsb	r2, r2, #0
 8000a7c:	0041      	lsls	r1, r0, #1
 8000a7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a82:	f1c2 0220 	rsb	r2, r2, #32
 8000a86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8e:	f140 0000 	adc.w	r0, r0, #0
 8000a92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a96:	bf08      	it	eq
 8000a98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a9c:	4770      	bx	lr
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fmul+0xce>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fmul+0xe6>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fmul+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	bf18      	it	ne
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d00a      	beq.n	8000af6 <__aeabi_fmul+0x11e>
 8000ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ae4:	bf18      	it	ne
 8000ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aea:	d1d8      	bne.n	8000a9e <__aeabi_fmul+0xc6>
 8000aec:	ea80 0001 	eor.w	r0, r0, r1
 8000af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f090 0f00 	teq	r0, #0
 8000afa:	bf17      	itett	ne
 8000afc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b00:	4608      	moveq	r0, r1
 8000b02:	f091 0f00 	teqne	r1, #0
 8000b06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b0a:	d014      	beq.n	8000b36 <__aeabi_fmul+0x15e>
 8000b0c:	ea92 0f0c 	teq	r2, ip
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fmul+0x13e>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d10f      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b16:	ea93 0f0c 	teq	r3, ip
 8000b1a:	d103      	bne.n	8000b24 <__aeabi_fmul+0x14c>
 8000b1c:	024b      	lsls	r3, r1, #9
 8000b1e:	bf18      	it	ne
 8000b20:	4608      	movne	r0, r1
 8000b22:	d108      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b24:	ea80 0001 	eor.w	r0, r0, r1
 8000b28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fdiv>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d069      	beq.n	8000c2c <__aeabi_fdiv+0xec>
 8000b58:	eba2 0203 	sub.w	r2, r2, r3
 8000b5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b66:	d037      	beq.n	8000bd8 <__aeabi_fdiv+0x98>
 8000b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf38      	it	cc
 8000b7c:	005b      	lslcc	r3, r3, #1
 8000b7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b86:	428b      	cmp	r3, r1
 8000b88:	bf24      	itt	cs
 8000b8a:	1a5b      	subcs	r3, r3, r1
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b94:	bf24      	itt	cs
 8000b96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ba2:	bf24      	itt	cs
 8000ba4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bb0:	bf24      	itt	cs
 8000bb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bc2:	d1e0      	bne.n	8000b86 <__aeabi_fdiv+0x46>
 8000bc4:	2afd      	cmp	r2, #253	; 0xfd
 8000bc6:	f63f af50 	bhi.w	8000a6a <__aeabi_fmul+0x92>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be0:	327f      	adds	r2, #127	; 0x7f
 8000be2:	bfc2      	ittt	gt
 8000be4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bec:	4770      	bxgt	lr
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	e737      	b.n	8000a6a <__aeabi_fmul+0x92>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c02:	bf02      	ittt	eq
 8000c04:	0040      	lsleq	r0, r0, #1
 8000c06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c0a:	3a01      	subeq	r2, #1
 8000c0c:	d0f9      	beq.n	8000c02 <__aeabi_fdiv+0xc2>
 8000c0e:	ea40 000c 	orr.w	r0, r0, ip
 8000c12:	f093 0f00 	teq	r3, #0
 8000c16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0049      	lsleq	r1, r1, #1
 8000c1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c22:	3b01      	subeq	r3, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fdiv+0xda>
 8000c26:	ea41 010c 	orr.w	r1, r1, ip
 8000c2a:	e795      	b.n	8000b58 <__aeabi_fdiv+0x18>
 8000c2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d108      	bne.n	8000c48 <__aeabi_fdiv+0x108>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	f47f af7d 	bne.w	8000b36 <__aeabi_fmul+0x15e>
 8000c3c:	ea93 0f0c 	teq	r3, ip
 8000c40:	f47f af70 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e776      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	d104      	bne.n	8000c58 <__aeabi_fdiv+0x118>
 8000c4e:	024b      	lsls	r3, r1, #9
 8000c50:	f43f af4c 	beq.w	8000aec <__aeabi_fmul+0x114>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e76e      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c5c:	bf18      	it	ne
 8000c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c62:	d1ca      	bne.n	8000bfa <__aeabi_fdiv+0xba>
 8000c64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c68:	f47f af5c 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	f47f af3c 	bne.w	8000aec <__aeabi_fmul+0x114>
 8000c74:	e75f      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c76:	bf00      	nop

08000c78 <__gesf2>:
 8000c78:	f04f 3cff 	mov.w	ip, #4294967295
 8000c7c:	e006      	b.n	8000c8c <__cmpsf2+0x4>
 8000c7e:	bf00      	nop

08000c80 <__lesf2>:
 8000c80:	f04f 0c01 	mov.w	ip, #1
 8000c84:	e002      	b.n	8000c8c <__cmpsf2+0x4>
 8000c86:	bf00      	nop

08000c88 <__cmpsf2>:
 8000c88:	f04f 0c01 	mov.w	ip, #1
 8000c8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c9c:	bf18      	it	ne
 8000c9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca2:	d011      	beq.n	8000cc8 <__cmpsf2+0x40>
 8000ca4:	b001      	add	sp, #4
 8000ca6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000caa:	bf18      	it	ne
 8000cac:	ea90 0f01 	teqne	r0, r1
 8000cb0:	bf58      	it	pl
 8000cb2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cb6:	bf88      	it	hi
 8000cb8:	17c8      	asrhi	r0, r1, #31
 8000cba:	bf38      	it	cc
 8000cbc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cc0:	bf18      	it	ne
 8000cc2:	f040 0001 	orrne.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ccc:	d102      	bne.n	8000cd4 <__cmpsf2+0x4c>
 8000cce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cd2:	d105      	bne.n	8000ce0 <__cmpsf2+0x58>
 8000cd4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cd8:	d1e4      	bne.n	8000ca4 <__cmpsf2+0x1c>
 8000cda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cde:	d0e1      	beq.n	8000ca4 <__cmpsf2+0x1c>
 8000ce0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_cfrcmple>:
 8000ce8:	4684      	mov	ip, r0
 8000cea:	4608      	mov	r0, r1
 8000cec:	4661      	mov	r1, ip
 8000cee:	e7ff      	b.n	8000cf0 <__aeabi_cfcmpeq>

08000cf0 <__aeabi_cfcmpeq>:
 8000cf0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cf2:	f7ff ffc9 	bl	8000c88 <__cmpsf2>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	bf48      	it	mi
 8000cfa:	f110 0f00 	cmnmi.w	r0, #0
 8000cfe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d00 <__aeabi_fcmpeq>:
 8000d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d04:	f7ff fff4 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d08:	bf0c      	ite	eq
 8000d0a:	2001      	moveq	r0, #1
 8000d0c:	2000      	movne	r0, #0
 8000d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d12:	bf00      	nop

08000d14 <__aeabi_fcmplt>:
 8000d14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d18:	f7ff ffea 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d1c:	bf34      	ite	cc
 8000d1e:	2001      	movcc	r0, #1
 8000d20:	2000      	movcs	r0, #0
 8000d22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d26:	bf00      	nop

08000d28 <__aeabi_fcmple>:
 8000d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d2c:	f7ff ffe0 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d30:	bf94      	ite	ls
 8000d32:	2001      	movls	r0, #1
 8000d34:	2000      	movhi	r0, #0
 8000d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3a:	bf00      	nop

08000d3c <__aeabi_fcmpge>:
 8000d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d40:	f7ff ffd2 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d44:	bf94      	ite	ls
 8000d46:	2001      	movls	r0, #1
 8000d48:	2000      	movhi	r0, #0
 8000d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4e:	bf00      	nop

08000d50 <__aeabi_fcmpgt>:
 8000d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d54:	f7ff ffc8 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d58:	bf34      	ite	cc
 8000d5a:	2001      	movcc	r0, #1
 8000d5c:	2000      	movcs	r0, #0
 8000d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d62:	bf00      	nop

08000d64 <__aeabi_f2uiz>:
 8000d64:	0042      	lsls	r2, r0, #1
 8000d66:	d20e      	bcs.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d6c:	d30b      	bcc.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d76:	d409      	bmi.n	8000d8c <__aeabi_f2uiz+0x28>
 8000d78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr
 8000d8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d90:	d101      	bne.n	8000d96 <__aeabi_f2uiz+0x32>
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	d102      	bne.n	8000d9c <__aeabi_f2uiz+0x38>
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9a:	4770      	bx	lr
 8000d9c:	f04f 0000 	mov.w	r0, #0
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	0000      	movs	r0, r0
	...

08000da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da8:	b5b0      	push	{r4, r5, r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint16_t event_val1, event_val2, event_diff;
  uint32_t a, b, t;
  float pressed_t, freq, max_freq = 0;
 8000dae:	f04f 0300 	mov.w	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db4:	f000 fb2e 	bl	8001414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db8:	f000 f892 	bl	8000ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dbc:	f000 f8d2 	bl	8000f64 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init();
 8000dc0:	f000 f8f2 	bl	8000fa8 <USER_RCC_Init>
  USER_GPIO_Init();
 8000dc4:	f000 f90a 	bl	8000fdc <USER_GPIO_Init>
  USER_TIM2_Capture_Init();
 8000dc8:	f000 f94c 	bl	8001064 <USER_TIM2_Capture_Init>
  USER_USART2_Init();
 8000dcc:	f000 f9c4 	bl	8001158 <USER_USART2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  TIM2->CNT = 65194;	//A
 8000dd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dd4:	f64f 62aa 	movw	r2, #65194	; 0xfeaa
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
  printf("Starting...\r\n");
 8000dda:	483d      	ldr	r0, [pc, #244]	; (8000ed0 <main+0x128>)
 8000ddc:	f001 f900 	bl	8001fe0 <puts>
	  b = ((uint16_t) (pressed_t * 100)) % 100;
	  printf("%d.%d\r\n", a, b);
	  */

	  //C.
	  event_val1 = USER_TIM2_Capture_Event();//	capture the 1st event
 8000de0:	f000 f9a8 	bl	8001134 <USER_TIM2_Capture_Event>
 8000de4:	4603      	mov	r3, r0
 8000de6:	837b      	strh	r3, [r7, #26]
	  TIM2->CCER ^=	TIM_CCER_CC1P;//		capture is done on different edge
 8000de8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dec:	6a1b      	ldr	r3, [r3, #32]
 8000dee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df2:	f083 0302 	eor.w	r3, r3, #2
 8000df6:	6213      	str	r3, [r2, #32]
	  event_val2 = USER_TIM2_Capture_Event();//	capture the 2nd event
 8000df8:	f000 f99c 	bl	8001134 <USER_TIM2_Capture_Event>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	833b      	strh	r3, [r7, #24]
	  TIM2->CCER ^=	TIM_CCER_CC1P;//		capture is done on different edge
 8000e00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e04:	6a1b      	ldr	r3, [r3, #32]
 8000e06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e0a:	f083 0302 	eor.w	r3, r3, #2
 8000e0e:	6213      	str	r3, [r2, #32]
	  event_diff = event_val2 - event_val1;//		2nd event - 1st event
 8000e10:	8b3a      	ldrh	r2, [r7, #24]
 8000e12:	8b7b      	ldrh	r3, [r7, #26]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	82fb      	strh	r3, [r7, #22]
	  //Calculating time according to the timer ticks difference
	  pressed_t = ( 1.0 / 64000000.0 ) * event_diff * (TIM2->PSC + 1);
 8000e18:	8afb      	ldrh	r3, [r7, #22]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fc14 	bl	8000648 <__aeabi_i2d>
 8000e20:	a329      	add	r3, pc, #164	; (adr r3, 8000ec8 <main+0x120>)
 8000e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e26:	f7ff f993 	bl	8000150 <__aeabi_dmul>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	4614      	mov	r4, r2
 8000e30:	461d      	mov	r5, r3
 8000e32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e38:	3301      	adds	r3, #1
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fbf4 	bl	8000628 <__aeabi_ui2d>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4620      	mov	r0, r4
 8000e46:	4629      	mov	r1, r5
 8000e48:	f7ff f982 	bl	8000150 <__aeabi_dmul>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	4610      	mov	r0, r2
 8000e52:	4619      	mov	r1, r3
 8000e54:	f7ff fc62 	bl	800071c <__aeabi_d2f>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	613b      	str	r3, [r7, #16]
	  freq = 1/(pressed_t * 2);
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fcb1 	bl	80007c8 <__addsf3>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000e6e:	f7ff fe67 	bl	8000b40 <__aeabi_fdiv>
 8000e72:	4603      	mov	r3, r0
 8000e74:	60fb      	str	r3, [r7, #12]
	  if(freq > max_freq){
 8000e76:	69f9      	ldr	r1, [r7, #28]
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f7ff ff69 	bl	8000d50 <__aeabi_fcmpgt>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d020      	beq.n	8000ec6 <main+0x11e>
		  max_freq = freq;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	61fb      	str	r3, [r7, #28]
		  a = (uint16_t) freq;
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f7ff ff6b 	bl	8000d64 <__aeabi_f2uiz>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	60bb      	str	r3, [r7, #8]
		  b = ((uint16_t) (freq * 100)) % 100;
 8000e94:	490f      	ldr	r1, [pc, #60]	; (8000ed4 <main+0x12c>)
 8000e96:	68f8      	ldr	r0, [r7, #12]
 8000e98:	f7ff fd9e 	bl	80009d8 <__aeabi_fmul>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff60 	bl	8000d64 <__aeabi_f2uiz>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <main+0x130>)
 8000eaa:	fba2 1203 	umull	r1, r2, r2, r3
 8000eae:	0952      	lsrs	r2, r2, #5
 8000eb0:	2164      	movs	r1, #100	; 0x64
 8000eb2:	fb01 f202 	mul.w	r2, r1, r2
 8000eb6:	1a9b      	subs	r3, r3, r2
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	607b      	str	r3, [r7, #4]
		  printf("%d.%d\r\n", a, b);
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	4806      	ldr	r0, [pc, #24]	; (8000edc <main+0x134>)
 8000ec2:	f001 f807 	bl	8001ed4 <iprintf>
	  event_val1 = USER_TIM2_Capture_Event();//	capture the 1st event
 8000ec6:	e78b      	b.n	8000de0 <main+0x38>
 8000ec8:	a0b5ed8d 	.word	0xa0b5ed8d
 8000ecc:	3e50c6f7 	.word	0x3e50c6f7
 8000ed0:	08002f00 	.word	0x08002f00
 8000ed4:	42c80000 	.word	0x42c80000
 8000ed8:	51eb851f 	.word	0x51eb851f
 8000edc:	08002f10 	.word	0x08002f10

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b090      	sub	sp, #64	; 0x40
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 0318 	add.w	r3, r7, #24
 8000eea:	2228      	movs	r2, #40	; 0x28
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 ffe8 	bl	8001ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f02:	2302      	movs	r3, #2
 8000f04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f06:	2301      	movs	r3, #1
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0a:	2310      	movs	r3, #16
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f12:	2300      	movs	r3, #0
 8000f14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f16:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1c:	f107 0318 	add.w	r3, r7, #24
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 fbbd 	bl	80016a0 <HAL_RCC_OscConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f2c:	f000 f93e 	bl	80011ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f30:	230f      	movs	r3, #15
 8000f32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f34:	2302      	movs	r3, #2
 8000f36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2102      	movs	r1, #2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fe2a 	bl	8001ba4 <HAL_RCC_ClockConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0x7a>
  {
	Error_Handler();
 8000f56:	f000 f929 	bl	80011ac <Error_Handler>
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3740      	adds	r7, #64	; 0x40
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_GPIO_Init+0x40>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <MX_GPIO_Init+0x40>)
 8000f70:	f043 0320 	orr.w	r3, r3, #32
 8000f74:	6193      	str	r3, [r2, #24]
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <MX_GPIO_Init+0x40>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	f003 0320 	and.w	r3, r3, #32
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <MX_GPIO_Init+0x40>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <MX_GPIO_Init+0x40>)
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	6193      	str	r3, [r2, #24]
 8000f8e:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <MX_GPIO_Init+0x40>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]

}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <USER_RCC_Init>:

/* USER CODE BEGIN 4 */
void USER_RCC_Init(void){
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
	//I/O port A clock enable
	RCC->APB2ENR	|=	 RCC_APB2ENR_IOPAEN;
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <USER_RCC_Init+0x30>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a09      	ldr	r2, [pc, #36]	; (8000fd8 <USER_RCC_Init+0x30>)
 8000fb2:	f043 0304 	orr.w	r3, r3, #4
 8000fb6:	6193      	str	r3, [r2, #24]
	//Timer 2 clock enable
	RCC->APB1ENR	|=	 RCC_APB1ENR_TIM2EN;
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <USER_RCC_Init+0x30>)
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <USER_RCC_Init+0x30>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	61d3      	str	r3, [r2, #28]

	RCC->APB1ENR	|=	 RCC_APB1ENR_USART2EN;//  	USART2 clock enable
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <USER_RCC_Init+0x30>)
 8000fc6:	69db      	ldr	r3, [r3, #28]
 8000fc8:	4a03      	ldr	r2, [pc, #12]	; (8000fd8 <USER_RCC_Init+0x30>)
 8000fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fce:	61d3      	str	r3, [r2, #28]

}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	40021000 	.word	0x40021000

08000fdc <USER_GPIO_Init>:
void USER_GPIO_Init(void){
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
	//PA0 (TIM2_CH1) as input floating
	GPIOA->CRL	&=	~GPIO_CRL_CNF0_1 & ~GPIO_CRL_MODE0;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <USER_GPIO_Init+0x84>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a1e      	ldr	r2, [pc, #120]	; (8001060 <USER_GPIO_Init+0x84>)
 8000fe6:	f023 030b 	bic.w	r3, r3, #11
 8000fea:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF0_0;
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <USER_GPIO_Init+0x84>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <USER_GPIO_Init+0x84>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	6013      	str	r3, [r2, #0]

	//PA1 (button) as input pull-up
	GPIOA->CRL &= ~GPIO_CRL_CNF1_0 & ~GPIO_CRL_MODE1;
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <USER_GPIO_Init+0x84>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a18      	ldr	r2, [pc, #96]	; (8001060 <USER_GPIO_Init+0x84>)
 8000ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001002:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF1_1;
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <USER_GPIO_Init+0x84>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a15      	ldr	r2, [pc, #84]	; (8001060 <USER_GPIO_Init+0x84>)
 800100a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800100e:	6013      	str	r3, [r2, #0]

	//pin PA2 (USART2_TX) as alternate function output push-pull, max speed 10MHz
	GPIOA->CRL	&=	~GPIO_CRL_CNF2_0 & ~GPIO_CRL_MODE2_1;
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <USER_GPIO_Init+0x84>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a12      	ldr	r2, [pc, #72]	; (8001060 <USER_GPIO_Init+0x84>)
 8001016:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800101a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF2_1 | GPIO_CRL_MODE2_0;
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <USER_GPIO_Init+0x84>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <USER_GPIO_Init+0x84>)
 8001022:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
 8001026:	6013      	str	r3, [r2, #0]

	//pin PA3 (USART_RX) as input pull-up
	GPIOA->CRL	&=	~GPIO_CRL_CNF3_0 & ~GPIO_CRL_MODE3;
 8001028:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <USER_GPIO_Init+0x84>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0c      	ldr	r2, [pc, #48]	; (8001060 <USER_GPIO_Init+0x84>)
 800102e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001032:	6013      	str	r3, [r2, #0]
	GPIOA->CRL	|=	 GPIO_CRL_CNF3_1;
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <USER_GPIO_Init+0x84>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a09      	ldr	r2, [pc, #36]	; (8001060 <USER_GPIO_Init+0x84>)
 800103a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800103e:	6013      	str	r3, [r2, #0]

	//pin PA5 (LED) as output push-pull
	GPIOA->CRL &= ~GPIO_CRL_CNF5 & ~GPIO_CRL_MODE5_1;
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <USER_GPIO_Init+0x84>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a06      	ldr	r2, [pc, #24]	; (8001060 <USER_GPIO_Init+0x84>)
 8001046:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800104a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE5_0;
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <USER_GPIO_Init+0x84>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <USER_GPIO_Init+0x84>)
 8001052:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	40010800 	.word	0x40010800

08001064 <USER_TIM2_Capture_Init>:
void USER_TIM2_Capture_Init(void){
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
	TIM2->CR1	&=	~TIM_CR1_CKD_0;
 8001068:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001076:	6013      	str	r3, [r2, #0]
	TIM2->CR1	|=	 TIM_CR1_CKD_1;//	sampling (DTS) = TIM_CLK/4
 8001078:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001086:	6013      	str	r3, [r2, #0]
	TIM2->CCMR1 	&=	~TIM_CCMR1_CC1S_1;
 8001088:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001092:	f023 0302 	bic.w	r3, r3, #2
 8001096:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 	|=	 TIM_CCMR1_CC1S_0;//	CC1 channel as input, mapped on TI1
 8001098:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 	|=	 TIM_CCMR1_IC1F;//	filter -> DTS/32, N=8
 80010a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b2:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80010b6:	6193      	str	r3, [r2, #24]
	TIM2->CCER	|=	 TIM_CCER_CC1P;//	capture is done on falling edge
 80010b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	6213      	str	r3, [r2, #32]
	TIM2->CCMR1 	&=	~TIM_CCMR1_IC1PSC;//	no prescaler
 80010c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010d2:	f023 030c 	bic.w	r3, r3, #12
 80010d6:	6193      	str	r3, [r2, #24]
	TIM2->CCER	|=	 TIM_CCER_CC1E;//	capture enabled
 80010d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6213      	str	r3, [r2, #32]
	TIM2->PSC	 =	 976;//		maximum prescaler
 80010e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010ec:	f44f 7274 	mov.w	r2, #976	; 0x3d0
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28

	//A

	TIM2->SMCR	&=	!TIM_SMCR_SMS;
 80010f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
	TIM2->CR1	&=	!TIM_CR1_CMS & !TIM_CR1_DIR & !TIM_CR1_UDIS;
 8001100:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
	TIM2->SR	&=	!TIM_SR_UIF;
 800110e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]



	TIM2->CR1	|=	 TIM_CR1_CEN;//		counter enabled
 800111c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <USER_TIM2_Capture_Event>:
uint16_t USER_TIM2_Capture_Event(void){
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	while( !(TIM2->SR & TIM_SR_CC1IF) );//		wait until a capture occurs
 8001138:	bf00      	nop
 800113a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f8      	beq.n	800113a <USER_TIM2_Capture_Event+0x6>
	return TIM2->CCR1;//				return the captured value
 8001148:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800114c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114e:	b29b      	uxth	r3, r3
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <USER_USART2_Init>:

void USER_USART2_Init(void){
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
	USART2->CR1	|=	 USART_CR1_UE;//		USART enabled
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <USER_USART2_Init+0x50>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	4a11      	ldr	r2, [pc, #68]	; (80011a8 <USER_USART2_Init+0x50>)
 8001162:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001166:	60d3      	str	r3, [r2, #12]
	USART2->CR1	&=	~USART_CR1_M//		  	1 start bit, 8 data bits
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <USER_USART2_Init+0x50>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <USER_USART2_Init+0x50>)
 800116e:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 8001172:	60d3      	str	r3, [r2, #12]
			&	~USART_CR1_PCE;//		parity control disabled
	USART2->CR2	&=	~USART_CR2_STOP;//  		1 stop bit
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <USER_USART2_Init+0x50>)
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <USER_USART2_Init+0x50>)
 800117a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800117e:	6113      	str	r3, [r2, #16]
	USART2->BRR	 =	 0xD05;//			9600 bps -> 208.33,
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <USER_USART2_Init+0x50>)
 8001182:	f640 5205 	movw	r2, #3333	; 0xd05
 8001186:	609a      	str	r2, [r3, #8]
	//NEW USARTDIV = 32*10^6/(16*115200)=17.361
	//BRR = [17->HEX=11][.361*16->HEX=6]=116
	//USART2->BRR = 0x116;


	USART2->CR1	|=	 USART_CR1_TE;//		        transmitter enabled
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <USER_USART2_Init+0x50>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <USER_USART2_Init+0x50>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	60d3      	str	r3, [r2, #12]
	USART2->CR1	|=	 USART_CR1_RE;//		        receiver enabled
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <USER_USART2_Init+0x50>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	4a03      	ldr	r2, [pc, #12]	; (80011a8 <USER_USART2_Init+0x50>)
 800119a:	f043 0304 	orr.w	r3, r3, #4
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	40004400 	.word	0x40004400

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of erropr occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <Error_Handler+0x8>
	...

080011b8 <_write>:
 */

#include "myprintf.h"
#include "main.h"

int _write(int file, char *ptr, int len){
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++){
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	e00f      	b.n	80011ea <_write+0x32>
		while( ( USART2->SR & USART_SR_TXE ) == 0 ){}
 80011ca:	bf00      	nop
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <_write+0x48>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f9      	beq.n	80011cc <_write+0x14>
		USART2->DR = *ptr++;
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	60ba      	str	r2, [r7, #8]
 80011de:	781a      	ldrb	r2, [r3, #0]
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <_write+0x48>)
 80011e2:	605a      	str	r2, [r3, #4]
	for(DataIdx=0; DataIdx<len; DataIdx++){
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	3301      	adds	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	dbeb      	blt.n	80011ca <_write+0x12>
	}
	return len;
 80011f2:	687b      	ldr	r3, [r7, #4]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	371c      	adds	r7, #28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40004400 	.word	0x40004400

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_MspInit+0x5c>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	4a14      	ldr	r2, [pc, #80]	; (8001260 <HAL_MspInit+0x5c>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6193      	str	r3, [r2, #24]
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_MspInit+0x5c>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <HAL_MspInit+0x5c>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <HAL_MspInit+0x5c>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122c:	61d3      	str	r3, [r2, #28]
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_MspInit+0x5c>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_MspInit+0x60>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <HAL_MspInit+0x60>)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	40021000 	.word	0x40021000
 8001264:	40010000 	.word	0x40010000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800126c:	e7fe      	b.n	800126c <NMI_Handler+0x4>

0800126e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <MemManage_Handler+0x4>

0800127a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <UsageFault_Handler+0x4>

08001286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr

080012aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ae:	f000 f8f7 	bl	80014a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	e00a      	b.n	80012de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012c8:	f3af 8000 	nop.w
 80012cc:	4601      	mov	r1, r0
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	60ba      	str	r2, [r7, #8]
 80012d4:	b2ca      	uxtb	r2, r1
 80012d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3301      	adds	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	dbf0      	blt.n	80012c8 <_read+0x12>
  }

  return len;
 80012e6:	687b      	ldr	r3, [r7, #4]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001316:	605a      	str	r2, [r3, #4]
  return 0;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <_isatty>:

int _isatty(int file)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800132c:	2301      	movs	r3, #1
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001358:	4a14      	ldr	r2, [pc, #80]	; (80013ac <_sbrk+0x5c>)
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <_sbrk+0x60>)
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <_sbrk+0x64>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <_sbrk+0x68>)
 8001370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	429a      	cmp	r2, r3
 800137e:	d207      	bcs.n	8001390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001380:	f000 fd76 	bl	8001e70 <__errno>
 8001384:	4603      	mov	r3, r0
 8001386:	220c      	movs	r2, #12
 8001388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	e009      	b.n	80013a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <_sbrk+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <_sbrk+0x64>)
 80013a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20005000 	.word	0x20005000
 80013b0:	00000400 	.word	0x00000400
 80013b4:	2000008c 	.word	0x2000008c
 80013b8:	200000a8 	.word	0x200000a8

080013bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c8:	480c      	ldr	r0, [pc, #48]	; (80013fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ca:	490d      	ldr	r1, [pc, #52]	; (8001400 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013cc:	4a0d      	ldr	r2, [pc, #52]	; (8001404 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d0:	e002      	b.n	80013d8 <LoopCopyDataInit>

080013d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d6:	3304      	adds	r3, #4

080013d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013dc:	d3f9      	bcc.n	80013d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013e0:	4c0a      	ldr	r4, [pc, #40]	; (800140c <LoopFillZerobss+0x22>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e4:	e001      	b.n	80013ea <LoopFillZerobss>

080013e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e8:	3204      	adds	r2, #4

080013ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ec:	d3fb      	bcc.n	80013e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013ee:	f7ff ffe5 	bl	80013bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013f2:	f000 fd43 	bl	8001e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013f6:	f7ff fcd7 	bl	8000da8 <main>
  bx lr
 80013fa:	4770      	bx	lr
  ldr r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001400:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001404:	08002fd8 	.word	0x08002fd8
  ldr r2, =_sbss
 8001408:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800140c:	200000a4 	.word	0x200000a4

08001410 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001410:	e7fe      	b.n	8001410 <ADC1_2_IRQHandler>
	...

08001414 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_Init+0x28>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a07      	ldr	r2, [pc, #28]	; (800143c <HAL_Init+0x28>)
 800141e:	f043 0310 	orr.w	r3, r3, #16
 8001422:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f000 f907 	bl	8001638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142a:	2000      	movs	r0, #0
 800142c:	f000 f808 	bl	8001440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001430:	f7ff fee8 	bl	8001204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40022000 	.word	0x40022000

08001440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_InitTick+0x54>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_InitTick+0x58>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001456:	fbb3 f3f1 	udiv	r3, r3, r1
 800145a:	fbb2 f3f3 	udiv	r3, r2, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f911 	bl	8001686 <HAL_SYSTICK_Config>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e00e      	b.n	800148c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d80a      	bhi.n	800148a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001474:	2200      	movs	r2, #0
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f000 f8e7 	bl	800164e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001480:	4a06      	ldr	r2, [pc, #24]	; (800149c <HAL_InitTick+0x5c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e000      	b.n	800148c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000000 	.word	0x20000000
 8001498:	20000008 	.word	0x20000008
 800149c:	20000004 	.word	0x20000004

080014a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <HAL_IncTick+0x1c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_IncTick+0x20>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a03      	ldr	r2, [pc, #12]	; (80014c0 <HAL_IncTick+0x20>)
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000090 	.word	0x20000090

080014c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b02      	ldr	r3, [pc, #8]	; (80014d4 <HAL_GetTick+0x10>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	20000090 	.word	0x20000090

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	; (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	; (800158c <__NVIC_SetPriority+0x50>)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	; 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001604:	d301      	bcc.n	800160a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001606:	2301      	movs	r3, #1
 8001608:	e00f      	b.n	800162a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <SysTick_Config+0x40>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001612:	210f      	movs	r1, #15
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f7ff ff90 	bl	800153c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <SysTick_Config+0x40>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001622:	4b04      	ldr	r3, [pc, #16]	; (8001634 <SysTick_Config+0x40>)
 8001624:	2207      	movs	r2, #7
 8001626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	e000e010 	.word	0xe000e010

08001638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff49 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001660:	f7ff ff5e 	bl	8001520 <__NVIC_GetPriorityGrouping>
 8001664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f7ff ff90 	bl	8001590 <NVIC_EncodePriority>
 8001670:	4602      	mov	r2, r0
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5f 	bl	800153c <__NVIC_SetPriority>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ffb0 	bl	80015f4 <SysTick_Config>
 8001694:	4603      	mov	r3, r0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e272      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 8087 	beq.w	80017ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016c0:	4b92      	ldr	r3, [pc, #584]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d00c      	beq.n	80016e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016cc:	4b8f      	ldr	r3, [pc, #572]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d112      	bne.n	80016fe <HAL_RCC_OscConfig+0x5e>
 80016d8:	4b8c      	ldr	r3, [pc, #560]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e4:	d10b      	bne.n	80016fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e6:	4b89      	ldr	r3, [pc, #548]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d06c      	beq.n	80017cc <HAL_RCC_OscConfig+0x12c>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d168      	bne.n	80017cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e24c      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x76>
 8001708:	4b80      	ldr	r3, [pc, #512]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a7f      	ldr	r2, [pc, #508]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800170e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	e02e      	b.n	8001774 <HAL_RCC_OscConfig+0xd4>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x98>
 800171e:	4b7b      	ldr	r3, [pc, #492]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a7a      	ldr	r2, [pc, #488]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	4b78      	ldr	r3, [pc, #480]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a77      	ldr	r2, [pc, #476]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e01d      	b.n	8001774 <HAL_RCC_OscConfig+0xd4>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0xbc>
 8001742:	4b72      	ldr	r3, [pc, #456]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a71      	ldr	r2, [pc, #452]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b6f      	ldr	r3, [pc, #444]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a6e      	ldr	r2, [pc, #440]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0xd4>
 800175c:	4b6b      	ldr	r3, [pc, #428]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a6a      	ldr	r2, [pc, #424]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b68      	ldr	r3, [pc, #416]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a67      	ldr	r2, [pc, #412]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fea2 	bl	80014c4 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fe9e 	bl	80014c4 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e200      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b5d      	ldr	r3, [pc, #372]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0xe4>
 80017a2:	e014      	b.n	80017ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fe8e 	bl	80014c4 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fe8a 	bl	80014c4 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e1ec      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x10c>
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d063      	beq.n	80018a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017da:	4b4c      	ldr	r3, [pc, #304]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017e6:	4b49      	ldr	r3, [pc, #292]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d11c      	bne.n	800182c <HAL_RCC_OscConfig+0x18c>
 80017f2:	4b46      	ldr	r3, [pc, #280]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d116      	bne.n	800182c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	4b43      	ldr	r3, [pc, #268]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <HAL_RCC_OscConfig+0x176>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d001      	beq.n	8001816 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e1c0      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001816:	4b3d      	ldr	r3, [pc, #244]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4939      	ldr	r1, [pc, #228]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182a:	e03a      	b.n	80018a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d020      	beq.n	8001876 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001834:	4b36      	ldr	r3, [pc, #216]	; (8001910 <HAL_RCC_OscConfig+0x270>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff fe43 	bl	80014c4 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff fe3f 	bl	80014c4 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e1a1      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4927      	ldr	r1, [pc, #156]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
 8001874:	e015      	b.n	80018a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001876:	4b26      	ldr	r3, [pc, #152]	; (8001910 <HAL_RCC_OscConfig+0x270>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fe22 	bl	80014c4 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001884:	f7ff fe1e 	bl	80014c4 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e180      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	4b1d      	ldr	r3, [pc, #116]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d03a      	beq.n	8001924 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d019      	beq.n	80018ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018bc:	f7ff fe02 	bl	80014c4 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c4:	f7ff fdfe 	bl	80014c4 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e160      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018e2:	2001      	movs	r0, #1
 80018e4:	f000 faa6 	bl	8001e34 <RCC_Delay>
 80018e8:	e01c      	b.n	8001924 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f0:	f7ff fde8 	bl	80014c4 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f6:	e00f      	b.n	8001918 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f8:	f7ff fde4 	bl	80014c4 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d908      	bls.n	8001918 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e146      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000
 8001910:	42420000 	.word	0x42420000
 8001914:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001918:	4b92      	ldr	r3, [pc, #584]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e9      	bne.n	80018f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 80a6 	beq.w	8001a7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001936:	4b8b      	ldr	r3, [pc, #556]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10d      	bne.n	800195e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b88      	ldr	r3, [pc, #544]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4a87      	ldr	r2, [pc, #540]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	61d3      	str	r3, [r2, #28]
 800194e:	4b85      	ldr	r3, [pc, #532]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800195a:	2301      	movs	r3, #1
 800195c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195e:	4b82      	ldr	r3, [pc, #520]	; (8001b68 <HAL_RCC_OscConfig+0x4c8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001966:	2b00      	cmp	r3, #0
 8001968:	d118      	bne.n	800199c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800196a:	4b7f      	ldr	r3, [pc, #508]	; (8001b68 <HAL_RCC_OscConfig+0x4c8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a7e      	ldr	r2, [pc, #504]	; (8001b68 <HAL_RCC_OscConfig+0x4c8>)
 8001970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001976:	f7ff fda5 	bl	80014c4 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197e:	f7ff fda1 	bl	80014c4 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b64      	cmp	r3, #100	; 0x64
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e103      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001990:	4b75      	ldr	r3, [pc, #468]	; (8001b68 <HAL_RCC_OscConfig+0x4c8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f0      	beq.n	800197e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d106      	bne.n	80019b2 <HAL_RCC_OscConfig+0x312>
 80019a4:	4b6f      	ldr	r3, [pc, #444]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4a6e      	ldr	r2, [pc, #440]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6213      	str	r3, [r2, #32]
 80019b0:	e02d      	b.n	8001a0e <HAL_RCC_OscConfig+0x36e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10c      	bne.n	80019d4 <HAL_RCC_OscConfig+0x334>
 80019ba:	4b6a      	ldr	r3, [pc, #424]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	4a69      	ldr	r2, [pc, #420]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	f023 0301 	bic.w	r3, r3, #1
 80019c4:	6213      	str	r3, [r2, #32]
 80019c6:	4b67      	ldr	r3, [pc, #412]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	4a66      	ldr	r2, [pc, #408]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	f023 0304 	bic.w	r3, r3, #4
 80019d0:	6213      	str	r3, [r2, #32]
 80019d2:	e01c      	b.n	8001a0e <HAL_RCC_OscConfig+0x36e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b05      	cmp	r3, #5
 80019da:	d10c      	bne.n	80019f6 <HAL_RCC_OscConfig+0x356>
 80019dc:	4b61      	ldr	r3, [pc, #388]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4a60      	ldr	r2, [pc, #384]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	f043 0304 	orr.w	r3, r3, #4
 80019e6:	6213      	str	r3, [r2, #32]
 80019e8:	4b5e      	ldr	r3, [pc, #376]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	4a5d      	ldr	r2, [pc, #372]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6213      	str	r3, [r2, #32]
 80019f4:	e00b      	b.n	8001a0e <HAL_RCC_OscConfig+0x36e>
 80019f6:	4b5b      	ldr	r3, [pc, #364]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a5a      	ldr	r2, [pc, #360]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	6213      	str	r3, [r2, #32]
 8001a02:	4b58      	ldr	r3, [pc, #352]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4a57      	ldr	r2, [pc, #348]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	f023 0304 	bic.w	r3, r3, #4
 8001a0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d015      	beq.n	8001a42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a16:	f7ff fd55 	bl	80014c4 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff fd51 	bl	80014c4 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e0b1      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a34:	4b4b      	ldr	r3, [pc, #300]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0ee      	beq.n	8001a1e <HAL_RCC_OscConfig+0x37e>
 8001a40:	e014      	b.n	8001a6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a42:	f7ff fd3f 	bl	80014c4 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4a:	f7ff fd3b 	bl	80014c4 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e09b      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a60:	4b40      	ldr	r3, [pc, #256]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1ee      	bne.n	8001a4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d105      	bne.n	8001a7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a72:	4b3c      	ldr	r3, [pc, #240]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	4a3b      	ldr	r2, [pc, #236]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8087 	beq.w	8001b96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a88:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d061      	beq.n	8001b58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d146      	bne.n	8001b2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9c:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <HAL_RCC_OscConfig+0x4cc>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fd0f 	bl	80014c4 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7ff fd0b 	bl	80014c4 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e06d      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001abc:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f0      	bne.n	8001aaa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad0:	d108      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ad2:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	4921      	ldr	r1, [pc, #132]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a19      	ldr	r1, [r3, #32]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	430b      	orrs	r3, r1
 8001af6:	491b      	ldr	r1, [pc, #108]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_RCC_OscConfig+0x4cc>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff fcdf 	bl	80014c4 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0a:	f7ff fcdb 	bl	80014c4 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e03d      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x46a>
 8001b28:	e035      	b.n	8001b96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_RCC_OscConfig+0x4cc>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7ff fcc8 	bl	80014c4 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b38:	f7ff fcc4 	bl	80014c4 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e026      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x498>
 8001b56:	e01e      	b.n	8001b96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e019      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40007000 	.word	0x40007000
 8001b6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_RCC_OscConfig+0x500>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d106      	bne.n	8001b92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d001      	beq.n	8001b96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0d0      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b6a      	ldr	r3, [pc, #424]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d910      	bls.n	8001be8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b67      	ldr	r3, [pc, #412]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 0207 	bic.w	r2, r3, #7
 8001bce:	4965      	ldr	r1, [pc, #404]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b63      	ldr	r3, [pc, #396]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0b8      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d020      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c00:	4b59      	ldr	r3, [pc, #356]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4a58      	ldr	r2, [pc, #352]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c18:	4b53      	ldr	r3, [pc, #332]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	4a52      	ldr	r2, [pc, #328]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c24:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	494d      	ldr	r1, [pc, #308]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d040      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d107      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d115      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e07f      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d107      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c62:	4b41      	ldr	r3, [pc, #260]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e073      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c72:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e06b      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c82:	4b39      	ldr	r3, [pc, #228]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f023 0203 	bic.w	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	4936      	ldr	r1, [pc, #216]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c94:	f7ff fc16 	bl	80014c4 <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9c:	f7ff fc12 	bl	80014c4 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e053      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 020c 	and.w	r2, r3, #12
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d1eb      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d210      	bcs.n	8001cf4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 0207 	bic.w	r2, r3, #7
 8001cda:	4922      	ldr	r1, [pc, #136]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e032      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4916      	ldr	r1, [pc, #88]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	490e      	ldr	r1, [pc, #56]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d32:	f000 f821 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 8001d36:	4602      	mov	r2, r0
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	490a      	ldr	r1, [pc, #40]	; (8001d6c <HAL_RCC_ClockConfig+0x1c8>)
 8001d44:	5ccb      	ldrb	r3, [r1, r3]
 8001d46:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4a:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <HAL_RCC_ClockConfig+0x1cc>)
 8001d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_RCC_ClockConfig+0x1d0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fb74 	bl	8001440 <HAL_InitTick>

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40022000 	.word	0x40022000
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	08002f28 	.word	0x08002f28
 8001d70:	20000000 	.word	0x20000000
 8001d74:	20000004 	.word	0x20000004

08001d78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d78:	b490      	push	{r4, r7}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d7e:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xac>)
 8001d80:	1d3c      	adds	r4, r7, #4
 8001d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d88:	f240 2301 	movw	r3, #513	; 0x201
 8001d8c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	2300      	movs	r3, #0
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001da2:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d002      	beq.n	8001db8 <HAL_RCC_GetSysClockFreq+0x40>
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d003      	beq.n	8001dbe <HAL_RCC_GetSysClockFreq+0x46>
 8001db6:	e02b      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dba:	623b      	str	r3, [r7, #32]
      break;
 8001dbc:	e02b      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	0c9b      	lsrs	r3, r3, #18
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3328      	adds	r3, #40	; 0x28
 8001dc8:	443b      	add	r3, r7
 8001dca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d012      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dda:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	0c5b      	lsrs	r3, r3, #17
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	3328      	adds	r3, #40	; 0x28
 8001de6:	443b      	add	r3, r7
 8001de8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001dec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001df2:	fb03 f202 	mul.w	r2, r3, r2
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfe:	e004      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e04:	fb02 f303 	mul.w	r3, r2, r3
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	623b      	str	r3, [r7, #32]
      break;
 8001e0e:	e002      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e12:	623b      	str	r3, [r7, #32]
      break;
 8001e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e16:	6a3b      	ldr	r3, [r7, #32]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3728      	adds	r7, #40	; 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc90      	pop	{r4, r7}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	08002f18 	.word	0x08002f18
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	007a1200 	.word	0x007a1200
 8001e30:	003d0900 	.word	0x003d0900

08001e34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <RCC_Delay+0x34>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <RCC_Delay+0x38>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	0a5b      	lsrs	r3, r3, #9
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	fb02 f303 	mul.w	r3, r2, r3
 8001e4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e50:	bf00      	nop
  }
  while (Delay --);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1e5a      	subs	r2, r3, #1
 8001e56:	60fa      	str	r2, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f9      	bne.n	8001e50 <RCC_Delay+0x1c>
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	10624dd3 	.word	0x10624dd3

08001e70 <__errno>:
 8001e70:	4b01      	ldr	r3, [pc, #4]	; (8001e78 <__errno+0x8>)
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	2000000c 	.word	0x2000000c

08001e7c <__libc_init_array>:
 8001e7c:	b570      	push	{r4, r5, r6, lr}
 8001e7e:	2600      	movs	r6, #0
 8001e80:	4d0c      	ldr	r5, [pc, #48]	; (8001eb4 <__libc_init_array+0x38>)
 8001e82:	4c0d      	ldr	r4, [pc, #52]	; (8001eb8 <__libc_init_array+0x3c>)
 8001e84:	1b64      	subs	r4, r4, r5
 8001e86:	10a4      	asrs	r4, r4, #2
 8001e88:	42a6      	cmp	r6, r4
 8001e8a:	d109      	bne.n	8001ea0 <__libc_init_array+0x24>
 8001e8c:	f001 f82c 	bl	8002ee8 <_init>
 8001e90:	2600      	movs	r6, #0
 8001e92:	4d0a      	ldr	r5, [pc, #40]	; (8001ebc <__libc_init_array+0x40>)
 8001e94:	4c0a      	ldr	r4, [pc, #40]	; (8001ec0 <__libc_init_array+0x44>)
 8001e96:	1b64      	subs	r4, r4, r5
 8001e98:	10a4      	asrs	r4, r4, #2
 8001e9a:	42a6      	cmp	r6, r4
 8001e9c:	d105      	bne.n	8001eaa <__libc_init_array+0x2e>
 8001e9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ea4:	4798      	blx	r3
 8001ea6:	3601      	adds	r6, #1
 8001ea8:	e7ee      	b.n	8001e88 <__libc_init_array+0xc>
 8001eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eae:	4798      	blx	r3
 8001eb0:	3601      	adds	r6, #1
 8001eb2:	e7f2      	b.n	8001e9a <__libc_init_array+0x1e>
 8001eb4:	08002fd0 	.word	0x08002fd0
 8001eb8:	08002fd0 	.word	0x08002fd0
 8001ebc:	08002fd0 	.word	0x08002fd0
 8001ec0:	08002fd4 	.word	0x08002fd4

08001ec4 <memset>:
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4402      	add	r2, r0
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d100      	bne.n	8001ece <memset+0xa>
 8001ecc:	4770      	bx	lr
 8001ece:	f803 1b01 	strb.w	r1, [r3], #1
 8001ed2:	e7f9      	b.n	8001ec8 <memset+0x4>

08001ed4 <iprintf>:
 8001ed4:	b40f      	push	{r0, r1, r2, r3}
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <iprintf+0x2c>)
 8001ed8:	b513      	push	{r0, r1, r4, lr}
 8001eda:	681c      	ldr	r4, [r3, #0]
 8001edc:	b124      	cbz	r4, 8001ee8 <iprintf+0x14>
 8001ede:	69a3      	ldr	r3, [r4, #24]
 8001ee0:	b913      	cbnz	r3, 8001ee8 <iprintf+0x14>
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f000 fa5a 	bl	800239c <__sinit>
 8001ee8:	ab05      	add	r3, sp, #20
 8001eea:	4620      	mov	r0, r4
 8001eec:	9a04      	ldr	r2, [sp, #16]
 8001eee:	68a1      	ldr	r1, [r4, #8]
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	f000 fc5d 	bl	80027b0 <_vfiprintf_r>
 8001ef6:	b002      	add	sp, #8
 8001ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001efc:	b004      	add	sp, #16
 8001efe:	4770      	bx	lr
 8001f00:	2000000c 	.word	0x2000000c

08001f04 <_puts_r>:
 8001f04:	b570      	push	{r4, r5, r6, lr}
 8001f06:	460e      	mov	r6, r1
 8001f08:	4605      	mov	r5, r0
 8001f0a:	b118      	cbz	r0, 8001f14 <_puts_r+0x10>
 8001f0c:	6983      	ldr	r3, [r0, #24]
 8001f0e:	b90b      	cbnz	r3, 8001f14 <_puts_r+0x10>
 8001f10:	f000 fa44 	bl	800239c <__sinit>
 8001f14:	69ab      	ldr	r3, [r5, #24]
 8001f16:	68ac      	ldr	r4, [r5, #8]
 8001f18:	b913      	cbnz	r3, 8001f20 <_puts_r+0x1c>
 8001f1a:	4628      	mov	r0, r5
 8001f1c:	f000 fa3e 	bl	800239c <__sinit>
 8001f20:	4b2c      	ldr	r3, [pc, #176]	; (8001fd4 <_puts_r+0xd0>)
 8001f22:	429c      	cmp	r4, r3
 8001f24:	d120      	bne.n	8001f68 <_puts_r+0x64>
 8001f26:	686c      	ldr	r4, [r5, #4]
 8001f28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f2a:	07db      	lsls	r3, r3, #31
 8001f2c:	d405      	bmi.n	8001f3a <_puts_r+0x36>
 8001f2e:	89a3      	ldrh	r3, [r4, #12]
 8001f30:	0598      	lsls	r0, r3, #22
 8001f32:	d402      	bmi.n	8001f3a <_puts_r+0x36>
 8001f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f36:	f000 facf 	bl	80024d8 <__retarget_lock_acquire_recursive>
 8001f3a:	89a3      	ldrh	r3, [r4, #12]
 8001f3c:	0719      	lsls	r1, r3, #28
 8001f3e:	d51d      	bpl.n	8001f7c <_puts_r+0x78>
 8001f40:	6923      	ldr	r3, [r4, #16]
 8001f42:	b1db      	cbz	r3, 8001f7c <_puts_r+0x78>
 8001f44:	3e01      	subs	r6, #1
 8001f46:	68a3      	ldr	r3, [r4, #8]
 8001f48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	60a3      	str	r3, [r4, #8]
 8001f50:	bb39      	cbnz	r1, 8001fa2 <_puts_r+0x9e>
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	da38      	bge.n	8001fc8 <_puts_r+0xc4>
 8001f56:	4622      	mov	r2, r4
 8001f58:	210a      	movs	r1, #10
 8001f5a:	4628      	mov	r0, r5
 8001f5c:	f000 f848 	bl	8001ff0 <__swbuf_r>
 8001f60:	3001      	adds	r0, #1
 8001f62:	d011      	beq.n	8001f88 <_puts_r+0x84>
 8001f64:	250a      	movs	r5, #10
 8001f66:	e011      	b.n	8001f8c <_puts_r+0x88>
 8001f68:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <_puts_r+0xd4>)
 8001f6a:	429c      	cmp	r4, r3
 8001f6c:	d101      	bne.n	8001f72 <_puts_r+0x6e>
 8001f6e:	68ac      	ldr	r4, [r5, #8]
 8001f70:	e7da      	b.n	8001f28 <_puts_r+0x24>
 8001f72:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <_puts_r+0xd8>)
 8001f74:	429c      	cmp	r4, r3
 8001f76:	bf08      	it	eq
 8001f78:	68ec      	ldreq	r4, [r5, #12]
 8001f7a:	e7d5      	b.n	8001f28 <_puts_r+0x24>
 8001f7c:	4621      	mov	r1, r4
 8001f7e:	4628      	mov	r0, r5
 8001f80:	f000 f888 	bl	8002094 <__swsetup_r>
 8001f84:	2800      	cmp	r0, #0
 8001f86:	d0dd      	beq.n	8001f44 <_puts_r+0x40>
 8001f88:	f04f 35ff 	mov.w	r5, #4294967295
 8001f8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f8e:	07da      	lsls	r2, r3, #31
 8001f90:	d405      	bmi.n	8001f9e <_puts_r+0x9a>
 8001f92:	89a3      	ldrh	r3, [r4, #12]
 8001f94:	059b      	lsls	r3, r3, #22
 8001f96:	d402      	bmi.n	8001f9e <_puts_r+0x9a>
 8001f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f9a:	f000 fa9e 	bl	80024da <__retarget_lock_release_recursive>
 8001f9e:	4628      	mov	r0, r5
 8001fa0:	bd70      	pop	{r4, r5, r6, pc}
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	da04      	bge.n	8001fb0 <_puts_r+0xac>
 8001fa6:	69a2      	ldr	r2, [r4, #24]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	dc06      	bgt.n	8001fba <_puts_r+0xb6>
 8001fac:	290a      	cmp	r1, #10
 8001fae:	d004      	beq.n	8001fba <_puts_r+0xb6>
 8001fb0:	6823      	ldr	r3, [r4, #0]
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	6022      	str	r2, [r4, #0]
 8001fb6:	7019      	strb	r1, [r3, #0]
 8001fb8:	e7c5      	b.n	8001f46 <_puts_r+0x42>
 8001fba:	4622      	mov	r2, r4
 8001fbc:	4628      	mov	r0, r5
 8001fbe:	f000 f817 	bl	8001ff0 <__swbuf_r>
 8001fc2:	3001      	adds	r0, #1
 8001fc4:	d1bf      	bne.n	8001f46 <_puts_r+0x42>
 8001fc6:	e7df      	b.n	8001f88 <_puts_r+0x84>
 8001fc8:	250a      	movs	r5, #10
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	6022      	str	r2, [r4, #0]
 8001fd0:	701d      	strb	r5, [r3, #0]
 8001fd2:	e7db      	b.n	8001f8c <_puts_r+0x88>
 8001fd4:	08002f5c 	.word	0x08002f5c
 8001fd8:	08002f7c 	.word	0x08002f7c
 8001fdc:	08002f3c 	.word	0x08002f3c

08001fe0 <puts>:
 8001fe0:	4b02      	ldr	r3, [pc, #8]	; (8001fec <puts+0xc>)
 8001fe2:	4601      	mov	r1, r0
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	f7ff bf8d 	b.w	8001f04 <_puts_r>
 8001fea:	bf00      	nop
 8001fec:	2000000c 	.word	0x2000000c

08001ff0 <__swbuf_r>:
 8001ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff2:	460e      	mov	r6, r1
 8001ff4:	4614      	mov	r4, r2
 8001ff6:	4605      	mov	r5, r0
 8001ff8:	b118      	cbz	r0, 8002002 <__swbuf_r+0x12>
 8001ffa:	6983      	ldr	r3, [r0, #24]
 8001ffc:	b90b      	cbnz	r3, 8002002 <__swbuf_r+0x12>
 8001ffe:	f000 f9cd 	bl	800239c <__sinit>
 8002002:	4b21      	ldr	r3, [pc, #132]	; (8002088 <__swbuf_r+0x98>)
 8002004:	429c      	cmp	r4, r3
 8002006:	d12b      	bne.n	8002060 <__swbuf_r+0x70>
 8002008:	686c      	ldr	r4, [r5, #4]
 800200a:	69a3      	ldr	r3, [r4, #24]
 800200c:	60a3      	str	r3, [r4, #8]
 800200e:	89a3      	ldrh	r3, [r4, #12]
 8002010:	071a      	lsls	r2, r3, #28
 8002012:	d52f      	bpl.n	8002074 <__swbuf_r+0x84>
 8002014:	6923      	ldr	r3, [r4, #16]
 8002016:	b36b      	cbz	r3, 8002074 <__swbuf_r+0x84>
 8002018:	6923      	ldr	r3, [r4, #16]
 800201a:	6820      	ldr	r0, [r4, #0]
 800201c:	b2f6      	uxtb	r6, r6
 800201e:	1ac0      	subs	r0, r0, r3
 8002020:	6963      	ldr	r3, [r4, #20]
 8002022:	4637      	mov	r7, r6
 8002024:	4283      	cmp	r3, r0
 8002026:	dc04      	bgt.n	8002032 <__swbuf_r+0x42>
 8002028:	4621      	mov	r1, r4
 800202a:	4628      	mov	r0, r5
 800202c:	f000 f922 	bl	8002274 <_fflush_r>
 8002030:	bb30      	cbnz	r0, 8002080 <__swbuf_r+0x90>
 8002032:	68a3      	ldr	r3, [r4, #8]
 8002034:	3001      	adds	r0, #1
 8002036:	3b01      	subs	r3, #1
 8002038:	60a3      	str	r3, [r4, #8]
 800203a:	6823      	ldr	r3, [r4, #0]
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	6022      	str	r2, [r4, #0]
 8002040:	701e      	strb	r6, [r3, #0]
 8002042:	6963      	ldr	r3, [r4, #20]
 8002044:	4283      	cmp	r3, r0
 8002046:	d004      	beq.n	8002052 <__swbuf_r+0x62>
 8002048:	89a3      	ldrh	r3, [r4, #12]
 800204a:	07db      	lsls	r3, r3, #31
 800204c:	d506      	bpl.n	800205c <__swbuf_r+0x6c>
 800204e:	2e0a      	cmp	r6, #10
 8002050:	d104      	bne.n	800205c <__swbuf_r+0x6c>
 8002052:	4621      	mov	r1, r4
 8002054:	4628      	mov	r0, r5
 8002056:	f000 f90d 	bl	8002274 <_fflush_r>
 800205a:	b988      	cbnz	r0, 8002080 <__swbuf_r+0x90>
 800205c:	4638      	mov	r0, r7
 800205e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <__swbuf_r+0x9c>)
 8002062:	429c      	cmp	r4, r3
 8002064:	d101      	bne.n	800206a <__swbuf_r+0x7a>
 8002066:	68ac      	ldr	r4, [r5, #8]
 8002068:	e7cf      	b.n	800200a <__swbuf_r+0x1a>
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <__swbuf_r+0xa0>)
 800206c:	429c      	cmp	r4, r3
 800206e:	bf08      	it	eq
 8002070:	68ec      	ldreq	r4, [r5, #12]
 8002072:	e7ca      	b.n	800200a <__swbuf_r+0x1a>
 8002074:	4621      	mov	r1, r4
 8002076:	4628      	mov	r0, r5
 8002078:	f000 f80c 	bl	8002094 <__swsetup_r>
 800207c:	2800      	cmp	r0, #0
 800207e:	d0cb      	beq.n	8002018 <__swbuf_r+0x28>
 8002080:	f04f 37ff 	mov.w	r7, #4294967295
 8002084:	e7ea      	b.n	800205c <__swbuf_r+0x6c>
 8002086:	bf00      	nop
 8002088:	08002f5c 	.word	0x08002f5c
 800208c:	08002f7c 	.word	0x08002f7c
 8002090:	08002f3c 	.word	0x08002f3c

08002094 <__swsetup_r>:
 8002094:	4b32      	ldr	r3, [pc, #200]	; (8002160 <__swsetup_r+0xcc>)
 8002096:	b570      	push	{r4, r5, r6, lr}
 8002098:	681d      	ldr	r5, [r3, #0]
 800209a:	4606      	mov	r6, r0
 800209c:	460c      	mov	r4, r1
 800209e:	b125      	cbz	r5, 80020aa <__swsetup_r+0x16>
 80020a0:	69ab      	ldr	r3, [r5, #24]
 80020a2:	b913      	cbnz	r3, 80020aa <__swsetup_r+0x16>
 80020a4:	4628      	mov	r0, r5
 80020a6:	f000 f979 	bl	800239c <__sinit>
 80020aa:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <__swsetup_r+0xd0>)
 80020ac:	429c      	cmp	r4, r3
 80020ae:	d10f      	bne.n	80020d0 <__swsetup_r+0x3c>
 80020b0:	686c      	ldr	r4, [r5, #4]
 80020b2:	89a3      	ldrh	r3, [r4, #12]
 80020b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80020b8:	0719      	lsls	r1, r3, #28
 80020ba:	d42c      	bmi.n	8002116 <__swsetup_r+0x82>
 80020bc:	06dd      	lsls	r5, r3, #27
 80020be:	d411      	bmi.n	80020e4 <__swsetup_r+0x50>
 80020c0:	2309      	movs	r3, #9
 80020c2:	6033      	str	r3, [r6, #0]
 80020c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	81a3      	strh	r3, [r4, #12]
 80020ce:	e03e      	b.n	800214e <__swsetup_r+0xba>
 80020d0:	4b25      	ldr	r3, [pc, #148]	; (8002168 <__swsetup_r+0xd4>)
 80020d2:	429c      	cmp	r4, r3
 80020d4:	d101      	bne.n	80020da <__swsetup_r+0x46>
 80020d6:	68ac      	ldr	r4, [r5, #8]
 80020d8:	e7eb      	b.n	80020b2 <__swsetup_r+0x1e>
 80020da:	4b24      	ldr	r3, [pc, #144]	; (800216c <__swsetup_r+0xd8>)
 80020dc:	429c      	cmp	r4, r3
 80020de:	bf08      	it	eq
 80020e0:	68ec      	ldreq	r4, [r5, #12]
 80020e2:	e7e6      	b.n	80020b2 <__swsetup_r+0x1e>
 80020e4:	0758      	lsls	r0, r3, #29
 80020e6:	d512      	bpl.n	800210e <__swsetup_r+0x7a>
 80020e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020ea:	b141      	cbz	r1, 80020fe <__swsetup_r+0x6a>
 80020ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80020f0:	4299      	cmp	r1, r3
 80020f2:	d002      	beq.n	80020fa <__swsetup_r+0x66>
 80020f4:	4630      	mov	r0, r6
 80020f6:	f000 fa57 	bl	80025a8 <_free_r>
 80020fa:	2300      	movs	r3, #0
 80020fc:	6363      	str	r3, [r4, #52]	; 0x34
 80020fe:	89a3      	ldrh	r3, [r4, #12]
 8002100:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002104:	81a3      	strh	r3, [r4, #12]
 8002106:	2300      	movs	r3, #0
 8002108:	6063      	str	r3, [r4, #4]
 800210a:	6923      	ldr	r3, [r4, #16]
 800210c:	6023      	str	r3, [r4, #0]
 800210e:	89a3      	ldrh	r3, [r4, #12]
 8002110:	f043 0308 	orr.w	r3, r3, #8
 8002114:	81a3      	strh	r3, [r4, #12]
 8002116:	6923      	ldr	r3, [r4, #16]
 8002118:	b94b      	cbnz	r3, 800212e <__swsetup_r+0x9a>
 800211a:	89a3      	ldrh	r3, [r4, #12]
 800211c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002124:	d003      	beq.n	800212e <__swsetup_r+0x9a>
 8002126:	4621      	mov	r1, r4
 8002128:	4630      	mov	r0, r6
 800212a:	f000 f9fd 	bl	8002528 <__smakebuf_r>
 800212e:	89a0      	ldrh	r0, [r4, #12]
 8002130:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002134:	f010 0301 	ands.w	r3, r0, #1
 8002138:	d00a      	beq.n	8002150 <__swsetup_r+0xbc>
 800213a:	2300      	movs	r3, #0
 800213c:	60a3      	str	r3, [r4, #8]
 800213e:	6963      	ldr	r3, [r4, #20]
 8002140:	425b      	negs	r3, r3
 8002142:	61a3      	str	r3, [r4, #24]
 8002144:	6923      	ldr	r3, [r4, #16]
 8002146:	b943      	cbnz	r3, 800215a <__swsetup_r+0xc6>
 8002148:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800214c:	d1ba      	bne.n	80020c4 <__swsetup_r+0x30>
 800214e:	bd70      	pop	{r4, r5, r6, pc}
 8002150:	0781      	lsls	r1, r0, #30
 8002152:	bf58      	it	pl
 8002154:	6963      	ldrpl	r3, [r4, #20]
 8002156:	60a3      	str	r3, [r4, #8]
 8002158:	e7f4      	b.n	8002144 <__swsetup_r+0xb0>
 800215a:	2000      	movs	r0, #0
 800215c:	e7f7      	b.n	800214e <__swsetup_r+0xba>
 800215e:	bf00      	nop
 8002160:	2000000c 	.word	0x2000000c
 8002164:	08002f5c 	.word	0x08002f5c
 8002168:	08002f7c 	.word	0x08002f7c
 800216c:	08002f3c 	.word	0x08002f3c

08002170 <__sflush_r>:
 8002170:	898a      	ldrh	r2, [r1, #12]
 8002172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002174:	4605      	mov	r5, r0
 8002176:	0710      	lsls	r0, r2, #28
 8002178:	460c      	mov	r4, r1
 800217a:	d457      	bmi.n	800222c <__sflush_r+0xbc>
 800217c:	684b      	ldr	r3, [r1, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	dc04      	bgt.n	800218c <__sflush_r+0x1c>
 8002182:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002184:	2b00      	cmp	r3, #0
 8002186:	dc01      	bgt.n	800218c <__sflush_r+0x1c>
 8002188:	2000      	movs	r0, #0
 800218a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800218c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800218e:	2e00      	cmp	r6, #0
 8002190:	d0fa      	beq.n	8002188 <__sflush_r+0x18>
 8002192:	2300      	movs	r3, #0
 8002194:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002198:	682f      	ldr	r7, [r5, #0]
 800219a:	602b      	str	r3, [r5, #0]
 800219c:	d032      	beq.n	8002204 <__sflush_r+0x94>
 800219e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80021a0:	89a3      	ldrh	r3, [r4, #12]
 80021a2:	075a      	lsls	r2, r3, #29
 80021a4:	d505      	bpl.n	80021b2 <__sflush_r+0x42>
 80021a6:	6863      	ldr	r3, [r4, #4]
 80021a8:	1ac0      	subs	r0, r0, r3
 80021aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80021ac:	b10b      	cbz	r3, 80021b2 <__sflush_r+0x42>
 80021ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021b0:	1ac0      	subs	r0, r0, r3
 80021b2:	2300      	movs	r3, #0
 80021b4:	4602      	mov	r2, r0
 80021b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021b8:	4628      	mov	r0, r5
 80021ba:	6a21      	ldr	r1, [r4, #32]
 80021bc:	47b0      	blx	r6
 80021be:	1c43      	adds	r3, r0, #1
 80021c0:	89a3      	ldrh	r3, [r4, #12]
 80021c2:	d106      	bne.n	80021d2 <__sflush_r+0x62>
 80021c4:	6829      	ldr	r1, [r5, #0]
 80021c6:	291d      	cmp	r1, #29
 80021c8:	d82c      	bhi.n	8002224 <__sflush_r+0xb4>
 80021ca:	4a29      	ldr	r2, [pc, #164]	; (8002270 <__sflush_r+0x100>)
 80021cc:	40ca      	lsrs	r2, r1
 80021ce:	07d6      	lsls	r6, r2, #31
 80021d0:	d528      	bpl.n	8002224 <__sflush_r+0xb4>
 80021d2:	2200      	movs	r2, #0
 80021d4:	6062      	str	r2, [r4, #4]
 80021d6:	6922      	ldr	r2, [r4, #16]
 80021d8:	04d9      	lsls	r1, r3, #19
 80021da:	6022      	str	r2, [r4, #0]
 80021dc:	d504      	bpl.n	80021e8 <__sflush_r+0x78>
 80021de:	1c42      	adds	r2, r0, #1
 80021e0:	d101      	bne.n	80021e6 <__sflush_r+0x76>
 80021e2:	682b      	ldr	r3, [r5, #0]
 80021e4:	b903      	cbnz	r3, 80021e8 <__sflush_r+0x78>
 80021e6:	6560      	str	r0, [r4, #84]	; 0x54
 80021e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021ea:	602f      	str	r7, [r5, #0]
 80021ec:	2900      	cmp	r1, #0
 80021ee:	d0cb      	beq.n	8002188 <__sflush_r+0x18>
 80021f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80021f4:	4299      	cmp	r1, r3
 80021f6:	d002      	beq.n	80021fe <__sflush_r+0x8e>
 80021f8:	4628      	mov	r0, r5
 80021fa:	f000 f9d5 	bl	80025a8 <_free_r>
 80021fe:	2000      	movs	r0, #0
 8002200:	6360      	str	r0, [r4, #52]	; 0x34
 8002202:	e7c2      	b.n	800218a <__sflush_r+0x1a>
 8002204:	6a21      	ldr	r1, [r4, #32]
 8002206:	2301      	movs	r3, #1
 8002208:	4628      	mov	r0, r5
 800220a:	47b0      	blx	r6
 800220c:	1c41      	adds	r1, r0, #1
 800220e:	d1c7      	bne.n	80021a0 <__sflush_r+0x30>
 8002210:	682b      	ldr	r3, [r5, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0c4      	beq.n	80021a0 <__sflush_r+0x30>
 8002216:	2b1d      	cmp	r3, #29
 8002218:	d001      	beq.n	800221e <__sflush_r+0xae>
 800221a:	2b16      	cmp	r3, #22
 800221c:	d101      	bne.n	8002222 <__sflush_r+0xb2>
 800221e:	602f      	str	r7, [r5, #0]
 8002220:	e7b2      	b.n	8002188 <__sflush_r+0x18>
 8002222:	89a3      	ldrh	r3, [r4, #12]
 8002224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002228:	81a3      	strh	r3, [r4, #12]
 800222a:	e7ae      	b.n	800218a <__sflush_r+0x1a>
 800222c:	690f      	ldr	r7, [r1, #16]
 800222e:	2f00      	cmp	r7, #0
 8002230:	d0aa      	beq.n	8002188 <__sflush_r+0x18>
 8002232:	0793      	lsls	r3, r2, #30
 8002234:	bf18      	it	ne
 8002236:	2300      	movne	r3, #0
 8002238:	680e      	ldr	r6, [r1, #0]
 800223a:	bf08      	it	eq
 800223c:	694b      	ldreq	r3, [r1, #20]
 800223e:	1bf6      	subs	r6, r6, r7
 8002240:	600f      	str	r7, [r1, #0]
 8002242:	608b      	str	r3, [r1, #8]
 8002244:	2e00      	cmp	r6, #0
 8002246:	dd9f      	ble.n	8002188 <__sflush_r+0x18>
 8002248:	4633      	mov	r3, r6
 800224a:	463a      	mov	r2, r7
 800224c:	4628      	mov	r0, r5
 800224e:	6a21      	ldr	r1, [r4, #32]
 8002250:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002254:	47e0      	blx	ip
 8002256:	2800      	cmp	r0, #0
 8002258:	dc06      	bgt.n	8002268 <__sflush_r+0xf8>
 800225a:	89a3      	ldrh	r3, [r4, #12]
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002264:	81a3      	strh	r3, [r4, #12]
 8002266:	e790      	b.n	800218a <__sflush_r+0x1a>
 8002268:	4407      	add	r7, r0
 800226a:	1a36      	subs	r6, r6, r0
 800226c:	e7ea      	b.n	8002244 <__sflush_r+0xd4>
 800226e:	bf00      	nop
 8002270:	20400001 	.word	0x20400001

08002274 <_fflush_r>:
 8002274:	b538      	push	{r3, r4, r5, lr}
 8002276:	690b      	ldr	r3, [r1, #16]
 8002278:	4605      	mov	r5, r0
 800227a:	460c      	mov	r4, r1
 800227c:	b913      	cbnz	r3, 8002284 <_fflush_r+0x10>
 800227e:	2500      	movs	r5, #0
 8002280:	4628      	mov	r0, r5
 8002282:	bd38      	pop	{r3, r4, r5, pc}
 8002284:	b118      	cbz	r0, 800228e <_fflush_r+0x1a>
 8002286:	6983      	ldr	r3, [r0, #24]
 8002288:	b90b      	cbnz	r3, 800228e <_fflush_r+0x1a>
 800228a:	f000 f887 	bl	800239c <__sinit>
 800228e:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <_fflush_r+0x6c>)
 8002290:	429c      	cmp	r4, r3
 8002292:	d11b      	bne.n	80022cc <_fflush_r+0x58>
 8002294:	686c      	ldr	r4, [r5, #4]
 8002296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0ef      	beq.n	800227e <_fflush_r+0xa>
 800229e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80022a0:	07d0      	lsls	r0, r2, #31
 80022a2:	d404      	bmi.n	80022ae <_fflush_r+0x3a>
 80022a4:	0599      	lsls	r1, r3, #22
 80022a6:	d402      	bmi.n	80022ae <_fflush_r+0x3a>
 80022a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022aa:	f000 f915 	bl	80024d8 <__retarget_lock_acquire_recursive>
 80022ae:	4628      	mov	r0, r5
 80022b0:	4621      	mov	r1, r4
 80022b2:	f7ff ff5d 	bl	8002170 <__sflush_r>
 80022b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022b8:	4605      	mov	r5, r0
 80022ba:	07da      	lsls	r2, r3, #31
 80022bc:	d4e0      	bmi.n	8002280 <_fflush_r+0xc>
 80022be:	89a3      	ldrh	r3, [r4, #12]
 80022c0:	059b      	lsls	r3, r3, #22
 80022c2:	d4dd      	bmi.n	8002280 <_fflush_r+0xc>
 80022c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022c6:	f000 f908 	bl	80024da <__retarget_lock_release_recursive>
 80022ca:	e7d9      	b.n	8002280 <_fflush_r+0xc>
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <_fflush_r+0x70>)
 80022ce:	429c      	cmp	r4, r3
 80022d0:	d101      	bne.n	80022d6 <_fflush_r+0x62>
 80022d2:	68ac      	ldr	r4, [r5, #8]
 80022d4:	e7df      	b.n	8002296 <_fflush_r+0x22>
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <_fflush_r+0x74>)
 80022d8:	429c      	cmp	r4, r3
 80022da:	bf08      	it	eq
 80022dc:	68ec      	ldreq	r4, [r5, #12]
 80022de:	e7da      	b.n	8002296 <_fflush_r+0x22>
 80022e0:	08002f5c 	.word	0x08002f5c
 80022e4:	08002f7c 	.word	0x08002f7c
 80022e8:	08002f3c 	.word	0x08002f3c

080022ec <std>:
 80022ec:	2300      	movs	r3, #0
 80022ee:	b510      	push	{r4, lr}
 80022f0:	4604      	mov	r4, r0
 80022f2:	e9c0 3300 	strd	r3, r3, [r0]
 80022f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80022fa:	6083      	str	r3, [r0, #8]
 80022fc:	8181      	strh	r1, [r0, #12]
 80022fe:	6643      	str	r3, [r0, #100]	; 0x64
 8002300:	81c2      	strh	r2, [r0, #14]
 8002302:	6183      	str	r3, [r0, #24]
 8002304:	4619      	mov	r1, r3
 8002306:	2208      	movs	r2, #8
 8002308:	305c      	adds	r0, #92	; 0x5c
 800230a:	f7ff fddb 	bl	8001ec4 <memset>
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <std+0x38>)
 8002310:	6224      	str	r4, [r4, #32]
 8002312:	6263      	str	r3, [r4, #36]	; 0x24
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <std+0x3c>)
 8002316:	62a3      	str	r3, [r4, #40]	; 0x28
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <std+0x40>)
 800231a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <std+0x44>)
 800231e:	6323      	str	r3, [r4, #48]	; 0x30
 8002320:	bd10      	pop	{r4, pc}
 8002322:	bf00      	nop
 8002324:	08002d5d 	.word	0x08002d5d
 8002328:	08002d7f 	.word	0x08002d7f
 800232c:	08002db7 	.word	0x08002db7
 8002330:	08002ddb 	.word	0x08002ddb

08002334 <_cleanup_r>:
 8002334:	4901      	ldr	r1, [pc, #4]	; (800233c <_cleanup_r+0x8>)
 8002336:	f000 b8af 	b.w	8002498 <_fwalk_reent>
 800233a:	bf00      	nop
 800233c:	08002275 	.word	0x08002275

08002340 <__sfmoreglue>:
 8002340:	2268      	movs	r2, #104	; 0x68
 8002342:	b570      	push	{r4, r5, r6, lr}
 8002344:	1e4d      	subs	r5, r1, #1
 8002346:	4355      	muls	r5, r2
 8002348:	460e      	mov	r6, r1
 800234a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800234e:	f000 f993 	bl	8002678 <_malloc_r>
 8002352:	4604      	mov	r4, r0
 8002354:	b140      	cbz	r0, 8002368 <__sfmoreglue+0x28>
 8002356:	2100      	movs	r1, #0
 8002358:	e9c0 1600 	strd	r1, r6, [r0]
 800235c:	300c      	adds	r0, #12
 800235e:	60a0      	str	r0, [r4, #8]
 8002360:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002364:	f7ff fdae 	bl	8001ec4 <memset>
 8002368:	4620      	mov	r0, r4
 800236a:	bd70      	pop	{r4, r5, r6, pc}

0800236c <__sfp_lock_acquire>:
 800236c:	4801      	ldr	r0, [pc, #4]	; (8002374 <__sfp_lock_acquire+0x8>)
 800236e:	f000 b8b3 	b.w	80024d8 <__retarget_lock_acquire_recursive>
 8002372:	bf00      	nop
 8002374:	20000095 	.word	0x20000095

08002378 <__sfp_lock_release>:
 8002378:	4801      	ldr	r0, [pc, #4]	; (8002380 <__sfp_lock_release+0x8>)
 800237a:	f000 b8ae 	b.w	80024da <__retarget_lock_release_recursive>
 800237e:	bf00      	nop
 8002380:	20000095 	.word	0x20000095

08002384 <__sinit_lock_acquire>:
 8002384:	4801      	ldr	r0, [pc, #4]	; (800238c <__sinit_lock_acquire+0x8>)
 8002386:	f000 b8a7 	b.w	80024d8 <__retarget_lock_acquire_recursive>
 800238a:	bf00      	nop
 800238c:	20000096 	.word	0x20000096

08002390 <__sinit_lock_release>:
 8002390:	4801      	ldr	r0, [pc, #4]	; (8002398 <__sinit_lock_release+0x8>)
 8002392:	f000 b8a2 	b.w	80024da <__retarget_lock_release_recursive>
 8002396:	bf00      	nop
 8002398:	20000096 	.word	0x20000096

0800239c <__sinit>:
 800239c:	b510      	push	{r4, lr}
 800239e:	4604      	mov	r4, r0
 80023a0:	f7ff fff0 	bl	8002384 <__sinit_lock_acquire>
 80023a4:	69a3      	ldr	r3, [r4, #24]
 80023a6:	b11b      	cbz	r3, 80023b0 <__sinit+0x14>
 80023a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023ac:	f7ff bff0 	b.w	8002390 <__sinit_lock_release>
 80023b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80023b4:	6523      	str	r3, [r4, #80]	; 0x50
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <__sinit+0x68>)
 80023b8:	4a13      	ldr	r2, [pc, #76]	; (8002408 <__sinit+0x6c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80023be:	42a3      	cmp	r3, r4
 80023c0:	bf08      	it	eq
 80023c2:	2301      	moveq	r3, #1
 80023c4:	4620      	mov	r0, r4
 80023c6:	bf08      	it	eq
 80023c8:	61a3      	streq	r3, [r4, #24]
 80023ca:	f000 f81f 	bl	800240c <__sfp>
 80023ce:	6060      	str	r0, [r4, #4]
 80023d0:	4620      	mov	r0, r4
 80023d2:	f000 f81b 	bl	800240c <__sfp>
 80023d6:	60a0      	str	r0, [r4, #8]
 80023d8:	4620      	mov	r0, r4
 80023da:	f000 f817 	bl	800240c <__sfp>
 80023de:	2200      	movs	r2, #0
 80023e0:	2104      	movs	r1, #4
 80023e2:	60e0      	str	r0, [r4, #12]
 80023e4:	6860      	ldr	r0, [r4, #4]
 80023e6:	f7ff ff81 	bl	80022ec <std>
 80023ea:	2201      	movs	r2, #1
 80023ec:	2109      	movs	r1, #9
 80023ee:	68a0      	ldr	r0, [r4, #8]
 80023f0:	f7ff ff7c 	bl	80022ec <std>
 80023f4:	2202      	movs	r2, #2
 80023f6:	2112      	movs	r1, #18
 80023f8:	68e0      	ldr	r0, [r4, #12]
 80023fa:	f7ff ff77 	bl	80022ec <std>
 80023fe:	2301      	movs	r3, #1
 8002400:	61a3      	str	r3, [r4, #24]
 8002402:	e7d1      	b.n	80023a8 <__sinit+0xc>
 8002404:	08002f38 	.word	0x08002f38
 8002408:	08002335 	.word	0x08002335

0800240c <__sfp>:
 800240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240e:	4607      	mov	r7, r0
 8002410:	f7ff ffac 	bl	800236c <__sfp_lock_acquire>
 8002414:	4b1e      	ldr	r3, [pc, #120]	; (8002490 <__sfp+0x84>)
 8002416:	681e      	ldr	r6, [r3, #0]
 8002418:	69b3      	ldr	r3, [r6, #24]
 800241a:	b913      	cbnz	r3, 8002422 <__sfp+0x16>
 800241c:	4630      	mov	r0, r6
 800241e:	f7ff ffbd 	bl	800239c <__sinit>
 8002422:	3648      	adds	r6, #72	; 0x48
 8002424:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002428:	3b01      	subs	r3, #1
 800242a:	d503      	bpl.n	8002434 <__sfp+0x28>
 800242c:	6833      	ldr	r3, [r6, #0]
 800242e:	b30b      	cbz	r3, 8002474 <__sfp+0x68>
 8002430:	6836      	ldr	r6, [r6, #0]
 8002432:	e7f7      	b.n	8002424 <__sfp+0x18>
 8002434:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002438:	b9d5      	cbnz	r5, 8002470 <__sfp+0x64>
 800243a:	4b16      	ldr	r3, [pc, #88]	; (8002494 <__sfp+0x88>)
 800243c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002440:	60e3      	str	r3, [r4, #12]
 8002442:	6665      	str	r5, [r4, #100]	; 0x64
 8002444:	f000 f847 	bl	80024d6 <__retarget_lock_init_recursive>
 8002448:	f7ff ff96 	bl	8002378 <__sfp_lock_release>
 800244c:	2208      	movs	r2, #8
 800244e:	4629      	mov	r1, r5
 8002450:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002454:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002458:	6025      	str	r5, [r4, #0]
 800245a:	61a5      	str	r5, [r4, #24]
 800245c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002460:	f7ff fd30 	bl	8001ec4 <memset>
 8002464:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002468:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800246c:	4620      	mov	r0, r4
 800246e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002470:	3468      	adds	r4, #104	; 0x68
 8002472:	e7d9      	b.n	8002428 <__sfp+0x1c>
 8002474:	2104      	movs	r1, #4
 8002476:	4638      	mov	r0, r7
 8002478:	f7ff ff62 	bl	8002340 <__sfmoreglue>
 800247c:	4604      	mov	r4, r0
 800247e:	6030      	str	r0, [r6, #0]
 8002480:	2800      	cmp	r0, #0
 8002482:	d1d5      	bne.n	8002430 <__sfp+0x24>
 8002484:	f7ff ff78 	bl	8002378 <__sfp_lock_release>
 8002488:	230c      	movs	r3, #12
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	e7ee      	b.n	800246c <__sfp+0x60>
 800248e:	bf00      	nop
 8002490:	08002f38 	.word	0x08002f38
 8002494:	ffff0001 	.word	0xffff0001

08002498 <_fwalk_reent>:
 8002498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800249c:	4606      	mov	r6, r0
 800249e:	4688      	mov	r8, r1
 80024a0:	2700      	movs	r7, #0
 80024a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80024a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80024aa:	f1b9 0901 	subs.w	r9, r9, #1
 80024ae:	d505      	bpl.n	80024bc <_fwalk_reent+0x24>
 80024b0:	6824      	ldr	r4, [r4, #0]
 80024b2:	2c00      	cmp	r4, #0
 80024b4:	d1f7      	bne.n	80024a6 <_fwalk_reent+0xe>
 80024b6:	4638      	mov	r0, r7
 80024b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024bc:	89ab      	ldrh	r3, [r5, #12]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d907      	bls.n	80024d2 <_fwalk_reent+0x3a>
 80024c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80024c6:	3301      	adds	r3, #1
 80024c8:	d003      	beq.n	80024d2 <_fwalk_reent+0x3a>
 80024ca:	4629      	mov	r1, r5
 80024cc:	4630      	mov	r0, r6
 80024ce:	47c0      	blx	r8
 80024d0:	4307      	orrs	r7, r0
 80024d2:	3568      	adds	r5, #104	; 0x68
 80024d4:	e7e9      	b.n	80024aa <_fwalk_reent+0x12>

080024d6 <__retarget_lock_init_recursive>:
 80024d6:	4770      	bx	lr

080024d8 <__retarget_lock_acquire_recursive>:
 80024d8:	4770      	bx	lr

080024da <__retarget_lock_release_recursive>:
 80024da:	4770      	bx	lr

080024dc <__swhatbuf_r>:
 80024dc:	b570      	push	{r4, r5, r6, lr}
 80024de:	460e      	mov	r6, r1
 80024e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024e4:	4614      	mov	r4, r2
 80024e6:	2900      	cmp	r1, #0
 80024e8:	461d      	mov	r5, r3
 80024ea:	b096      	sub	sp, #88	; 0x58
 80024ec:	da08      	bge.n	8002500 <__swhatbuf_r+0x24>
 80024ee:	2200      	movs	r2, #0
 80024f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80024f4:	602a      	str	r2, [r5, #0]
 80024f6:	061a      	lsls	r2, r3, #24
 80024f8:	d410      	bmi.n	800251c <__swhatbuf_r+0x40>
 80024fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024fe:	e00e      	b.n	800251e <__swhatbuf_r+0x42>
 8002500:	466a      	mov	r2, sp
 8002502:	f000 fc91 	bl	8002e28 <_fstat_r>
 8002506:	2800      	cmp	r0, #0
 8002508:	dbf1      	blt.n	80024ee <__swhatbuf_r+0x12>
 800250a:	9a01      	ldr	r2, [sp, #4]
 800250c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002510:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002514:	425a      	negs	r2, r3
 8002516:	415a      	adcs	r2, r3
 8002518:	602a      	str	r2, [r5, #0]
 800251a:	e7ee      	b.n	80024fa <__swhatbuf_r+0x1e>
 800251c:	2340      	movs	r3, #64	; 0x40
 800251e:	2000      	movs	r0, #0
 8002520:	6023      	str	r3, [r4, #0]
 8002522:	b016      	add	sp, #88	; 0x58
 8002524:	bd70      	pop	{r4, r5, r6, pc}
	...

08002528 <__smakebuf_r>:
 8002528:	898b      	ldrh	r3, [r1, #12]
 800252a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800252c:	079d      	lsls	r5, r3, #30
 800252e:	4606      	mov	r6, r0
 8002530:	460c      	mov	r4, r1
 8002532:	d507      	bpl.n	8002544 <__smakebuf_r+0x1c>
 8002534:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002538:	6023      	str	r3, [r4, #0]
 800253a:	6123      	str	r3, [r4, #16]
 800253c:	2301      	movs	r3, #1
 800253e:	6163      	str	r3, [r4, #20]
 8002540:	b002      	add	sp, #8
 8002542:	bd70      	pop	{r4, r5, r6, pc}
 8002544:	466a      	mov	r2, sp
 8002546:	ab01      	add	r3, sp, #4
 8002548:	f7ff ffc8 	bl	80024dc <__swhatbuf_r>
 800254c:	9900      	ldr	r1, [sp, #0]
 800254e:	4605      	mov	r5, r0
 8002550:	4630      	mov	r0, r6
 8002552:	f000 f891 	bl	8002678 <_malloc_r>
 8002556:	b948      	cbnz	r0, 800256c <__smakebuf_r+0x44>
 8002558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800255c:	059a      	lsls	r2, r3, #22
 800255e:	d4ef      	bmi.n	8002540 <__smakebuf_r+0x18>
 8002560:	f023 0303 	bic.w	r3, r3, #3
 8002564:	f043 0302 	orr.w	r3, r3, #2
 8002568:	81a3      	strh	r3, [r4, #12]
 800256a:	e7e3      	b.n	8002534 <__smakebuf_r+0xc>
 800256c:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <__smakebuf_r+0x7c>)
 800256e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002570:	89a3      	ldrh	r3, [r4, #12]
 8002572:	6020      	str	r0, [r4, #0]
 8002574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002578:	81a3      	strh	r3, [r4, #12]
 800257a:	9b00      	ldr	r3, [sp, #0]
 800257c:	6120      	str	r0, [r4, #16]
 800257e:	6163      	str	r3, [r4, #20]
 8002580:	9b01      	ldr	r3, [sp, #4]
 8002582:	b15b      	cbz	r3, 800259c <__smakebuf_r+0x74>
 8002584:	4630      	mov	r0, r6
 8002586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800258a:	f000 fc5f 	bl	8002e4c <_isatty_r>
 800258e:	b128      	cbz	r0, 800259c <__smakebuf_r+0x74>
 8002590:	89a3      	ldrh	r3, [r4, #12]
 8002592:	f023 0303 	bic.w	r3, r3, #3
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	81a3      	strh	r3, [r4, #12]
 800259c:	89a0      	ldrh	r0, [r4, #12]
 800259e:	4305      	orrs	r5, r0
 80025a0:	81a5      	strh	r5, [r4, #12]
 80025a2:	e7cd      	b.n	8002540 <__smakebuf_r+0x18>
 80025a4:	08002335 	.word	0x08002335

080025a8 <_free_r>:
 80025a8:	b538      	push	{r3, r4, r5, lr}
 80025aa:	4605      	mov	r5, r0
 80025ac:	2900      	cmp	r1, #0
 80025ae:	d040      	beq.n	8002632 <_free_r+0x8a>
 80025b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025b4:	1f0c      	subs	r4, r1, #4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bfb8      	it	lt
 80025ba:	18e4      	addlt	r4, r4, r3
 80025bc:	f000 fc76 	bl	8002eac <__malloc_lock>
 80025c0:	4a1c      	ldr	r2, [pc, #112]	; (8002634 <_free_r+0x8c>)
 80025c2:	6813      	ldr	r3, [r2, #0]
 80025c4:	b933      	cbnz	r3, 80025d4 <_free_r+0x2c>
 80025c6:	6063      	str	r3, [r4, #4]
 80025c8:	6014      	str	r4, [r2, #0]
 80025ca:	4628      	mov	r0, r5
 80025cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025d0:	f000 bc72 	b.w	8002eb8 <__malloc_unlock>
 80025d4:	42a3      	cmp	r3, r4
 80025d6:	d908      	bls.n	80025ea <_free_r+0x42>
 80025d8:	6820      	ldr	r0, [r4, #0]
 80025da:	1821      	adds	r1, r4, r0
 80025dc:	428b      	cmp	r3, r1
 80025de:	bf01      	itttt	eq
 80025e0:	6819      	ldreq	r1, [r3, #0]
 80025e2:	685b      	ldreq	r3, [r3, #4]
 80025e4:	1809      	addeq	r1, r1, r0
 80025e6:	6021      	streq	r1, [r4, #0]
 80025e8:	e7ed      	b.n	80025c6 <_free_r+0x1e>
 80025ea:	461a      	mov	r2, r3
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	b10b      	cbz	r3, 80025f4 <_free_r+0x4c>
 80025f0:	42a3      	cmp	r3, r4
 80025f2:	d9fa      	bls.n	80025ea <_free_r+0x42>
 80025f4:	6811      	ldr	r1, [r2, #0]
 80025f6:	1850      	adds	r0, r2, r1
 80025f8:	42a0      	cmp	r0, r4
 80025fa:	d10b      	bne.n	8002614 <_free_r+0x6c>
 80025fc:	6820      	ldr	r0, [r4, #0]
 80025fe:	4401      	add	r1, r0
 8002600:	1850      	adds	r0, r2, r1
 8002602:	4283      	cmp	r3, r0
 8002604:	6011      	str	r1, [r2, #0]
 8002606:	d1e0      	bne.n	80025ca <_free_r+0x22>
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4401      	add	r1, r0
 800260e:	6011      	str	r1, [r2, #0]
 8002610:	6053      	str	r3, [r2, #4]
 8002612:	e7da      	b.n	80025ca <_free_r+0x22>
 8002614:	d902      	bls.n	800261c <_free_r+0x74>
 8002616:	230c      	movs	r3, #12
 8002618:	602b      	str	r3, [r5, #0]
 800261a:	e7d6      	b.n	80025ca <_free_r+0x22>
 800261c:	6820      	ldr	r0, [r4, #0]
 800261e:	1821      	adds	r1, r4, r0
 8002620:	428b      	cmp	r3, r1
 8002622:	bf01      	itttt	eq
 8002624:	6819      	ldreq	r1, [r3, #0]
 8002626:	685b      	ldreq	r3, [r3, #4]
 8002628:	1809      	addeq	r1, r1, r0
 800262a:	6021      	streq	r1, [r4, #0]
 800262c:	6063      	str	r3, [r4, #4]
 800262e:	6054      	str	r4, [r2, #4]
 8002630:	e7cb      	b.n	80025ca <_free_r+0x22>
 8002632:	bd38      	pop	{r3, r4, r5, pc}
 8002634:	20000098 	.word	0x20000098

08002638 <sbrk_aligned>:
 8002638:	b570      	push	{r4, r5, r6, lr}
 800263a:	4e0e      	ldr	r6, [pc, #56]	; (8002674 <sbrk_aligned+0x3c>)
 800263c:	460c      	mov	r4, r1
 800263e:	6831      	ldr	r1, [r6, #0]
 8002640:	4605      	mov	r5, r0
 8002642:	b911      	cbnz	r1, 800264a <sbrk_aligned+0x12>
 8002644:	f000 fb7a 	bl	8002d3c <_sbrk_r>
 8002648:	6030      	str	r0, [r6, #0]
 800264a:	4621      	mov	r1, r4
 800264c:	4628      	mov	r0, r5
 800264e:	f000 fb75 	bl	8002d3c <_sbrk_r>
 8002652:	1c43      	adds	r3, r0, #1
 8002654:	d00a      	beq.n	800266c <sbrk_aligned+0x34>
 8002656:	1cc4      	adds	r4, r0, #3
 8002658:	f024 0403 	bic.w	r4, r4, #3
 800265c:	42a0      	cmp	r0, r4
 800265e:	d007      	beq.n	8002670 <sbrk_aligned+0x38>
 8002660:	1a21      	subs	r1, r4, r0
 8002662:	4628      	mov	r0, r5
 8002664:	f000 fb6a 	bl	8002d3c <_sbrk_r>
 8002668:	3001      	adds	r0, #1
 800266a:	d101      	bne.n	8002670 <sbrk_aligned+0x38>
 800266c:	f04f 34ff 	mov.w	r4, #4294967295
 8002670:	4620      	mov	r0, r4
 8002672:	bd70      	pop	{r4, r5, r6, pc}
 8002674:	2000009c 	.word	0x2000009c

08002678 <_malloc_r>:
 8002678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800267c:	1ccd      	adds	r5, r1, #3
 800267e:	f025 0503 	bic.w	r5, r5, #3
 8002682:	3508      	adds	r5, #8
 8002684:	2d0c      	cmp	r5, #12
 8002686:	bf38      	it	cc
 8002688:	250c      	movcc	r5, #12
 800268a:	2d00      	cmp	r5, #0
 800268c:	4607      	mov	r7, r0
 800268e:	db01      	blt.n	8002694 <_malloc_r+0x1c>
 8002690:	42a9      	cmp	r1, r5
 8002692:	d905      	bls.n	80026a0 <_malloc_r+0x28>
 8002694:	230c      	movs	r3, #12
 8002696:	2600      	movs	r6, #0
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	4630      	mov	r0, r6
 800269c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026a0:	4e2e      	ldr	r6, [pc, #184]	; (800275c <_malloc_r+0xe4>)
 80026a2:	f000 fc03 	bl	8002eac <__malloc_lock>
 80026a6:	6833      	ldr	r3, [r6, #0]
 80026a8:	461c      	mov	r4, r3
 80026aa:	bb34      	cbnz	r4, 80026fa <_malloc_r+0x82>
 80026ac:	4629      	mov	r1, r5
 80026ae:	4638      	mov	r0, r7
 80026b0:	f7ff ffc2 	bl	8002638 <sbrk_aligned>
 80026b4:	1c43      	adds	r3, r0, #1
 80026b6:	4604      	mov	r4, r0
 80026b8:	d14d      	bne.n	8002756 <_malloc_r+0xde>
 80026ba:	6834      	ldr	r4, [r6, #0]
 80026bc:	4626      	mov	r6, r4
 80026be:	2e00      	cmp	r6, #0
 80026c0:	d140      	bne.n	8002744 <_malloc_r+0xcc>
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	4631      	mov	r1, r6
 80026c6:	4638      	mov	r0, r7
 80026c8:	eb04 0803 	add.w	r8, r4, r3
 80026cc:	f000 fb36 	bl	8002d3c <_sbrk_r>
 80026d0:	4580      	cmp	r8, r0
 80026d2:	d13a      	bne.n	800274a <_malloc_r+0xd2>
 80026d4:	6821      	ldr	r1, [r4, #0]
 80026d6:	3503      	adds	r5, #3
 80026d8:	1a6d      	subs	r5, r5, r1
 80026da:	f025 0503 	bic.w	r5, r5, #3
 80026de:	3508      	adds	r5, #8
 80026e0:	2d0c      	cmp	r5, #12
 80026e2:	bf38      	it	cc
 80026e4:	250c      	movcc	r5, #12
 80026e6:	4638      	mov	r0, r7
 80026e8:	4629      	mov	r1, r5
 80026ea:	f7ff ffa5 	bl	8002638 <sbrk_aligned>
 80026ee:	3001      	adds	r0, #1
 80026f0:	d02b      	beq.n	800274a <_malloc_r+0xd2>
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	442b      	add	r3, r5
 80026f6:	6023      	str	r3, [r4, #0]
 80026f8:	e00e      	b.n	8002718 <_malloc_r+0xa0>
 80026fa:	6822      	ldr	r2, [r4, #0]
 80026fc:	1b52      	subs	r2, r2, r5
 80026fe:	d41e      	bmi.n	800273e <_malloc_r+0xc6>
 8002700:	2a0b      	cmp	r2, #11
 8002702:	d916      	bls.n	8002732 <_malloc_r+0xba>
 8002704:	1961      	adds	r1, r4, r5
 8002706:	42a3      	cmp	r3, r4
 8002708:	6025      	str	r5, [r4, #0]
 800270a:	bf18      	it	ne
 800270c:	6059      	strne	r1, [r3, #4]
 800270e:	6863      	ldr	r3, [r4, #4]
 8002710:	bf08      	it	eq
 8002712:	6031      	streq	r1, [r6, #0]
 8002714:	5162      	str	r2, [r4, r5]
 8002716:	604b      	str	r3, [r1, #4]
 8002718:	4638      	mov	r0, r7
 800271a:	f104 060b 	add.w	r6, r4, #11
 800271e:	f000 fbcb 	bl	8002eb8 <__malloc_unlock>
 8002722:	f026 0607 	bic.w	r6, r6, #7
 8002726:	1d23      	adds	r3, r4, #4
 8002728:	1af2      	subs	r2, r6, r3
 800272a:	d0b6      	beq.n	800269a <_malloc_r+0x22>
 800272c:	1b9b      	subs	r3, r3, r6
 800272e:	50a3      	str	r3, [r4, r2]
 8002730:	e7b3      	b.n	800269a <_malloc_r+0x22>
 8002732:	6862      	ldr	r2, [r4, #4]
 8002734:	42a3      	cmp	r3, r4
 8002736:	bf0c      	ite	eq
 8002738:	6032      	streq	r2, [r6, #0]
 800273a:	605a      	strne	r2, [r3, #4]
 800273c:	e7ec      	b.n	8002718 <_malloc_r+0xa0>
 800273e:	4623      	mov	r3, r4
 8002740:	6864      	ldr	r4, [r4, #4]
 8002742:	e7b2      	b.n	80026aa <_malloc_r+0x32>
 8002744:	4634      	mov	r4, r6
 8002746:	6876      	ldr	r6, [r6, #4]
 8002748:	e7b9      	b.n	80026be <_malloc_r+0x46>
 800274a:	230c      	movs	r3, #12
 800274c:	4638      	mov	r0, r7
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	f000 fbb2 	bl	8002eb8 <__malloc_unlock>
 8002754:	e7a1      	b.n	800269a <_malloc_r+0x22>
 8002756:	6025      	str	r5, [r4, #0]
 8002758:	e7de      	b.n	8002718 <_malloc_r+0xa0>
 800275a:	bf00      	nop
 800275c:	20000098 	.word	0x20000098

08002760 <__sfputc_r>:
 8002760:	6893      	ldr	r3, [r2, #8]
 8002762:	b410      	push	{r4}
 8002764:	3b01      	subs	r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	6093      	str	r3, [r2, #8]
 800276a:	da07      	bge.n	800277c <__sfputc_r+0x1c>
 800276c:	6994      	ldr	r4, [r2, #24]
 800276e:	42a3      	cmp	r3, r4
 8002770:	db01      	blt.n	8002776 <__sfputc_r+0x16>
 8002772:	290a      	cmp	r1, #10
 8002774:	d102      	bne.n	800277c <__sfputc_r+0x1c>
 8002776:	bc10      	pop	{r4}
 8002778:	f7ff bc3a 	b.w	8001ff0 <__swbuf_r>
 800277c:	6813      	ldr	r3, [r2, #0]
 800277e:	1c58      	adds	r0, r3, #1
 8002780:	6010      	str	r0, [r2, #0]
 8002782:	7019      	strb	r1, [r3, #0]
 8002784:	4608      	mov	r0, r1
 8002786:	bc10      	pop	{r4}
 8002788:	4770      	bx	lr

0800278a <__sfputs_r>:
 800278a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278c:	4606      	mov	r6, r0
 800278e:	460f      	mov	r7, r1
 8002790:	4614      	mov	r4, r2
 8002792:	18d5      	adds	r5, r2, r3
 8002794:	42ac      	cmp	r4, r5
 8002796:	d101      	bne.n	800279c <__sfputs_r+0x12>
 8002798:	2000      	movs	r0, #0
 800279a:	e007      	b.n	80027ac <__sfputs_r+0x22>
 800279c:	463a      	mov	r2, r7
 800279e:	4630      	mov	r0, r6
 80027a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027a4:	f7ff ffdc 	bl	8002760 <__sfputc_r>
 80027a8:	1c43      	adds	r3, r0, #1
 80027aa:	d1f3      	bne.n	8002794 <__sfputs_r+0xa>
 80027ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080027b0 <_vfiprintf_r>:
 80027b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b4:	460d      	mov	r5, r1
 80027b6:	4614      	mov	r4, r2
 80027b8:	4698      	mov	r8, r3
 80027ba:	4606      	mov	r6, r0
 80027bc:	b09d      	sub	sp, #116	; 0x74
 80027be:	b118      	cbz	r0, 80027c8 <_vfiprintf_r+0x18>
 80027c0:	6983      	ldr	r3, [r0, #24]
 80027c2:	b90b      	cbnz	r3, 80027c8 <_vfiprintf_r+0x18>
 80027c4:	f7ff fdea 	bl	800239c <__sinit>
 80027c8:	4b89      	ldr	r3, [pc, #548]	; (80029f0 <_vfiprintf_r+0x240>)
 80027ca:	429d      	cmp	r5, r3
 80027cc:	d11b      	bne.n	8002806 <_vfiprintf_r+0x56>
 80027ce:	6875      	ldr	r5, [r6, #4]
 80027d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027d2:	07d9      	lsls	r1, r3, #31
 80027d4:	d405      	bmi.n	80027e2 <_vfiprintf_r+0x32>
 80027d6:	89ab      	ldrh	r3, [r5, #12]
 80027d8:	059a      	lsls	r2, r3, #22
 80027da:	d402      	bmi.n	80027e2 <_vfiprintf_r+0x32>
 80027dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027de:	f7ff fe7b 	bl	80024d8 <__retarget_lock_acquire_recursive>
 80027e2:	89ab      	ldrh	r3, [r5, #12]
 80027e4:	071b      	lsls	r3, r3, #28
 80027e6:	d501      	bpl.n	80027ec <_vfiprintf_r+0x3c>
 80027e8:	692b      	ldr	r3, [r5, #16]
 80027ea:	b9eb      	cbnz	r3, 8002828 <_vfiprintf_r+0x78>
 80027ec:	4629      	mov	r1, r5
 80027ee:	4630      	mov	r0, r6
 80027f0:	f7ff fc50 	bl	8002094 <__swsetup_r>
 80027f4:	b1c0      	cbz	r0, 8002828 <_vfiprintf_r+0x78>
 80027f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027f8:	07dc      	lsls	r4, r3, #31
 80027fa:	d50e      	bpl.n	800281a <_vfiprintf_r+0x6a>
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	b01d      	add	sp, #116	; 0x74
 8002802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002806:	4b7b      	ldr	r3, [pc, #492]	; (80029f4 <_vfiprintf_r+0x244>)
 8002808:	429d      	cmp	r5, r3
 800280a:	d101      	bne.n	8002810 <_vfiprintf_r+0x60>
 800280c:	68b5      	ldr	r5, [r6, #8]
 800280e:	e7df      	b.n	80027d0 <_vfiprintf_r+0x20>
 8002810:	4b79      	ldr	r3, [pc, #484]	; (80029f8 <_vfiprintf_r+0x248>)
 8002812:	429d      	cmp	r5, r3
 8002814:	bf08      	it	eq
 8002816:	68f5      	ldreq	r5, [r6, #12]
 8002818:	e7da      	b.n	80027d0 <_vfiprintf_r+0x20>
 800281a:	89ab      	ldrh	r3, [r5, #12]
 800281c:	0598      	lsls	r0, r3, #22
 800281e:	d4ed      	bmi.n	80027fc <_vfiprintf_r+0x4c>
 8002820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002822:	f7ff fe5a 	bl	80024da <__retarget_lock_release_recursive>
 8002826:	e7e9      	b.n	80027fc <_vfiprintf_r+0x4c>
 8002828:	2300      	movs	r3, #0
 800282a:	9309      	str	r3, [sp, #36]	; 0x24
 800282c:	2320      	movs	r3, #32
 800282e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002832:	2330      	movs	r3, #48	; 0x30
 8002834:	f04f 0901 	mov.w	r9, #1
 8002838:	f8cd 800c 	str.w	r8, [sp, #12]
 800283c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80029fc <_vfiprintf_r+0x24c>
 8002840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002844:	4623      	mov	r3, r4
 8002846:	469a      	mov	sl, r3
 8002848:	f813 2b01 	ldrb.w	r2, [r3], #1
 800284c:	b10a      	cbz	r2, 8002852 <_vfiprintf_r+0xa2>
 800284e:	2a25      	cmp	r2, #37	; 0x25
 8002850:	d1f9      	bne.n	8002846 <_vfiprintf_r+0x96>
 8002852:	ebba 0b04 	subs.w	fp, sl, r4
 8002856:	d00b      	beq.n	8002870 <_vfiprintf_r+0xc0>
 8002858:	465b      	mov	r3, fp
 800285a:	4622      	mov	r2, r4
 800285c:	4629      	mov	r1, r5
 800285e:	4630      	mov	r0, r6
 8002860:	f7ff ff93 	bl	800278a <__sfputs_r>
 8002864:	3001      	adds	r0, #1
 8002866:	f000 80aa 	beq.w	80029be <_vfiprintf_r+0x20e>
 800286a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800286c:	445a      	add	r2, fp
 800286e:	9209      	str	r2, [sp, #36]	; 0x24
 8002870:	f89a 3000 	ldrb.w	r3, [sl]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80a2 	beq.w	80029be <_vfiprintf_r+0x20e>
 800287a:	2300      	movs	r3, #0
 800287c:	f04f 32ff 	mov.w	r2, #4294967295
 8002880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002884:	f10a 0a01 	add.w	sl, sl, #1
 8002888:	9304      	str	r3, [sp, #16]
 800288a:	9307      	str	r3, [sp, #28]
 800288c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002890:	931a      	str	r3, [sp, #104]	; 0x68
 8002892:	4654      	mov	r4, sl
 8002894:	2205      	movs	r2, #5
 8002896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800289a:	4858      	ldr	r0, [pc, #352]	; (80029fc <_vfiprintf_r+0x24c>)
 800289c:	f000 faf8 	bl	8002e90 <memchr>
 80028a0:	9a04      	ldr	r2, [sp, #16]
 80028a2:	b9d8      	cbnz	r0, 80028dc <_vfiprintf_r+0x12c>
 80028a4:	06d1      	lsls	r1, r2, #27
 80028a6:	bf44      	itt	mi
 80028a8:	2320      	movmi	r3, #32
 80028aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028ae:	0713      	lsls	r3, r2, #28
 80028b0:	bf44      	itt	mi
 80028b2:	232b      	movmi	r3, #43	; 0x2b
 80028b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028b8:	f89a 3000 	ldrb.w	r3, [sl]
 80028bc:	2b2a      	cmp	r3, #42	; 0x2a
 80028be:	d015      	beq.n	80028ec <_vfiprintf_r+0x13c>
 80028c0:	4654      	mov	r4, sl
 80028c2:	2000      	movs	r0, #0
 80028c4:	f04f 0c0a 	mov.w	ip, #10
 80028c8:	9a07      	ldr	r2, [sp, #28]
 80028ca:	4621      	mov	r1, r4
 80028cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028d0:	3b30      	subs	r3, #48	; 0x30
 80028d2:	2b09      	cmp	r3, #9
 80028d4:	d94e      	bls.n	8002974 <_vfiprintf_r+0x1c4>
 80028d6:	b1b0      	cbz	r0, 8002906 <_vfiprintf_r+0x156>
 80028d8:	9207      	str	r2, [sp, #28]
 80028da:	e014      	b.n	8002906 <_vfiprintf_r+0x156>
 80028dc:	eba0 0308 	sub.w	r3, r0, r8
 80028e0:	fa09 f303 	lsl.w	r3, r9, r3
 80028e4:	4313      	orrs	r3, r2
 80028e6:	46a2      	mov	sl, r4
 80028e8:	9304      	str	r3, [sp, #16]
 80028ea:	e7d2      	b.n	8002892 <_vfiprintf_r+0xe2>
 80028ec:	9b03      	ldr	r3, [sp, #12]
 80028ee:	1d19      	adds	r1, r3, #4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	9103      	str	r1, [sp, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bfbb      	ittet	lt
 80028f8:	425b      	neglt	r3, r3
 80028fa:	f042 0202 	orrlt.w	r2, r2, #2
 80028fe:	9307      	strge	r3, [sp, #28]
 8002900:	9307      	strlt	r3, [sp, #28]
 8002902:	bfb8      	it	lt
 8002904:	9204      	strlt	r2, [sp, #16]
 8002906:	7823      	ldrb	r3, [r4, #0]
 8002908:	2b2e      	cmp	r3, #46	; 0x2e
 800290a:	d10c      	bne.n	8002926 <_vfiprintf_r+0x176>
 800290c:	7863      	ldrb	r3, [r4, #1]
 800290e:	2b2a      	cmp	r3, #42	; 0x2a
 8002910:	d135      	bne.n	800297e <_vfiprintf_r+0x1ce>
 8002912:	9b03      	ldr	r3, [sp, #12]
 8002914:	3402      	adds	r4, #2
 8002916:	1d1a      	adds	r2, r3, #4
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	9203      	str	r2, [sp, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	bfb8      	it	lt
 8002920:	f04f 33ff 	movlt.w	r3, #4294967295
 8002924:	9305      	str	r3, [sp, #20]
 8002926:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002a00 <_vfiprintf_r+0x250>
 800292a:	2203      	movs	r2, #3
 800292c:	4650      	mov	r0, sl
 800292e:	7821      	ldrb	r1, [r4, #0]
 8002930:	f000 faae 	bl	8002e90 <memchr>
 8002934:	b140      	cbz	r0, 8002948 <_vfiprintf_r+0x198>
 8002936:	2340      	movs	r3, #64	; 0x40
 8002938:	eba0 000a 	sub.w	r0, r0, sl
 800293c:	fa03 f000 	lsl.w	r0, r3, r0
 8002940:	9b04      	ldr	r3, [sp, #16]
 8002942:	3401      	adds	r4, #1
 8002944:	4303      	orrs	r3, r0
 8002946:	9304      	str	r3, [sp, #16]
 8002948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800294c:	2206      	movs	r2, #6
 800294e:	482d      	ldr	r0, [pc, #180]	; (8002a04 <_vfiprintf_r+0x254>)
 8002950:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002954:	f000 fa9c 	bl	8002e90 <memchr>
 8002958:	2800      	cmp	r0, #0
 800295a:	d03f      	beq.n	80029dc <_vfiprintf_r+0x22c>
 800295c:	4b2a      	ldr	r3, [pc, #168]	; (8002a08 <_vfiprintf_r+0x258>)
 800295e:	bb1b      	cbnz	r3, 80029a8 <_vfiprintf_r+0x1f8>
 8002960:	9b03      	ldr	r3, [sp, #12]
 8002962:	3307      	adds	r3, #7
 8002964:	f023 0307 	bic.w	r3, r3, #7
 8002968:	3308      	adds	r3, #8
 800296a:	9303      	str	r3, [sp, #12]
 800296c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800296e:	443b      	add	r3, r7
 8002970:	9309      	str	r3, [sp, #36]	; 0x24
 8002972:	e767      	b.n	8002844 <_vfiprintf_r+0x94>
 8002974:	460c      	mov	r4, r1
 8002976:	2001      	movs	r0, #1
 8002978:	fb0c 3202 	mla	r2, ip, r2, r3
 800297c:	e7a5      	b.n	80028ca <_vfiprintf_r+0x11a>
 800297e:	2300      	movs	r3, #0
 8002980:	f04f 0c0a 	mov.w	ip, #10
 8002984:	4619      	mov	r1, r3
 8002986:	3401      	adds	r4, #1
 8002988:	9305      	str	r3, [sp, #20]
 800298a:	4620      	mov	r0, r4
 800298c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002990:	3a30      	subs	r2, #48	; 0x30
 8002992:	2a09      	cmp	r2, #9
 8002994:	d903      	bls.n	800299e <_vfiprintf_r+0x1ee>
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0c5      	beq.n	8002926 <_vfiprintf_r+0x176>
 800299a:	9105      	str	r1, [sp, #20]
 800299c:	e7c3      	b.n	8002926 <_vfiprintf_r+0x176>
 800299e:	4604      	mov	r4, r0
 80029a0:	2301      	movs	r3, #1
 80029a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80029a6:	e7f0      	b.n	800298a <_vfiprintf_r+0x1da>
 80029a8:	ab03      	add	r3, sp, #12
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	462a      	mov	r2, r5
 80029ae:	4630      	mov	r0, r6
 80029b0:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <_vfiprintf_r+0x25c>)
 80029b2:	a904      	add	r1, sp, #16
 80029b4:	f3af 8000 	nop.w
 80029b8:	4607      	mov	r7, r0
 80029ba:	1c78      	adds	r0, r7, #1
 80029bc:	d1d6      	bne.n	800296c <_vfiprintf_r+0x1bc>
 80029be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029c0:	07d9      	lsls	r1, r3, #31
 80029c2:	d405      	bmi.n	80029d0 <_vfiprintf_r+0x220>
 80029c4:	89ab      	ldrh	r3, [r5, #12]
 80029c6:	059a      	lsls	r2, r3, #22
 80029c8:	d402      	bmi.n	80029d0 <_vfiprintf_r+0x220>
 80029ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029cc:	f7ff fd85 	bl	80024da <__retarget_lock_release_recursive>
 80029d0:	89ab      	ldrh	r3, [r5, #12]
 80029d2:	065b      	lsls	r3, r3, #25
 80029d4:	f53f af12 	bmi.w	80027fc <_vfiprintf_r+0x4c>
 80029d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029da:	e711      	b.n	8002800 <_vfiprintf_r+0x50>
 80029dc:	ab03      	add	r3, sp, #12
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	462a      	mov	r2, r5
 80029e2:	4630      	mov	r0, r6
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <_vfiprintf_r+0x25c>)
 80029e6:	a904      	add	r1, sp, #16
 80029e8:	f000 f882 	bl	8002af0 <_printf_i>
 80029ec:	e7e4      	b.n	80029b8 <_vfiprintf_r+0x208>
 80029ee:	bf00      	nop
 80029f0:	08002f5c 	.word	0x08002f5c
 80029f4:	08002f7c 	.word	0x08002f7c
 80029f8:	08002f3c 	.word	0x08002f3c
 80029fc:	08002f9c 	.word	0x08002f9c
 8002a00:	08002fa2 	.word	0x08002fa2
 8002a04:	08002fa6 	.word	0x08002fa6
 8002a08:	00000000 	.word	0x00000000
 8002a0c:	0800278b 	.word	0x0800278b

08002a10 <_printf_common>:
 8002a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a14:	4616      	mov	r6, r2
 8002a16:	4699      	mov	r9, r3
 8002a18:	688a      	ldr	r2, [r1, #8]
 8002a1a:	690b      	ldr	r3, [r1, #16]
 8002a1c:	4607      	mov	r7, r0
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	bfb8      	it	lt
 8002a22:	4613      	movlt	r3, r2
 8002a24:	6033      	str	r3, [r6, #0]
 8002a26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a2a:	460c      	mov	r4, r1
 8002a2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a30:	b10a      	cbz	r2, 8002a36 <_printf_common+0x26>
 8002a32:	3301      	adds	r3, #1
 8002a34:	6033      	str	r3, [r6, #0]
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	0699      	lsls	r1, r3, #26
 8002a3a:	bf42      	ittt	mi
 8002a3c:	6833      	ldrmi	r3, [r6, #0]
 8002a3e:	3302      	addmi	r3, #2
 8002a40:	6033      	strmi	r3, [r6, #0]
 8002a42:	6825      	ldr	r5, [r4, #0]
 8002a44:	f015 0506 	ands.w	r5, r5, #6
 8002a48:	d106      	bne.n	8002a58 <_printf_common+0x48>
 8002a4a:	f104 0a19 	add.w	sl, r4, #25
 8002a4e:	68e3      	ldr	r3, [r4, #12]
 8002a50:	6832      	ldr	r2, [r6, #0]
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	42ab      	cmp	r3, r5
 8002a56:	dc28      	bgt.n	8002aaa <_printf_common+0x9a>
 8002a58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a5c:	1e13      	subs	r3, r2, #0
 8002a5e:	6822      	ldr	r2, [r4, #0]
 8002a60:	bf18      	it	ne
 8002a62:	2301      	movne	r3, #1
 8002a64:	0692      	lsls	r2, r2, #26
 8002a66:	d42d      	bmi.n	8002ac4 <_printf_common+0xb4>
 8002a68:	4649      	mov	r1, r9
 8002a6a:	4638      	mov	r0, r7
 8002a6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a70:	47c0      	blx	r8
 8002a72:	3001      	adds	r0, #1
 8002a74:	d020      	beq.n	8002ab8 <_printf_common+0xa8>
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	68e5      	ldr	r5, [r4, #12]
 8002a7a:	f003 0306 	and.w	r3, r3, #6
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	bf18      	it	ne
 8002a82:	2500      	movne	r5, #0
 8002a84:	6832      	ldr	r2, [r6, #0]
 8002a86:	f04f 0600 	mov.w	r6, #0
 8002a8a:	68a3      	ldr	r3, [r4, #8]
 8002a8c:	bf08      	it	eq
 8002a8e:	1aad      	subeq	r5, r5, r2
 8002a90:	6922      	ldr	r2, [r4, #16]
 8002a92:	bf08      	it	eq
 8002a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	bfc4      	itt	gt
 8002a9c:	1a9b      	subgt	r3, r3, r2
 8002a9e:	18ed      	addgt	r5, r5, r3
 8002aa0:	341a      	adds	r4, #26
 8002aa2:	42b5      	cmp	r5, r6
 8002aa4:	d11a      	bne.n	8002adc <_printf_common+0xcc>
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	e008      	b.n	8002abc <_printf_common+0xac>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	4652      	mov	r2, sl
 8002aae:	4649      	mov	r1, r9
 8002ab0:	4638      	mov	r0, r7
 8002ab2:	47c0      	blx	r8
 8002ab4:	3001      	adds	r0, #1
 8002ab6:	d103      	bne.n	8002ac0 <_printf_common+0xb0>
 8002ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8002abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ac0:	3501      	adds	r5, #1
 8002ac2:	e7c4      	b.n	8002a4e <_printf_common+0x3e>
 8002ac4:	2030      	movs	r0, #48	; 0x30
 8002ac6:	18e1      	adds	r1, r4, r3
 8002ac8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ad2:	4422      	add	r2, r4
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ada:	e7c5      	b.n	8002a68 <_printf_common+0x58>
 8002adc:	2301      	movs	r3, #1
 8002ade:	4622      	mov	r2, r4
 8002ae0:	4649      	mov	r1, r9
 8002ae2:	4638      	mov	r0, r7
 8002ae4:	47c0      	blx	r8
 8002ae6:	3001      	adds	r0, #1
 8002ae8:	d0e6      	beq.n	8002ab8 <_printf_common+0xa8>
 8002aea:	3601      	adds	r6, #1
 8002aec:	e7d9      	b.n	8002aa2 <_printf_common+0x92>
	...

08002af0 <_printf_i>:
 8002af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002af4:	7e0f      	ldrb	r7, [r1, #24]
 8002af6:	4691      	mov	r9, r2
 8002af8:	2f78      	cmp	r7, #120	; 0x78
 8002afa:	4680      	mov	r8, r0
 8002afc:	460c      	mov	r4, r1
 8002afe:	469a      	mov	sl, r3
 8002b00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b06:	d807      	bhi.n	8002b18 <_printf_i+0x28>
 8002b08:	2f62      	cmp	r7, #98	; 0x62
 8002b0a:	d80a      	bhi.n	8002b22 <_printf_i+0x32>
 8002b0c:	2f00      	cmp	r7, #0
 8002b0e:	f000 80d9 	beq.w	8002cc4 <_printf_i+0x1d4>
 8002b12:	2f58      	cmp	r7, #88	; 0x58
 8002b14:	f000 80a4 	beq.w	8002c60 <_printf_i+0x170>
 8002b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b20:	e03a      	b.n	8002b98 <_printf_i+0xa8>
 8002b22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b26:	2b15      	cmp	r3, #21
 8002b28:	d8f6      	bhi.n	8002b18 <_printf_i+0x28>
 8002b2a:	a101      	add	r1, pc, #4	; (adr r1, 8002b30 <_printf_i+0x40>)
 8002b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b30:	08002b89 	.word	0x08002b89
 8002b34:	08002b9d 	.word	0x08002b9d
 8002b38:	08002b19 	.word	0x08002b19
 8002b3c:	08002b19 	.word	0x08002b19
 8002b40:	08002b19 	.word	0x08002b19
 8002b44:	08002b19 	.word	0x08002b19
 8002b48:	08002b9d 	.word	0x08002b9d
 8002b4c:	08002b19 	.word	0x08002b19
 8002b50:	08002b19 	.word	0x08002b19
 8002b54:	08002b19 	.word	0x08002b19
 8002b58:	08002b19 	.word	0x08002b19
 8002b5c:	08002cab 	.word	0x08002cab
 8002b60:	08002bcd 	.word	0x08002bcd
 8002b64:	08002c8d 	.word	0x08002c8d
 8002b68:	08002b19 	.word	0x08002b19
 8002b6c:	08002b19 	.word	0x08002b19
 8002b70:	08002ccd 	.word	0x08002ccd
 8002b74:	08002b19 	.word	0x08002b19
 8002b78:	08002bcd 	.word	0x08002bcd
 8002b7c:	08002b19 	.word	0x08002b19
 8002b80:	08002b19 	.word	0x08002b19
 8002b84:	08002c95 	.word	0x08002c95
 8002b88:	682b      	ldr	r3, [r5, #0]
 8002b8a:	1d1a      	adds	r2, r3, #4
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	602a      	str	r2, [r5, #0]
 8002b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0a4      	b.n	8002ce6 <_printf_i+0x1f6>
 8002b9c:	6820      	ldr	r0, [r4, #0]
 8002b9e:	6829      	ldr	r1, [r5, #0]
 8002ba0:	0606      	lsls	r6, r0, #24
 8002ba2:	f101 0304 	add.w	r3, r1, #4
 8002ba6:	d50a      	bpl.n	8002bbe <_printf_i+0xce>
 8002ba8:	680e      	ldr	r6, [r1, #0]
 8002baa:	602b      	str	r3, [r5, #0]
 8002bac:	2e00      	cmp	r6, #0
 8002bae:	da03      	bge.n	8002bb8 <_printf_i+0xc8>
 8002bb0:	232d      	movs	r3, #45	; 0x2d
 8002bb2:	4276      	negs	r6, r6
 8002bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bb8:	230a      	movs	r3, #10
 8002bba:	485e      	ldr	r0, [pc, #376]	; (8002d34 <_printf_i+0x244>)
 8002bbc:	e019      	b.n	8002bf2 <_printf_i+0x102>
 8002bbe:	680e      	ldr	r6, [r1, #0]
 8002bc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bc4:	602b      	str	r3, [r5, #0]
 8002bc6:	bf18      	it	ne
 8002bc8:	b236      	sxthne	r6, r6
 8002bca:	e7ef      	b.n	8002bac <_printf_i+0xbc>
 8002bcc:	682b      	ldr	r3, [r5, #0]
 8002bce:	6820      	ldr	r0, [r4, #0]
 8002bd0:	1d19      	adds	r1, r3, #4
 8002bd2:	6029      	str	r1, [r5, #0]
 8002bd4:	0601      	lsls	r1, r0, #24
 8002bd6:	d501      	bpl.n	8002bdc <_printf_i+0xec>
 8002bd8:	681e      	ldr	r6, [r3, #0]
 8002bda:	e002      	b.n	8002be2 <_printf_i+0xf2>
 8002bdc:	0646      	lsls	r6, r0, #25
 8002bde:	d5fb      	bpl.n	8002bd8 <_printf_i+0xe8>
 8002be0:	881e      	ldrh	r6, [r3, #0]
 8002be2:	2f6f      	cmp	r7, #111	; 0x6f
 8002be4:	bf0c      	ite	eq
 8002be6:	2308      	moveq	r3, #8
 8002be8:	230a      	movne	r3, #10
 8002bea:	4852      	ldr	r0, [pc, #328]	; (8002d34 <_printf_i+0x244>)
 8002bec:	2100      	movs	r1, #0
 8002bee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bf2:	6865      	ldr	r5, [r4, #4]
 8002bf4:	2d00      	cmp	r5, #0
 8002bf6:	bfa8      	it	ge
 8002bf8:	6821      	ldrge	r1, [r4, #0]
 8002bfa:	60a5      	str	r5, [r4, #8]
 8002bfc:	bfa4      	itt	ge
 8002bfe:	f021 0104 	bicge.w	r1, r1, #4
 8002c02:	6021      	strge	r1, [r4, #0]
 8002c04:	b90e      	cbnz	r6, 8002c0a <_printf_i+0x11a>
 8002c06:	2d00      	cmp	r5, #0
 8002c08:	d04d      	beq.n	8002ca6 <_printf_i+0x1b6>
 8002c0a:	4615      	mov	r5, r2
 8002c0c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c10:	fb03 6711 	mls	r7, r3, r1, r6
 8002c14:	5dc7      	ldrb	r7, [r0, r7]
 8002c16:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c1a:	4637      	mov	r7, r6
 8002c1c:	42bb      	cmp	r3, r7
 8002c1e:	460e      	mov	r6, r1
 8002c20:	d9f4      	bls.n	8002c0c <_printf_i+0x11c>
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d10b      	bne.n	8002c3e <_printf_i+0x14e>
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	07de      	lsls	r6, r3, #31
 8002c2a:	d508      	bpl.n	8002c3e <_printf_i+0x14e>
 8002c2c:	6923      	ldr	r3, [r4, #16]
 8002c2e:	6861      	ldr	r1, [r4, #4]
 8002c30:	4299      	cmp	r1, r3
 8002c32:	bfde      	ittt	le
 8002c34:	2330      	movle	r3, #48	; 0x30
 8002c36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c3e:	1b52      	subs	r2, r2, r5
 8002c40:	6122      	str	r2, [r4, #16]
 8002c42:	464b      	mov	r3, r9
 8002c44:	4621      	mov	r1, r4
 8002c46:	4640      	mov	r0, r8
 8002c48:	f8cd a000 	str.w	sl, [sp]
 8002c4c:	aa03      	add	r2, sp, #12
 8002c4e:	f7ff fedf 	bl	8002a10 <_printf_common>
 8002c52:	3001      	adds	r0, #1
 8002c54:	d14c      	bne.n	8002cf0 <_printf_i+0x200>
 8002c56:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5a:	b004      	add	sp, #16
 8002c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c60:	4834      	ldr	r0, [pc, #208]	; (8002d34 <_printf_i+0x244>)
 8002c62:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002c66:	6829      	ldr	r1, [r5, #0]
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c6e:	6029      	str	r1, [r5, #0]
 8002c70:	061d      	lsls	r5, r3, #24
 8002c72:	d514      	bpl.n	8002c9e <_printf_i+0x1ae>
 8002c74:	07df      	lsls	r7, r3, #31
 8002c76:	bf44      	itt	mi
 8002c78:	f043 0320 	orrmi.w	r3, r3, #32
 8002c7c:	6023      	strmi	r3, [r4, #0]
 8002c7e:	b91e      	cbnz	r6, 8002c88 <_printf_i+0x198>
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	f023 0320 	bic.w	r3, r3, #32
 8002c86:	6023      	str	r3, [r4, #0]
 8002c88:	2310      	movs	r3, #16
 8002c8a:	e7af      	b.n	8002bec <_printf_i+0xfc>
 8002c8c:	6823      	ldr	r3, [r4, #0]
 8002c8e:	f043 0320 	orr.w	r3, r3, #32
 8002c92:	6023      	str	r3, [r4, #0]
 8002c94:	2378      	movs	r3, #120	; 0x78
 8002c96:	4828      	ldr	r0, [pc, #160]	; (8002d38 <_printf_i+0x248>)
 8002c98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c9c:	e7e3      	b.n	8002c66 <_printf_i+0x176>
 8002c9e:	0659      	lsls	r1, r3, #25
 8002ca0:	bf48      	it	mi
 8002ca2:	b2b6      	uxthmi	r6, r6
 8002ca4:	e7e6      	b.n	8002c74 <_printf_i+0x184>
 8002ca6:	4615      	mov	r5, r2
 8002ca8:	e7bb      	b.n	8002c22 <_printf_i+0x132>
 8002caa:	682b      	ldr	r3, [r5, #0]
 8002cac:	6826      	ldr	r6, [r4, #0]
 8002cae:	1d18      	adds	r0, r3, #4
 8002cb0:	6961      	ldr	r1, [r4, #20]
 8002cb2:	6028      	str	r0, [r5, #0]
 8002cb4:	0635      	lsls	r5, r6, #24
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	d501      	bpl.n	8002cbe <_printf_i+0x1ce>
 8002cba:	6019      	str	r1, [r3, #0]
 8002cbc:	e002      	b.n	8002cc4 <_printf_i+0x1d4>
 8002cbe:	0670      	lsls	r0, r6, #25
 8002cc0:	d5fb      	bpl.n	8002cba <_printf_i+0x1ca>
 8002cc2:	8019      	strh	r1, [r3, #0]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	4615      	mov	r5, r2
 8002cc8:	6123      	str	r3, [r4, #16]
 8002cca:	e7ba      	b.n	8002c42 <_printf_i+0x152>
 8002ccc:	682b      	ldr	r3, [r5, #0]
 8002cce:	2100      	movs	r1, #0
 8002cd0:	1d1a      	adds	r2, r3, #4
 8002cd2:	602a      	str	r2, [r5, #0]
 8002cd4:	681d      	ldr	r5, [r3, #0]
 8002cd6:	6862      	ldr	r2, [r4, #4]
 8002cd8:	4628      	mov	r0, r5
 8002cda:	f000 f8d9 	bl	8002e90 <memchr>
 8002cde:	b108      	cbz	r0, 8002ce4 <_printf_i+0x1f4>
 8002ce0:	1b40      	subs	r0, r0, r5
 8002ce2:	6060      	str	r0, [r4, #4]
 8002ce4:	6863      	ldr	r3, [r4, #4]
 8002ce6:	6123      	str	r3, [r4, #16]
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cee:	e7a8      	b.n	8002c42 <_printf_i+0x152>
 8002cf0:	462a      	mov	r2, r5
 8002cf2:	4649      	mov	r1, r9
 8002cf4:	4640      	mov	r0, r8
 8002cf6:	6923      	ldr	r3, [r4, #16]
 8002cf8:	47d0      	blx	sl
 8002cfa:	3001      	adds	r0, #1
 8002cfc:	d0ab      	beq.n	8002c56 <_printf_i+0x166>
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	079b      	lsls	r3, r3, #30
 8002d02:	d413      	bmi.n	8002d2c <_printf_i+0x23c>
 8002d04:	68e0      	ldr	r0, [r4, #12]
 8002d06:	9b03      	ldr	r3, [sp, #12]
 8002d08:	4298      	cmp	r0, r3
 8002d0a:	bfb8      	it	lt
 8002d0c:	4618      	movlt	r0, r3
 8002d0e:	e7a4      	b.n	8002c5a <_printf_i+0x16a>
 8002d10:	2301      	movs	r3, #1
 8002d12:	4632      	mov	r2, r6
 8002d14:	4649      	mov	r1, r9
 8002d16:	4640      	mov	r0, r8
 8002d18:	47d0      	blx	sl
 8002d1a:	3001      	adds	r0, #1
 8002d1c:	d09b      	beq.n	8002c56 <_printf_i+0x166>
 8002d1e:	3501      	adds	r5, #1
 8002d20:	68e3      	ldr	r3, [r4, #12]
 8002d22:	9903      	ldr	r1, [sp, #12]
 8002d24:	1a5b      	subs	r3, r3, r1
 8002d26:	42ab      	cmp	r3, r5
 8002d28:	dcf2      	bgt.n	8002d10 <_printf_i+0x220>
 8002d2a:	e7eb      	b.n	8002d04 <_printf_i+0x214>
 8002d2c:	2500      	movs	r5, #0
 8002d2e:	f104 0619 	add.w	r6, r4, #25
 8002d32:	e7f5      	b.n	8002d20 <_printf_i+0x230>
 8002d34:	08002fad 	.word	0x08002fad
 8002d38:	08002fbe 	.word	0x08002fbe

08002d3c <_sbrk_r>:
 8002d3c:	b538      	push	{r3, r4, r5, lr}
 8002d3e:	2300      	movs	r3, #0
 8002d40:	4d05      	ldr	r5, [pc, #20]	; (8002d58 <_sbrk_r+0x1c>)
 8002d42:	4604      	mov	r4, r0
 8002d44:	4608      	mov	r0, r1
 8002d46:	602b      	str	r3, [r5, #0]
 8002d48:	f7fe fb02 	bl	8001350 <_sbrk>
 8002d4c:	1c43      	adds	r3, r0, #1
 8002d4e:	d102      	bne.n	8002d56 <_sbrk_r+0x1a>
 8002d50:	682b      	ldr	r3, [r5, #0]
 8002d52:	b103      	cbz	r3, 8002d56 <_sbrk_r+0x1a>
 8002d54:	6023      	str	r3, [r4, #0]
 8002d56:	bd38      	pop	{r3, r4, r5, pc}
 8002d58:	200000a0 	.word	0x200000a0

08002d5c <__sread>:
 8002d5c:	b510      	push	{r4, lr}
 8002d5e:	460c      	mov	r4, r1
 8002d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d64:	f000 f8ae 	bl	8002ec4 <_read_r>
 8002d68:	2800      	cmp	r0, #0
 8002d6a:	bfab      	itete	ge
 8002d6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d6e:	89a3      	ldrhlt	r3, [r4, #12]
 8002d70:	181b      	addge	r3, r3, r0
 8002d72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d76:	bfac      	ite	ge
 8002d78:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d7a:	81a3      	strhlt	r3, [r4, #12]
 8002d7c:	bd10      	pop	{r4, pc}

08002d7e <__swrite>:
 8002d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d82:	461f      	mov	r7, r3
 8002d84:	898b      	ldrh	r3, [r1, #12]
 8002d86:	4605      	mov	r5, r0
 8002d88:	05db      	lsls	r3, r3, #23
 8002d8a:	460c      	mov	r4, r1
 8002d8c:	4616      	mov	r6, r2
 8002d8e:	d505      	bpl.n	8002d9c <__swrite+0x1e>
 8002d90:	2302      	movs	r3, #2
 8002d92:	2200      	movs	r2, #0
 8002d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d98:	f000 f868 	bl	8002e6c <_lseek_r>
 8002d9c:	89a3      	ldrh	r3, [r4, #12]
 8002d9e:	4632      	mov	r2, r6
 8002da0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002da4:	81a3      	strh	r3, [r4, #12]
 8002da6:	4628      	mov	r0, r5
 8002da8:	463b      	mov	r3, r7
 8002daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002db2:	f000 b817 	b.w	8002de4 <_write_r>

08002db6 <__sseek>:
 8002db6:	b510      	push	{r4, lr}
 8002db8:	460c      	mov	r4, r1
 8002dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dbe:	f000 f855 	bl	8002e6c <_lseek_r>
 8002dc2:	1c43      	adds	r3, r0, #1
 8002dc4:	89a3      	ldrh	r3, [r4, #12]
 8002dc6:	bf15      	itete	ne
 8002dc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002dca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002dce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002dd2:	81a3      	strheq	r3, [r4, #12]
 8002dd4:	bf18      	it	ne
 8002dd6:	81a3      	strhne	r3, [r4, #12]
 8002dd8:	bd10      	pop	{r4, pc}

08002dda <__sclose>:
 8002dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dde:	f000 b813 	b.w	8002e08 <_close_r>
	...

08002de4 <_write_r>:
 8002de4:	b538      	push	{r3, r4, r5, lr}
 8002de6:	4604      	mov	r4, r0
 8002de8:	4608      	mov	r0, r1
 8002dea:	4611      	mov	r1, r2
 8002dec:	2200      	movs	r2, #0
 8002dee:	4d05      	ldr	r5, [pc, #20]	; (8002e04 <_write_r+0x20>)
 8002df0:	602a      	str	r2, [r5, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	f7fe f9e0 	bl	80011b8 <_write>
 8002df8:	1c43      	adds	r3, r0, #1
 8002dfa:	d102      	bne.n	8002e02 <_write_r+0x1e>
 8002dfc:	682b      	ldr	r3, [r5, #0]
 8002dfe:	b103      	cbz	r3, 8002e02 <_write_r+0x1e>
 8002e00:	6023      	str	r3, [r4, #0]
 8002e02:	bd38      	pop	{r3, r4, r5, pc}
 8002e04:	200000a0 	.word	0x200000a0

08002e08 <_close_r>:
 8002e08:	b538      	push	{r3, r4, r5, lr}
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	4d05      	ldr	r5, [pc, #20]	; (8002e24 <_close_r+0x1c>)
 8002e0e:	4604      	mov	r4, r0
 8002e10:	4608      	mov	r0, r1
 8002e12:	602b      	str	r3, [r5, #0]
 8002e14:	f7fe fa6c 	bl	80012f0 <_close>
 8002e18:	1c43      	adds	r3, r0, #1
 8002e1a:	d102      	bne.n	8002e22 <_close_r+0x1a>
 8002e1c:	682b      	ldr	r3, [r5, #0]
 8002e1e:	b103      	cbz	r3, 8002e22 <_close_r+0x1a>
 8002e20:	6023      	str	r3, [r4, #0]
 8002e22:	bd38      	pop	{r3, r4, r5, pc}
 8002e24:	200000a0 	.word	0x200000a0

08002e28 <_fstat_r>:
 8002e28:	b538      	push	{r3, r4, r5, lr}
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	4d06      	ldr	r5, [pc, #24]	; (8002e48 <_fstat_r+0x20>)
 8002e2e:	4604      	mov	r4, r0
 8002e30:	4608      	mov	r0, r1
 8002e32:	4611      	mov	r1, r2
 8002e34:	602b      	str	r3, [r5, #0]
 8002e36:	f7fe fa66 	bl	8001306 <_fstat>
 8002e3a:	1c43      	adds	r3, r0, #1
 8002e3c:	d102      	bne.n	8002e44 <_fstat_r+0x1c>
 8002e3e:	682b      	ldr	r3, [r5, #0]
 8002e40:	b103      	cbz	r3, 8002e44 <_fstat_r+0x1c>
 8002e42:	6023      	str	r3, [r4, #0]
 8002e44:	bd38      	pop	{r3, r4, r5, pc}
 8002e46:	bf00      	nop
 8002e48:	200000a0 	.word	0x200000a0

08002e4c <_isatty_r>:
 8002e4c:	b538      	push	{r3, r4, r5, lr}
 8002e4e:	2300      	movs	r3, #0
 8002e50:	4d05      	ldr	r5, [pc, #20]	; (8002e68 <_isatty_r+0x1c>)
 8002e52:	4604      	mov	r4, r0
 8002e54:	4608      	mov	r0, r1
 8002e56:	602b      	str	r3, [r5, #0]
 8002e58:	f7fe fa64 	bl	8001324 <_isatty>
 8002e5c:	1c43      	adds	r3, r0, #1
 8002e5e:	d102      	bne.n	8002e66 <_isatty_r+0x1a>
 8002e60:	682b      	ldr	r3, [r5, #0]
 8002e62:	b103      	cbz	r3, 8002e66 <_isatty_r+0x1a>
 8002e64:	6023      	str	r3, [r4, #0]
 8002e66:	bd38      	pop	{r3, r4, r5, pc}
 8002e68:	200000a0 	.word	0x200000a0

08002e6c <_lseek_r>:
 8002e6c:	b538      	push	{r3, r4, r5, lr}
 8002e6e:	4604      	mov	r4, r0
 8002e70:	4608      	mov	r0, r1
 8002e72:	4611      	mov	r1, r2
 8002e74:	2200      	movs	r2, #0
 8002e76:	4d05      	ldr	r5, [pc, #20]	; (8002e8c <_lseek_r+0x20>)
 8002e78:	602a      	str	r2, [r5, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f7fe fa5c 	bl	8001338 <_lseek>
 8002e80:	1c43      	adds	r3, r0, #1
 8002e82:	d102      	bne.n	8002e8a <_lseek_r+0x1e>
 8002e84:	682b      	ldr	r3, [r5, #0]
 8002e86:	b103      	cbz	r3, 8002e8a <_lseek_r+0x1e>
 8002e88:	6023      	str	r3, [r4, #0]
 8002e8a:	bd38      	pop	{r3, r4, r5, pc}
 8002e8c:	200000a0 	.word	0x200000a0

08002e90 <memchr>:
 8002e90:	4603      	mov	r3, r0
 8002e92:	b510      	push	{r4, lr}
 8002e94:	b2c9      	uxtb	r1, r1
 8002e96:	4402      	add	r2, r0
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	d101      	bne.n	8002ea2 <memchr+0x12>
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	e003      	b.n	8002eaa <memchr+0x1a>
 8002ea2:	7804      	ldrb	r4, [r0, #0]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	428c      	cmp	r4, r1
 8002ea8:	d1f6      	bne.n	8002e98 <memchr+0x8>
 8002eaa:	bd10      	pop	{r4, pc}

08002eac <__malloc_lock>:
 8002eac:	4801      	ldr	r0, [pc, #4]	; (8002eb4 <__malloc_lock+0x8>)
 8002eae:	f7ff bb13 	b.w	80024d8 <__retarget_lock_acquire_recursive>
 8002eb2:	bf00      	nop
 8002eb4:	20000094 	.word	0x20000094

08002eb8 <__malloc_unlock>:
 8002eb8:	4801      	ldr	r0, [pc, #4]	; (8002ec0 <__malloc_unlock+0x8>)
 8002eba:	f7ff bb0e 	b.w	80024da <__retarget_lock_release_recursive>
 8002ebe:	bf00      	nop
 8002ec0:	20000094 	.word	0x20000094

08002ec4 <_read_r>:
 8002ec4:	b538      	push	{r3, r4, r5, lr}
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	4608      	mov	r0, r1
 8002eca:	4611      	mov	r1, r2
 8002ecc:	2200      	movs	r2, #0
 8002ece:	4d05      	ldr	r5, [pc, #20]	; (8002ee4 <_read_r+0x20>)
 8002ed0:	602a      	str	r2, [r5, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f7fe f9ef 	bl	80012b6 <_read>
 8002ed8:	1c43      	adds	r3, r0, #1
 8002eda:	d102      	bne.n	8002ee2 <_read_r+0x1e>
 8002edc:	682b      	ldr	r3, [r5, #0]
 8002ede:	b103      	cbz	r3, 8002ee2 <_read_r+0x1e>
 8002ee0:	6023      	str	r3, [r4, #0]
 8002ee2:	bd38      	pop	{r3, r4, r5, pc}
 8002ee4:	200000a0 	.word	0x200000a0

08002ee8 <_init>:
 8002ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eea:	bf00      	nop
 8002eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eee:	bc08      	pop	{r3}
 8002ef0:	469e      	mov	lr, r3
 8002ef2:	4770      	bx	lr

08002ef4 <_fini>:
 8002ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef6:	bf00      	nop
 8002ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002efa:	bc08      	pop	{r3}
 8002efc:	469e      	mov	lr, r3
 8002efe:	4770      	bx	lr
